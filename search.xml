<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>死之前要做完的算法手册-算法[2.链表篇]</title>
      <link href="/2023/08/09/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%E7%AE%97%E6%B3%95%5B2.%E9%93%BE%E8%A1%A8%E7%AF%87%5D/"/>
      <url>/2023/08/09/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%E7%AE%97%E6%B3%95%5B2.%E9%93%BE%E8%A1%A8%E7%AF%87%5D/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死之前要做完的算法手册-[1.数组篇]</title>
      <link href="/2023/08/04/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%E7%AE%97%E6%B3%95%5B1.%E6%95%B0%E7%BB%84%E7%AF%87%5D/"/>
      <url>/2023/08/04/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%E7%AE%97%E6%B3%95%5B1.%E6%95%B0%E7%BB%84%E7%AF%87%5D/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><p>经过考虑之后决定按照代码随想录的训练路线来做一个算法的学习</p><p>然后下面是我做数组算法的时候踩的坑</p><p><strong>如果赶时间的话做法可以不用看，就主要看思路、总结、图解</strong></p><p><em>输是正常的，重要的是不要怕输</em></p>        <h1 id="二分查找"   >          <a href="#二分查找" class="heading-link"><i class="fas fa-link"></i></a><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1>      <p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1</p><p>题目是<span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/binary-search/" >LeetCode上704题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="704-二分查找"   >          <a href="#704-二分查找" class="heading-link"><i class="fas fa-link"></i></a><a href="#704-二分查找" class="headerlink" title="704.二分查找"></a>704.二分查找</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/binary-search/" >LeetCode.704题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做"   >          <a href="#第一次做" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次单独做于23&#x2F;08&#x2F;04，说实话二分查找想起来很简单，但是一写就踩了不少坑</p>        <h4 id="第一次代码"   >          <a href="#第一次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length;</span><br><span class="line">        <span class="keyword">while</span>(low!=high)&#123;</span><br><span class="line">            <span class="type">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target&gt;nums[mid])&#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(target==nums[mid])&#123;</span><br><span class="line">                <span class="keyword">return</span> mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(target&lt;nums[mid])&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误"   >          <a href="#提交错误" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE1:nums&#x3D;[-1,0,3,5,9,12],target&#x3D;9,输出-1,预计输出 4</p><p>CASE2:nums&#x3D;[-1,0,3,5,9,12],target&#x3D;2,输出-1,预计输出-1</p><p>这不是运行案例都没通过嘛?更别提提交测试了</p>        <h5 id="原因"   >          <a href="#原因" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因" class="headerlink" title="原因"></a>原因</h5>      <p>下标我是从0开始，而上标是从数组的长度6开始，但是数组中存数的时候是0~5,所以这是第一个不对的地方，于是我进行了修正把上标的位置改成length-1</p>        <h4 id="第二次源代码"   >          <a href="#第二次源代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次源代码" class="headerlink" title="第二次源代码"></a>第二次源代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;   </span><br><span class="line"><span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(low!=high)&#123;</span><br><span class="line">            <span class="type">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target&gt;nums[mid])&#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(target==nums[mid])&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(target&lt;nums[mid])&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-1"   >          <a href="#提交错误-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-1" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:nums&#x3D;[5],target&#x3D;5,输出-1,预计输出0</p>        <h5 id="原因-1"   >          <a href="#原因-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-1" class="headerlink" title="原因"></a>原因</h5>      <p>下标从0开始,上标也是0压根就没有进入循环判断，所以我又做了改正，将一个元素的数组进行了单独判断</p>        <h4 id="第三次代码"   >          <a href="#第三次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;   </span><br><span class="line">        <span class="comment">//如果nums只有一个元素</span></span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> target==nums[<span class="number">0</span>]? <span class="number">0</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(low!=high)&#123;</span><br><span class="line">            <span class="type">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target&gt;nums[mid])&#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(target==nums[mid])&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(target&lt;nums[mid])&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>我当时觉得我简直就是天才，对数组长度为0的时候不会做判断，而数组只有一个元素的时候单独判断，返回执行时间还更快，但这又出了岔子</p>        <h5 id="提交错误-2"   >          <a href="#提交错误-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-2" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:nums&#x3D;[2,5],target&#x3D;5,输出-1,预计输出1</p>        <h5 id="原因-2"   >          <a href="#原因-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-2" class="headerlink" title="原因"></a>原因</h5>      <p>不仅仅是nums[length-1]不能进行一个判断同时也是nums[0]没办法进行判断，也就是数组的边界都不能进行一个判断，问题出在了循环的时候当low&#x3D;&#x3D;high的时候就退出了循环 而边界的时候就没有判断到，所以我最后进行了改正</p>        <h4 id="第四次代码"   >          <a href="#第四次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四次代码" class="headerlink" title="第四次代码"></a>第四次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果nums只有一个元素</span></span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> target==nums[<span class="number">0</span>]? <span class="number">0</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            <span class="type">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target&gt;nums[mid])&#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(target==nums[mid])&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(target&lt;nums[mid])&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功"   >          <a href="#提交成功" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>但是实际上有没有对一个元素数组的判断都能通过测试，问题就出在While循环中的判断条件，当low等于high的时候也应该进行一次判断，也就是Low&gt;high的时候结束循环</p>        <h3 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h3>      <p>看了视频学习之后才知道 <strong>二分法</strong>的两个重点，主要要取决于边界处理</p><p>主要有两个版本，1.是左闭右闭的区间</p><p>​   2.是左闭右合的区间</p><p>为了防止搞混我主要学习的是左闭右闭的区间写法</p>        <h4 id="while循环的条件判断"   >          <a href="#while循环的条件判断" class="heading-link"><i class="fas fa-link"></i></a><a href="#while循环的条件判断" class="headerlink" title="while循环的条件判断"></a>while循环的条件判断</h4>      <p>重点思想是low和high是不是一个合法的值在条件判断中，如果下标是1，上标是1，那么也应该做一个while循环判断</p><p>所以是while(low&lt;&#x3D;high)</p>        <h4 id="low和high的赋值处理"   >          <a href="#low和high的赋值处理" class="heading-link"><i class="fas fa-link"></i></a><a href="#low和high的赋值处理" class="headerlink" title="low和high的赋值处理"></a>low和high的赋值处理</h4>      <p>上一次判断的时候nums[mid]&gt;target，所以明确的是mid这个索引值已经不等于我们的目标索引值</p><p>因此low&#x3D;mid+1，同理当nums[mid]&lt;target时high&#x3D;mid-1;</p>        <h3 id="图解"   >          <a href="#图解" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解" class="headerlink" title="图解"></a>图解</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230804122255989.png"  alt="二分法图解">      </p>        <h2 id="35-搜索插入位置"   >          <a href="#35-搜索插入位置" class="heading-link"><i class="fas fa-link"></i></a><a href="#35-搜索插入位置" class="headerlink" title="35.搜索插入位置"></a>35.搜索插入位置</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/search-insert-position/" >LeetCode.35题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-1"   >          <a href="#第一次做-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-1" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;04，因为刚学完二分查找，所以找相似的题目巩固</p>        <h4 id="第一次代码-1"   >          <a href="#第一次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-1" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">// 二分法</span></span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mid=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]==target)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-3"   >          <a href="#提交错误-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-3" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>Case1：nums[1,3,5,6] ,target&#x3D;5, 输出2 ，预期输出 2</p><p>Case2：nums[1,3,5,6] ,target&#x3D;2, 输出0，预期输出 1</p><p>Case3：nums[1,3,5,6] ,target&#x3D;7, 输出3 ，预期输出 2</p>        <h5 id="原因-3"   >          <a href="#原因-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-3" class="headerlink" title="原因"></a>原因</h5>      <p>当元素中没有这个元素的时候，最后上标和下标会指向mid的位置，这个位置的索引值是有值的所以应该在当前索引+1就是要求到的索引值</p>        <h4 id="第二次代码"   >          <a href="#第二次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">// 二分法</span></span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mid=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]==target)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-4"   >          <a href="#提交错误-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-4" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>Case1：nums[1,3,5,6] ,target&#x3D;0, 输出1 ，预期输出 0</p>        <h5 id="原因-4"   >          <a href="#原因-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-4" class="headerlink" title="原因"></a>原因</h5>      <p>第一次错的改正思路不对，没有找到元素之后要插入元素的时候，最后low和high不会指向同一个索引值，一定是low＞high</p><p>要判断low和high与mid的关系 如果low&gt;mid，说明要插入的值比nums[mid]的值还要大，要插入在mid后面，反之如果high&lt;mid，说明当前值比插入的值要大，要插入在mid前面</p>        <h4 id="第三次代码-1"   >          <a href="#第三次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-1" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">// 二分法</span></span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mid=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]==target)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(low&gt;mid)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mid-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-5"   >          <a href="#提交错误-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-5" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE1:nums[1,3,5,6], target&#x3D;0,输出-1,预期输出0</p>        <h5 id="原因-5"   >          <a href="#原因-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-5" class="headerlink" title="原因"></a>原因</h5>      <p>在插入在当前mid索引值时多减了一位，如果这个数比mid值更小的话应该就是当前位置，而当前位置及以后的值应该往后移动</p>        <h4 id="第四次代码-1"   >          <a href="#第四次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四次代码-1" class="headerlink" title="第四次代码"></a>第四次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">// 二分法</span></span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mid=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]==target)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(low&gt;mid)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-1"   >          <a href="#提交成功-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-1" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="总结-1"   >          <a href="#总结-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3>      <p>先<strong>二分查找</strong>判断是否当前数组有这个值，如果有的话直接返回mid就是索引小标值</p><p>如果当前数组中没有这个值，就要判断插入在当前位置的前面还是后面</p><p>当low&gt;mid时就说明最后跳出循环前还进行了一次nums[mid]&lt;target判断 也就是说明mid索引的元素比插入元素更小，所以要插入在mid的后面</p><p>反之如果没有low&gt;mid说明当前值比mid值更小那么久应该插入当前元素位置，让当前元素及以后元素往后移</p>        <h3 id="图解-1"   >          <a href="#图解-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解-1" class="headerlink" title="图解"></a>图解</h3>              <h4 id="找得到元素"   >          <a href="#找得到元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#找得到元素" class="headerlink" title="找得到元素"></a>找得到元素</h4>      <p>找得到元素就是普通的二分查找返回目标索引值，图解于704题图解所示</p>        <h4 id="找不到元素，插入在前面"   >          <a href="#找不到元素，插入在前面" class="heading-link"><i class="fas fa-link"></i></a><a href="#找不到元素，插入在前面" class="headerlink" title="找不到元素，插入在前面"></a>找不到元素，插入在前面</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230804151101834.png"  alt="插入在前面">      </p>        <h4 id="找不到元素，插入在后面"   >          <a href="#找不到元素，插入在后面" class="heading-link"><i class="fas fa-link"></i></a><a href="#找不到元素，插入在后面" class="headerlink" title="找不到元素，插入在后面"></a>找不到元素，插入在后面</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230804150906559.png"  alt="插入在后面">      </p>        <h2 id="34-在排序数组中查找元素的第一个和最后一个位置"   >          <a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="heading-link"><i class="fas fa-link"></i></a><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34.在排序数组中查找元素的第一个和最后一个位置"></a>34.在排序数组中查找元素的第一个和最后一个位置</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/" >LeetCode.34题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-2"   >          <a href="#第一次做-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-2" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>于23&#x2F;08&#x2F;04</p>        <h4 id="第一次代码-2"   >          <a href="#第一次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-2" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="comment">//二分法</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mid=-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] arr=&#123;mid,mid&#125;;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;target)</span><br><span class="line">            &#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//找到元素</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//结束循环判断mid值</span></span><br><span class="line">        <span class="keyword">if</span>(mid!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//则说明有元素</span></span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=mid;i&gt;=low;i--)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span>(nums[i]==target)</span><br><span class="line">               &#123;</span><br><span class="line">                   low=i;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=mid;i&lt;=high;i++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(nums[i]==target)&#123;</span><br><span class="line">                   high=i;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           arr[<span class="number">0</span>]=low;</span><br><span class="line">           arr[<span class="number">1</span>]=high;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有找到元素</span></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-6"   >          <a href="#提交错误-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-6" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>Case: nums[5,7,7,8,8,10],target&#x3D;8,输出[4，4]，预期输出[3,4]</p>        <h5 id="原因-6"   >          <a href="#原因-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-6" class="headerlink" title="原因"></a>原因</h5>      <p>在结束循环判断的时候我将I设为Mid值，如果找到了元素那么nums[mid]&#x3D;&#x3D;target，那一定会执行将low和high的值改成mid，但是这是没有意义的，我的意图是找出mid前后两边和target相同的个数，因此我做了改正 将low判断的初始化值为mid-1即mid的前一位，high的判断index改为mid+1即mid的后一位</p>        <h4 id="第二次代码-1"   >          <a href="#第二次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-1" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">       <span class="comment">//二分法</span></span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span> mid=-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span>[] arr=&#123;mid,mid&#125;;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">           mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">           <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">               high=mid-<span class="number">1</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;target)</span><br><span class="line">           &#123;</span><br><span class="line">               low=mid+<span class="number">1</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="comment">//找到元素</span></span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> lowCount=<span class="number">0</span>; <span class="comment">//记录mid索引前面和target相同的个数</span></span><br><span class="line">       <span class="type">int</span> highCount=<span class="number">0</span>;<span class="comment">//记录mid索引后面和target相同的个数</span></span><br><span class="line">       <span class="comment">//结束循环判断mid值</span></span><br><span class="line">       <span class="keyword">if</span>(mid!=-<span class="number">1</span>)&#123;</span><br><span class="line">           <span class="comment">//则说明有元素</span></span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=mid-<span class="number">1</span>;i&gt;=low;i--)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span>(nums[i]==target)</span><br><span class="line">               &#123;</span><br><span class="line">                   lowCount++;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=mid+<span class="number">1</span>;i&lt;=high;i++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(nums[i]==target)&#123;</span><br><span class="line">                   highCount++;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           arr[<span class="number">0</span>]=mid-lowCount;</span><br><span class="line">           arr[<span class="number">1</span>]=mid+highCount;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//没有找到元素</span></span><br><span class="line">       <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-7"   >          <a href="#提交错误-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-7" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>Case: nums[5,7,7,8,8,10],target&#x3D;6,输出[0，0]，预期输出[-1,-1]</p>        <h5 id="原因-7"   >          <a href="#原因-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-7" class="headerlink" title="原因"></a>原因</h5>      <p>本次代码引入了计数器思想，就是在mid值前面的相同数量我计一个数，mid值后面相同的数量我也计一个数，最后给arr赋值的时候就只要加减Count就能代表有多少数据了</p><p>而问题又出现了，不存在的数据返回了[0,0]</p><p>通过Debug判断我才发现我有一个很严重的误区，就是无论有没有找到元素mid值一定不会等于-1，因为进入了第一个while循环判断中，如果没有找到值应该是一个mid值也会存在，所以第二个判断的起始条件有误导致后面赋值的时候mid值的错误导致整个问题出错</p>        <h4 id="第三次代码-2"   >          <a href="#第三次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-2" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="comment">//二分法</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mid=-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> midCount=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] arr=&#123;mid,mid&#125;;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;target)</span><br><span class="line">            &#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                midCount++;</span><br><span class="line">                <span class="comment">//找到元素</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> lowCount=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> highCount=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//结束循环判断mid值</span></span><br><span class="line">        <span class="keyword">if</span>(midCount!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//则说明有元素</span></span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=mid-<span class="number">1</span>;i&gt;=low;i--)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span>(nums[i]==target)</span><br><span class="line">               &#123;</span><br><span class="line">                   lowCount++;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=mid+<span class="number">1</span>;i&lt;=high;i++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(nums[i]==target)&#123;</span><br><span class="line">                   highCount++;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">        arr[<span class="number">0</span>]=mid-lowCount;</span><br><span class="line">        arr[<span class="number">1</span>]=mid+highCount;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有找到元素</span></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-2"   >          <a href="#提交成功-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-2" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>我引入了一个MidCount计数器，如果找到元素时候MidCount++，这样判断找到元素的判断条件就能确定下来</p>        <h3 id="总结和解题思路"   >          <a href="#总结和解题思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结和解题思路" class="headerlink" title="总结和解题思路"></a>总结和解题思路</h3>      <p>①定义MidCount&#x3D;0 用来记录是否找到元素，初始化一个数组arr[-1,-1]</p><p>②通过二分查找的方式，如果找到元素将MidCount++则跳出循环，同时low和high就是可以确认的目标值边界 也就是nums[low]和nums[high]之间能找到target目标值，mid索引位置也就是二分查找找到的目标值索引位置</p><p>③判断MidCount&#x3D;&#x3D;0  如果等于0说明二分查找没有找到元素直接返回数组arr ，如果不等于0则说明二分查找找到了元素</p><p>④MidCount1&#x3D;0，即找到了元素，定义两个计数器LowCount和HighCount用来记录Mid索引前后分别相同的元素个数</p><p>⑤从mid索引开始向前遍历，如果遍历没有找到相同元素则跳出遍历，如果找到了元素则LowCount++继续遍历</p><p>⑥从mid索引开始向后遍历，如果遍历没有找到相同元素则跳出遍历，如果找到了元素则HighCount++继续遍历</p><p>⑦mid-LowCount表示第一个target出现的索引值 赋值给arr[0]</p><p>⑧mid+highCount表示最后一个target出现的索引值 赋值给arr[1]</p><p>⑨返回arr</p>        <h2 id="69-x的平方根"   >          <a href="#69-x的平方根" class="heading-link"><i class="fas fa-link"></i></a><a href="#69-x的平方根" class="headerlink" title="69.x的平方根"></a>69.x的平方根</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/sqrtx/" >LeetCode.69题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-3"   >          <a href="#第一次做-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-3" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;05</p>        <h4 id="第一次代码-3"   >          <a href="#第一次代码-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-3" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i*i&lt;=x;i++)&#123;</span><br><span class="line">           <span class="keyword">return</span> i;</span><br><span class="line">       &#125;      </span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-8"   >          <a href="#提交错误-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-8" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:输入x&#x3D;4，输出0，预期2</p>        <h5 id="原因-8"   >          <a href="#原因-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-8" class="headerlink" title="原因"></a>原因</h5>      <p>可能思路有点搞，一进来循环就返回i了，我的想法是找到i的平方大于x的时候就直接返回i,我觉得这下就是直接的整数</p><p>然而我改成int i放在循环外面 循环做一个空语句然后 返回i 依然是出错了， 当输入X为8的时候，输出3，预期2</p><p>我就大概知道我的思路出现问题了</p>        <h4 id="第二次代码-2"   >          <a href="#第二次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-2" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i*i&lt;x;i++)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//出循环了判断一下i²和x的大小</span></span><br><span class="line">        <span class="keyword">if</span>(i*i&gt;x)&#123;</span><br><span class="line">            <span class="comment">//说明数在 i-1的²和i的²之间</span></span><br><span class="line">            <span class="keyword">return</span> i-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-9"   >          <a href="#提交错误-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-9" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>最后输入的值是2147483647，超出时间限度</p>        <h5 id="原因-9"   >          <a href="#原因-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-9" class="headerlink" title="原因"></a>原因</h5>      <p>说明时间复杂度高了，具体应该是for循环的时候判断太多次了？又或者是死循环了，重新审一下题 x最大为2的32次方-1 那么判断循环跳出的时候i*i的数值已经超过了整数上限</p>        <h4 id="第三次代码-3"   >          <a href="#第三次代码-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-3" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">       <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(i=<span class="number">0</span>;;i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>((i*i&gt;Integer.MAX_VALUE?Integer.MAX_VALUE : i * i)&gt; x)&#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;      </span><br><span class="line">       <span class="comment">//出循环了判断一下i²和x的大小</span></span><br><span class="line">       <span class="keyword">if</span>(i*i&gt;x)&#123;</span><br><span class="line">           <span class="comment">//说明数在 i-1的²和i的²之间</span></span><br><span class="line">           <span class="keyword">return</span> i-<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> i;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-10"   >          <a href="#提交错误-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-10" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>输入2147395600，输出289398，预期输出46340</p>        <h5 id="原因-10"   >          <a href="#原因-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-10" class="headerlink" title="原因"></a>原因</h5>      <p>46340的平方为2147395600,46341的平方为2147488281，而2的32次方-1为2147483647 即 46340²&lt;2147483647&lt;46341²</p><p>也就是这个求平方根最大能输出的值就应该在46340</p><p>我在上面改正的代码的时候做了一个判断 当i×i的数值大于整数的上限的时候设置为整数上限 反之为i×i,应该就是这个地方出了问题</p><p>经过debug的时候就知道了 当相等的时候没有进行跳出循环 因为这算是找到了数据但是我依然让他进行了下一次判断 下一次判断的时候会因为超出上限造成数据错误  </p>        <h4 id="第四次代码-2"   >          <a href="#第四次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四次代码-2" class="headerlink" title="第四次代码"></a>第四次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">       <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(i=<span class="number">0</span>;;i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(i==<span class="number">46340</span>)&#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>((i*i&gt;Integer.MAX_VALUE?Integer.MAX_VALUE : i * i)&gt;=x)&#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;      </span><br><span class="line">       <span class="comment">//出循环了判断一下i²和x的大小</span></span><br><span class="line">       <span class="keyword">if</span>(i*i&gt;x)&#123;</span><br><span class="line">           <span class="comment">//说明数在 i-1的²和i的²之间</span></span><br><span class="line">           <span class="keyword">return</span> i-<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> i;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-3"   >          <a href="#提交成功-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-3" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>我直接做了一个边界处理 就是因为最大的值就是46340，所以我直接当i为46340的时候返回，但是这样代码不太优雅，因为我是因为知道错误改正之后得出一个结论就是最大的就是46340，而这个数据不应该是这样做一个特殊处理的，这道题将会看网上的题解做出自己的总结</p>        <h3 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解" class="headerlink" title="题解"></a>题解</h3>      <p>这个题可以用到二分查找法，因为本质上就是求一个值一共有三种条件</p><ul><li>求的值的平方恰好等于所给值，就<strong>正好找到这个算术平方根</strong></li><li>求的值的平方大于所给值，就说明这个值<strong>一定不是要求到的算术平方根</strong></li><li>求的值的平方小于所给值，说明这个值<strong>可能是要求的算术平方根</strong></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span>x/<span class="number">2</span>;   </span><br><span class="line"><span class="comment">//因为除了0和1之后的所有数的一半都是小于或者等于算术平方根 也即[0,X/2]这个区间中一定有一个算数平方根是要求到的 </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里过滤掉0和1的特殊情况</span></span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span> || x==<span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">        <span class="type">int</span> mid=(high+low)/<span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(mid==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(mid&gt;x/mid)&#123;</span><br><span class="line">            high=mid-<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mid== x/mid)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//mid &lt; x/mid;</span></span><br><span class="line">            low=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> high;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="总结-2"   >          <a href="#总结-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3>      <p>①因为除了0和1之后的所有数的一半都是小于或者等于算术平方根 也即[0,X&#x2F;2]这个区间中一定有一个算数平方根是要求到的</p><p>②比较的时候采用 mid (&gt; | &#x3D;&#x3D; | &lt; )x &#x2F;mid的方式来替换掉mid × mid  (&gt; | &#x3D;&#x3D; | &lt; ) x  ，避免因为乘法导致的溢出问题</p><p>③因为采用了<strong>除法进行比较</strong>，所以 引入了一个判断IF(mid&#x3D;&#x3D;0) break; 来规避除数不能为0的问题</p>        <h2 id="367-有效的完全平方数"   >          <a href="#367-有效的完全平方数" class="heading-link"><i class="fas fa-link"></i></a><a href="#367-有效的完全平方数" class="headerlink" title="367.有效的完全平方数"></a>367.有效的完全平方数</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/valid-perfect-square/" >LeetCode.367(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-4"   >          <a href="#第一次做-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-4" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>于23&#x2F;08&#x2F;05</p>        <h4 id="第一次代码-4"   >          <a href="#第一次代码-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-4" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPerfectSquare</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span>(num==<span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> high=num/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">           <span class="type">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">           <span class="keyword">if</span>(mid==<span class="number">0</span>)&#123;</span><br><span class="line">               <span class="comment">//也即low=0 , high =1  ==&gt; num=2 那么没有完全平方数直接返回false</span></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(mid&gt;num/mid)&#123;</span><br><span class="line">               high=mid-<span class="number">1</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mid&lt; num/mid)&#123;</span><br><span class="line">               low=mid+<span class="number">1</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="comment">//mid == num/mid</span></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-11"   >          <a href="#提交错误-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-11" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:输入5 输出true ,预期输出false;</p>        <h5 id="原因-11"   >          <a href="#原因-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-11" class="headerlink" title="原因"></a>原因</h5>      <p>做这道题的时候因为受到69题的影响 所以判断语句中用的除法，但是好像这道题是不适用的，因为num&#x2F;mid的时候是因为上面一道题求得是整数的平方根，那么在范围中间的数据做除法会进行一个末尾抛弃，对最后的结果并不造成影响而这道题的num是实实切切要进行判断的</p>        <h5 id="分析场景"   >          <a href="#分析场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#分析场景" class="headerlink" title="分析场景"></a>分析场景</h5>      <p>当所求值的平方相等于目标值，那么说明找到了一个数据i，我们只要分析i-1,i,i+1这三个数的平方和x的关系即可</p><p>如果有一个是相等的那么说明，是有效的</p>        <h4 id="第二次代码-3"   >          <a href="#第二次代码-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-3" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPerfectSquare</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=num/<span class="number">2</span>;</span><br><span class="line">        <span class="type">long</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            <span class="type">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(mid==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//也即low=0 , high =1  ==&gt; num=2 那么没有完全平方数直接返回false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(mid&gt;num/mid)&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mid&lt; num/mid)&#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//mid == num/mid</span></span><br><span class="line">                index=(<span class="type">long</span>)mid;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index*index==num|(index+<span class="number">1</span>)*(index+<span class="number">1</span>)==num|(index-<span class="number">1</span>*index-<span class="number">1</span>)==num)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-4"   >          <a href="#提交成功-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-4" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>这次我引入了一个变量index，用于记录找到mid&#x3D;&#x3D;num&#x2F;mid的时候的mid值</p>        <h3 id="总结-3"   >          <a href="#总结-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3>      <p>其实我是做完了这道题然后去看别人的题解，因为这道题没有说不能用内置库，所以他们做的时候有的用了Sqrt函数。</p><p>总之我先总结我自己这道题的思路</p><p>①将num&#x3D;&#x3D;1的特殊情况直接返回true，这也是沿用69题的思路，因为除了0和1之外其他的数的平方根都小于等于自己的一半</p><p>②利用<strong>二分查找</strong> 当mid&#x3D;&#x3D;num&#x2F;mid的时候跳出循环 并用index记录这个mid值</p><p>此时跳出循环可能是 1.mid的平方恰好等于num 那么直接返回true即可</p><p>​2.mid的平方小于num，因为num&#x2F;mid是整除，所以可能num的平方根是小数，所以要判断mid+1和mid-1的平方和num的关系</p><p>③我引入了一个Long变量来记录index的平方，为了避免乘法的溢出，同时在跳出的时候将mid值进行强转</p><p>④最后判断一下mid-1,mid,mid+1的平方与num的关系，如果有一个相等则返回true，所以我这里用了逻辑或，只要有一个条件成立即可不用判断完</p>        <h1 id="移除元素"   >          <a href="#移除元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h1>      <p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并<strong>原地</strong>修改输入数组。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p>示例 1: 给定 nums &#x3D; [3,2,2,3], val &#x3D; 3, 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。 你不需要考虑数组中超出新长度后面的元素。</p><p>示例 2: 给定 nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2, 函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</p>        <h2 id="27-移除元素"   >          <a href="#27-移除元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#27-移除元素" class="headerlink" title="27.移除元素"></a>27.移除元素</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/remove-element/" >Leetcode.27移除元素(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-5"   >          <a href="#第一次做-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-5" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;05</p>        <h4 id="第一次代码-5"   >          <a href="#第一次代码-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-5" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==val)&#123;</span><br><span class="line">                <span class="comment">//当前位置的元素和数组前面的元素做一个交换</span></span><br><span class="line">                <span class="type">int</span> temp=nums[count];</span><br><span class="line">                nums[count]=val;</span><br><span class="line">                nums[i]=count;</span><br><span class="line">                count++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这样循环结束前count元素都是要丢掉的元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">            <span class="type">int</span> temp=nums[i];</span><br><span class="line">            nums[i]=nums[nums.length-<span class="number">1</span>-i];</span><br><span class="line">            nums[nums.length-i-<span class="number">1</span>]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.length-count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败"   >          <a href="#提交失败" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE：输入nums[3，2，2，3]，val&#x3D;3 输出[3,2,2]，预期输出[2,2]</p>        <h5 id="原因-12"   >          <a href="#原因-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-12" class="headerlink" title="原因"></a>原因</h5>      <p>1.通过debug的时候发现给nums[i]赋值的时候用的是count，而不是用temp交换</p><p>2.在第一个for循环的时候判断条件 i&lt;nums.length-1这样没有遍历到最后一个元素   </p><p><strong>这两个问题纯纯的低级错误中的低级错误</strong></p>        <h4 id="第二次代码-4"   >          <a href="#第二次代码-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-4" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==val)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//当前位置的元素和数组前面的元素做一个交换</span></span><br><span class="line">                <span class="type">int</span> temp=nums[count];</span><br><span class="line">                nums[count]=val;</span><br><span class="line">                nums[i]=temp;</span><br><span class="line">                count++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这样循环结束前count元素都是要丢掉的元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">            <span class="type">int</span> temp=nums[i];</span><br><span class="line">            nums[i]=nums[nums.length-<span class="number">1</span>-i];</span><br><span class="line">            nums[nums.length-i-<span class="number">1</span>]=temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nums.length-count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="总结及思想"   >          <a href="#总结及思想" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结及思想" class="headerlink" title="总结及思想"></a>总结及思想</h3>      <p>通过学习代码随想录的视频，这个题可以由一种双指针的方法来实现删除元素的操作</p><p><strong>首先</strong></p><p>我们要明白数组的性质，数组是一串地址连续的元素序列，所以要删除元素只能是后面的元素对前面元素的覆盖，本质上数组还是相同的大小</p>        <h4 id="双指针"   >          <a href="#双指针" class="heading-link"><i class="fas fa-link"></i></a><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h4>      <p>①定义一个Fast索引指针用来遍历老数组，定义一个Slow索引指针用来指向新数组</p><p>②For循环判断条件是Fast&lt;arr.length</p><p>③当指向一个元素的时候判断这个元素是不是我们要删除的，如果不是则将arr[slow]&#x3D;arr[fast]并将slow和fast指针++指向下一个元素 </p><p>也即新数组的元素确定</p><p>④如果是我们要删除的元素则将Fast指针指向下一个元素，而Slow指针不动表示这个位置元素需要被覆盖</p><p>⑤循环结束返回slow,sloiw的大小也是新数组的大小</p>        <h4 id="双指针代码实现"   >          <a href="#双指针代码实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#双指针代码实现" class="headerlink" title="双指针代码实现"></a>双指针代码实现</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> fast=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;fast&lt;nums.length;fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=val)&#123;</span><br><span class="line">                <span class="comment">//是新数组需要的元素</span></span><br><span class="line">                nums[slow]=nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="交换元素"   >          <a href="#交换元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#交换元素" class="headerlink" title="交换元素"></a>交换元素</h4>      <p>也就是我第一次做这道题的时候的思想</p><p>①先定义一个指针count，指向数组索引为0的位置</p><p>②for循环遍历，当找到我们不要的元素，将其放到数组前面</p><p>③这样第一次遍历结束 前面的元素都是我们不要的元素，并且我们得到了一个不要元素的数量计数器Count</p><p>④第二次循环的时候，将前count个元素和数组的后count个元素进行交换</p><p>⑤返回arr.length-count  也就是返回数组前面的元素，不要最后count个元素</p><p><strong>弊端</strong></p><p>这样是进行了两次for循环判断，这时间复杂度相较于双指针的方法实现更大</p>        <h4 id="交换指针代码实现"   >          <a href="#交换指针代码实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#交换指针代码实现" class="headerlink" title="交换指针代码实现"></a>交换指针代码实现</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==val)&#123;</span><br><span class="line">                <span class="comment">//当前位置的元素和数组前面的元素做一个交换</span></span><br><span class="line">                <span class="type">int</span> temp=nums[count];</span><br><span class="line">                nums[count]=val;</span><br><span class="line">                nums[i]=temp;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这样循环结束前count元素都是要丢掉的元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">            <span class="type">int</span> temp=nums[i];</span><br><span class="line">            nums[i]=nums[nums.length-<span class="number">1</span>-i];</span><br><span class="line">            nums[nums.length-i-<span class="number">1</span>]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.length-count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="图解-2"   >          <a href="#图解-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解-2" class="headerlink" title="图解"></a>图解</h3>              <h4 id="双指针图解"   >          <a href="#双指针图解" class="heading-link"><i class="fas fa-link"></i></a><a href="#双指针图解" class="headerlink" title="双指针图解"></a>双指针图解</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230805093305176.png"  alt="双指针图解【1】">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230805094005008.png"  alt="双指针图解【2】">      </p>        <h4 id="交换元素图解"   >          <a href="#交换元素图解" class="heading-link"><i class="fas fa-link"></i></a><a href="#交换元素图解" class="headerlink" title="交换元素图解"></a>交换元素图解</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230805094505082.png"  alt="交换元素图解">      </p>        <h2 id="26-删除排序数组中的重复项"   >          <a href="#26-删除排序数组中的重复项" class="heading-link"><i class="fas fa-link"></i></a><a href="#26-删除排序数组中的重复项" class="headerlink" title="26.删除排序数组中的重复项"></a>26.删除排序数组中的重复项</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/" >Leetcode.26题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-6"   >          <a href="#第一次做-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-6" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;06</p>        <h4 id="第一次代码-6"   >          <a href="#第一次代码-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-6" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> fast=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(;fast&lt;nums.length;fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast==nums.length-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[fast-<span class="number">1</span>]!=nums[fast])&#123;</span><br><span class="line">                    nums[slow]=nums[fast];</span><br><span class="line">                    slow++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=nums[fast+<span class="number">1</span>])&#123;</span><br><span class="line">                nums[slow]=nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-12"   >          <a href="#提交错误-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-12" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:数组索引越界异常 Index -1 out of bounds for length 1 发生在nums[fast-1]！&#x3D;nums[fast]中</p>        <h5 id="原因-13"   >          <a href="#原因-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-13" class="headerlink" title="原因"></a>原因</h5>      <p>没有判断异常情况，当nums.length&#x3D;&#x3D;1的时候直接返回1就行了</p>        <h4 id="第二次代码-5"   >          <a href="#第二次代码-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-5" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> fast=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(;fast&lt;nums.length;fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast==nums.length-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[fast-<span class="number">1</span>]!=nums[fast])&#123;</span><br><span class="line">                    nums[slow]=nums[fast];</span><br><span class="line">                    slow++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=nums[fast+<span class="number">1</span>])&#123;</span><br><span class="line">                nums[slow]=nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-13"   >          <a href="#提交错误-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-13" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:输入[1,1] 输出[], 预期结果[1]</p>        <h5 id="原因-14"   >          <a href="#原因-14" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-14" class="headerlink" title="原因"></a>原因</h5>      <p>出在fast&#x3D;&#x3D;nums.length-1的时候 我将最后一个元素和倒数第二个元素进行了对比，如果不相同的话才更新到新数组中，然而我等于是比了两次因为第一次的时候是倒数第二的元素和倒数第一的元素比较，如果相同的话倒数第二个元素不会进入到新数组中，而第二次比较导致最后一个元素也进不到新数组中</p>        <h4 id="第三次代码-4"   >          <a href="#第三次代码-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-4" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> fast=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(;fast&lt;nums.length;fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast==nums.length-<span class="number">1</span>)&#123;</span><br><span class="line">                    nums[slow]=nums[fast];</span><br><span class="line">                    slow++;    </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=nums[fast+<span class="number">1</span>])&#123;</span><br><span class="line">                nums[slow]=nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-5"   >          <a href="#提交成功-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-5" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="总结-4"   >          <a href="#总结-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3>      <p>利用<strong>双指针</strong>的思想做出这题，然后要考虑到特殊情况，比较元素的时候要小心数组索引越界异常，踩坑就是这里</p>        <h2 id="283-移动零"   >          <a href="#283-移动零" class="heading-link"><i class="fas fa-link"></i></a><a href="#283-移动零" class="headerlink" title="283.移动零"></a>283.移动零</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/move-zeroes/" >Leetcode.283题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-7"   >          <a href="#第一次做-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-7" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次于23&#x2F;08&#x2F;06</p>        <h4 id="第一次代码-7"   >          <a href="#第一次代码-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-7" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> slow=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> fast=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;fast&gt;=<span class="number">0</span>;fast--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]==<span class="number">0</span>)&#123;</span><br><span class="line">                nums[slow]=<span class="number">0</span>;</span><br><span class="line">                slow--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-14"   >          <a href="#提交错误-14" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-14" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:输入[0,1,0,3,12] 输出[0,1,0,0,0] 预期输出[1,3,12,0,0]</p>        <h5 id="原因-15"   >          <a href="#原因-15" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-15" class="headerlink" title="原因"></a>原因</h5>      <p>我的意思是从后面开始遍历，然后当为0的时候更新慢指针的位置，把0记录在数组后面这样就不用做移动操作</p><p>实际上更新慢指针的时候将数据丢失了，导致非0的位置成了0而为0的位置没有变化，所以为了数据不丢失我将更新操作做了调整</p>        <h4 id="第二次代码-6"   >          <a href="#第二次代码-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-6" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> slow=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> fast=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;fast&gt;=<span class="number">0</span>;fast--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]==<span class="number">0</span>)&#123;</span><br><span class="line">                nums[fast]=nums[slow];</span><br><span class="line">                nums[slow]=<span class="number">0</span>;</span><br><span class="line">                slow--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-1"   >          <a href="#提交失败-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-1" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:输入[0,1,0,3,12] 输出[3,1,12,0,0] 预期输出[1,3,12,0,0]</p>        <h5 id="原因-16"   >          <a href="#原因-16" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-16" class="headerlink" title="原因"></a>原因</h5>      <p>因为我选择交换位置 而且我是从后面开始遍历的所以第一个0和3交换了位置 第二个0和12交换了位置，这样保证了数据不丢失，但是这样就影响了数据的次序，这是我没有考虑到的。我开始想是不是我的思路出现问题，就这样我改改提交了第三次代码</p>        <h4 id="第三次代码-5"   >          <a href="#第三次代码-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-5" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> fast= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;fast&lt;nums.length;fast++)&#123;</span><br><span class="line">            <span class="comment">//从头遍历 当元素不为0的时候更新到新数组中</span></span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=<span class="number">0</span>)&#123;</span><br><span class="line">                nums[slow]=nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//当循环结束新数组和老数组数量不同说明最后的元素需要更新成0</span></span><br><span class="line">        <span class="keyword">if</span>(slow!=fast)</span><br><span class="line">        <span class="keyword">for</span>(;slow&lt;fast;slow++)&#123;</span><br><span class="line">            nums[slow]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-6"   >          <a href="#提交成功-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-6" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>我反思了一下顺序的丢失可能是因为从后面开始遍历的原因，所以我选择从头遍历，然后最后进行一个判断如果新老数组长度不相等，则更新最后几个元素，因为最后几个元素将0的位置填补掉了</p>        <h3 id="总结-5"   >          <a href="#总结-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-5" class="headerlink" title="总结"></a>总结</h3>      <p><strong>双指针</strong>的时候更新元素只是覆盖，要注意数据丢失的问题以及数据次序的问题</p>        <h2 id="844-比较含退格的字符串"   >          <a href="#844-比较含退格的字符串" class="heading-link"><i class="fas fa-link"></i></a><a href="#844-比较含退格的字符串" class="headerlink" title="844.比较含退格的字符串"></a>844.比较含退格的字符串</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/backspace-string-compare/" >Leetcode.844题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-8"   >          <a href="#第一次做-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-8" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次于23&#x2F;08&#x2F;06</p>        <h4 id="第一次代码-8"   >          <a href="#第一次代码-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-8" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">backspaceCompare</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取字符数组</span></span><br><span class="line">        <span class="type">char</span>[] c= s.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] d= t.toCharArray();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取c数组的快慢指针</span></span><br><span class="line">        <span class="type">int</span> cslow=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cFast=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//获取d数组的快慢指针</span></span><br><span class="line">        <span class="type">int</span> dslow=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> dFast=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;cFast&lt;c.length;cFast++)&#123;</span><br><span class="line">            <span class="comment">//当c[cFast]!=&#x27;#&#x27;的时候进行更新新数组操作，当c[cFast]==&#x27;#&#x27;的时候进行一个退格覆盖</span></span><br><span class="line">            <span class="keyword">if</span>(c[cFast]!=<span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                c[cslow]=c[cFast];</span><br><span class="line">                cslow++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//c[cFast==&#x27;#&#x27;]</span></span><br><span class="line">                <span class="comment">//判断cslow的值 防止--slow的时候索引越界异常</span></span><br><span class="line">                <span class="keyword">if</span>(cslow==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                c[--cslow]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//下同</span></span><br><span class="line">        <span class="keyword">for</span>(;dFast&lt;d.length;dFast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(d[dFast]!=<span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                d[dslow]=d[dFast];</span><br><span class="line">                dslow++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//d[dFast==&#x27;#&#x27;]</span></span><br><span class="line">                <span class="keyword">if</span>(dslow==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                d[--dslow]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//拼接数组成字符串</span></span><br><span class="line">        String newSstr=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        String newTstr=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;cslow;i++)&#123;</span><br><span class="line">            newSstr=newSstr+c[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;dslow;i++)&#123;</span><br><span class="line">            newTstr=newTstr+d[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newSstr.equals(newTstr);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-7"   >          <a href="#提交成功-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-7" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>但是好像有一点点不太优雅提交完这个答案，我总觉得有地方可以改进，并且相同代码有点太多了，而看了评论区大概就是抽取出一个方法然后返回一个String类型的值  主函数中用  return 方法1(s).eqauls(方法1(t)) 这样好像优雅一点</p>        <h3 id="总结-6"   >          <a href="#总结-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-6" class="headerlink" title="总结"></a>总结</h3>      <p>利用<strong>双指针</strong>的思想</p><p>①先获取char类型的数组，方便使用双指针</p><p>②当nums[fast]!&#x3D;’#’的时候进行一个更新到新数组操作 即nums[slow++]&#x3D;nums[fast];</p><p>③当nums[fast]&#x3D;&#x3D;’#’的时候要进行一个退格操作 即nums[–slow]&#x3D;’#’  但是这里有一个坑 <strong>当slow为0的时候要注意–slow的索引越界</strong></p><p>所以我进行了一个判断  当slow&#x3D;&#x3D;0的时候直接continue;</p><p>④将字符数组返回成字符串 ，通过字符串的equasl方法比较并返回结果，我这里做的太不优雅了可以改进一点的</p>        <h2 id="977-有序数组的平方"   >          <a href="#977-有序数组的平方" class="heading-link"><i class="fas fa-link"></i></a><a href="#977-有序数组的平方" class="headerlink" title="977.有序数组的平方"></a>977.有序数组的平方</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/squares-of-a-sorted-array/" >Leetcode.977题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-9"   >          <a href="#第一次做-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-9" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;06</p>        <h4 id="第一次代码-9"   >          <a href="#第一次代码-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-9" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="comment">//先平方</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            nums[i]=nums[i]*nums[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="type">int</span> temp=nums[i+<span class="number">1</span>];</span><br><span class="line">                nums[i+<span class="number">1</span>]=nums[i];</span><br><span class="line">                nums[i]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-8"   >          <a href="#提交成功-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-8" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>很显然这次是一个暴力解法，因为我有一点点不知道怎么用双指针来解这道题，并且还有一点很关键的是，暴力解法的暴力循环我用了最老套的双层嵌套，这是一个时间复杂度为O(n²)的方法</p>        <h3 id="题解-1"   >          <a href="#题解-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3>              <h4 id="思路"   >          <a href="#思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#思路" class="headerlink" title="思路"></a>思路</h4>      <p>依然是使用<strong>双指针</strong>的思想</p><p><strong>数组最左边或者最右边一定会产生最大的平方数</strong>，因此我们用两个指针一个指向最左边的一个指向最右边，然后来比较两者之间的最大值</p><p>然后将最大的写入新数组中，循环条件是左边的指针小于等于右边指针 (也就是左边指针不超过右边指针)，新数组用一个新的指针指向，并且要从后往前写这样保证了数据大的排在后面</p><p><strong>破局点</strong>：1.可以用新数组来承接老数组的数值，这样不会因为原地修改造成数据丢失</p><p>​2.老数组的两边一定会产生这个数组中最大的平方数</p><p>​3.新数组从后往前写保证了新数组的顺序</p>        <h4 id="代码"   >          <a href="#代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码" class="headerlink" title="代码"></a>代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">       <span class="comment">// 双指针</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//指向最左边</span></span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//指向最右边 </span></span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//新数组的索引下标，从后往前写</span></span><br><span class="line">        <span class="type">int</span> write=nums.length-<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//定义一个新数组</span></span><br><span class="line">        <span class="type">int</span>[] newArr=<span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当左边指针不超过右边指针时候进入循环</span></span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            <span class="comment">//如果左边产生的平方数比右边的平方大 将左边的平方写入新数组中然后指针移动</span></span><br><span class="line">            <span class="keyword">if</span>(nums[low]*nums[low]&gt;nums[high]*nums[high])&#123;</span><br><span class="line">                newArr[write]=nums[low]*nums[low];</span><br><span class="line">                low++;</span><br><span class="line">                write--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//反之将右边的平方数写入数组中然后指针移动</span></span><br><span class="line">                newArr[write]=nums[high]*nums[high];</span><br><span class="line">                high--;</span><br><span class="line">                write--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newArr;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="图解-3"   >          <a href="#图解-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解-3" class="headerlink" title="图解"></a>图解</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230806111400239.png"  alt="977题双指针图解(1)">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230806111548953.png"  alt="977题双指针图解(2)">      </p>        <h1 id="有序数组的平方"   >          <a href="#有序数组的平方" class="heading-link"><i class="fas fa-link"></i></a><a href="#有序数组的平方" class="headerlink" title="有序数组的平方"></a>有序数组的平方</h1>      <p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</p>        <h2 id="977-有序数组的平方-1"   >          <a href="#977-有序数组的平方-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#977-有序数组的平方-1" class="headerlink" title="977.有序数组的平方"></a>977.有序数组的平方</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/squares-of-a-sorted-array/" >Leetcode.977题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>有点扯，这道题明明昨天刚做过 3&gt;3 就当无事发生再重新做一遍吧</p>        <h3 id="代码-1"   >          <a href="#代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="comment">//定义双指针 low指向老数组最左边 high指向老数组最右边 write指向新数组的写入位置，从后往前写所以指向最后</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> write=nums.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个新数组</span></span><br><span class="line">        <span class="type">int</span>[] newArr= <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当low不超过high的时候进行循环</span></span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            <span class="comment">//左边的数平方比右边的数平方大</span></span><br><span class="line">            <span class="keyword">if</span>(nums[low]*nums[low]&gt;nums[high]*nums[high])&#123;</span><br><span class="line">                <span class="comment">//写入新数组中，low++,write--</span></span><br><span class="line">                newArr[write--]=nums[low]*nums[low];</span><br><span class="line">                low++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//反之右边的数的平方比左边的数大</span></span><br><span class="line">                <span class="comment">//写入新数组中，high--,write--</span></span><br><span class="line">                newArr[write--]=nums[high]*nums[high];</span><br><span class="line">                high--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//返回新数组</span></span><br><span class="line">        <span class="keyword">return</span> newArr;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="图解-4"   >          <a href="#图解-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解-4" class="headerlink" title="图解"></a>图解</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230806111400239.png"  alt="977题双指针图解(1)">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230806111548953.png"  alt="977题双指针图解(2)">      </p>        <h1 id="长度最小的子数组"   >          <a href="#长度最小的子数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#长度最小的子数组" class="headerlink" title="长度最小的子数组"></a>长度最小的子数组</h1>      <p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0</p>        <h2 id="209-长度最小的子数组"   >          <a href="#209-长度最小的子数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#209-长度最小的子数组" class="headerlink" title="209.长度最小的子数组"></a>209.长度最小的子数组</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/minimum-size-subarray-sum/" >Leetcode.209题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><em>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0</em></p>        <h3 id="第一次做-10"   >          <a href="#第一次做-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-10" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;07</p>        <h4 id="第一次代码-10"   >          <a href="#第一次代码-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-10" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> temp=nums.length;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(;slow&lt;nums.length;slow++)&#123;</span><br><span class="line">            sum=<span class="number">0</span>;</span><br><span class="line">            count=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=slow;i&lt;nums.length;i++)&#123;</span><br><span class="line">                sum+=nums[i];</span><br><span class="line">                <span class="keyword">if</span>(sum&gt;=target)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    <span class="keyword">if</span>(temp&gt;=count)&#123;</span><br><span class="line">                        temp=count;</span><br><span class="line">                        flag=<span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-2"   >          <a href="#提交失败-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-2" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:输入396893380 超出时间限制</p>        <h5 id="原因-17"   >          <a href="#原因-17" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-17" class="headerlink" title="原因"></a>原因</h5>      <p>嵌套循环中每一次都需要从当前之后下一个元素开始，时间复杂度太高了，我在想是不是前N个才能sum&gt;&#x3D;target的情况下，那N-1个一定是sum&lt;target，我们只需要从第N+1个元素开始看下一次条件?</p>        <h4 id="第二次代码-7"   >          <a href="#第二次代码-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-7" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> temp=nums.length;</span><br><span class="line">        <span class="type">boolean</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(;slow&lt;nums.length;)&#123;</span><br><span class="line">            sum=<span class="number">0</span>;</span><br><span class="line">            count=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=slow;i&lt;nums.length;i++)&#123;</span><br><span class="line">                sum+=nums[i];</span><br><span class="line">                <span class="keyword">if</span>(sum&gt;=target)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    <span class="keyword">if</span>(temp&gt;=count)&#123;</span><br><span class="line">                        temp=count;</span><br><span class="line">                        flag=<span class="literal">true</span>;</span><br><span class="line">                        slow=i+<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-3"   >          <a href="#提交失败-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-3" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:输入11 [1,1,1,1,1,1,1,1] 超出时间限制</p>        <h5 id="原因-18"   >          <a href="#原因-18" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-18" class="headerlink" title="原因"></a>原因</h5>      <p>第二个循环才能导致外循环的slow更改数据，如果一直找不到最小的数组则陷入了死循环中</p>        <h4 id="第三次代码-6"   >          <a href="#第三次代码-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-6" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> temp=nums.length;</span><br><span class="line">        <span class="type">boolean</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(;slow&lt;nums.length;slow++)&#123;</span><br><span class="line">            sum+=nums[slow];</span><br><span class="line">            count++;</span><br><span class="line">           <span class="keyword">if</span>(sum&gt;=target)&#123;</span><br><span class="line">               sum=<span class="number">0</span>;</span><br><span class="line">               <span class="keyword">if</span>(temp&gt;count)&#123;</span><br><span class="line">                   temp=count;</span><br><span class="line">                   count=<span class="number">0</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               flag=<span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-4"   >          <a href="#提交失败-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-4" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:输入 11 [1,2,3,4,5] 输出5 预期输出3</p>        <h5 id="原因-19"   >          <a href="#原因-19" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-19" class="headerlink" title="原因"></a>原因</h5>      <p>很显然是因为我第一次失败的错误思路，我假设前n个才能导致sum&gt;&#x3D;target，我认为n-1个时达不到sum&gt;&#x3D;target目标，所以我直接认为下一个子数组要从下一个也即n+1开始看</p><p>这道题我没能成功自己做出来</p>        <h3 id="题解-2"   >          <a href="#题解-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3>      <p>这道题还是用<strong>滑动窗口</strong>的思路，如果用暴力解法会时间超出限制，所以暴力法就不行了。然后双指针主要是如何更新起始位置的指针是这道题的关键，我第一次做的时候第三次代码用了相似的思路，但是我没能成功移动起始索引</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">//定义left和right指针 一个用于表示起始位置，一个用于表示终止位置</span></span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//定义sum用来比较数值，temp是用来记录最小长度的，temp的初始化只要比nums.length大就行</span></span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> temp=Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(;right&lt;nums.length;right++)&#123;</span><br><span class="line">            sum+=nums[right];</span><br><span class="line">            <span class="comment">//while循环来不断更新起始位置 ，当sum&lt;target中断循环说明启示位置更新到sum&lt;target的位置了</span></span><br><span class="line">            <span class="keyword">while</span>(sum&gt;=target)&#123;</span><br><span class="line">                <span class="comment">//获取数组最小长度  结束位置-起始位置+1是当前窗口的元素个数 </span></span><br><span class="line">                temp=Math.min(temp,right-left+<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//减去启示位置的元素值 用来更新起始位置</span></span><br><span class="line">                sum-=nums[left];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果temp和初始化长度一样则说明没有最小数组，反之说明找到了最小数组，返回最小数组长度</span></span><br><span class="line">        <span class="keyword">return</span> temp==Integer.MAX_VALUE? <span class="number">0</span> :temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="总结-7"   >          <a href="#总结-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-7" class="headerlink" title="总结"></a>总结</h3>      <p><strong>滑动窗口的思想</strong>重点在于怎么来更新起始位置的指针，这里用while循环来保证【起始位置，终止位置】这段数组中sum&lt;target，如果用if来进行条件判断则不能保证这个【起始位置，终止位置】这个区间中sum&lt;target</p>        <h3 id="图解-5"   >          <a href="#图解-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解-5" class="headerlink" title="图解"></a>图解</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230807105205073.png"  alt="滑动窗口图解(1)">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230807105326262.png"  alt="滑动窗口图解(2)">      </p>        <h2 id="904-水果成篮"   >          <a href="#904-水果成篮" class="heading-link"><i class="fas fa-link"></i></a><a href="#904-水果成篮" class="headerlink" title="904.水果成篮"></a>904.水果成篮</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/fruit-into-baskets/" >Leetcode.904题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 fruits 表示，其中 fruits[i] 是第 i 棵树上的水果 种类 。</p><p>你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：</p><p>你只有 两个 篮子，并且每个篮子只能装 单一类型 的水果。每个篮子能够装的水果总量没有限制。<br>你可以选择任意一棵树开始采摘，你必须从 每棵 树（包括开始采摘的树）上 恰好摘一个水果 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。<br>一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。<br>给你一个整数数组 fruits ，返回你可以收集的水果的 最大 数目。</p>        <h3 id="第一次做-11"   >          <a href="#第一次做-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-11" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;07</p>        <h4 id="第一次代码-11"   >          <a href="#第一次代码-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-11" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">totalFruit</span><span class="params">(<span class="type">int</span>[] fruits)</span> &#123;</span><br><span class="line">        <span class="type">int</span> typeA=Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> typeB=Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(;right&lt;fruits.length;right++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(typeA==Integer.MAX_VALUE)&#123;</span><br><span class="line">                typeA=fruits[right];</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(typeA!=fruits[right]&amp;&amp;typeB==Integer.MAX_VALUE)&#123;</span><br><span class="line">                typeB=fruits[right];</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fruits[right]==typeA||fruits[right]==typeB)&#123;</span><br><span class="line">                 count++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(fruits[right]!=typeA&amp;&amp;fruits[right]!=typeB)&#123;</span><br><span class="line">                max= max&gt;count?max:count;</span><br><span class="line">                count=<span class="number">0</span>; </span><br><span class="line">                <span class="keyword">while</span>(fruits[left]==typeA)&#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">                typeA=typeB;</span><br><span class="line">                typeB=Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        max=max&gt;count?max:count;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-5"   >          <a href="#提交失败-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-5" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:输入[0,1,2,2] 输出2 ，预期输出3</p>        <h5 id="原因-20"   >          <a href="#原因-20" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-20" class="headerlink" title="原因"></a>原因</h5>      <p>因为把第三种水果判断的时候我将count置为0 但是实际上我还有一个篮子装有水果，我忽略了另一个篮子中的水果个数</p>        <h4 id="第二次代码-8"   >          <a href="#第二次代码-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-8" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">totalFruit</span><span class="params">(<span class="type">int</span>[] fruits)</span> &#123;</span><br><span class="line">        <span class="type">int</span> typeA=Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> typeB=Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> Acount=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> Bcount=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(;right&lt;fruits.length;right++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(typeA==Integer.MAX_VALUE)&#123;</span><br><span class="line">                typeA=fruits[right];</span><br><span class="line">                Acount++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(typeA!=fruits[right]&amp;&amp;typeB==Integer.MAX_VALUE)&#123;</span><br><span class="line">                typeB=fruits[right];</span><br><span class="line">                Bcount++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fruits[right]==typeA)&#123;</span><br><span class="line">                Acount++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fruits[right]==typeB)&#123;</span><br><span class="line">                Bcount++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(fruits[right]!=typeA&amp;&amp;fruits[right]!=typeB)&#123;</span><br><span class="line">                max= max&gt;(Acount+Bcount)?max:(Acount+Bcount);</span><br><span class="line">                Acount=Bcount;</span><br><span class="line">                Bcount=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(fruits[left]==typeA)&#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">                typeA=typeB;</span><br><span class="line">                typeB=fruits[right];</span><br><span class="line">                Bcount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         max= max&gt;(Acount+Bcount)?max:(Acount+Bcount);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-15"   >          <a href="#提交错误-15" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-15" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:输入[1,0,1,4,1,4,1,2,3] 输出4 预期输出5</p>        <h5 id="原因-21"   >          <a href="#原因-21" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-21" class="headerlink" title="原因"></a>原因</h5>      <p>逻辑错了滑动窗口下一个位置应该是下一个元素前面一个类型的起始个数</p>        <h4 id="第三次代码-7"   >          <a href="#第三次代码-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-7" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">totalFruit</span><span class="params">(<span class="type">int</span>[] fruits)</span> &#123;</span><br><span class="line">       <span class="type">int</span> typeA=Integer.MAX_VALUE;</span><br><span class="line">       <span class="type">int</span> typeB=Integer.MAX_VALUE;</span><br><span class="line">       <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> Acount=<span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> Bcount=<span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(;right&lt;fruits.length;right++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(typeA==Integer.MAX_VALUE)&#123;</span><br><span class="line">               typeA=fruits[right];</span><br><span class="line">               Acount++;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(typeA!=fruits[right]&amp;&amp;typeB==Integer.MAX_VALUE)&#123;</span><br><span class="line">               typeB=fruits[right];</span><br><span class="line">               Bcount++;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(fruits[right]==typeA)&#123;</span><br><span class="line">               Acount++;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(fruits[right]==typeB)&#123;</span><br><span class="line">               Bcount++;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span>(fruits[right]!=typeA&amp;&amp;fruits[right]!=typeB)&#123;</span><br><span class="line">               max= max&gt; (Acount+Bcount)?max:(Acount+Bcount);</span><br><span class="line">               </span><br><span class="line">               <span class="keyword">if</span>(fruits[right-<span class="number">1</span>]==typeA)&#123;</span><br><span class="line">                   <span class="comment">//清空B篮子</span></span><br><span class="line">                   <span class="keyword">while</span>(Bcount!=<span class="number">0</span>)&#123;</span><br><span class="line">                       <span class="keyword">if</span>(fruits[left++]==typeB) Bcount--;</span><br><span class="line">                       <span class="keyword">else</span> Acount--;</span><br><span class="line">                   &#125;</span><br><span class="line">                  </span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span>(fruits[right-<span class="number">1</span>]==typeB)&#123;</span><br><span class="line">                   <span class="comment">//清空A篮子</span></span><br><span class="line">                   <span class="keyword">while</span>(Acount!=<span class="number">0</span>)&#123;</span><br><span class="line">                       <span class="keyword">if</span>(fruits[left++]==typeA) Acount--;</span><br><span class="line">                       <span class="keyword">else</span> Bcount--;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">//把B篮子给A篮子</span></span><br><span class="line">                   Acount=Bcount;</span><br><span class="line">                   typeA=typeB;</span><br><span class="line">                   Bcount=<span class="number">0</span>;</span><br><span class="line">               &#125;</span><br><span class="line">                typeB=fruits[right];</span><br><span class="line">                Bcount++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">         max= max&gt; (Acount+Bcount)?max:(Acount+Bcount);</span><br><span class="line">       <span class="keyword">return</span> max;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-9"   >          <a href="#提交成功-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-9" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>我把左右两个篮子的个数分开算，当碰到第三种水果的时候判断前一种水果是什么让他成为种类A，索引应该移动到连续的种类A的第一个，然后把第三种水果装成种类B的篮子中</p>        <h4 id="第四次代码-3"   >          <a href="#第四次代码-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四次代码-3" class="headerlink" title="第四次代码"></a>第四次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">totalFruit</span><span class="params">(<span class="type">int</span>[] fruits)</span> &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map= <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;right&lt;fruits.length;right++)&#123;</span><br><span class="line">            <span class="comment">//没有装满两种类型</span></span><br><span class="line">            <span class="keyword">if</span>(map.size()&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(fruits[right]))&#123;</span><br><span class="line">                    <span class="type">int</span> count=map.get(fruits[right]);</span><br><span class="line">                    map.put(fruits[right],++count);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    map.put(fruits[right],<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="keyword">if</span>(map.containsKey(fruits[right]))&#123;</span><br><span class="line">                     <span class="comment">//是两种之一</span></span><br><span class="line">                    <span class="type">int</span> count=map.get(fruits[right]);</span><br><span class="line">                    map.put(fruits[right],++count);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//第三种，需要清空其中一种</span></span><br><span class="line">                <span class="comment">//获取最长的长度</span></span><br><span class="line">                len=Math.max(len,right-left);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//最靠近第三种水果的第二种水果种类 nums[right-1] 我们这一步的目标是清空种类1 保留连续的第二种水果</span></span><br><span class="line">                </span><br><span class="line">                <span class="type">int</span> bCount=right-left-map.get(fruits[right-<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">while</span>(bCount!=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(fruits[left]==fruits[right-<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">int</span> count=map.get(fruits[right-<span class="number">1</span>]);</span><br><span class="line">                    map.put(fruits[right-<span class="number">1</span>],--count);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    map.put(fruits[left],--bCount);</span><br><span class="line">                    &#125;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//循环结束移除第一种水果</span></span><br><span class="line">                map.remove(fruits[left-<span class="number">1</span>]);</span><br><span class="line">                <span class="comment">//将第三种水果添加进篮子中</span></span><br><span class="line">                map.put(fruits[right],<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> len=Math.max(len,right-left);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-10"   >          <a href="#提交成功-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-10" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>利用集合写的，没想到不仅是时间和空间都比第三次代码花的多</p>        <h3 id="总结-8"   >          <a href="#总结-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-8" class="headerlink" title="总结"></a>总结</h3>      <p>①利用<strong>滑动窗口</strong>的思想，用类型A和类型B代表两个篮子，同时用Acount和Bcount表示水果个数</p><p>②当碰到第三种水果的时候先判断上一个水果是类型A还是类型B 收集max &#x3D; MAX&gt;Acount+Bcount ? MAX ：Acount+ Bcount</p><p>③如果是类型A就把类型B的水果清空以及类型B以前的水果A要减去 如 0 1 0 1 0 0 3 要把倒数第二个0以前的0101都清空掉</p><p>④如果是类型B就把类型A的水果以及类型A以前的水果B都清空，然后将B水果放到A水果篮中，B个数为0</p><p>⑤把类型C放到类型B中，设置B果篮中的水果个数为1</p><p>⑥最后返回最大的水果个数</p>        <h2 id="76-最小覆盖子串"   >          <a href="#76-最小覆盖子串" class="heading-link"><i class="fas fa-link"></i></a><a href="#76-最小覆盖子串" class="headerlink" title="76.最小覆盖子串"></a>76.最小覆盖子串</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/minimum-window-substring/" >Leetcode.76题(hard)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>给你一个字符串 s、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 “” 。</p>        <h3 id="第一次做-12"   >          <a href="#第一次做-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-12" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;08</p>        <h4 id="第一次代码-12"   >          <a href="#第一次代码-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-12" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">minWindow</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>((t==<span class="literal">null</span> &amp;&amp; <span class="string">&quot;&quot;</span>.equals(t))||(s==<span class="literal">null</span> &amp;&amp; <span class="string">&quot;&quot;</span>.equals(s)))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>[] arr=t.toCharArray();</span><br><span class="line">    Map&lt;Character,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    Map&lt;Character,Integer&gt; tempMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> a:arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(a))&#123;</span><br><span class="line">            <span class="comment">//如果包含</span></span><br><span class="line">            <span class="type">int</span> count=map.get(a);</span><br><span class="line">            map.put(a,++count);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.put(a,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tempMap=map;</span><br><span class="line">    <span class="type">char</span>[] sArr=s.toCharArray();</span><br><span class="line"></span><br><span class="line">    List&lt;Character&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="type">int</span> count=arr.length;</span><br><span class="line">    <span class="type">int</span> sCount=<span class="number">0</span>;</span><br><span class="line">    String result=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;right&lt;sArr.length;right++)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(tempMap.containsKey(sArr[right]))&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> temp=tempMap.get(sArr[right]);</span><br><span class="line">            temp--;</span><br><span class="line">            <span class="keyword">if</span>(temp==<span class="number">0</span>)&#123;</span><br><span class="line">                tempMap.remove(sArr[right]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                tempMap.put(sArr[right],temp);</span><br><span class="line">            &#125;</span><br><span class="line">            sCount++;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(sArr[right]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(sCount==count)&#123;</span><br><span class="line">            max= max&gt;list.toString().length()? max: list.toString().length();</span><br><span class="line">            result= list.toString().length()&gt;=max? list.toString():result;</span><br><span class="line">            <span class="keyword">if</span>(tempMap.containsKey(sArr[left]))&#123;</span><br><span class="line">            </span><br><span class="line">                <span class="type">int</span> temp=tempMap.get(sArr[left]);</span><br><span class="line">                    tempMap.put(sArr[left],++temp);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    tempMap.put(sArr[left],<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            sCount--;</span><br><span class="line">            list.remove(left);</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-16"   >          <a href="#提交错误-16" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-16" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE: s:”ADOBECODEBANC” t:”ABC”,输出”[D, O, B, E, C, O, D, E, B, A]”。预期输出”BANC”</p>        <h5 id="原因-22"   >          <a href="#原因-22" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-22" class="headerlink" title="原因"></a>原因</h5>      <p>挺搞的一开始，我返回的是最长的字符串max&#x3D; max&gt;list.toString().length()? max: list.toString().length(); 其次输出的数组不是一个字符串所以我还要把这个数组变成字符串</p>        <h4 id="第二次代码-9"   >          <a href="#第二次代码-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-9" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">minWindow</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>((t==<span class="literal">null</span> &amp;&amp; <span class="string">&quot;&quot;</span>.equals(t))||(s==<span class="literal">null</span> &amp;&amp; <span class="string">&quot;&quot;</span>.equals(s)))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] arr=t.toCharArray();</span><br><span class="line">        Map&lt;Character,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Character,Integer&gt; tempMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> a:arr)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(a))&#123;</span><br><span class="line">                <span class="comment">//如果包含</span></span><br><span class="line">                <span class="type">int</span> count=map.get(a);</span><br><span class="line">                map.put(a,++count);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(a,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tempMap=map;</span><br><span class="line">        <span class="type">char</span>[] sArr=s.toCharArray();</span><br><span class="line"></span><br><span class="line">        List&lt;Character&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="type">int</span> count=arr.length;</span><br><span class="line">        <span class="type">int</span> sCount=<span class="number">0</span>;</span><br><span class="line">        String result=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(;right&lt;sArr.length;right++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(tempMap.containsKey(sArr[right]))&#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> temp=tempMap.get(sArr[right]);</span><br><span class="line">                temp--;</span><br><span class="line">                <span class="keyword">if</span>(temp==<span class="number">0</span>)&#123;</span><br><span class="line">                    tempMap.remove(sArr[right]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    tempMap.put(sArr[right],temp);</span><br><span class="line">                &#125;</span><br><span class="line">                sCount++;</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(sArr[right]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(sCount==count)&#123;</span><br><span class="line">                min=min&gt;list.toString().length()?list.toString().length():min;</span><br><span class="line">                result=list.toString().length()&lt;=min? Arrays.toString(list.toArray()) :result;</span><br><span class="line">                <span class="keyword">if</span>(tempMap.containsKey(sArr[left]))&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="type">int</span> temp=tempMap.get(sArr[left]);</span><br><span class="line">                    tempMap.put(sArr[left],++temp);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    tempMap.put(sArr[left],<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                sCount--;</span><br><span class="line">                list.remove(left);</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-6"   >          <a href="#提交失败-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-6" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE: s:”ADOBECODEBANC” t:”ABC”,输出”[A,D,O,B,E,C]”。预期输出”BANC”</p>        <h5 id="原因-23"   >          <a href="#原因-23" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-23" class="headerlink" title="原因"></a>原因</h5>      <p>1.我还是没有解决数组变成字符串的问题</p><p>2.因为下标移动的时候没有从A移动到B，那么导致了list中存在DOBE…. 每次只删除了一个元素</p>        <h4 id="第三次代码-8"   >          <a href="#第三次代码-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-8" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">minWindow</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>((t==<span class="literal">null</span> &amp;&amp; <span class="string">&quot;&quot;</span>.equals(t))||(s==<span class="literal">null</span> &amp;&amp; <span class="string">&quot;&quot;</span>.equals(s)))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] arr=t.toCharArray();</span><br><span class="line">        Map&lt;Character,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Character,Integer&gt; tempMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> a:arr)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(a))&#123;</span><br><span class="line">                <span class="comment">//如果包含</span></span><br><span class="line">                <span class="type">int</span> count=map.get(a);</span><br><span class="line">                map.put(a,++count);</span><br><span class="line">                tempMap.put(a,++count);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(a,<span class="number">1</span>);</span><br><span class="line">                tempMap.put(a,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] sArr=s.toCharArray();</span><br><span class="line"></span><br><span class="line">        LinkedList&lt;Character&gt; list=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> count=arr.length;</span><br><span class="line">        <span class="type">int</span> sCount=<span class="number">0</span>;</span><br><span class="line">        String result=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(;right&lt;sArr.length;right++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(sArr[right]))&#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> temp=map.get(sArr[right]);</span><br><span class="line">                temp--;</span><br><span class="line">                <span class="keyword">if</span>(temp==<span class="number">0</span>)&#123;</span><br><span class="line">                    tempMap.remove(sArr[right]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    tempMap.put(sArr[right],temp);</span><br><span class="line">                &#125;</span><br><span class="line">                sCount++;</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(sArr[right]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(sCount&gt;=count)&#123;</span><br><span class="line">                min=min&gt;list.toArray().length?list.toArray().length:min;</span><br><span class="line">                result=list.toArray().length&lt;=min? Arrays.toString(list.toArray()) :result;</span><br><span class="line">                <span class="keyword">while</span>(tempMap.size()&lt;=<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (map.containsKey(sArr[left])) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(tempMap.containsKey(sArr[left]))&#123;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> tempMap.get(sArr[left]);</span><br><span class="line">                            tempMap.put(sArr[left], ++temp);</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            tempMap.put(sArr[left], <span class="number">1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (tempMap.size() == <span class="number">2</span>) &#123;</span><br><span class="line">                        sCount--;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    list.removeFirst();</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-7"   >          <a href="#提交失败-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-7" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE: s:”ADOBECODEBANC” t:”ABC”,输出”[A,D,O,B,E,C]”。预期输出”BANC”</p>        <h5 id="原因-24"   >          <a href="#原因-24" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-24" class="headerlink" title="原因"></a>原因</h5>      <p>我没能找到正确的索引下标移动，我中期一度卡在删除list元素中，然后发现删除的顺序和我插入元素的顺序不太一样？我后面用了removeFirst方法来删除第一个元素</p>        <h4 id="第四次代码-4"   >          <a href="#第四次代码-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四次代码-4" class="headerlink" title="第四次代码"></a>第四次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">minWindow</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输入判断</span></span><br><span class="line">        <span class="keyword">if</span>(s==<span class="literal">null</span>||<span class="string">&quot;&quot;</span>.equals(s) ||t==<span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(t))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] sArr= s.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] tArr= t.toCharArray();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//利用一个哈希map来记录目标子串的种类以及每个种类出现的次数</span></span><br><span class="line">        HashMap&lt;Character,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : tArr)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(c))&#123;</span><br><span class="line">                <span class="comment">//如果是重复的字符 则添加个数</span></span><br><span class="line">                <span class="type">int</span> count=map.get(c);</span><br><span class="line">                map.put(c,++count);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//是第一次的字符则放入 Key=c ,Value=1</span></span><br><span class="line">                map.put(c,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用来记录一共有多少个目标子串</span></span><br><span class="line">        <span class="type">int</span> Type=map.size();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//滑动指针的双指针 </span></span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//用一个getCount来代表滑动窗口中已经有的种类个数</span></span><br><span class="line">        <span class="type">int</span> getCount=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//定义一个哈希map来承接出现的子串以及子串个数</span></span><br><span class="line">        HashMap&lt;Character,Integer&gt; hsmap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line">        String result=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> hscount=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;right&lt;sArr.length;right++)&#123;</span><br><span class="line">            <span class="comment">//判断当前字符是不是在对照表map中</span></span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(sArr[right]))&#123;</span><br><span class="line">                <span class="comment">//放入htmap中</span></span><br><span class="line">                <span class="keyword">if</span>(hsmap.containsKey(sArr[right]))&#123;</span><br><span class="line">                    <span class="comment">//如果有则更新个数</span></span><br><span class="line">                    <span class="type">int</span> count=hsmap.get(sArr[right]);</span><br><span class="line">                    hsmap.put(sArr[right],++count);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//没有则不更新htmap中个数，但是更新种类个数</span></span><br><span class="line">                    hsmap.put(sArr[right],<span class="number">1</span>);</span><br><span class="line">                    getCount++;</span><br><span class="line">                &#125;</span><br><span class="line">                hscount++;</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="keyword">while</span>(getCount==Type)&#123;</span><br><span class="line">                <span class="comment">//如果getCount==Type相等则说明滑动窗口已经覆盖了最小子串,移动左指针减去冗余个数</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果这个元素是在t表中有的判断是否有冗余出现</span></span><br><span class="line">                <span class="keyword">if</span>(hsmap.containsKey(sArr[left]))&#123;</span><br><span class="line">                    <span class="comment">//如果left索引位置的元素在hsmap中的个数大于map中的个数说明多于了</span></span><br><span class="line">                    <span class="type">int</span> count=hsmap.get(sArr[left]);</span><br><span class="line">                    <span class="keyword">if</span>(hsmap.get(sArr[left])&gt;map.get(sArr[left]))&#123;</span><br><span class="line">                        count--;</span><br><span class="line">                        hsmap.put(sArr[left],count);</span><br><span class="line">                        left++;</span><br><span class="line">                        hscount--;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(count==map.get(sArr[left])) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(hscount&gt;=tArr.length)&#123;</span><br><span class="line">                            min = min &gt; (right - left + <span class="number">1</span>) ? right - left + <span class="number">1</span> : min;</span><br><span class="line">                            result = min &gt;= (right - left + <span class="number">1</span>) ? s.substring(left, right + <span class="number">1</span>) : result;</span><br><span class="line">                            <span class="keyword">if</span>(count==<span class="number">1</span>)&#123;</span><br><span class="line">                                hsmap.remove(sArr[left]);</span><br><span class="line">                                getCount--;</span><br><span class="line">                                left++;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            count--;</span><br><span class="line">                            hsmap.put(sArr[left],count);</span><br><span class="line">                            hscount--;</span><br><span class="line">                            left++;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(count&lt;map.get(sArr[left]))&#123;</span><br><span class="line">                        <span class="comment">//说明不符合规定,应该移动右指针</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//反之不在要求中的数据</span></span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-17"   >          <a href="#提交错误-17" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-17" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE：s:”aaaaaaaaaaaabbbbbcdd” t:”abcdd” 输出abbbbbcd 预期输出abbbbbcdd</p>        <h5 id="原因-25"   >          <a href="#原因-25" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-25" class="headerlink" title="原因"></a>原因</h5>      <p>这里我还是看过视频之后写的，然后写了一两个小时改改停停还是改不出来，后面再看看其他用hashmap写的才知道自己哪里做错了</p><p>我这里Type就是当<strong>新的进来就直接认为是找到子串了实际上是不对的，要先类型有也要数量有</strong></p>        <h3 id="题解-3"   >          <a href="#题解-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3>      <p><strong>代码</strong></p><p>这里还是用了<strong>双指针</strong>的<strong>滑动窗口</strong>思想</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">minWindow</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="comment">//最小子串起始索引</span></span><br><span class="line">        <span class="type">int</span> start=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//最小子串长度</span></span><br><span class="line">        <span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//双指针</span></span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这是目标t中需要的字符串种类以及个数</span></span><br><span class="line">        Map&lt;Character,Integer&gt; needs=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//这是滑动窗口用的hsmap</span></span><br><span class="line">        Map&lt;Character,Integer&gt; windows=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历t数组给needs赋值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch:t.toCharArray())&#123;</span><br><span class="line">            needs.put(ch,needs.getOrDefault(ch,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用于记录符合个数且类型的个数</span></span><br><span class="line">        <span class="type">int</span> match=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//循环开始找子串</span></span><br><span class="line">        <span class="keyword">while</span>(right&lt;s.length())&#123;</span><br><span class="line">            <span class="comment">//先获取当前right位置的字符</span></span><br><span class="line">            <span class="type">char</span> c1=s.charAt(right);</span><br><span class="line">            <span class="comment">//判断needs中是否包含c1这个字符串,如果是说明是我们需要的</span></span><br><span class="line">            <span class="keyword">if</span>(needs.containsKey(c1))&#123;</span><br><span class="line">                <span class="comment">//needs中包含c1这个字符串</span></span><br><span class="line">                <span class="comment">//将其放入滑动窗口中 相同则累加个数</span></span><br><span class="line">                windows.put(c1,windows.getOrDefault(c1,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 判断滑动窗口中个数是否达到要求个数</span></span><br><span class="line">                <span class="keyword">if</span>(windows.get(c1).equals(needs.get(c1)))&#123;</span><br><span class="line">                    <span class="comment">//达到了则match++;</span></span><br><span class="line">                    match++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//右指针向右移动</span></span><br><span class="line">            right++;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 内循环用于滑动左指针 ,count等于needs.size说明每个都符合条件了</span></span><br><span class="line">            <span class="keyword">while</span>(match==needs.size())&#123;</span><br><span class="line">                <span class="comment">// //记录当前的字符串长度</span></span><br><span class="line">                <span class="comment">// min= min&gt;=(right-left) ? right-left : min;</span></span><br><span class="line">                <span class="comment">// //记录最小子串的起始位置</span></span><br><span class="line">                <span class="comment">// start=(right-left)&lt;=min? left:start;</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(right-left&lt;min)&#123;</span><br><span class="line">                    min=right-left;</span><br><span class="line">                    start=left;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//滑动左指针</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//先获取当前left对应的字符</span></span><br><span class="line">                <span class="type">char</span> c2=s.charAt(left);</span><br><span class="line">                <span class="comment">//判断这个字符串是不是needs中的</span></span><br><span class="line">                <span class="keyword">if</span>(needs.containsKey(c2))&#123;</span><br><span class="line">                    <span class="comment">//将滑动窗口中的子串向右移动</span></span><br><span class="line">                    windows.put(c2,windows.get(c2)-<span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//计数器--</span></span><br><span class="line">                    <span class="keyword">if</span>(windows.get(c2)&lt;needs.get(c2))&#123;</span><br><span class="line">                        match--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//左指针向右移动</span></span><br><span class="line">                left++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min==Integer.MAX_VALUE? <span class="string">&quot;&quot;</span>: s.substring(start,start+min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="总结-9"   >          <a href="#总结-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-9" class="headerlink" title="总结"></a>总结</h3>      <p>这个题不愧是hard难度我只能说，从第一波自己写写了快两小时但是还是频繁出错，然后看官方答案我看不懂但是大概知道了思路，然后我想用hashmap把它写出来 一写就勾八写了一个多小时还没做错了 大概测试用例还有40多道，然后我去b站看了好几个视频，有C++的有Go的还有Java的 总算是差不多把自己心中想的和看得懂的写出来了，这道题真得多练练，不练真不会做</p>        <h3 id="踩坑点"   >          <a href="#踩坑点" class="heading-link"><i class="fas fa-link"></i></a><a href="#踩坑点" class="headerlink" title="踩坑点"></a>踩坑点</h3>      <p>①这个match值应该是<strong>种类要相同并且个数相同</strong>才能++，我自己做就因为种类相同就认为找到了最小子串</p><p>②<strong>windows.get(c1).equals(needs.get(c1))<strong>，这里不能写成windos(get(c1))&#x3D;&#x3D;windos(get(c2))。因为这里get出来的值是Integet类型，底部有-128，127的缓存数组，但是超过这个返回会new一个对象，所以</strong>&#x3D;&#x3D;比较的时候会比较地址值而不是比较数值</strong>测试用例不通过，得用equals方法才能测试通过</p>        <h1 id="螺旋矩阵II"   >          <a href="#螺旋矩阵II" class="heading-link"><i class="fas fa-link"></i></a><a href="#螺旋矩阵II" class="headerlink" title="螺旋矩阵II"></a>螺旋矩阵II</h1>      <p>给定一个正整数 n，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。</p>        <h2 id="59-螺旋矩阵-II"   >          <a href="#59-螺旋矩阵-II" class="heading-link"><i class="fas fa-link"></i></a><a href="#59-螺旋矩阵-II" class="headerlink" title="59.螺旋矩阵 II"></a>59.螺旋矩阵 II</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/spiral-matrix-ii/" >leetCode.59题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>给定一个正整数 n，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。</p>        <h3 id="第一次做-13"   >          <a href="#第一次做-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-13" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;08</p>        <h4 id="第一次代码-13"   >          <a href="#第一次代码-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-13" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">public int[][] generateMatrix(int n) &#123;</span><br><span class="line">        int number=1;</span><br><span class="line"></span><br><span class="line">        int[][] arr=new int[n][n];</span><br><span class="line">        int iIndex=0;</span><br><span class="line">        int jIndex=0;</span><br><span class="line">        </span><br><span class="line">            for(int i=0,j=0;i&lt;n/2;)&#123;</span><br><span class="line">                    i=iIndex++;</span><br><span class="line">                    j=jIndex++;</span><br><span class="line">                FullArr(number,iIndex,jIndex,n,arr,i,j);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            if(n%2==1)&#123;</span><br><span class="line">                arr[iIndex][jIndex]=n*n;</span><br><span class="line">            &#125;</span><br><span class="line">        return arr;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    public void FullArr(int number,int iIndex,int jIndex,int n,int[][] arr,int i,int j)&#123;</span><br><span class="line">        //填完第一行</span><br><span class="line">            if(i==iIndex)&#123;</span><br><span class="line">                for(;j&lt;n-jIndex;j++)&#123;</span><br><span class="line">                    arr[i][j]=number++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //循环结束后i==0;j==n</span><br><span class="line">            if(j==n-jIndex)&#123;</span><br><span class="line">                for(;++i&lt;n-iIndex;)&#123;</span><br><span class="line">                    arr[i][j]=number++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //填完最后一列</span><br><span class="line">            //循环结束后i==j==n</span><br><span class="line">            if(i==n-iIndex)&#123;</span><br><span class="line">                j--;</span><br><span class="line">                for(;--j&gt;=jIndex;)&#123;</span><br><span class="line">                    arr[i-1][j]=number++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //填完最后一行</span><br><span class="line">            //循环结束后i==n,j==-1</span><br><span class="line">            if(j==jIndex)&#123;</span><br><span class="line">                i--;</span><br><span class="line">                for(;--i&gt;iIndex;)&#123;</span><br><span class="line">                    arr[i][jIndex]=number++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //循环完i==0,j==-1</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-8"   >          <a href="#提交失败-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-8" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：[[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">9</span>]]</span><br><span class="line">预期结果:[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>],[<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>]]</span><br></pre></td></tr></table></div></figure>        <h5 id="原因-26"   >          <a href="#原因-26" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-26" class="headerlink" title="原因"></a>原因</h5>      <p>填外圈的时候先进行了iIndex和jindex++导致没有填到数据 而且因为这是第一次写的逻辑可能有点乱。填完外圈有点找不到iIndex和jIndex指向哪里</p>        <h4 id="第二次代码-10"   >          <a href="#第二次代码-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-10" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span> number=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[][] arr=<span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="type">int</span> iIndex=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> jIndex=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;)&#123;</span><br><span class="line">                number=FullArr(number,iIndex,jIndex,n,arr,i,j);</span><br><span class="line">                    i= ++iIndex;</span><br><span class="line">                    j= ++jIndex;    </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                arr[iIndex][jIndex]=n*n;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">FullArr</span><span class="params">(<span class="type">int</span> number,<span class="type">int</span> iIndex,<span class="type">int</span> jIndex,<span class="type">int</span> n,<span class="type">int</span>[][] arr,<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="comment">//填完第一行</span></span><br><span class="line">            <span class="keyword">if</span>(i==iIndex)&#123;</span><br><span class="line">                <span class="keyword">for</span>(;j&lt;n-jIndex;j++)&#123;</span><br><span class="line">                    arr[i][j]=number++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//循环结束后i==0;j==n</span></span><br><span class="line">            <span class="keyword">if</span>(j==n-jIndex)&#123;</span><br><span class="line">                <span class="keyword">for</span>(;++i&lt;n-iIndex;)&#123;</span><br><span class="line">                    arr[i][j-<span class="number">1</span>]=number++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//填完最后一列</span></span><br><span class="line">            <span class="comment">//循环结束后i==j==n</span></span><br><span class="line">            <span class="keyword">if</span>(i==n-iIndex)&#123;</span><br><span class="line">                j--;</span><br><span class="line">                <span class="keyword">for</span>(;--j&gt;=jIndex;)&#123;</span><br><span class="line">                    arr[i-<span class="number">1</span>][j]=number++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//填完最后一行</span></span><br><span class="line">            <span class="comment">//循环结束后i==n,j==-1</span></span><br><span class="line">            <span class="keyword">if</span>(j==jIndex-<span class="number">1</span>)&#123;</span><br><span class="line">                i--;</span><br><span class="line">                <span class="keyword">for</span>(;--i&gt;iIndex;)&#123;</span><br><span class="line">                    arr[i][jIndex]=number++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//循环完i==0,j==-1</span></span><br><span class="line">            <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-11"   >          <a href="#提交成功-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-11" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-4"   >          <a href="#题解-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3>      <p>从视频说这道题其实不涉及到算法，它只是一个模拟的转圈的过程，我们要遵循一个边界处理的不变量，这样才不会导致饶进循环里绕晕</p><p><strong>边界处理</strong></p><p>边界处理如果是左闭右开区间 那么每一条边都应该是左闭右开区间 也即每一条边只给左节点赋值右节点交给下一条边赋值</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个变量用于赋值</span></span><br><span class="line">        <span class="type">int</span> number=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//定义startx和starty作为每次绕圈赋值的起始坐标</span></span><br><span class="line">        <span class="type">int</span> startx=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> starty=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个二维数组</span></span><br><span class="line">        <span class="type">int</span>[][] arr=<span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="comment">//定义一个变量用于维护边界处理的逻辑</span></span><br><span class="line">        <span class="type">int</span> offset=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//进行循环将圈赋值,循环结束条件由要转几圈来决定</span></span><br><span class="line">        <span class="comment">//如果n==3 则需要转一圈，n==4，则需要转两圈</span></span><br><span class="line">        <span class="comment">//如果n是奇数那么会留下中心的值没有赋值</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">            假设n==3 那么这个循环结束arr会是</span></span><br><span class="line"><span class="comment">            1 2 3</span></span><br><span class="line"><span class="comment">            8 0 4</span></span><br><span class="line"><span class="comment">            7 6 5</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> count=<span class="number">0</span>;count&lt;n/<span class="number">2</span>;count++)&#123;</span><br><span class="line">            <span class="type">int</span> i=startx;</span><br><span class="line">            <span class="type">int</span> j=starty;</span><br><span class="line">            <span class="comment">//处理第一条边(上边) 遵循左闭右开原则 那么范围应该是[startx,n-offset)</span></span><br><span class="line">            <span class="keyword">for</span>(;j&lt;n-offset;j++) arr[startx][j]=number++;</span><br><span class="line">            <span class="comment">//处理第二条边(右边)</span></span><br><span class="line">            <span class="keyword">for</span>(;i&lt;n-offset;i++) arr[i][j]=number++;</span><br><span class="line">            <span class="comment">//处理第三条边(下边)</span></span><br><span class="line">            <span class="keyword">for</span>(;j&gt;starty;j--) arr[i][j]=number++;</span><br><span class="line">            <span class="comment">//处理第四条边(左边)</span></span><br><span class="line">            <span class="keyword">for</span>(;i&gt;startx;i--) arr[i][starty]=number++;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//每条边都处理完了要给起始位置移动到下一圈的开头</span></span><br><span class="line">            startx++;</span><br><span class="line">            starty++;</span><br><span class="line">            <span class="comment">//移动边界处理的数 下一次要范围更小</span></span><br><span class="line">            offset++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断n是否是奇数</span></span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//给中心值赋值</span></span><br><span class="line">            arr[startx][starty]=number;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="总结-10"   >          <a href="#总结-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-10" class="headerlink" title="总结"></a>总结</h3>      <p>这道题要耐着性子做，不能急 他主要就是一个模仿转圈的一个过程，我们只要做好边界处理，遵循一个相同的边界处理逻辑就不容易搞错</p><p>总之这道题还是不难的主要是一个逻辑的问题</p>        <h2 id="54-螺旋矩阵"   >          <a href="#54-螺旋矩阵" class="heading-link"><i class="fas fa-link"></i></a><a href="#54-螺旋矩阵" class="headerlink" title="54.螺旋矩阵"></a>54.螺旋矩阵</h2>      <p>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/spiral-matrix/" >Leetcode.54题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-14"   >          <a href="#第一次做-14" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-14" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;09</p>        <h4 id="第一次代码-14"   >          <a href="#第一次代码-14" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-14" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">spiralOrder</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先获取二维数组的M和N</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> m=matrix.length;</span><br><span class="line">        <span class="type">int</span> n=matrix[<span class="number">0</span>].length;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> min= m&lt;=n? m:n;</span><br><span class="line">        <span class="comment">//定义一维数组用于返回数据</span></span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义每一次循环的起始点</span></span><br><span class="line">        <span class="type">int</span> startx=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> starty=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> offset=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// int number=0;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(count&lt;min/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="type">int</span> i=startx;</span><br><span class="line">            <span class="type">int</span> j=starty;</span><br><span class="line">            <span class="comment">//遍历第一条边 左闭右开</span></span><br><span class="line">            <span class="keyword">for</span>(;j&lt;n-offset;j++)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历第二条边</span></span><br><span class="line">            <span class="keyword">for</span>(;i&lt;m-offset;i++)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历第三条边</span></span><br><span class="line">            <span class="keyword">for</span>(;j&gt;starty;j--)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历第四条边</span></span><br><span class="line">            <span class="keyword">for</span>(;i&gt;startx;i--)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历完了 偏移量和下一次起始位置++</span></span><br><span class="line">            offset++;</span><br><span class="line">            startx++;</span><br><span class="line">            starty++;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历结束如果m&lt;n则会有一条边未填入到数据中</span></span><br><span class="line">        <span class="keyword">if</span>(m&lt;n)&#123;</span><br><span class="line">            <span class="type">int</span> i=startx;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=starty;j&lt;=n-offset;j++)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m&gt;n)&#123;</span><br><span class="line">            <span class="comment">//如果m&gt;n会有一列没有遍历</span></span><br><span class="line">            <span class="type">int</span> i=startx;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=starty;i&lt;=m-offset;i++)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m==n&amp;&amp; m%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            list.add(matrix[startx][starty]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-9"   >          <a href="#提交失败-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-9" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE：输入[[2,5],[8,4],[0,-1]]  输出[2,5,4,-1,0,8,4] 预期输出[2,5,4,-1,0,8]</p>        <h5 id="原因-27"   >          <a href="#原因-27" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-27" class="headerlink" title="原因"></a>原因</h5>      <p>无论如何如果二维数组个的i或者j为2的时候只要做一次循环就把数据添加完了而不用后面再做添加数据的判断</p><p>同时这还出现一个问题就是m&#x3D;&#x3D;1 || n&#x3D;&#x3D;1 以及 m&#x3D;&#x3D;n &amp;&amp; m&#x3D;&#x3D;1的情况</p>        <h4 id="第二次代码-11"   >          <a href="#第二次代码-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-11" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">spiralOrder</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">      <span class="comment">//先获取二维数组的M和N</span></span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> m=matrix.length;</span><br><span class="line">      <span class="type">int</span> n=matrix[<span class="number">0</span>].length;</span><br><span class="line">      <span class="keyword">if</span>(m==n&amp;&amp; m==<span class="number">1</span>)&#123;</span><br><span class="line">          List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">          list.add(matrix[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">          <span class="keyword">return</span> list;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="type">int</span> min= m&lt;=n? m:n;</span><br><span class="line">      <span class="comment">//定义一维数组用于返回数据</span></span><br><span class="line">      <span class="comment">// int[] result=new int[m*n];</span></span><br><span class="line">      List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//定义每一次循环的起始点</span></span><br><span class="line">      <span class="type">int</span> startx=<span class="number">0</span>;</span><br><span class="line">      <span class="type">int</span> starty=<span class="number">0</span>;</span><br><span class="line">      <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> offset=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// int number=0;</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(count&lt;min/<span class="number">2</span>)&#123;</span><br><span class="line">          <span class="type">int</span> i=startx;</span><br><span class="line">          <span class="type">int</span> j=starty;</span><br><span class="line">          <span class="comment">//遍历第一条边 左闭右开</span></span><br><span class="line">          <span class="keyword">for</span>(;j&lt;n-offset;j++)&#123;</span><br><span class="line">              <span class="comment">// result[number++]=matrix[i][j];</span></span><br><span class="line">              list.add(matrix[i][j]);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//遍历第二条边</span></span><br><span class="line">          <span class="keyword">for</span>(;i&lt;m-offset;i++)&#123;</span><br><span class="line">              <span class="comment">// result[number++]=matrix[i][j];</span></span><br><span class="line">              list.add(matrix[i][j]);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//遍历第三条边</span></span><br><span class="line">          <span class="keyword">for</span>(;j&gt;starty;j--)&#123;</span><br><span class="line">              <span class="comment">// result[number++]=matrix[i][j];</span></span><br><span class="line">              list.add(matrix[i][j]);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//遍历第四条边</span></span><br><span class="line">          <span class="keyword">for</span>(;i&gt;startx;i--)&#123;</span><br><span class="line">              <span class="comment">// result[number++]=matrix[i][j];</span></span><br><span class="line">              list.add(matrix[i][j]);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//遍历完了 偏移量和下一次起始位置++</span></span><br><span class="line">          offset++;</span><br><span class="line">          startx++;</span><br><span class="line">          starty++;</span><br><span class="line">          count++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(m==<span class="number">1</span>)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">              list.add(matrix[<span class="number">0</span>][i]);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">              list.add(matrix[i][<span class="number">0</span>]);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(m&lt;=<span class="number">2</span>||n&lt;=<span class="number">2</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> list;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//遍历结束如果m&lt;n则会有一条边未填入到数据中</span></span><br><span class="line">      <span class="keyword">if</span>(m&lt;n)&#123;</span><br><span class="line">          <span class="type">int</span> i=startx;</span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> j=starty;j&lt;=n-offset;j++)&#123;</span><br><span class="line">              <span class="comment">// result[number++]=matrix[i][j];</span></span><br><span class="line">              list.add(matrix[i][j]);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m&gt;n)&#123;</span><br><span class="line">          <span class="comment">//如果m&gt;n会有一列没有遍历</span></span><br><span class="line">          <span class="type">int</span> i=startx;</span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> j=starty;i&lt;=m-offset;i++)&#123;</span><br><span class="line">              <span class="comment">// result[number++]=matrix[i][j];</span></span><br><span class="line">              list.add(matrix[i][j]);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m==n&amp;&amp; min%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">          list.add(matrix[startx][starty]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-10"   >          <a href="#提交失败-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-10" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:输入[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16],[17,18,19,20]]</p><p>​  输出[1,2,3,4,8,12,16,20,19,18,17,13,9,5,6,7,11,15,14,10,11]</p><p>  预期输出[[1,2,3,4,8,12,16,20,19,18,17,13,9,5,6,7,11,15,14,10]]</p>        <h5 id="原因-28"   >          <a href="#原因-28" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-28" class="headerlink" title="原因"></a>原因</h5>      <p>我太自以为是了，实际上这个两层循环结束数据就已经添加成功了，我决定修改最后再添加数据的逻辑</p><p>如果m！&#x3D;n &amp;&amp;min %2&#x3D;&#x3D;1 也就是一定有个奇数</p><p>如果m&#x3D;&#x3D;min 那么就说明循环结束还有一行数据没有添加</p><p>如果n&#x3D;&#x3D;min 那么久说明循环结束还有一列数据没有添加</p><p>如果m&#x3D;&#x3D;n &amp;&amp;min%2&#x3D;&#x3D;1 那么就说明循环结束最中间的数据没有添加进list中</p>        <h4 id="第三次代码-9"   >          <a href="#第三次代码-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-9" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">spiralOrder</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="comment">//先获取二维数组的M和N</span></span><br><span class="line">        <span class="type">int</span> m=matrix.length;</span><br><span class="line">        <span class="type">int</span> n=matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span>(m==n&amp;&amp; m==<span class="number">1</span>)&#123;</span><br><span class="line">            List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            list.add(matrix[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> min= m&lt;=n? m:n;</span><br><span class="line">        <span class="comment">//定义一维数组用于返回数据</span></span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义每一次循环的起始点</span></span><br><span class="line">        <span class="type">int</span> startx=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> starty=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> offset=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(count&lt;min/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="type">int</span> i=startx;</span><br><span class="line">            <span class="type">int</span> j=starty;</span><br><span class="line">            <span class="comment">//遍历第一条边 左闭右开</span></span><br><span class="line">            <span class="keyword">for</span>(;j&lt;n-offset;j++)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历第二条边</span></span><br><span class="line">            <span class="keyword">for</span>(;i&lt;m-offset;i++)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历第三条边</span></span><br><span class="line">            <span class="keyword">for</span>(;j&gt;starty;j--)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历第四条边</span></span><br><span class="line">            <span class="keyword">for</span>(;i&gt;startx;i--)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历完了 偏移量和下一次起始位置++</span></span><br><span class="line">            offset++;</span><br><span class="line">            startx++;</span><br><span class="line">            starty++;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(m==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                list.add(matrix[<span class="number">0</span>][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">                list.add(matrix[i][<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(m&lt;=<span class="number">2</span>||n&lt;=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历结束如果m&lt;n则会有一条边未填入到数据中</span></span><br><span class="line">        <span class="keyword">if</span>(m!=n&amp;&amp;min==m&amp;&amp;min%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> i=startx;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=starty;j&lt;=n-offset;j++)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m!=n&amp;&amp;min==n&amp;&amp;min%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//如果m&gt;n会有一列没有遍历</span></span><br><span class="line">            <span class="type">int</span> i=startx;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=starty;i&lt;=m-offset;i++)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m==n&amp;&amp; min%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            list.add(matrix[startx][starty]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-12"   >          <a href="#提交成功-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-12" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="总结-11"   >          <a href="#总结-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-11" class="headerlink" title="总结"></a>总结</h3>      <p>这道题仍然是一个模拟转圈的过程，但是这个返回数据的时候和添加的数据的时候要注意</p><p>①如果m&#x3D;&#x3D;n &amp;&amp; m&#x3D;&#x3D;1那么就说明这个数组只有matrix[0][0]这个数据 把这个数据添加到list中返回即可</p><p>②如果m!&#x3D;n &amp;&amp;m&#x3D;&#x3D;1||n&#x3D;&#x3D;1 那么就说明是一行数据或者是一列数据 ,那么是无法进入循环中遍历外层数组的，那么直接把这一行或者这一列数据取出来即可 </p><p>③循环结束再进行是否有遗漏数据的判断</p><p>④如果m！&#x3D;n &amp;&amp;min %2&#x3D;&#x3D;1 也就是m和n一定有个奇数 </p><pre><code> -4.1 如果m==min 那么就说明循环结束还有一行数据没有添加</code></pre><p>​ -4.2 如果n&#x3D;&#x3D;min 那么久说明循环结束还有一列数据没有添加</p><p>⑤如果m&#x3D;&#x3D;n &amp;&amp;min%2&#x3D;&#x3D;1 那么就说明循环结束最中间的数据没有添加进list中</p><p>⑥如果m!&#x3D;n &amp;&amp; min%2&#x3D;&#x3D;0 那么说明最小的那位保证了循环一定能遍历完整个数组 </p><p>只要慢慢做就行了这道题 不要急一点点补全条件即可</p>        <h1 id="剑指Offer-29-顺时针打印矩阵"   >          <a href="#剑指Offer-29-顺时针打印矩阵" class="heading-link"><i class="fas fa-link"></i></a><a href="#剑指Offer-29-顺时针打印矩阵" class="headerlink" title="剑指Offer 29.顺时针打印矩阵"></a>剑指Offer 29.顺时针打印矩阵</h1>      <p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/" >剑指 Offer 29(easy). 顺时针打印矩阵</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-15"   >          <a href="#第一次做-15" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-15" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;8&#x2F;9</p>        <h4 id="第一次代码-15"   >          <a href="#第一次代码-15" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-15" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] spiralOrder(<span class="type">int</span>[][] matrix) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取矩阵M和N</span></span><br><span class="line">            <span class="type">int</span> m=matrix.length;</span><br><span class="line">            <span class="type">int</span> n=matrix[<span class="number">0</span>].length;</span><br><span class="line">            <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[m*n];</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> min=m&lt;n?m:n;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">            <span class="comment">//偏移量</span></span><br><span class="line">            <span class="type">int</span> offset=<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> startx=<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> starty=<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> number=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(count&lt;min/<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="type">int</span> i=startx;</span><br><span class="line">                <span class="type">int</span> j=starty;</span><br><span class="line">                <span class="comment">//第一条边</span></span><br><span class="line">                <span class="keyword">for</span>(;j&lt;n-offset;j++) arr[number++]=matrix[i][j];</span><br><span class="line">                <span class="comment">//第二条边</span></span><br><span class="line">                <span class="keyword">for</span>(;i&lt;m-offset;i++) arr[number++]=matrix[i][j];</span><br><span class="line">                <span class="comment">// 第三条边</span></span><br><span class="line">                <span class="keyword">for</span>(;j&gt;starty;j--) arr[number++]=matrix[i][j];</span><br><span class="line">                <span class="comment">// 第四条边</span></span><br><span class="line">                <span class="keyword">for</span>(;i&gt;startx;i--) arr[number++]=matrix[i][j];</span><br><span class="line"></span><br><span class="line">                offset++;</span><br><span class="line">                count++;</span><br><span class="line">                startx++;</span><br><span class="line">                starty++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//说明只有一个元素 不能进入循环中</span></span><br><span class="line">            <span class="keyword">if</span>(m==n&amp;&amp;m==<span class="number">1</span>)&#123;</span><br><span class="line">                arr[number++]=matrix[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">return</span> arr;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(m==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//m==1说明只有一行数据</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++) arr[number++]=matrix[<span class="number">0</span>][j];</span><br><span class="line">                <span class="keyword">return</span> arr;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">// n==1说明只有一列数据</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++) arr[number++]=matrix[i][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">return</span> arr;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(min%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//那么说明一定有个参数是奇数边</span></span><br><span class="line">                <span class="keyword">if</span>(m==n)&#123;</span><br><span class="line">                    <span class="comment">//那么最后一定剩下一个元素没有添加</span></span><br><span class="line">                    arr[number++]=matrix[startx][starty];</span><br><span class="line">                    <span class="keyword">return</span> arr;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(m==min)&#123;</span><br><span class="line">                    <span class="comment">//那么说明一定有一行数据没有添加进去</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> j=starty;j&lt;=n-offset;j++)&#123;</span><br><span class="line">                        arr[number++]=matrix[startx][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(n==min)&#123;</span><br><span class="line">                    <span class="comment">//那么说明有一列数据没加</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> i=startx;i&lt;=m-offset;i++)&#123;</span><br><span class="line">                        arr[number++]=matrix[i][starty];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-11"   >          <a href="#提交失败-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-11" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE: 输入[] 抛出异常Index 0 out of bounds for length 0</p>        <h5 id="原因-29"   >          <a href="#原因-29" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-29" class="headerlink" title="原因"></a>原因</h5>      <p>如果matrix&#x3D;&#x3D;[];那么则在获取n的时候会出错因为没有matrix[0]这个数组</p>        <h4 id="第二次代码-12"   >          <a href="#第二次代码-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-12" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] spiralOrder(<span class="type">int</span>[][] matrix) &#123;</span><br><span class="line">           <span class="keyword">if</span>(matrix.length==<span class="number">0</span>)&#123;</span><br><span class="line">               <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//获取矩阵M和N</span></span><br><span class="line">           <span class="type">int</span> m=matrix.length;</span><br><span class="line">           <span class="type">int</span> n=matrix[<span class="number">0</span>].length;</span><br><span class="line">           <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[m*n];</span><br><span class="line"></span><br><span class="line">           <span class="type">int</span> min=m&lt;n?m:n;</span><br><span class="line"></span><br><span class="line">           <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">           <span class="comment">//偏移量</span></span><br><span class="line">           <span class="type">int</span> offset=<span class="number">1</span>;</span><br><span class="line">           <span class="type">int</span> startx=<span class="number">0</span>;</span><br><span class="line">           <span class="type">int</span> starty=<span class="number">0</span>;</span><br><span class="line">           <span class="type">int</span> number=<span class="number">0</span>;</span><br><span class="line">           <span class="keyword">while</span>(count&lt;min/<span class="number">2</span>)&#123;</span><br><span class="line">               <span class="type">int</span> i=startx;</span><br><span class="line">               <span class="type">int</span> j=starty;</span><br><span class="line">               <span class="comment">//第一条边</span></span><br><span class="line">               <span class="keyword">for</span>(;j&lt;n-offset;j++) arr[number++]=matrix[i][j];</span><br><span class="line">               <span class="comment">//第二条边</span></span><br><span class="line">               <span class="keyword">for</span>(;i&lt;m-offset;i++) arr[number++]=matrix[i][j];</span><br><span class="line">               <span class="comment">// 第三条边</span></span><br><span class="line">               <span class="keyword">for</span>(;j&gt;starty;j--) arr[number++]=matrix[i][j];</span><br><span class="line">               <span class="comment">// 第四条边</span></span><br><span class="line">               <span class="keyword">for</span>(;i&gt;startx;i--) arr[number++]=matrix[i][j];</span><br><span class="line"></span><br><span class="line">               offset++;</span><br><span class="line">               count++;</span><br><span class="line">               startx++;</span><br><span class="line">               starty++;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//说明只有一个元素 不能进入循环中</span></span><br><span class="line">           <span class="keyword">if</span>(m==n&amp;&amp;m==<span class="number">1</span>)&#123;</span><br><span class="line">               arr[number++]=matrix[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span>(m==<span class="number">1</span>)&#123;</span><br><span class="line">               <span class="comment">//m==1说明只有一行数据</span></span><br><span class="line">               <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++) arr[number++]=matrix[<span class="number">0</span>][j];</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">               <span class="comment">// n==1说明只有一列数据</span></span><br><span class="line">               <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++) arr[number++]=matrix[i][<span class="number">0</span>];</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span>(min%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">               <span class="comment">//那么说明一定有个参数是奇数边</span></span><br><span class="line">               <span class="keyword">if</span>(m==n)&#123;</span><br><span class="line">                   <span class="comment">//那么最后一定剩下一个元素没有添加</span></span><br><span class="line">                   arr[number++]=matrix[startx][starty];</span><br><span class="line">                   <span class="keyword">return</span> arr;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span>(m==min)&#123;</span><br><span class="line">                   <span class="comment">//那么说明一定有一行数据没有添加进去</span></span><br><span class="line">                   <span class="keyword">for</span>(<span class="type">int</span> j=starty;j&lt;=n-offset;j++)&#123;</span><br><span class="line">                       arr[number++]=matrix[startx][j];</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span>(n==min)&#123;</span><br><span class="line">                   <span class="comment">//那么说明有一列数据没加</span></span><br><span class="line">                   <span class="keyword">for</span>(<span class="type">int</span> i=startx;i&lt;=m-offset;i++)&#123;</span><br><span class="line">                       arr[number++]=matrix[i][starty];</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> arr;</span><br><span class="line">           </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-13"   >          <a href="#提交成功-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-13" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="总结-12"   >          <a href="#总结-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-12" class="headerlink" title="总结"></a>总结</h3>      <p>这道题和54题有异曲同工之处，都是循环求出M*N的二维数组的顺时针顺序</p><p>我们只要模拟转圈就可以了</p><p><strong>掉坑点</strong></p><p>当martix&#x3D;{[]}时候，当求取n值的手会抛出索引越界异常</p>        <h1 id="总结-13"   >          <a href="#总结-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-13" class="headerlink" title="总结"></a>总结</h1>      <p>算法-数组篇已经告一段落，我们从数组这一篇学到了<strong>二分查找</strong>、<strong>双指针思想</strong>、<strong>滑动窗口思想</strong>、<strong>模拟转圈</strong></p><p>这一篇章已经到此结束了 ，我们要进入第二篇-链表篇开始学习</p><p>、</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入剖析并发编程-JUC篇[3-CAS、Unsafe、LockSupport、ThreadLocal]</title>
      <link href="/2023/08/04/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-JUC%E7%AF%87%5B3-CAS%E3%80%81Unsafe%E3%80%81ThreadLocal%5D/"/>
      <url>/2023/08/04/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-JUC%E7%AF%87%5B3-CAS%E3%80%81Unsafe%E3%80%81ThreadLocal%5D/</url>
      
        <content type="html"><![CDATA[<p><strong>CAS机制原理、Unsafe魔法类、LockSupport工具类、ThreadLocal线程变量</strong></p><hr><ul><li>第一篇是JUC并发编程基础</li><li>第二篇是JMM、Volatile关键字、synchronize锁详解</li><li>第三篇是CAS机制原理、Unsafe魔法类、LockSupport工具类、ThreadLocal线程变量</li></ul><hr>        <h1 id="CAS机制"   >          <a href="#CAS机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#CAS机制" class="headerlink" title="CAS机制"></a>CAS机制</h1>      <p>CAS也就是Compare And Swap  也即比较并且交换</p><p>乐观锁也常常用于CAS来实现，在并发量不高的时候用CAS可以减少锁的开销</p><p>而CAS是怎么实现的呢?</p>        <h2 id="CAS原理"   >          <a href="#CAS原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#CAS原理" class="headerlink" title="CAS原理"></a>CAS原理</h2>      <p>CAS也就是比较并交换</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAS(V,E,N)</span><br></pre></td></tr></table></div></figure><p>V:要比较的内存地址值</p><p>E:要比较的值</p><p>N:要替换的新值</p><p>如果内存地址中的值和要比较的值相同则说明没有其他线程修改，则更新为新值</p><p>如果内存地址中的值和要比较的值不同则说明这个更新操作失败，不更新</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-JUC%E7%AF%87%5B3-CAS%E3%80%81Unsafe%E3%80%81ThreadLocal%5D/image-20230808230456151.png"  alt="CAS原理">      </p><p>而我们要好奇一点 这个比较和交换这个过程难道不会出现问题吗？</p><p>而CAS最底层是通过cmpxchg指令来进行操作，说明<strong>这个CAS过程是一个原子性的过程</strong></p>        <h2 id="CAS实现"   >          <a href="#CAS实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#CAS实现" class="headerlink" title="CAS实现"></a>CAS实现</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> <span class="title">Atomic::cmpxchg</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> exchange_value,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="keyword">volatile</span> <span class="type">unsigned</span> <span class="type">int</span>* dest, <span class="type">unsigned</span> <span class="type">int</span> compare_value)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">assert</span>(<span class="built_in">sizeof</span>(<span class="type">unsigned</span> <span class="type">int</span>) == <span class="built_in">sizeof</span>(jint), <span class="string">&quot;more work to do&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)Atomic::<span class="built_in">cmpxchg</span>((jint)exchange_value, (<span class="keyword">volatile</span> jint*)dest,</span><br><span class="line">                                       (jint)compare_value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>底层操作</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> jint     <span class="title">Atomic::cmpxchg</span>    <span class="params">(jint exchange_value, <span class="keyword">volatile</span> jint* dest, jint compare_value)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入参数：</span></span><br><span class="line"><span class="comment">  参数1：新值</span></span><br><span class="line"><span class="comment">  参数2：目标地址值</span></span><br><span class="line"><span class="comment">  参数3：比较值(旧值)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="comment">//获取当前对象是不是一个volatile修饰</span></span><br><span class="line">  <span class="type">int</span> mp = os::<span class="built_in">is_MP</span>();</span><br><span class="line">   <span class="comment">//LOCK_IF_MP(%4) 如果当前对象是volatile修饰则加lock前缀锁住总线 </span></span><br><span class="line">  <span class="function">__asm__ <span class="title">volatile</span> <span class="params">(LOCK_IF_MP(%<span class="number">4</span>) <span class="string">&quot;cmpxchgl %1,(%3)&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">                    : <span class="string">&quot;=a&quot;</span> (exchange_value)</span></span></span><br><span class="line"><span class="params"><span class="function">                    : <span class="string">&quot;r&quot;</span> (exchange_value), <span class="string">&quot;a&quot;</span> (compare_value), <span class="string">&quot;r&quot;</span> (dest), <span class="string">&quot;r&quot;</span> (mp)</span></span></span><br><span class="line"><span class="params"><span class="function">                    : <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;memory&quot;</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这个&quot;cmpchgl %1,(%3)&quot;中的占位符是下面语句中的</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     : &quot;=a&quot; (exchange_value) //0</span></span><br><span class="line"><span class="comment">         : &quot;r&quot; (exchange_value)  //1, &quot;a&quot; (compare_value) //2, &quot;r&quot; (dest) //3, &quot;r&quot; (mp)//4</span></span><br><span class="line"><span class="comment">         </span></span><br><span class="line"><span class="comment">        指令获取2 compare_value和 3 dest中的数据进行一个比较</span></span><br><span class="line"><span class="comment">        然后相等则将旧值写入到exchange_value中  返回旧值</span></span><br><span class="line"><span class="comment">        如果不相等则将新值返回</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="keyword">return</span> exchange_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="底层实现图"   >          <a href="#底层实现图" class="heading-link"><i class="fas fa-link"></i></a><a href="#底层实现图" class="headerlink" title="底层实现图"></a>底层实现图</h2>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-JUC%E7%AF%87%5B3-CAS%E3%80%81Unsafe%E3%80%81ThreadLocal%5D/image-20230808232026250.png"  alt="CAS底层实现图">      </p><p><strong>CAS机制带来的问题</strong></p><p>CAS机制带来了一种乐观锁的思想，而这个机制的也引入了一些问题</p>        <h2 id="ABA问题"   >          <a href="#ABA问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h2>      <p>假设有两个线程竞争同一个资源 k1&#x3D;1，使用CAS机制</p><p>线程T1获取了k1&#x3D;1，然后进行逻辑处理之后要将k1更新成100</p><p>线程T2也同时获取了k1&#x3D;1,然后线程T2先将 k1设置为2然后再设置为 1</p><p>当线程T1要进行更新操作的时候线程T2已经完成了一系列操作，它认为没有修改数据 这就是常说的ABA问题</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-JUC%E7%AF%87%5B3-CAS%E3%80%81Unsafe%E3%80%81ThreadLocal%5D/image-20230808233350287.png"  alt="ABA问题图">      </p><p><strong>解决方案</strong></p><p>ABA问题的解决方案是使用版本号，当修改操作的时候会将版本更新，CAS的同时也要判断版本号是否相同</p>        <h2 id="循环开销问题"   >          <a href="#循环开销问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#循环开销问题" class="headerlink" title="循环开销问题"></a>循环开销问题</h2>      <p>由上面分析可得，CAS实现的过程中并<strong>没有涉及到循环</strong>的过程，而这个循环开销问题又是从何而来呢？</p><p>通常是<strong>我们</strong>进行业务逻辑的时候进行的一个<strong>更新失败自旋</strong>的操作</p><p>而CAS本身并不会带来循环开销的问题</p>        <h1 id="Unsafe魔法类"   >          <a href="#Unsafe魔法类" class="heading-link"><i class="fas fa-link"></i></a><a href="#Unsafe魔法类" class="headerlink" title="Unsafe魔法类"></a>Unsafe魔法类</h1>      <p>Unsafe类位于sun.misc包下，这类似于C的指针一样可以操控内存，而我们通常是通过JVM来进行一个申请内存，而这个类能直接操控内存就意味着它能绕开JVM管理，这也是实质上的不安全</p><ul><li>调用这个类不受JVM管理，也就是不能被GC必须要和C一样自己申请内存空间、自己释放空间，如果操作不当很容易造成内存泄漏</li><li>这个类很多方法需要提供offset偏移量，目标地址，偏移量要通过自己计算，操作不当可能会导致JVM崩溃，导致整个程序崩溃</li></ul>        <h2 id="构造方法"   >          <a href="#构造方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">Unsafe</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//私有化构造方法，说明我们不能直接new出这个对象</span></span><br></pre></td></tr></table></div></figure>        <h2 id="内存操作"   >          <a href="#内存操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#内存操作" class="headerlink" title="内存操作"></a>内存操作</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//申请内存空间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">allocateMemory</span><span class="params">(<span class="type">long</span> var1)</span>;</span><br><span class="line"><span class="comment">//申请重新分配内存空间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">reallocateMemory</span><span class="params">(<span class="type">long</span> var1, <span class="type">long</span> var3)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...这里省略了一些方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放内存空间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">freeMemory</span><span class="params">(<span class="type">long</span> var1)</span>;</span><br></pre></td></tr></table></div></figure>        <h2 id="屏障操作"   >          <a href="#屏障操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#屏障操作" class="headerlink" title="屏障操作"></a>屏障操作</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读屏障</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">loadFence</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//写屏障</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">storeFence</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//全屏障</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">fullFence</span><span class="params">()</span>;</span><br></pre></td></tr></table></div></figure>        <h2 id="CAS操作"   >          <a href="#CAS操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#CAS操作" class="headerlink" title="CAS操作"></a>CAS操作</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CAS操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">compareAndSwapObject</span><span class="params">(Object var1, <span class="type">long</span> var2, Object var4, Object var5)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">compareAndSwapInt</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">int</span> var4, <span class="type">int</span> var5)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">compareAndSwapLong</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">long</span> var4, <span class="type">long</span> var6)</span>;</span><br></pre></td></tr></table></div></figure>        <h2 id="阻塞线程-park方法"   >          <a href="#阻塞线程-park方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#阻塞线程-park方法" class="headerlink" title="阻塞线程(park方法)"></a>阻塞线程(park方法)</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//阻塞线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">park</span><span class="params">(<span class="type">boolean</span> var1, <span class="type">long</span> var2)</span>;</span><br></pre></td></tr></table></div></figure>        <h2 id="唤醒线程-unpark方法"   >          <a href="#唤醒线程-unpark方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#唤醒线程-unpark方法" class="headerlink" title="唤醒线程(unpark方法)"></a>唤醒线程(unpark方法)</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//唤醒线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">unpark</span><span class="params">(Object var1)</span>;</span><br></pre></td></tr></table></div></figure>        <h2 id="获取unsafe对象-反射"   >          <a href="#获取unsafe对象-反射" class="heading-link"><i class="fas fa-link"></i></a><a href="#获取unsafe对象-反射" class="headerlink" title="获取unsafe对象(反射)"></a>获取unsafe对象(反射)</h2>      <p><strong>代码说话</strong></p><p><strong>①错误方式</strong></p><p>1、试试直接new Unsafe对象</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Unsafe unsafe=<span class="keyword">new</span> <span class="title class_">Unsafe</span>();</span><br><span class="line"><span class="comment">//编译报错，因为构造方法是private修饰，不能直接new对象</span></span><br></pre></td></tr></table></div></figure><p>因为构造方法私有，所以我们不能直接new一个unsafe类来使用，那么我们又要用到unsafe类要怎么获取呢？</p><p>2、试试用Unsafe.getUnsafe()</p><p>我们发现有一个getUnsafe方法，那我们试试能不能直接通过这个方法来获取对象呢?</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> Unsafe.getUnsafe();</span><br><span class="line">        System.out.println(unsafe);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p><strong>结果</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.SecurityException: Unsafe</span><br></pre></td></tr></table></div></figure><p>这里抛出了一个异常unsafe，那提供了这个方法又有什么用呢？我们跟进源码看看</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title function_">getUnsafe</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">var0</span> <span class="operator">=</span> Reflection.getCallerClass();</span><br><span class="line">        <span class="comment">//判断是不是VM调用这个方法</span></span><br><span class="line">        <span class="keyword">if</span> (!VM.isSystemDomainLoader(var0.getClassLoader())) &#123;</span><br><span class="line">            <span class="comment">//不是虚拟机调用这个方法会抛出异常 异常信息为unsafe</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;Unsafe&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> theUnsafe;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p><strong>②正确方式</strong></p>        <h3 id="通过内部静态成员theUnsafe变量获取"   >          <a href="#通过内部静态成员theUnsafe变量获取" class="heading-link"><i class="fas fa-link"></i></a><a href="#通过内部静态成员theUnsafe变量获取" class="headerlink" title="通过内部静态成员theUnsafe变量获取"></a>通过内部静态成员theUnsafe变量获取</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个成员变量用来接收unsafe对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Unsafe unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field field= Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">            <span class="comment">//修改权限</span></span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            </span><br><span class="line">            unsafe = (Unsafe) field.get(<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(unsafe);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>打印结果</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sun.misc.Unsafe@3b9a45b3</span><br></pre></td></tr></table></div></figure><p>有值则说明获取了这个unsafe对象</p>        <h3 id="通过反射直接new一个unsafe对象"   >          <a href="#通过反射直接new一个unsafe对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#通过反射直接new一个unsafe对象" class="headerlink" title="通过反射直接new一个unsafe对象"></a>通过反射直接new一个unsafe对象</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个成员变量用来接收unsafe对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Unsafe unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Constructor&lt;Unsafe&gt; constructor = Unsafe.class.getDeclaredConstructor();</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            unsafe = constructor.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(unsafe);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>打印结果</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sun.misc.Unsafe@3b9a45b3</span><br></pre></td></tr></table></div></figure><p>有值则说明获取了这个unsafe对象</p>        <h1 id="LockSupport工具类"   >          <a href="#LockSupport工具类" class="heading-link"><i class="fas fa-link"></i></a><a href="#LockSupport工具类" class="headerlink" title="LockSupport工具类"></a>LockSupport工具类</h1>      <p><em>LockSupport是一个线程阻塞类，我们可以用LockSupport中的方法来阻塞和唤醒线程</em></p><p><strong>LockSupport源码</strong></p>        <h2 id="成员变量"   >          <a href="#成员变量" class="heading-link"><i class="fas fa-link"></i></a><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Unsafe魔法类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class="line"><span class="comment">//偏移量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> parkBlockerOffset;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> SEED;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> PROBE;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> SECONDARY;</span><br></pre></td></tr></table></div></figure>        <h2 id="park"   >          <a href="#park" class="heading-link"><i class="fas fa-link"></i></a><a href="#park" class="headerlink" title="park"></a>park</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">park</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//调用Unsafe中的park方法</span></span><br><span class="line">    UNSAFE.park(<span class="literal">false</span>, <span class="number">0L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="unpark"   >          <a href="#unpark" class="heading-link"><i class="fas fa-link"></i></a><a href="#unpark" class="headerlink" title="unpark"></a>unpark</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unpark</span><span class="params">(Thread thread)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (thread != <span class="literal">null</span>)</span><br><span class="line">        <span class="comment">//调用Unsafe中的unpark方法</span></span><br><span class="line">        UNSAFE.unpark(thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h2>      <p>LockSupport底层就是封装了Unsafe魔法类，调用Unsafe中的park进行阻塞，unpark进行唤醒</p>        <h1 id="ThreadLocal线程变量"   >          <a href="#ThreadLocal线程变量" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocal线程变量" class="headerlink" title="ThreadLocal线程变量"></a>ThreadLocal线程变量</h1>      ]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入剖析并发编程-JUC篇[2-JMM、Volatile、Synchronized]</title>
      <link href="/2023/08/03/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-JUC%E7%AF%87%5B2-JMM%E3%80%81Volatile%E3%80%81Synchronized%5D/"/>
      <url>/2023/08/03/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-JUC%E7%AF%87%5B2-JMM%E3%80%81Volatile%E3%80%81Synchronized%5D/</url>
      
        <content type="html"><![CDATA[<p> <strong>JMM、Volatile关键字、Synchronized锁详解</strong></p><hr><ul><li>第一篇是JUC并发编程基础</li><li>第二篇是JMM、Volatile关键字、synchronize锁详解</li><li>第三篇是CAS机制原理、Unsafe魔法类、LockSupport工具类、ThreadLocal线程变量</li></ul><hr>        <h1 id="JMM模型"   >          <a href="#JMM模型" class="heading-link"><i class="fas fa-link"></i></a><a href="#JMM模型" class="headerlink" title="JMM模型"></a>JMM模型</h1>      <p>JMM：即Java内存模型，JMM是JVM的一部分，JMM是一种抽象的概念</p>        <h2 id="JMM的三大特性"   >          <a href="#JMM的三大特性" class="heading-link"><i class="fas fa-link"></i></a><a href="#JMM的三大特性" class="headerlink" title="JMM的三大特性"></a>JMM的三大特性</h2>              <h3 id="①原子性"   >          <a href="#①原子性" class="heading-link"><i class="fas fa-link"></i></a><a href="#①原子性" class="headerlink" title="①原子性"></a>①原子性</h3>      <p>对共享变量的读取和写入是原子操作，Read和Load是一组原子操作，Store和Write是原子操作</p>        <h3 id="②有序性"   >          <a href="#②有序性" class="heading-link"><i class="fas fa-link"></i></a><a href="#②有序性" class="headerlink" title="②有序性"></a>②有序性</h3>      <p>StoreBuffer的先进先出性质保证了有序性</p>        <h3 id="③可见性"   >          <a href="#③可见性" class="heading-link"><i class="fas fa-link"></i></a><a href="#③可见性" class="headerlink" title="③可见性"></a>③可见性</h3>      <p>内存屏障保证了可见性</p><p>而JMM中用Volatile关键字可以导致数据可见、除此之外synchronized锁也能保证</p><p>八种交互模式</p><ul><li><p>Lock （锁定）：锁定，将主内存中的变量锁定成当前线程持有</p></li><li><p>Read（读取）：将内存中的数据刷到工作区中</p></li><li><p>Load（加载）：将工作区的变量放到工作区的副本变量中</p></li><li><p>use  （使用）：将工作区的变量放到CPU执行区域</p></li><li><p>Assian（赋值）：将修改后的数据赋值给工作区的副本变量中</p></li><li><p>Store（存储）：将工作内存的变量刷到主内存中</p></li><li><p>Write（写入）:  将Store刷出的值写到主内存中</p></li><li><p>Unlock（解锁）：解锁，将锁释放以便其他线程可以使用</p><p><em>JMM</em>工作流程</p></li></ul><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801192534473.png"  alt="JMM工作流程">      </p><p>要注意的是，在JMM模型中没有Invalidate Queues，所以没有Load Load问题，只有Store Load的问题，</p><p>接下来我们重点介绍Volatile关键字和Synchronized锁</p>        <h1 id="volatile关键字"   >          <a href="#volatile关键字" class="heading-link"><i class="fas fa-link"></i></a><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h1>      <p>Volatile关键字可以导致共享变量的可见性，而我们通过JUC并发编程基础那块分析得出，当JMM的共享变量的可见性只要保证StoreBuffer的数据能刷到Cache中，就会因为MESI协议和嗅探机制更新其他线程的数据</p><p>综上所述，Valatile关键字就是确保StoreBuffer的数据能刷到Cache中，其作用的就是添加了屏障，这里添加的是编译器屏障</p><p>抛开代码谈理论无异于耍流氓，我们从一个程序开始看起！</p>        <h2 id="使用场景"   >          <a href="#使用场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2>              <h3 id="场景一：没有添加volatile关键字"   >          <a href="#场景一：没有添加volatile关键字" class="heading-link"><i class="fas fa-link"></i></a><a href="#场景一：没有添加volatile关键字" class="headerlink" title="场景一：没有添加volatile关键字"></a>场景一：没有添加volatile关键字</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"><span class="comment">//定义一个变量a，不给a赋值，初始化之后a应该是0</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写Run方法 当a不为0X1111的时候进入循环</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(a!=<span class="number">0x1111</span>)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建线程然后执行run方法</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TestThread</span>().start();</span><br><span class="line">        <span class="comment">//线程睡一秒</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将a赋值为0X1111</span></span><br><span class="line">        a=<span class="number">0x1111</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>运行结果是该线程没有结束        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801211011188.png"  alt="场景一结果">      </p>        <h3 id="场景二：添加了Volatile关键字"   >          <a href="#场景二：添加了Volatile关键字" class="heading-link"><i class="fas fa-link"></i></a><a href="#场景二：添加了Volatile关键字" class="headerlink" title="场景二：添加了Volatile关键字"></a>场景二：添加了Volatile关键字</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> <span class="keyword">extends</span>  <span class="title class_">Thread</span>&#123;</span><br><span class="line"><span class="comment">//给a添加Volatile使其可见</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> a;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(a!=<span class="number">0x1111</span>)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TestThread</span>().start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        a=<span class="number">0x1111</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>运行结果是线程已经结束</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801211221395.png"  alt="场景二结果">      </p>        <h3 id="场景三：没加Volatile但是禁止JIT优化"   >          <a href="#场景三：没加Volatile但是禁止JIT优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#场景三：没加Volatile但是禁止JIT优化" class="headerlink" title="场景三：没加Volatile但是禁止JIT优化"></a>场景三：没加Volatile但是禁止JIT优化</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">添加VM参数：-Djava.compiler=NONE  <span class="comment">//禁止JIT优化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="type">int</span> a;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(a!=<span class="number">0x1111</span>)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TestThread</span>().start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        a=<span class="number">0x1111</span>;</span><br><span class="line">    &#125;   </span><br></pre></td></tr></table></div></figure><p>运行结果是线程已经结束        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801213142690.png"  alt="场景三结果">      </p>        <h3 id="场景四-没加Volatile但是加了Unsafe-loadFence"   >          <a href="#场景四-没加Volatile但是加了Unsafe-loadFence" class="heading-link"><i class="fas fa-link"></i></a><a href="#场景四-没加Volatile但是加了Unsafe-loadFence" class="headerlink" title="场景四:没加Volatile但是加了Unsafe.loadFence();"></a>场景四:没加Volatile但是加了Unsafe.loadFence();</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> <span class="keyword">extends</span>  <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(a!=<span class="number">0x1111</span>)&#123;</span><br><span class="line">            UnsafeUtils.getUnsafe().loadFence();</span><br><span class="line">            <span class="comment">//利用UnsafeUtils.getUnsafe()获得Unsafe实例</span></span><br><span class="line">            <span class="comment">//调用loadFence()方法 也就是添加了编译器屏障</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //读屏障</span></span><br><span class="line"><span class="comment">    public native void loadFence();</span></span><br><span class="line"><span class="comment">//写屏障</span></span><br><span class="line"><span class="comment">    public native void storeFence();</span></span><br><span class="line"><span class="comment">//全屏障</span></span><br><span class="line"><span class="comment">    public native void fullFence();</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TestThread</span>().start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        a=<span class="number">0x1111</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>运行结果是线程已经结束        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801213734565.png"  alt="image-20230801213734565">      </p>        <h2 id="分析"   >          <a href="#分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#分析" class="headerlink" title="分析"></a>分析</h2>      <p>只有第一种情况下没有结束进程，我们可以通过JVM调优的指令可以获取当前执行的线程验证。</p>        <h3 id="①获取运行中线程"   >          <a href="#①获取运行中线程" class="heading-link"><i class="fas fa-link"></i></a><a href="#①获取运行中线程" class="headerlink" title="①获取运行中线程"></a>①获取运行中线程</h3>      <div class="table-container"><table><thead><tr><th>常见指令</th><th>作用</th></tr></thead><tbody><tr><td>jps</td><td>用于获得系统中运行中的java进程</td></tr><tr><td>jinfo <pid></td><td>显示指定线程的详情信息</td></tr><tr><td>jstat -gc <pid> (ms)</td><td>获得JVM各区域详情 参数一:指定进程号 参数二:每xx毫秒刷新输出</td></tr><tr><td>jstack <pid></td><td>跟踪线程中的堆栈信息</td></tr><tr><td>jmap -histo <pid></td><td>获得指定线程中实例对象个数和所占字节数<br/>#!!</td></tr></tbody></table></div><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801214538319.png"  alt="image-20230801214538319">      </p><p>我们可以清楚看出TestThread线程Thread-0正在运行</p>        <h3 id="②打印汇编语言"   >          <a href="#②打印汇编语言" class="heading-link"><i class="fas fa-link"></i></a><a href="#②打印汇编语言" class="headerlink" title="②打印汇编语言"></a>②打印汇编语言</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly <span class="comment">//开启控制台输出汇编语言</span></span><br></pre></td></tr></table></div></figure><p>我们可以在打印出的汇编记录中，可以查找数据，看个大概就是先比较之后然后经过多次跳转之后，A指向B地址，B之后跳转会指向A地址，造成一个死循环</p><p>这是JIT在对热点代码的优化</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我们的热点代码</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(a!=<span class="number">0x1111</span>)&#123;</span><br><span class="line"><span class="comment">//            UnsafeUtils.getUnsafe().loadFence();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//经过优化之后大概变成</span></span><br><span class="line"><span class="keyword">do</span>(a!=<span class="number">0x1111</span>)&#123;</span><br><span class="line"><span class="comment">//只做一次判断然后进入死循环</span></span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></div></figure><p>而加入Volatile关键字就是防止编译器对代码进行优化，且通过屏障将变量刷到Cache中</p><p><em>即Volatile&#x3D;&#x3D;UnsafeUtils.getUnsafe().loadFence()</em></p><p>我们可以从源代码这块开始看，首先获取字节码指令</p>        <h3 id="③打印字节码指令"   >          <a href="#③打印字节码指令" class="heading-link"><i class="fas fa-link"></i></a><a href="#③打印字节码指令" class="headerlink" title="③打印字节码指令"></a>③打印字节码指令</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用javaP -c 来输出字节码指令</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801235858520.png"  alt="image-20230801235858520">      </p><p>可以知道调用的getstatic方法是主要关注的</p><p>我们打开HotSprot的源码查找getstatic方法</p><p>不过不会C++，只能看英文和上下文一点一点理解</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">CASE</span>(_getstatic):</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获得一个索引值</span></span><br><span class="line">      u2 index;</span><br><span class="line">        <span class="comment">//获取一个Cache</span></span><br><span class="line">      ConstantPoolCacheEntry* cache;</span><br><span class="line">        <span class="comment">//在这里看到了PC+1，所以合理猜测这个是index是程序计数器，然后计数器+1</span></span><br><span class="line">      index = Bytes::<span class="built_in">get_native_u2</span>(pc+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// QQQ Need to make this as inlined as possible. Probably need to</span></span><br><span class="line">      <span class="comment">// split all the bytecode cases out so c++ compiler has a chance</span></span><br><span class="line">      <span class="comment">// for constant prop to fold everything possible away.</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">//从cp中获取一个entry放到Cache中</span></span><br><span class="line">      cache = cp-&gt;<span class="built_in">entry_at</span>(index);</span><br><span class="line">        <span class="comment">//如果这个没有被解析过 那就给他解析下</span></span><br><span class="line">      <span class="keyword">if</span> (!cache-&gt;<span class="built_in">is_resolved</span>((Bytecodes::Code)opcode)) &#123;</span><br><span class="line">        <span class="built_in">CALL_VM</span>(InterpreterRuntime::<span class="built_in">resolve_get_put</span>(THREAD, (Bytecodes::Code)opcode),</span><br><span class="line">                handle_exception);</span><br><span class="line">        cache = cp-&gt;<span class="built_in">entry_at</span>(index);</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="comment">//总之走到这里Cache拿了一个值</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> VM_JVMTI</span></span><br><span class="line">        <span class="comment">//判断这个是不是一个中断事件，我们这里没有产生中断，所以不进这个IF语句</span></span><br><span class="line">          <span class="keyword">if</span> (_jvmti_interp_events) &#123;</span><br><span class="line">            <span class="type">int</span> *count_addr;</span><br><span class="line">            oop obj;</span><br><span class="line">            <span class="comment">// Check to see if a field modification watch has been set</span></span><br><span class="line">            <span class="comment">// before we take the time to call into the VM.</span></span><br><span class="line">            count_addr = (<span class="type">int</span> *)JvmtiExport::<span class="built_in">get_field_access_count_addr</span>();</span><br><span class="line">            <span class="keyword">if</span> ( *count_addr &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">              <span class="keyword">if</span> ((Bytecodes::Code)opcode == Bytecodes::_getstatic) &#123;</span><br><span class="line">                obj = (oop)<span class="literal">NULL</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                obj = (oop) <span class="built_in">STACK_OBJECT</span>(<span class="number">-1</span>);</span><br><span class="line">                <span class="built_in">VERIFY_OOP</span>(obj);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="built_in">CALL_VM</span>(InterpreterRuntime::<span class="built_in">post_field_access</span>(THREAD,</span><br><span class="line">                                          obj,</span><br><span class="line">                                          cache),</span><br><span class="line">                                          handle_exception);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* VM_JVMTI */</span></span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得一个Object对象</span></span><br><span class="line">          oop obj;</span><br><span class="line">        <span class="comment">//如果这个是个静态对象那么就应该从静态区获取对象</span></span><br><span class="line">          <span class="keyword">if</span> ((Bytecodes::Code)opcode == Bytecodes::_getstatic) &#123;</span><br><span class="line">              <span class="comment">//获取了一个Klass ，理解成Class模板</span></span><br><span class="line">            Klass* k = cache-&gt;<span class="built_in">f1_as_klass</span>();</span><br><span class="line">              <span class="comment">//将k的指向的静态对象给obj</span></span><br><span class="line">            obj = k-&gt;<span class="built_in">java_mirror</span>();</span><br><span class="line">            <span class="built_in">MORE_STACK</span>(<span class="number">1</span>);  <span class="comment">// Assume single slot push</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//反之这个是个实例对象，那么从Stack栈中的对象引用到堆里的对象取出给obj</span></span><br><span class="line">            obj = (oop) <span class="built_in">STACK_OBJECT</span>(<span class="number">-1</span>);</span><br><span class="line">              <span class="comment">//检查这个OBJ是否为空</span></span><br><span class="line">            <span class="built_in">CHECK_NULL</span>(obj);</span><br><span class="line">          &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//上面这块步骤主要是拿到一个OBJ对象</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// 现在存结果在这个栈中</span></span><br><span class="line">          <span class="comment">// Now store the result on the stack</span></span><br><span class="line">          <span class="comment">//</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获得了一个状态</span></span><br><span class="line">          TosState tos_type = cache-&gt;<span class="built_in">flag_state</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获得一个偏移量</span></span><br><span class="line">          <span class="type">int</span> field_offset = cache-&gt;<span class="built_in">f2_as_index</span>();</span><br><span class="line">        <span class="comment">//如果这个cache是volatile修饰的</span></span><br><span class="line">          <span class="keyword">if</span> (cache-&gt;<span class="built_in">is_volatile</span>()) &#123;</span><br><span class="line">              <span class="comment">//CPU_NOT_MULTIPLE_COPY_ATOMIC  现在是单原子的就执行Fence() 即屏障</span></span><br><span class="line">            <span class="keyword">if</span> (support_IRIW_for_not_multiple_copy_atomic_cpu) &#123;</span><br><span class="line">              OrderAccess::<span class="built_in">fence</span>();</span><br><span class="line">            &#125;</span><br><span class="line">              <span class="comment">//判断现在是个什么类型 我们现在传入的是Int类型数据 所以直接进入int_field_acquire</span></span><br><span class="line">            <span class="keyword">if</span> (tos_type == atos) &#123;</span><br><span class="line">              <span class="built_in">VERIFY_OOP</span>(obj-&gt;<span class="built_in">obj_field_acquire</span>(field_offset));</span><br><span class="line">              <span class="built_in">SET_STACK_OBJECT</span>(obj-&gt;<span class="built_in">obj_field_acquire</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == itos) &#123;</span><br><span class="line">                <span class="comment">//我们要进入这个分支</span></span><br><span class="line">              <span class="built_in">SET_STACK_INT</span>(obj-&gt;<span class="built_in">int_field_acquire</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == ltos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_LONG</span>(obj-&gt;<span class="built_in">long_field_acquire</span>(field_offset), <span class="number">0</span>);</span><br><span class="line">              <span class="built_in">MORE_STACK</span>(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == btos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_INT</span>(obj-&gt;<span class="built_in">byte_field_acquire</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == ctos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_INT</span>(obj-&gt;<span class="built_in">char_field_acquire</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == stos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_INT</span>(obj-&gt;<span class="built_in">short_field_acquire</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == ftos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_FLOAT</span>(obj-&gt;<span class="built_in">float_field_acquire</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_DOUBLE</span>(obj-&gt;<span class="built_in">double_field_acquire</span>(field_offset), <span class="number">0</span>);</span><br><span class="line">              <span class="built_in">MORE_STACK</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//走到这里即说明这个类型不是被volatile修饰</span></span><br><span class="line">            <span class="keyword">if</span> (tos_type == atos) &#123;</span><br><span class="line">              <span class="built_in">VERIFY_OOP</span>(obj-&gt;<span class="built_in">obj_field</span>(field_offset));</span><br><span class="line">              <span class="built_in">SET_STACK_OBJECT</span>(obj-&gt;<span class="built_in">obj_field</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == itos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_INT</span>(obj-&gt;<span class="built_in">int_field</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == ltos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_LONG</span>(obj-&gt;<span class="built_in">long_field</span>(field_offset), <span class="number">0</span>);</span><br><span class="line">              <span class="built_in">MORE_STACK</span>(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == btos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_INT</span>(obj-&gt;<span class="built_in">byte_field</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == ctos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_INT</span>(obj-&gt;<span class="built_in">char_field</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == stos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_INT</span>(obj-&gt;<span class="built_in">short_field</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == ftos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_FLOAT</span>(obj-&gt;<span class="built_in">float_field</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_DOUBLE</span>(obj-&gt;<span class="built_in">double_field</span>(field_offset), <span class="number">0</span>);</span><br><span class="line">              <span class="built_in">MORE_STACK</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新计数器然后继续</span></span><br><span class="line">          <span class="built_in">UPDATE_PC_AND_CONTINUE</span>(<span class="number">3</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们要走到int_field_acquire方法的实现</span></span><br><span class="line"><span class="comment">//而int_field_acquire底层调用了Load_acquire方法</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>这里可能是因为我的原因导致这一块代码找不到，我选择从网上找了一下老版本的代码 不过实现思路应该是一样的</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title">compiler_barrier</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="function">__asm__ <span class="title">volatile</span> <span class="params">(<span class="string">&quot;&quot;</span> : : : <span class="string">&quot;memory&quot;</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::loadload</span><span class="params">()</span>   </span>&#123; <span class="built_in">compiler_barrier</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::storestore</span><span class="params">()</span> </span>&#123;<span class="built_in">compiler_barrier</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::loadstore</span><span class="params">()</span>  </span>&#123; <span class="built_in">compiler_barrier</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::storeload</span><span class="params">()</span>  </span>&#123; <span class="built_in">fence</span>();            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::acquire</span><span class="params">()</span>    </span>&#123; <span class="built_in">compiler_barrier</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::release</span><span class="params">()</span>    </span>&#123; <span class="built_in">compiler_barrier</span>(); &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::fence</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(os::<span class="built_in">is_MP</span>()) &#123;</span><br><span class="line">    <span class="comment">//always use locked addl since mfence is sometimes expensive</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AMD64</span></span><br><span class="line">   <span class="function">__asm__ <span class="title">volatile</span> <span class="params">(<span class="string">&quot;lock; addl $0,0(%%rsp)&quot;</span> : : :<span class="string">&quot;cc&quot;</span>, <span class="string">&quot;memory&quot;</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">   <span class="function">__asm__ <span class="title">volatile</span> <span class="params">(<span class="string">&quot;lock; addl $0,0(%%esp)&quot;</span> : : :<span class="string">&quot;cc&quot;</span>, <span class="string">&quot;memory&quot;</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  &#125;</span><br><span class="line"> <span class="built_in">compiler_barrier</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/w329636271/article/details/54616543/" >后面这块代码来源于CSDN博主</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>在底层是通过加屏障的方式实现这个数据的可见性</p>        <h2 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h2>      <p>Volatile关键字实现数据的可见性主要是依靠了加编译器屏障，防止JIT对其优化。最终可以导致数据的</p>        <h1 id="Synchronized锁"   >          <a href="#Synchronized锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#Synchronized锁" class="headerlink" title="Synchronized锁"></a>Synchronized锁</h1>      <p>首先我们得先明白对象的构成，以及Synchronized锁的类型</p>        <h2 id="Object对象以及锁的级别"   >          <a href="#Object对象以及锁的级别" class="heading-link"><i class="fas fa-link"></i></a><a href="#Object对象以及锁的级别" class="headerlink" title="Object对象以及锁的级别"></a>Object对象以及锁的级别</h2>      <p>Object对象在存储的时候有<strong>对象头信息</strong>、<strong>数据</strong>、对齐填充信息</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230802160057306.png"  alt="Object对象">      </p><p>而对象头信息 我们可以从源码中获取得知对象头信息是怎么组成的，我们这里主要关注64位的</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  32 bits:</span></span><br><span class="line"><span class="comment">//  --------</span></span><br><span class="line"><span class="comment">//             hash:25 ------------&gt;| age:4    biased_lock:1 lock:2 (normal object)</span></span><br><span class="line"><span class="comment">//             JavaThread*:23 epoch:2 age:4    biased_lock:1 lock:2 (biased object)</span></span><br><span class="line"><span class="comment">//             size:32 ------------------------------------------&gt;| (CMS free block)</span></span><br><span class="line"><span class="comment">//             PromotedObject*:29 ----------&gt;| promo_bits:3 -----&gt;| (CMS promoted object)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  64 bits:</span></span><br><span class="line"><span class="comment">//  --------</span></span><br><span class="line"><span class="comment">//  unused:25 hash:31 --&gt;| unused:1   age:4    biased_lock:1 lock:2 (normal object)</span></span><br><span class="line"><span class="comment">//  JavaThread*:54 epoch:2 unused:1   age:4    biased_lock:1 lock:2 (biased object)</span></span><br><span class="line"><span class="comment">//  PromotedObject*:61 ---------------------&gt;| promo_bits:3 -----&gt;| (CMS promoted object)</span></span><br><span class="line"><span class="comment">//  size:64 -----------------------------------------------------&gt;| (CMS free block)</span></span><br></pre></td></tr></table></div></figure><p>共六十四位</p><ul><li><p>25位无使用位</p></li><li><p>31位哈希</p></li><li><p>1位是否被使用标记</p></li><li><p>4位age</p></li><li><p>1位是否为偏向锁</p></li><li><p>2位锁状态</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230802162051207.png"  alt="对象头">      </p></li></ul><p>接下来就是synchronized锁的级别</p><p>一共有四个状态 ，而对象头中有3位来表示锁的信息 一位偏向锁标志位，两位表示锁状态</p><ul><li>无锁：在对象头信息为0 01</li><li>偏向锁：在对象头信息为 1 01，偏向锁是当锁没有竞争压力的时候并且多次由同一个线程获取，为了减少多次CAS的操作就引入了偏向锁，偏向锁会偏向获得它的第一个线程，类似于初恋。</li><li>轻量级锁：在对象头信息为 0 00，轻量级锁是获得锁的时候一开始就会获得一个轻量级锁，升级为轻量级锁的时候会撤销偏向锁，当获取轻量级锁失败之后会自旋(自适应自旋)，如果CAS失败会走轻量级锁升级的过程</li><li>重量级锁：在对象头信息为 1 10，重量级锁是经过锁升级之后也就是我们常说的锁，重量级锁是竞争激烈的锁，重量级锁中有一个cxq阻塞队列，当线程获取锁失败后会进阻塞队列等待</li></ul><div class="table-container"><table><thead><tr><th>锁级别</th><th>是否为偏向锁</th><th>锁状态</th></tr></thead><tbody><tr><td>无锁态</td><td>0</td><td>01</td></tr><tr><td>偏向锁</td><td>1</td><td>01</td></tr><tr><td>轻量级锁</td><td></td><td>00</td></tr><tr><td>重量级锁</td><td></td><td>10</td></tr><tr><td>GC标记</td><td></td><td>11</td></tr></tbody></table></div><p>接下来我们要从代码开始分析了</p><p>一个很简单的程序，主要是添加了Synchronzied锁，这样的话就能从字节码文件中获取信息</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> <span class="keyword">extends</span>  <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TestThread</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>用JavaP -C反编译获得字节码信息</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用javaP -c 来输出字节码指令</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public void run();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: dup</span><br><span class="line">       2: astore_1</span><br><span class="line">       3: monitorenter</span><br><span class="line">       4: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">       7: ldc           #3                  // String hello</span><br><span class="line">       9: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">      12: aload_1</span><br><span class="line">      13: monitorexit</span><br><span class="line">      14: goto          22</span><br><span class="line">      17: astore_2</span><br><span class="line">      18: aload_1</span><br><span class="line">      19: monitorexit</span><br><span class="line">      20: aload_2</span><br><span class="line">      21: athrow</span><br><span class="line">      22: return</span><br></pre></td></tr></table></div></figure><p>而重点要关注的是monitorenter和monitorexit</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3: monitorenter</span><br><span class="line">13: monitorexit</span><br><span class="line">19: monitorexit</span><br></pre></td></tr></table></div></figure><p>一次Monitorenter怎么会出现两次monitorexit呢？</p><p>原因是第二个monitorexit在finally代码块中，防止出现异常导致没有到达第一个monitorexit</p><p>而接下来我们要先进去看monitorenter方法</p>        <h2 id="monitorenter"   >          <a href="#monitorenter" class="heading-link"><i class="fas fa-link"></i></a><a href="#monitorenter" class="headerlink" title="monitorenter"></a>monitorenter</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">CASE</span>(_monitorenter): &#123;</span><br><span class="line">     <span class="comment">//1.从栈中获取一个对象lockee</span></span><br><span class="line">        oop lockee = <span class="built_in">STACK_OBJECT</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="comment">// derefing&#x27;s lockee ought to provoke implicit null check</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">//检查这个lockee是否为空</span></span><br><span class="line">        <span class="built_in">CHECK_NULL</span>(lockee);</span><br><span class="line">        <span class="comment">// find a free monitor or one already allocated for this object</span></span><br><span class="line">        <span class="comment">// if we find a matching object then we need a new monitor</span></span><br><span class="line">        <span class="comment">// since this is recursive enter</span></span><br><span class="line">     </span><br><span class="line">     <span class="comment">//获取BasicObjectLock指针 指向的是线程内所有的monitor</span></span><br><span class="line">     <span class="comment">//limit 指向栈顶 ， most_recent指的是栈底 entry用来存放找到的monitor对象</span></span><br><span class="line">        BasicObjectLock* limit = istate-&gt;<span class="built_in">monitor_base</span>();</span><br><span class="line">        BasicObjectLock* most_recent = (BasicObjectLock*) istate-&gt;<span class="built_in">stack_base</span>();</span><br><span class="line">        BasicObjectLock* entry = <span class="literal">NULL</span>;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     <span class="comment">//当limit和most_recent不指向同一个Monitor的时候进入循环</span></span><br><span class="line">     <span class="comment">//这个循环目的是找到一个可用的monitor或者发现这个锁被一个monitor监视了</span></span><br><span class="line">        <span class="keyword">while</span> (most_recent != limit ) &#123;</span><br><span class="line">            <span class="comment">//判断monitor的obj是否为空 如果是空则把它放到entry中</span></span><br><span class="line">          <span class="keyword">if</span> (most_recent-&gt;<span class="built_in">obj</span>() == <span class="literal">NULL</span>) entry = most_recent;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (most_recent-&gt;<span class="built_in">obj</span>() == lockee) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//如果monitor的obj不为空且obj为lockee时跳出循环</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//否则没有找到一个可用的monitor，栈尾指针向栈顶移动</span></span><br><span class="line">          most_recent++;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//如果循环结束 entry不为空的话则说明找到了一个可用的monitor</span></span><br><span class="line">        <span class="keyword">if</span> (entry != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">//这里是找到了一个monitor</span></span><br><span class="line">            <span class="comment">//将entry指向lockee</span></span><br><span class="line">          entry-&gt;<span class="built_in">set_obj</span>(lockee);</span><br><span class="line">            </span><br><span class="line">          <span class="type">int</span> success = <span class="literal">false</span>;</span><br><span class="line">          <span class="type">uintptr_t</span> epoch_mask_in_place = (<span class="type">uintptr_t</span>)markOopDesc::epoch_mask_in_place;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//记录lockee的头信息</span></span><br><span class="line">          markOop mark = lockee-&gt;<span class="built_in">mark</span>();</span><br><span class="line">            <span class="comment">//获得一个hash值</span></span><br><span class="line">          <span class="type">intptr_t</span> hash = (<span class="type">intptr_t</span>) markOopDesc::no_hash;</span><br><span class="line">          <span class="comment">// implies UseBiasedLocking</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//判断头信息中是否有bias_pattern 即是否是偏向锁  如果是偏向锁那么进入下面[1]过程，反之进入[2]过程</span></span><br><span class="line">          <span class="keyword">if</span> (mark-&gt;<span class="built_in">has_bias_pattern</span>()) &#123;</span><br><span class="line">              <span class="comment">/*[1]过程：现在是一个偏向锁*/</span></span><br><span class="line">              <span class="comment">/*进入这个语句中说明已经是偏向锁状态:</span></span><br><span class="line"><span class="comment">              有四种情况：</span></span><br><span class="line"><span class="comment">              ①：偏向本线程</span></span><br><span class="line"><span class="comment">              ②：要撤销偏向锁(可能变成轻量级锁或者重量级锁)</span></span><br><span class="line"><span class="comment">              ③：不偏向本线程，要重偏向到本线程</span></span><br><span class="line"><span class="comment">              ④：是匿名偏向锁</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">              <span class="comment">//声明变量线程id</span></span><br><span class="line">            <span class="type">uintptr_t</span> thread_ident;</span><br><span class="line">            <span class="type">uintptr_t</span> anticipated_bias_locking_value;</span><br><span class="line">              <span class="comment">//将线程id记录下来</span></span><br><span class="line">            thread_ident = (<span class="type">uintptr_t</span>)istate-&gt;<span class="built_in">thread</span>();</span><br><span class="line">              </span><br><span class="line">              <span class="comment">//通过计算获得一个偏向锁的值</span></span><br><span class="line">            anticipated_bias_locking_value =</span><br><span class="line">              (((<span class="type">uintptr_t</span>)lockee-&gt;<span class="built_in">klass</span>()-&gt;<span class="built_in">prototype_header</span>() | thread_ident) ^ (<span class="type">uintptr_t</span>)mark) &amp;</span><br><span class="line">              ~((<span class="type">uintptr_t</span>) markOopDesc::age_mask_in_place);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*情况①偏向本线程*/</span> </span><br><span class="line">              </span><br><span class="line">              <span class="comment">//这个值==0的话那么就认为是已经偏向本线程  那就什么都不做 将success设置为true返回</span></span><br><span class="line">              <span class="comment">//可以理解成偏向锁的重入</span></span><br><span class="line">            <span class="keyword">if</span>  (anticipated_bias_locking_value == <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="comment">// already biased towards this thread, nothing to do</span></span><br><span class="line">              <span class="keyword">if</span> (PrintBiasedLockingStatistics) &#123;</span><br><span class="line">                (* BiasedLocking::<span class="built_in">biased_lock_entry_count_addr</span>())++;</span><br><span class="line">              &#125;</span><br><span class="line">              success = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">              </span><br><span class="line">            <span class="comment">/*情况②要撤销偏向锁*/</span> </span><br><span class="line">              </span><br><span class="line">            <span class="comment">//反之，判断是否要撤销偏向，说明这个锁很可能是变成了轻量级锁或者重量级锁</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((anticipated_bias_locking_value &amp; markOopDesc::biased_lock_mask_in_place) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//尝试撤销偏向</span></span><br><span class="line">              <span class="comment">// try revoke bias</span></span><br><span class="line">                <span class="comment">//通过klass模板找到一个纯净的头信息</span></span><br><span class="line">              markOop header = lockee-&gt;<span class="built_in">klass</span>()-&gt;<span class="built_in">prototype_header</span>();</span><br><span class="line">                </span><br><span class="line">              <span class="keyword">if</span> (hash != markOopDesc::no_hash) &#123;</span><br><span class="line">                  <span class="comment">//给header设置一个hash值</span></span><br><span class="line">                header = header-&gt;<span class="built_in">copy_set_hash</span>(hash);</span><br><span class="line">              &#125;</span><br><span class="line">                <span class="comment">//cas操作，撤销偏向</span></span><br><span class="line">              <span class="keyword">if</span> (Atomic::<span class="built_in">cmpxchg_ptr</span>(header, lockee-&gt;<span class="built_in">mark_addr</span>(), mark) == mark) &#123;</span><br><span class="line">                  <span class="comment">//撤销偏向成功</span></span><br><span class="line">                <span class="keyword">if</span> (PrintBiasedLockingStatistics)</span><br><span class="line">                  (*BiasedLocking::<span class="built_in">revoked_lock_entry_count_addr</span>())++;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">              </span><br><span class="line">            <span class="comment">/*③：不偏向本线程，要重偏向到本线程*/</span></span><br><span class="line">              </span><br><span class="line">              <span class="comment">//不是偏向本线程，那判断是否要重新偏向</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((anticipated_bias_locking_value &amp; epoch_mask_in_place) !=<span class="number">0</span>) &#123;</span><br><span class="line">               <span class="comment">//尝试重新偏向</span></span><br><span class="line">              <span class="comment">// try rebias</span></span><br><span class="line">                <span class="comment">//获得一个头信息给新头</span></span><br><span class="line">              markOop new_header = (markOop) ( (<span class="type">intptr_t</span>) lockee-&gt;<span class="built_in">klass</span>()-&gt;<span class="built_in">prototype_header</span>() | thread_ident);</span><br><span class="line">              <span class="keyword">if</span> (hash != markOopDesc::no_hash) &#123;</span><br><span class="line">                  <span class="comment">//给新头设置哈希值</span></span><br><span class="line">                new_header = new_header-&gt;<span class="built_in">copy_set_hash</span>(hash);</span><br><span class="line">              &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//CAS操作 ，重新偏向</span></span><br><span class="line">              <span class="keyword">if</span> (Atomic::<span class="built_in">cmpxchg_ptr</span>((<span class="type">void</span>*)new_header, lockee-&gt;<span class="built_in">mark_addr</span>(), mark) == mark) &#123;</span><br><span class="line">                  <span class="comment">//CAS成功，已经偏向本线程</span></span><br><span class="line">                <span class="keyword">if</span> (PrintBiasedLockingStatistics)</span><br><span class="line">                  (* BiasedLocking::<span class="built_in">rebiased_lock_entry_count_addr</span>())++;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">//反之没有重偏向成功，进入锁膨胀方法</span></span><br><span class="line">                <span class="built_in">CALL_VM</span>(InterpreterRuntime::<span class="built_in">monitorenter</span>(THREAD, entry), handle_exception);</span><br><span class="line">              &#125;</span><br><span class="line">                <span class="comment">//加锁成功</span></span><br><span class="line">              success = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">/*④：是匿名偏向锁*/</span></span><br><span class="line">                </span><br><span class="line">              <span class="comment">// try to bias towards thread in case object is anonymously biased</span></span><br><span class="line">              markOop header = (markOop) ((<span class="type">uintptr_t</span>) mark &amp; ((<span class="type">uintptr_t</span>)markOopDesc::biased_lock_mask_in_place |(<span class="type">uintptr_t</span>)markOopDesc::age_mask_in_place |</span><br><span class="line">epoch_mask_in_place));</span><br><span class="line">                <span class="comment">//获得一个头信息 ，然后判断是否给头信息设置hash值</span></span><br><span class="line">              <span class="keyword">if</span> (hash != markOopDesc::no_hash) &#123;</span><br><span class="line">                header = header-&gt;<span class="built_in">copy_set_hash</span>(hash);</span><br><span class="line">              &#125;</span><br><span class="line">                <span class="comment">//将头信息与线程id异或之后给new_header</span></span><br><span class="line">              markOop new_header = (markOop) ((<span class="type">uintptr_t</span>) header | thread_ident);</span><br><span class="line">              <span class="comment">// debugging hint</span></span><br><span class="line">              <span class="built_in">DEBUG_ONLY</span>(entry-&gt;<span class="built_in">lock</span>()-&gt;<span class="built_in">set_displaced_header</span>((markOop) (<span class="type">uintptr_t</span>) <span class="number">0xdeaddead</span>);)</span><br><span class="line">                  <span class="comment">//CAS操作 将匿名偏向锁偏向本线程</span></span><br><span class="line">              <span class="keyword">if</span> (Atomic::<span class="built_in">cmpxchg_ptr</span>((<span class="type">void</span>*)new_header, lockee-&gt;<span class="built_in">mark_addr</span>(), header) == header) &#123;</span><br><span class="line">                  <span class="comment">//加锁成功也就是匿名偏向锁偏向本线程</span></span><br><span class="line">                <span class="keyword">if</span> (PrintBiasedLockingStatistics)</span><br><span class="line">                  (* BiasedLocking::<span class="built_in">anonymously_biased_lock_entry_count_addr</span>())++;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">//反之尝试匿名偏向锁加锁失败，说明有竞争需要进行锁膨胀</span></span><br><span class="line">                <span class="built_in">CALL_VM</span>(InterpreterRuntime::<span class="built_in">monitorenter</span>(THREAD, entry), handle_exception);</span><br><span class="line">              &#125;</span><br><span class="line">              success = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="comment">/*下面是[2]过程，说明这个锁不是偏向锁*/</span>  </span><br><span class="line">          <span class="comment">// traditional lightweight locking</span></span><br><span class="line">            <span class="comment">//只能是轻量级锁或者是重量级锁</span></span><br><span class="line">          <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">              <span class="comment">//将lockee设置成无锁状态</span></span><br><span class="line">            markOop displaced = lockee-&gt;<span class="built_in">mark</span>()-&gt;<span class="built_in">set_unlocked</span>();</span><br><span class="line">              <span class="comment">//将entry的lock也设置成无锁 </span></span><br><span class="line">            entry-&gt;<span class="built_in">lock</span>()-&gt;<span class="built_in">set_displaced_header</span>(displaced);</span><br><span class="line">              <span class="comment">//是否使用重量级锁(即不用轻量级锁和偏向锁，默认为Flase)，如果禁用了则Call_vm为true</span></span><br><span class="line">            <span class="type">bool</span> call_vm = UseHeavyMonitors;</span><br><span class="line">            <span class="keyword">if</span> (call_vm || Atomic::<span class="built_in">cmpxchg_ptr</span>(entry, lockee-&gt;<span class="built_in">mark_addr</span>(), displaced) != displaced) &#123;</span><br><span class="line">                <span class="comment">/*场景1：禁用了轻量级锁，那么进入下面的判断 ！call_vm为false 直接走到else中 进行一个升级到重量级锁</span></span><br><span class="line"><span class="comment">                 场景2:如果是默认则Call_vm为false ，那么会进行一个轻量级锁加锁CAS过程， 如果加锁失败会进行锁膨胀升级到重量级锁</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">              <span class="comment">// Is it simple recursive case?</span></span><br><span class="line">                <span class="comment">//判断是否这个锁是轻量级锁重入，如果是把Lock设置为null</span></span><br><span class="line">              <span class="keyword">if</span> (!call_vm &amp;&amp; THREAD-&gt;<span class="built_in">is_lock_owned</span>((address) displaced-&gt;<span class="built_in">clear_lock_bits</span>())) &#123;</span><br><span class="line">                entry-&gt;<span class="built_in">lock</span>()-&gt;<span class="built_in">set_displaced_header</span>(<span class="literal">NULL</span>);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">CALL_VM</span>(InterpreterRuntime::<span class="built_in">monitorenter</span>(THREAD, entry), handle_exception);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">UPDATE_PC_AND_TOS_AND_CONTINUE</span>(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          istate-&gt;<span class="built_in">set_msg</span>(more_monitors);</span><br><span class="line">          <span class="built_in">UPDATE_PC_AND_RETURN</span>(<span class="number">0</span>); <span class="comment">// Re-execute</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></div></figure><p>这里是上面没有详细说到的东西</p>        <h3 id="①basicObjectLock-记录了锁和持有锁的对象"   >          <a href="#①basicObjectLock-记录了锁和持有锁的对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#①basicObjectLock-记录了锁和持有锁的对象" class="headerlink" title="①basicObjectLock:记录了锁和持有锁的对象"></a>①basicObjectLock:记录了锁和持有锁的对象</h3>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BasicObjectLock</span> VALUE_OBJ_CLASS_SPEC &#123;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">VMStructs</span>;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  BasicLock _lock;                                    <span class="comment">// the lock, must be double word aligned</span></span><br><span class="line">  oop       _obj;                                     <span class="comment">// object holds the lock;</span></span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230802193545800.png"  alt="BasicObjectLock">      </p>        <h3 id="②Atomic-cmpxchg-ptr-exchange-value-dest-compare-value"   >          <a href="#②Atomic-cmpxchg-ptr-exchange-value-dest-compare-value" class="heading-link"><i class="fas fa-link"></i></a><a href="#②Atomic-cmpxchg-ptr-exchange-value-dest-compare-value" class="headerlink" title="②Atomic::cmpxchg_ptr(exchange_value,  dest, compare_value)"></a>②Atomic::cmpxchg_ptr(exchange_value,  dest, compare_value)</h3>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CAS操作 参数1:想要改变的值</span><br><span class="line">    参数2:目的地址</span><br><span class="line">    参数3:用于比较的旧值</span><br><span class="line">返回结果如果CAS成功则返回期望值(参数3)</span><br><span class="line">  CAS失败则返回要改变的值(参数1)</span><br></pre></td></tr></table></div></figure>        <h3 id="③匿名偏向锁"   >          <a href="#③匿名偏向锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#③匿名偏向锁" class="headerlink" title="③匿名偏向锁"></a>③匿名偏向锁</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230802211243380.png"  alt="匿名偏向锁">      </p>        <h3 id="④轻量级锁"   >          <a href="#④轻量级锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#④轻量级锁" class="headerlink" title="④轻量级锁"></a>④轻量级锁</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230802211843053.png"  alt="轻量级锁">      </p>        <h3 id="⑤偏向锁加锁流程图"   >          <a href="#⑤偏向锁加锁流程图" class="heading-link"><i class="fas fa-link"></i></a><a href="#⑤偏向锁加锁流程图" class="headerlink" title="⑤偏向锁加锁流程图"></a>⑤偏向锁加锁流程图</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230802203659004.png"  alt="偏向锁加锁流程">      </p>        <h2 id="锁膨胀-InterpreterRuntime-monitorenter"   >          <a href="#锁膨胀-InterpreterRuntime-monitorenter" class="heading-link"><i class="fas fa-link"></i></a><a href="#锁膨胀-InterpreterRuntime-monitorenter" class="headerlink" title="锁膨胀(InterpreterRuntime::monitorenter)"></a>锁膨胀(InterpreterRuntime::monitorenter)</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Synchronization</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The interpreter&#x27;s synchronization code is factored out so that it can</span></span><br><span class="line"><span class="comment">// be shared by method invocation and synchronized blocks.</span></span><br><span class="line"><span class="comment">//%note synchronization_3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//%note monitor_1</span></span><br><span class="line"><span class="built_in">IRT_ENTRY_NO_ASYNC</span>(<span class="type">void</span>, InterpreterRuntime::<span class="built_in">monitorenter</span>(JavaThread* thread, BasicObjectLock* elem))</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ASSERT</span></span><br><span class="line">  thread-&gt;<span class="built_in">last_frame</span>().<span class="built_in">interpreter_frame_verify_monitor</span>(elem);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (PrintBiasedLockingStatistics) &#123;</span><br><span class="line">    Atomic::<span class="built_in">inc</span>(BiasedLocking::<span class="built_in">slow_path_entry_count_addr</span>());</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 将thread和 BasicObjectLock封装到h_obj中</span></span><br><span class="line">  <span class="function">Handle <span class="title">h_obj</span><span class="params">(thread, elem-&gt;obj())</span></span>;</span><br><span class="line">  <span class="built_in">assert</span>(Universe::<span class="built_in">heap</span>()-&gt;<span class="built_in">is_in_reserved_or_null</span>(<span class="built_in">h_obj</span>()),</span><br><span class="line">         <span class="string">&quot;must be NULL or an object&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否使用了偏向锁</span></span><br><span class="line">  <span class="keyword">if</span> (UseBiasedLocking) &#123;</span><br><span class="line">    <span class="comment">// Retry fast entry if bias is revoked to avoid unnecessary inflation</span></span><br><span class="line">      <span class="comment">//是使用了偏向锁，所以要撤销偏向锁，走到fast_entry中</span></span><br><span class="line">    ObjectSynchronizer::<span class="built_in">fast_enter</span>(h_obj, elem-&gt;<span class="built_in">lock</span>(), <span class="literal">true</span>, CHECK);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//没有使用偏向锁，进入Slow_enter</span></span><br><span class="line">    ObjectSynchronizer::<span class="built_in">slow_enter</span>(h_obj, elem-&gt;<span class="built_in">lock</span>(), CHECK);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">assert</span>(Universe::<span class="built_in">heap</span>()-&gt;<span class="built_in">is_in_reserved_or_null</span>(elem-&gt;<span class="built_in">obj</span>()),</span><br><span class="line">         <span class="string">&quot;must be NULL or an object&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ASSERT</span></span><br><span class="line">  thread-&gt;<span class="built_in">last_frame</span>().<span class="built_in">interpreter_frame_verify_monitor</span>(elem);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">IRT_END</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="fast-entry"   >          <a href="#fast-entry" class="heading-link"><i class="fas fa-link"></i></a><a href="#fast-entry" class="headerlink" title="fast_entry"></a>fast_entry</h3>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">传入参数1：obj ：(封装有线程ID和BasicObjectLock)</span></span><br><span class="line"><span class="comment">    参数2：lock ：BaiscObjectLock中的Lock</span></span><br><span class="line"><span class="comment">参数3：attempt_rebias : True,先不用管</span></span><br><span class="line"><span class="comment">参数4：TRAPS: check</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ObjectSynchronizer::fast_enter</span><span class="params">(Handle obj, BasicLock* lock, <span class="type">bool</span> attempt_rebias, TRAPS)</span> </span>&#123;</span><br><span class="line"> <span class="comment">//是否用了偏向锁</span></span><br><span class="line">    <span class="keyword">if</span> (UseBiasedLocking) &#123;</span><br><span class="line">    <span class="comment">//用了偏向锁，是否到达线程安全点</span></span><br><span class="line">    <span class="keyword">if</span> (!SafepointSynchronize::<span class="built_in">is_at_safepoint</span>()) &#123;</span><br><span class="line">        <span class="comment">//没到达线程安全点，调用方法revoke_and_rebias撤销锁并且重偏向</span></span><br><span class="line">      BiasedLocking::Condition cond = BiasedLocking::<span class="built_in">revoke_and_rebias</span>(obj, attempt_rebias, THREAD);</span><br><span class="line">        </span><br><span class="line">      <span class="keyword">if</span> (cond == BiasedLocking::BIAS_REVOKED_AND_REBIASED) &#123;</span><br><span class="line">          <span class="comment">//如果撤销锁了并且重偏向了直接return</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//到达了线程安全点</span></span><br><span class="line">      <span class="built_in">assert</span>(!attempt_rebias, <span class="string">&quot;can not rebias toward VM thread&quot;</span>);</span><br><span class="line">        <span class="comment">//线程安全点撤销偏向锁</span></span><br><span class="line">      BiasedLocking::<span class="built_in">revoke_at_safepoint</span>(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">assert</span>(!obj-&gt;<span class="built_in">mark</span>()-&gt;<span class="built_in">has_bias_pattern</span>(), <span class="string">&quot;biases should be revoked by now&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//进入Slow_enter方法</span></span><br><span class="line"> <span class="built_in">slow_enter</span> (obj, lock, THREAD) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="revoke-and-rebias"   >          <a href="#revoke-and-rebias" class="heading-link"><i class="fas fa-link"></i></a><a href="#revoke-and-rebias" class="headerlink" title="revoke_and_rebias"></a>revoke_and_rebias</h3>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数1：obj ：封装有线程ID和BasicObjectLock)</span></span><br><span class="line"><span class="comment">参数2：attempt_rebias，传入的True</span></span><br><span class="line"><span class="comment">参数3：TRAPS: check</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BiasedLocking::Condition <span class="title">BiasedLocking::revoke_and_rebias</span><span class="params">(Handle obj, <span class="type">bool</span> attempt_rebias, TRAPS)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">assert</span>(!SafepointSynchronize::<span class="built_in">is_at_safepoint</span>(), <span class="string">&quot;must not be called while at safepoint&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We can revoke the biases of anonymously-biased objects</span></span><br><span class="line">  <span class="comment">// efficiently enough that we should not cause these revocations to</span></span><br><span class="line">  <span class="comment">// update the heuristics because doing so may cause unwanted bulk</span></span><br><span class="line">  <span class="comment">// revocations (which are expensive) to occur.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获得头信息</span></span><br><span class="line">  markOop mark = obj-&gt;<span class="built_in">mark</span>();</span><br><span class="line">    <span class="comment">//因为attempt_rebias==true，所以这个判断可以不走</span></span><br><span class="line">  <span class="keyword">if</span> (mark-&gt;<span class="built_in">is_biased_anonymously</span>() &amp;&amp; !attempt_rebias) &#123;</span><br><span class="line">      <span class="comment">//判断这个锁是否是匿名偏向，如果是匿名偏向且不需要重偏向则撤销偏向锁</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">// We are probably trying to revoke the bias of this object due to</span></span><br><span class="line">    <span class="comment">// an identity hash code computation. Try to revoke the bias</span></span><br><span class="line">    <span class="comment">// without a safepoint. This is possible if we can successfully</span></span><br><span class="line">    <span class="comment">// compare-and-exchange an unbiased header into the mark word of</span></span><br><span class="line">    <span class="comment">// the object, meaning that no other thread has raced to acquire</span></span><br><span class="line">    <span class="comment">// the bias of the object.</span></span><br><span class="line">    markOop biased_value       = mark;</span><br><span class="line">    markOop unbiased_prototype = markOopDesc::<span class="built_in">prototype</span>()-&gt;<span class="built_in">set_age</span>(mark-&gt;<span class="built_in">age</span>());</span><br><span class="line">    markOop res_mark = (markOop) Atomic::<span class="built_in">cmpxchg_ptr</span>(unbiased_prototype, obj-&gt;<span class="built_in">mark_addr</span>(), mark);</span><br><span class="line">    <span class="keyword">if</span> (res_mark == biased_value) &#123;</span><br><span class="line">      <span class="keyword">return</span> BIAS_REVOKED;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//直接进入下面的判断中，判断是否是偏向锁</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mark-&gt;<span class="built_in">has_bias_pattern</span>()) &#123;</span><br><span class="line">      <span class="comment">//是偏向锁</span></span><br><span class="line">      <span class="comment">//取到Klass 为k</span></span><br><span class="line">      <span class="comment">//k取到纯净的头信息</span></span><br><span class="line">    Klass* k = obj-&gt;<span class="built_in">klass</span>();</span><br><span class="line">    markOop prototype_header = k-&gt;<span class="built_in">prototype_header</span>();</span><br><span class="line">    <span class="keyword">if</span> (!prototype_header-&gt;<span class="built_in">has_bias_pattern</span>()) &#123;</span><br><span class="line">        <span class="comment">//如果原始的头是不是偏向锁</span></span><br><span class="line">        </span><br><span class="line">      <span class="comment">// This object has a stale bias from before the bulk revocation</span></span><br><span class="line">      <span class="comment">// for this data type occurred. It&#x27;s pointless to update the</span></span><br><span class="line">      <span class="comment">// heuristics at this point so simply update the header with a</span></span><br><span class="line">      <span class="comment">// CAS. If we fail this race, the object&#x27;s bias has been revoked</span></span><br><span class="line">      <span class="comment">// by another thread so we simply return and let the caller deal</span></span><br><span class="line">      <span class="comment">// with it.</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将锁头Lock改成无锁状态，然后返回BIAS_REVOKED状态(已经撤销偏向)</span></span><br><span class="line">      markOop biased_value       = mark;</span><br><span class="line">      markOop res_mark = (markOop) Atomic::<span class="built_in">cmpxchg_ptr</span>(prototype_header, obj-&gt;<span class="built_in">mark_addr</span>(), mark);</span><br><span class="line">      <span class="built_in">assert</span>(!(*(obj-&gt;<span class="built_in">mark_addr</span>()))-&gt;<span class="built_in">has_bias_pattern</span>(), <span class="string">&quot;even if we raced, should still be revoked&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> BIAS_REVOKED;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prototype_header-&gt;<span class="built_in">bias_epoch</span>() != mark-&gt;<span class="built_in">bias_epoch</span>()) &#123;</span><br><span class="line">        <span class="comment">//判断这个Epoch数据，判断是否被其他线程修改过，如果修改过那么这个偏向锁无效(过期)</span></span><br><span class="line">        </span><br><span class="line">      <span class="comment">// The epoch of this biasing has expired indicating that the</span></span><br><span class="line">      <span class="comment">// object is effectively unbiased. Depending on whether we need</span></span><br><span class="line">      <span class="comment">// to rebias or revoke the bias of this object we can do it</span></span><br><span class="line">      <span class="comment">// efficiently enough with a CAS that we shouldn&#x27;t update the</span></span><br><span class="line">      <span class="comment">// heuristics. This is normally done in the assembly code but we</span></span><br><span class="line">      <span class="comment">// can reach this point due to various points in the runtime</span></span><br><span class="line">      <span class="comment">// needing to revoke biases.</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//是否需要重偏向，我们这传入的数据是true所以需要重偏向</span></span><br><span class="line">      <span class="keyword">if</span> (attempt_rebias) &#123;</span><br><span class="line">        <span class="built_in">assert</span>(THREAD-&gt;<span class="built_in">is_Java_thread</span>(), <span class="string">&quot;&quot;</span>);</span><br><span class="line">        markOop biased_value       = mark;</span><br><span class="line">        markOop rebiased_prototype = markOopDesc::<span class="built_in">encode</span>((JavaThread*) THREAD, mark-&gt;<span class="built_in">age</span>(), prototype_header-&gt;<span class="built_in">bias_epoch</span>());</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//CAS操作将锁重新偏向</span></span><br><span class="line">        markOop res_mark = (markOop) Atomic::<span class="built_in">cmpxchg_ptr</span>(rebiased_prototype, obj-&gt;<span class="built_in">mark_addr</span>(), mark);</span><br><span class="line">        <span class="keyword">if</span> (res_mark == biased_value) &#123;</span><br><span class="line">            <span class="comment">//撤销后且重新偏向成功 返回BIAS_REVOKED_AND_REBIASED</span></span><br><span class="line">          <span class="keyword">return</span> BIAS_REVOKED_AND_REBIASED;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//这不需要重新偏向</span></span><br><span class="line">        markOop biased_value       = mark;</span><br><span class="line">        markOop unbiased_prototype = markOopDesc::<span class="built_in">prototype</span>()-&gt;<span class="built_in">set_age</span>(mark-&gt;<span class="built_in">age</span>());</span><br><span class="line">          <span class="comment">//CAS将头信息设置为无锁状态</span></span><br><span class="line">        markOop res_mark = (markOop) Atomic::<span class="built_in">cmpxchg_ptr</span>(unbiased_prototype, obj-&gt;<span class="built_in">mark_addr</span>(), mark);</span><br><span class="line">        <span class="keyword">if</span> (res_mark == biased_value) &#123;</span><br><span class="line">            <span class="comment">//将锁头Lock改成无锁状态，然后返回BIAS_REVOKED状态(已经撤销偏向)</span></span><br><span class="line">          <span class="keyword">return</span> BIAS_REVOKED;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//走到这里说明不是匿名偏向、偏向锁撤销且重偏向撤销失败、偏向锁撤销失败</span></span><br><span class="line"> HeuristicsResult heuristics = <span class="built_in">update_heuristics</span>(<span class="built_in">obj</span>(), attempt_rebias);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断这个锁是否是偏向状态</span></span><br><span class="line">  <span class="keyword">if</span> (heuristics == HR_NOT_BIASED) &#123;</span><br><span class="line">      <span class="comment">//这个锁不是偏向状态</span></span><br><span class="line">    <span class="keyword">return</span> NOT_BIASED;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (heuristics == HR_SINGLE_REVOKE) &#123;</span><br><span class="line">      <span class="comment">//反之 这个锁是个偏向锁，判断是否单例撤销</span></span><br><span class="line">    Klass *k = obj-&gt;<span class="built_in">klass</span>();</span><br><span class="line">    markOop prototype_header = k-&gt;<span class="built_in">prototype_header</span>();</span><br><span class="line">    <span class="keyword">if</span> (mark-&gt;<span class="built_in">biased_locker</span>() == THREAD &amp;&amp;</span><br><span class="line">        prototype_header-&gt;<span class="built_in">bias_epoch</span>() == mark-&gt;<span class="built_in">bias_epoch</span>()) &#123;</span><br><span class="line">      <span class="comment">// A thread is trying to revoke the bias of an object biased</span></span><br><span class="line">      <span class="comment">// toward it, again likely due to an identity hash code</span></span><br><span class="line">      <span class="comment">// computation. We can again avoid a safepoint in this case</span></span><br><span class="line">      <span class="comment">// since we are only going to walk our own stack. There are no</span></span><br><span class="line">      <span class="comment">// races with revocations occurring in other threads because we</span></span><br><span class="line">      <span class="comment">// reach no safepoints in the revocation path.</span></span><br><span class="line">      <span class="comment">// Also check the epoch because even if threads match, another thread</span></span><br><span class="line">      <span class="comment">// can come in with a CAS to steal the bias of an object that has a</span></span><br><span class="line">      <span class="comment">// stale epoch.</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//判断是否是当前持锁线程进行锁撤销</span></span><br><span class="line">      ResourceMark rm;</span><br><span class="line">      <span class="keyword">if</span> (TraceBiasedLocking) &#123;</span><br><span class="line">        tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;Revoking bias by walking my own stack:&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用revoke_bias方法进行撤销锁 返回一个cond(撤销的状态字)</span></span><br><span class="line">      BiasedLocking::Condition cond = <span class="built_in">revoke_bias</span>(<span class="built_in">obj</span>(), <span class="literal">false</span>, <span class="literal">false</span>, (JavaThread*) THREAD);</span><br><span class="line">      ((JavaThread*) THREAD)-&gt;<span class="built_in">set_cached_monitor_info</span>(<span class="literal">NULL</span>);</span><br><span class="line">      <span class="built_in">assert</span>(cond == BIAS_REVOKED, <span class="string">&quot;why not?&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> cond;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//当前线程已经死了</span></span><br><span class="line">        <span class="comment">//交给虚拟机去进行一个锁撤销</span></span><br><span class="line">      VM_RevokeBias <span class="built_in">revoke</span>(&amp;obj, (JavaThread*) THREAD);</span><br><span class="line">      VMThread::<span class="built_in">execute</span>(&amp;revoke);</span><br><span class="line">      <span class="keyword">return</span> revoke.<span class="built_in">status_code</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//走到这里说明需要进行一个批量撤销</span></span><br><span class="line">  <span class="built_in">assert</span>((heuristics == HR_BULK_REVOKE) ||</span><br><span class="line">         (heuristics == HR_BULK_REBIAS), <span class="string">&quot;?&quot;</span>);</span><br><span class="line">  <span class="function">VM_BulkRevokeBias <span class="title">bulk_revoke</span><span class="params">(&amp;obj, (JavaThread*) THREAD,</span></span></span><br><span class="line"><span class="params"><span class="function">                                (heuristics == HR_BULK_REBIAS),</span></span></span><br><span class="line"><span class="params"><span class="function">                                attempt_rebias)</span></span>;</span><br><span class="line">  VMThread::<span class="built_in">execute</span>(&amp;bulk_revoke);</span><br><span class="line">  <span class="keyword">return</span> bulk_revoke.<span class="built_in">status_code</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="revoke-bias"   >          <a href="#revoke-bias" class="heading-link"><i class="fas fa-link"></i></a><a href="#revoke-bias" class="headerlink" title="revoke_bias"></a>revoke_bias</h3>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">传入 参数1：obj ：(封装有线程ID和BasicObjectLock)</span></span><br><span class="line"><span class="comment">参数2：是否允  许重偏向，False</span></span><br><span class="line"><span class="comment">参数3：是否是批处理，False</span></span><br><span class="line"><span class="comment">参数4：线程</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> BiasedLocking::Condition <span class="title">revoke_bias</span><span class="params">(oop obj, <span class="type">bool</span> allow_rebias, <span class="type">bool</span> is_bulk, JavaThread* requesting_thread)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获得对象头信息</span></span><br><span class="line">  markOop mark = obj-&gt;<span class="built_in">mark</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断是否是偏向状态</span></span><br><span class="line">  <span class="keyword">if</span> (!mark-&gt;<span class="built_in">has_bias_pattern</span>()) &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//如果允许跟踪偏向锁 我们默认是false就不走这个</span></span><br><span class="line">    <span class="keyword">if</span> (TraceBiasedLocking) &#123;</span><br><span class="line">      ResourceMark rm;</span><br><span class="line">      tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;  (Skipping revocation of object of type %s because it&#x27;s no longer biased)&quot;</span>,</span><br><span class="line">                    obj-&gt;<span class="built_in">klass</span>()-&gt;<span class="built_in">external_name</span>());</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">//到这里说明没有偏向直接返回NOT_BIASED</span></span><br><span class="line">    <span class="keyword">return</span> BiasedLocking::NOT_BIASED;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">//获得锁的年龄</span></span><br><span class="line">  uint age = mark-&gt;<span class="built_in">age</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获得一个锁的对象头</span></span><br><span class="line">  markOop   biased_prototype = markOopDesc::<span class="built_in">biased_locking_prototype</span>()-&gt;<span class="built_in">set_age</span>(age);</span><br><span class="line">    <span class="comment">//获得一个无锁的对象头</span></span><br><span class="line">  markOop unbiased_prototype = markOopDesc::<span class="built_in">prototype</span>()-&gt;<span class="built_in">set_age</span>(age);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同上默认不允许跟踪偏向锁</span></span><br><span class="line">  <span class="keyword">if</span> (TraceBiasedLocking &amp;&amp; (Verbose || !is_bulk)) &#123;</span><br><span class="line">    ResourceMark rm;</span><br><span class="line">    tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;Revoking bias of object &quot;</span> INTPTR_FORMAT <span class="string">&quot; , mark &quot;</span> INTPTR_FORMAT <span class="string">&quot; , type %s , prototype header &quot;</span> INTPTR_FORMAT <span class="string">&quot; , allow rebias %d , requesting thread &quot;</span> INTPTR_FORMAT,</span><br><span class="line">                  <span class="built_in">p2i</span>((<span class="type">void</span> *)obj), (<span class="type">intptr_t</span>) mark, obj-&gt;<span class="built_in">klass</span>()-&gt;<span class="built_in">external_name</span>(), (<span class="type">intptr_t</span>) obj-&gt;<span class="built_in">klass</span>()-&gt;<span class="built_in">prototype_header</span>(), (allow_rebias ? <span class="number">1</span> : <span class="number">0</span>), (<span class="type">intptr_t</span>) requesting_thread);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取对象头的偏向线程</span></span><br><span class="line">  JavaThread* biased_thread = mark-&gt;<span class="built_in">biased_locker</span>();</span><br><span class="line">  <span class="keyword">if</span> (biased_thread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="comment">//如果偏向线程为空说明是一个匿名偏向锁</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">// Object is anonymously biased. We can get here if, for</span></span><br><span class="line">    <span class="comment">// example, we revoke the bias due to an identity hash code</span></span><br><span class="line">    <span class="comment">// being computed for an object.</span></span><br><span class="line">    <span class="keyword">if</span> (!allow_rebias) &#123;</span><br><span class="line">        <span class="comment">//如果不允许重偏向，则设置为无锁状态</span></span><br><span class="line">      obj-&gt;<span class="built_in">set_mark</span>(unbiased_prototype);</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">//默认不进</span></span><br><span class="line">    <span class="keyword">if</span> (TraceBiasedLocking &amp;&amp; (Verbose || !is_bulk)) &#123;</span><br><span class="line">      tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;  Revoked bias of anonymously-biased object&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">//返回已经撤销偏向</span></span><br><span class="line">    <span class="keyword">return</span> BiasedLocking::BIAS_REVOKED;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Handle case where the thread toward which the object was biased has exited</span></span><br><span class="line">    <span class="comment">//设置一个状态 记录持锁线程是否还活着</span></span><br><span class="line">  <span class="type">bool</span> thread_is_alive = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (requesting_thread == biased_thread) &#123;</span><br><span class="line">      <span class="comment">//如果请求线程和偏向线程相等则说明持锁线程还活着</span></span><br><span class="line">    thread_is_alive = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//遍历线程 然后找到持锁线程，如果持锁线程还存在 则将状态置为True</span></span><br><span class="line">    <span class="keyword">for</span> (JavaThread* cur_thread = Threads::<span class="built_in">first</span>(); cur_thread != <span class="literal">NULL</span>; cur_thread = cur_thread-&gt;<span class="built_in">next</span>()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (cur_thread == biased_thread) &#123;</span><br><span class="line">        thread_is_alive = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">//运行到这 Thread_is_alive依然是false 说明持锁线程已经死了</span></span><br><span class="line">  <span class="keyword">if</span> (!thread_is_alive) &#123;</span><br><span class="line">    <span class="keyword">if</span> (allow_rebias) &#123;</span><br><span class="line">        <span class="comment">//如果允许重偏向则设置为匿名偏向锁状态，我们传入的是False</span></span><br><span class="line">      obj-&gt;<span class="built_in">set_mark</span>(biased_prototype);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//反之设为无锁状态</span></span><br><span class="line">      obj-&gt;<span class="built_in">set_mark</span>(unbiased_prototype);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (TraceBiasedLocking &amp;&amp; (Verbose || !is_bulk)) &#123;</span><br><span class="line">      tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;  Revoked bias of object biased toward dead thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">//返回已经撤销偏向</span></span><br><span class="line">    <span class="keyword">return</span> BiasedLocking::BIAS_REVOKED;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Thread owning bias is alive.</span></span><br><span class="line">  <span class="comment">// Check to see whether it currently owns the lock and, if so,</span></span><br><span class="line">  <span class="comment">// write down the needed displaced headers to the thread&#x27;s stack.</span></span><br><span class="line">  <span class="comment">// Otherwise, restore the object&#x27;s header either to the unlocked</span></span><br><span class="line">  <span class="comment">// or unbiased state.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断锁偏向线程是否还在，检查他是否拥有锁，如果有则写入线程堆栈中反之解锁或者解除偏向</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取一个Monitor列表</span></span><br><span class="line">  GrowableArray&lt;MonitorInfo*&gt;* cached_monitor_info = <span class="built_in">get_or_compute_monitor_info</span>(biased_thread);</span><br><span class="line">  BasicLock* highest_lock = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//遍历列表</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cached_monitor_info-&gt;<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">    MonitorInfo* mon_info = cached_monitor_info-&gt;<span class="built_in">at</span>(i);</span><br><span class="line">    <span class="keyword">if</span> (mon_info-&gt;<span class="built_in">owner</span>() == obj) &#123;</span><br><span class="line">        <span class="comment">//这个owner指向的是不是当前的锁(重入的时候只有第一个进来的持有锁的地址)</span></span><br><span class="line">      <span class="keyword">if</span> (TraceBiasedLocking &amp;&amp; Verbose) &#123;</span><br><span class="line">        tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;   mon_info-&gt;owner (&quot;</span> PTR_FORMAT <span class="string">&quot;) == obj (&quot;</span> PTR_FORMAT <span class="string">&quot;)&quot;</span>,</span><br><span class="line">                      <span class="built_in">p2i</span>((<span class="type">void</span> *) mon_info-&gt;<span class="built_in">owner</span>()),</span><br><span class="line">                      <span class="built_in">p2i</span>((<span class="type">void</span> *) obj));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Assume recursive case and fix up highest lock later</span></span><br><span class="line">        <span class="comment">//获取一个NULL 设置为mark</span></span><br><span class="line">      markOop mark = markOopDesc::<span class="built_in">encode</span>((BasicLock*) <span class="literal">NULL</span>);</span><br><span class="line">        </span><br><span class="line">       <span class="comment">//将Highest指向这个锁对象</span></span><br><span class="line">      highest_lock = mon_info-&gt;<span class="built_in">lock</span>();</span><br><span class="line">        <span class="comment">//将obj的Mark设为Null</span></span><br><span class="line">      highest_lock-&gt;<span class="built_in">set_displaced_header</span>(mark);</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (TraceBiasedLocking &amp;&amp; Verbose) &#123;</span><br><span class="line">        tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;   mon_info-&gt;owner (&quot;</span> PTR_FORMAT <span class="string">&quot;) != obj (&quot;</span> PTR_FORMAT <span class="string">&quot;)&quot;</span>,</span><br><span class="line">                      <span class="built_in">p2i</span>((<span class="type">void</span> *) mon_info-&gt;<span class="built_in">owner</span>()),</span><br><span class="line">                      <span class="built_in">p2i</span>((<span class="type">void</span> *) obj));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> (highest_lock != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="comment">//遍历结束之后Highest不为空说明找到了可重入锁的第一个锁头</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">// Fix up highest lock to contain displaced header and point</span></span><br><span class="line">    <span class="comment">// object at it</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//将表头设置为无锁状态</span></span><br><span class="line">    highest_lock-&gt;<span class="built_in">set_displaced_header</span>(unbiased_prototype);</span><br><span class="line">    <span class="comment">// Reset object header to point to displaced mark.</span></span><br><span class="line">    <span class="comment">// Must release storing the lock address for platforms without TSO</span></span><br><span class="line">    <span class="comment">// ordering (e.g. ppc).</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//将Obj的信息指向了高位锁，就是形成了一个轻量级锁</span></span><br><span class="line">    obj-&gt;<span class="built_in">release_set_mark</span>(markOopDesc::<span class="built_in">encode</span>(highest_lock));</span><br><span class="line">    <span class="built_in">assert</span>(!obj-&gt;<span class="built_in">mark</span>()-&gt;<span class="built_in">has_bias_pattern</span>(), <span class="string">&quot;illegal mark state: stack lock used bias bit&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (TraceBiasedLocking &amp;&amp; (Verbose || !is_bulk)) &#123;</span><br><span class="line">      tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;  Revoked bias of currently-locked object&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//反之Highest为空则说明没有线程持有锁</span></span><br><span class="line">    <span class="keyword">if</span> (TraceBiasedLocking &amp;&amp; (Verbose || !is_bulk)) &#123;</span><br><span class="line">      tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;  Revoked bias of currently-unlocked object&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (allow_rebias) &#123;</span><br><span class="line">        <span class="comment">//如果可以偏向则重新偏向 我们传入的是false</span></span><br><span class="line">      obj-&gt;<span class="built_in">set_mark</span>(biased_prototype);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Store the unlocked value into the object&#x27;s header.</span></span><br><span class="line">        <span class="comment">//将锁设为无锁状态</span></span><br><span class="line">      obj-&gt;<span class="built_in">set_mark</span>(unbiased_prototype);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//返回已经撤销锁信号</span></span><br><span class="line">  <span class="keyword">return</span> BiasedLocking::BIAS_REVOKED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="slow-enter"   >          <a href="#slow-enter" class="heading-link"><i class="fas fa-link"></i></a><a href="#slow-enter" class="headerlink" title="slow_enter"></a>slow_enter</h3>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ObjectSynchronizer::slow_enter</span><span class="params">(Handle obj, BasicLock* lock, TRAPS)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获得头信息</span></span><br><span class="line">  markOop mark = obj-&gt;<span class="built_in">mark</span>();</span><br><span class="line">  <span class="built_in">assert</span>(!mark-&gt;<span class="built_in">has_bias_pattern</span>(), <span class="string">&quot;should not see bias pattern here&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (mark-&gt;<span class="built_in">is_neutral</span>()) &#123;</span><br><span class="line">      <span class="comment">//如果记录是一个无锁状态</span></span><br><span class="line">    <span class="comment">// Anticipate successful CAS -- the ST of the displaced mark must</span></span><br><span class="line">    <span class="comment">// be visible &lt;= the ST performed by the CAS.</span></span><br><span class="line">      <span class="comment">//将锁设置成头信息</span></span><br><span class="line">    lock-&gt;<span class="built_in">set_displaced_header</span>(mark);</span><br><span class="line">    <span class="keyword">if</span> (mark == (markOop) Atomic::<span class="built_in">cmpxchg_ptr</span>(lock, <span class="built_in">obj</span>()-&gt;<span class="built_in">mark_addr</span>(), mark)) &#123;</span><br><span class="line">      <span class="comment">//CAS操作，成功即是轻量级锁</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">TEVENT</span> (slow_enter: release stacklock) ;</span><br><span class="line">      <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Fall through to inflate() ...</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mark-&gt;<span class="built_in">has_locker</span>() &amp;&amp; THREAD-&gt;<span class="built_in">is_lock_owned</span>((address)mark-&gt;<span class="built_in">locker</span>())) &#123;</span><br><span class="line">      <span class="comment">//反之锁已经有拥有者了，判断当前线程是否是持锁线程</span></span><br><span class="line">    <span class="built_in">assert</span>(lock != mark-&gt;<span class="built_in">locker</span>(), <span class="string">&quot;must not re-lock the same lock&quot;</span>);</span><br><span class="line">    <span class="built_in">assert</span>(lock != (BasicLock*)obj-&gt;<span class="built_in">mark</span>(), <span class="string">&quot;don&#x27;t relock with same BasicLock&quot;</span>);</span><br><span class="line">      <span class="comment">//如果是说明是轻量级锁的重入,将下一个Lock的头设为Null</span></span><br><span class="line">    lock-&gt;<span class="built_in">set_displaced_header</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">  <span class="comment">// The following optimization isn&#x27;t particularly useful.</span></span><br><span class="line">  <span class="keyword">if</span> (mark-&gt;<span class="built_in">has_monitor</span>() &amp;&amp; mark-&gt;<span class="built_in">monitor</span>()-&gt;<span class="built_in">is_entered</span>(THREAD)) &#123; </span><br><span class="line">    lock-&gt;<span class="built_in">set_displaced_header</span> (<span class="literal">NULL</span>) ;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// The object header will never be displaced to this lock,</span></span><br><span class="line">  <span class="comment">// so it does not matter what the value is, except that it</span></span><br><span class="line">  <span class="comment">// must be non-zero to avoid looking like a re-entrant lock,</span></span><br><span class="line">  <span class="comment">// and must not look locked either.</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//以上是轻量级锁的膨胀过程，下面是重量级锁的过程</span></span><br><span class="line">  lock-&gt;<span class="built_in">set_displaced_header</span>(markOopDesc::<span class="built_in">unused_mark</span>());</span><br><span class="line">  ObjectSynchronizer::<span class="built_in">inflate</span>(THREAD, <span class="built_in">obj</span>())-&gt;<span class="built_in">enter</span>(THREAD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>这里是上面没有详细说到的东西</p>        <h3 id="①轻量级锁重入"   >          <a href="#①轻量级锁重入" class="heading-link"><i class="fas fa-link"></i></a><a href="#①轻量级锁重入" class="headerlink" title="①轻量级锁重入"></a>①轻量级锁重入</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230803012321008.png"  alt="轻量级锁重入">      </p>        <h3 id="②线程安全点"   >          <a href="#②线程安全点" class="heading-link"><i class="fas fa-link"></i></a><a href="#②线程安全点" class="headerlink" title="②线程安全点"></a>②线程安全点</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230803014810909.png"  alt="线程安全点">      </p>        <h3 id="③轻量级锁膨胀流程图"   >          <a href="#③轻量级锁膨胀流程图" class="heading-link"><i class="fas fa-link"></i></a><a href="#③轻量级锁膨胀流程图" class="headerlink" title="③轻量级锁膨胀流程图"></a>③轻量级锁膨胀流程图</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230803015339537.png"  alt="轻量级锁膨胀流程图">      </p>        <h3 id="④撤销偏向锁流程图"   >          <a href="#④撤销偏向锁流程图" class="heading-link"><i class="fas fa-link"></i></a><a href="#④撤销偏向锁流程图" class="headerlink" title="④撤销偏向锁流程图"></a>④撤销偏向锁流程图</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230803022234477.png"  alt="撤销偏向锁(1)">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230803022147767.png"  alt="撤销偏向锁(2)">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230803023201645.png"  alt="撤销偏向锁(3)">      </p>        <h2 id="重量级锁-ObjectSynchronizer-inflate"   >          <a href="#重量级锁-ObjectSynchronizer-inflate" class="heading-link"><i class="fas fa-link"></i></a><a href="#重量级锁-ObjectSynchronizer-inflate" class="headerlink" title="重量级锁(ObjectSynchronizer::inflate)"></a>重量级锁(ObjectSynchronizer::inflate)</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ObjectMonitor * ATTR <span class="title">ObjectSynchronizer::inflate</span> <span class="params">(Thread * Self, oop object)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    参数一：线程</span></span><br><span class="line"><span class="comment">    参数二：持锁线程和BasicObjectLock</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">// Inflate mutates the heap ...</span></span><br><span class="line">  <span class="comment">// Relaxing assertion for bug 6320749.</span></span><br><span class="line">  <span class="built_in">assert</span> (Universe::<span class="built_in">verify_in_progress</span>() ||</span><br><span class="line">          !SafepointSynchronize::<span class="built_in">is_at_safepoint</span>(), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//死循环(自旋)</span></span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      <span class="comment">//获得头信息</span></span><br><span class="line">      <span class="type">const</span> markOop mark = object-&gt;<span class="built_in">mark</span>() ;</span><br><span class="line">      <span class="built_in">assert</span> (!mark-&gt;<span class="built_in">has_bias_pattern</span>(), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// The mark can be in one of the following states:</span></span><br><span class="line">      <span class="comment">// *  Inflated     - just return</span></span><br><span class="line">      <span class="comment">// *  Stack-locked - coerce it to inflated</span></span><br><span class="line">      <span class="comment">// *  INFLATING    - busy wait for conversion to complete</span></span><br><span class="line">      <span class="comment">// *  Neutral      - aggressively inflate the object.</span></span><br><span class="line">      <span class="comment">// *  BIASED       - Illegal.  We should never see this</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//情况1：已经是一个重量级锁</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// CASE: inflated</span></span><br><span class="line">      <span class="keyword">if</span> (mark-&gt;<span class="built_in">has_monitor</span>()) &#123;</span><br><span class="line">          <span class="comment">//has_monitor方法调用之后如果有的话返回True 说明这把锁已经是重量级锁 </span></span><br><span class="line">          ObjectMonitor * inf = mark-&gt;<span class="built_in">monitor</span>() ;</span><br><span class="line">          <span class="built_in">assert</span> (inf-&gt;<span class="built_in">header</span>()-&gt;<span class="built_in">is_neutral</span>(), <span class="string">&quot;invariant&quot;</span>);</span><br><span class="line">          <span class="built_in">assert</span> (inf-&gt;<span class="built_in">object</span>() == object, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">          <span class="built_in">assert</span> (ObjectSynchronizer::<span class="built_in">verify_objmon_isinpool</span>(inf), <span class="string">&quot;monitor is invalid&quot;</span>);</span><br><span class="line">          <span class="comment">//将monitor返回</span></span><br><span class="line">          <span class="keyword">return</span> inf ;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//情况2:这把锁处于一个轻量级锁膨胀到重量级的中间态(正在膨胀没有完成)</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// CASE: inflation in progress - inflating over a stack-lock.</span></span><br><span class="line">      <span class="comment">// Some other thread is converting from stack-locked to inflated.</span></span><br><span class="line">      <span class="comment">// Only that thread can complete inflation -- other threads must wait.</span></span><br><span class="line">      <span class="comment">// The INFLATING value is transient.</span></span><br><span class="line">      <span class="comment">// Currently, we spin/yield/park and poll the markword, waiting for inflation to finish.</span></span><br><span class="line">      <span class="comment">// We could always eliminate polling by parking the thread on some auxiliary list.</span></span><br><span class="line">      <span class="keyword">if</span> (mark == markOopDesc::<span class="built_in">INFLATING</span>()) &#123;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//如果是中间态就让出CPU 然后continue重新判断是否处于中间状态</span></span><br><span class="line">          </span><br><span class="line">         <span class="built_in">TEVENT</span> (Inflate: spin <span class="keyword">while</span> INFLATING) ;</span><br><span class="line">         <span class="built_in">ReadStableMark</span>(object) ;</span><br><span class="line">         <span class="keyword">continue</span> ;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// CASE: stack-locked</span></span><br><span class="line">      <span class="comment">// Could be stack-locked either by this thread or by some other thread.</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// Note that we allocate the objectmonitor speculatively, _before_ attempting</span></span><br><span class="line">      <span class="comment">// to install INFLATING into the mark word.  We originally installed INFLATING,</span></span><br><span class="line">      <span class="comment">// allocated the objectmonitor, and then finally STed the address of the</span></span><br><span class="line">      <span class="comment">// objectmonitor into the mark.  This was correct, but artificially lengthened</span></span><br><span class="line">      <span class="comment">// the interval in which INFLATED appeared in the mark, thus increasing</span></span><br><span class="line">      <span class="comment">// the odds of inflation contention.</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// We now use per-thread private objectmonitor free lists.</span></span><br><span class="line">      <span class="comment">// These list are reprovisioned from the global free list outside the</span></span><br><span class="line">      <span class="comment">// critical INFLATING...ST interval.  A thread can transfer</span></span><br><span class="line">      <span class="comment">// multiple objectmonitors en-mass from the global free list to its local free list.</span></span><br><span class="line">      <span class="comment">// This reduces coherency traffic and lock contention on the global free list.</span></span><br><span class="line">      <span class="comment">// Using such local free lists, it doesn&#x27;t matter if the omAlloc() call appears</span></span><br><span class="line">      <span class="comment">// before or after the CAS(INFLATING) operation.</span></span><br><span class="line">      <span class="comment">// See the comments in omAlloc().</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//情况3：目前这把锁是一把轻量级锁，轻量级锁要膨胀到重量级锁</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (mark-&gt;<span class="built_in">has_locker</span>()) &#123;</span><br><span class="line">          <span class="comment">//omalloc申请一个monitor m</span></span><br><span class="line">          </span><br><span class="line">          ObjectMonitor * m = <span class="built_in">omAlloc</span> (Self) ;</span><br><span class="line">          <span class="comment">// Optimistically prepare the objectmonitor - anticipate successful CAS</span></span><br><span class="line">          <span class="comment">// We do this before the CAS in order to minimize the length of time</span></span><br><span class="line">          <span class="comment">// in which INFLATING appears in the mark.</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">//m的初始化</span></span><br><span class="line">          </span><br><span class="line">          m-&gt;<span class="built_in">Recycle</span>();</span><br><span class="line">          m-&gt;_Responsible  = <span class="literal">NULL</span> ;</span><br><span class="line">          m-&gt;OwnerIsThread = <span class="number">0</span> ;</span><br><span class="line">          m-&gt;_recursions   = <span class="number">0</span> ;</span><br><span class="line">          m-&gt;_SpinDuration = ObjectMonitor::Knob_SpinLimit ;   <span class="comment">// Consider: maintain by type/class</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">//CAS将这个监视器的信息设置为正在膨胀的中间态(情况2)</span></span><br><span class="line">          markOop cmp = (markOop) Atomic::<span class="built_in">cmpxchg_ptr</span> (markOopDesc::<span class="built_in">INFLATING</span>(), object-&gt;<span class="built_in">mark_addr</span>(), mark);</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//判断CAS操作是否成功</span></span><br><span class="line">          <span class="keyword">if</span> (cmp != mark) &#123;</span><br><span class="line">              <span class="comment">//CAS失败 释放监控器，然后continue重试</span></span><br><span class="line">             <span class="built_in">omRelease</span> (Self, m, <span class="literal">true</span>) ;</span><br><span class="line">             <span class="keyword">continue</span> ;       <span class="comment">// Interference -- just retry</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// We&#x27;ve successfully installed INFLATING (0) into the mark-word.</span></span><br><span class="line">          <span class="comment">// This is the only case where 0 will appear in a mark-work.</span></span><br><span class="line">          <span class="comment">// Only the singular thread that successfully swings the mark-word</span></span><br><span class="line">          <span class="comment">// to 0 can perform (or more precisely, complete) inflation.</span></span><br><span class="line">          <span class="comment">//</span></span><br><span class="line">          <span class="comment">// Why do we CAS a 0 into the mark-word instead of just CASing the</span></span><br><span class="line">          <span class="comment">// mark-word from the stack-locked value directly to the new inflated state?</span></span><br><span class="line">          <span class="comment">// Consider what happens when a thread unlocks a stack-locked object.</span></span><br><span class="line">          <span class="comment">// It attempts to use CAS to swing the displaced header value from the</span></span><br><span class="line">          <span class="comment">// on-stack basiclock back into the object header.  Recall also that the</span></span><br><span class="line">          <span class="comment">// header value (hashcode, etc) can reside in (a) the object header, or</span></span><br><span class="line">          <span class="comment">// (b) a displaced header associated with the stack-lock, or (c) a displaced</span></span><br><span class="line">          <span class="comment">// header in an objectMonitor.  The inflate() routine must copy the header</span></span><br><span class="line">          <span class="comment">// value from the basiclock on the owner&#x27;s stack to the objectMonitor, all</span></span><br><span class="line">          <span class="comment">// the while preserving the hashCode stability invariants.  If the owner</span></span><br><span class="line">          <span class="comment">// decides to release the lock while the value is 0, the unlock will fail</span></span><br><span class="line">          <span class="comment">// and control will eventually pass from slow_exit() to inflate.  The owner</span></span><br><span class="line">          <span class="comment">// will then spin, waiting for the 0 value to disappear.   Put another way,</span></span><br><span class="line">          <span class="comment">// the 0 causes the owner to stall if the owner happens to try to</span></span><br><span class="line">          <span class="comment">// drop the lock (restoring the header from the basiclock to the object)</span></span><br><span class="line">          <span class="comment">// while inflation is in-progress.  This protocol avoids races that might</span></span><br><span class="line">          <span class="comment">// would otherwise permit hashCode values to change or &quot;flicker&quot; for an object.</span></span><br><span class="line">          <span class="comment">// Critically, while object-&gt;mark is 0 mark-&gt;displaced_mark_helper() is stable.</span></span><br><span class="line">          <span class="comment">// 0 serves as a &quot;BUSY&quot; inflate-in-progress indicator.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          <span class="comment">// fetch the displaced mark from the owner&#x27;s stack.</span></span><br><span class="line">          <span class="comment">// The owner can&#x27;t die or unwind past the lock while our INFLATING</span></span><br><span class="line">          <span class="comment">// object is in the mark.  Furthermore the owner can&#x27;t complete</span></span><br><span class="line">          <span class="comment">// an unlock on the object, either.</span></span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          <span class="comment">//运行到这里锁是轻量级锁，并且已经将头信息标记成正在膨胀的状态 并且cas成功</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">//获取头信息</span></span><br><span class="line">          markOop dmw = mark-&gt;<span class="built_in">displaced_mark_helper</span>() ;</span><br><span class="line">          <span class="built_in">assert</span> (dmw-&gt;<span class="built_in">is_neutral</span>(), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Setup monitor fields to proper values -- prepare the monitor</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">//将监控器的头信息更新</span></span><br><span class="line">          m-&gt;<span class="built_in">set_header</span>(dmw) ;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Optimization: if the mark-&gt;locker stack address is associated</span></span><br><span class="line">          <span class="comment">// with this thread we could simply set m-&gt;_owner = Self and</span></span><br><span class="line">          <span class="comment">// m-&gt;OwnerIsThread = 1. Note that a thread can inflate an object</span></span><br><span class="line">          <span class="comment">// that it has stack-locked -- as might happen in wait() -- directly</span></span><br><span class="line">          <span class="comment">// with CAS.  That is, we can avoid the xchg-NULL .... ST idiom.</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">//监视器的owner指向头信息中的locker</span></span><br><span class="line">          </span><br><span class="line">          m-&gt;<span class="built_in">set_owner</span>(mark-&gt;<span class="built_in">locker</span>());</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//监视器的object设置成当前object</span></span><br><span class="line">          </span><br><span class="line">          m-&gt;<span class="built_in">set_object</span>(object);</span><br><span class="line">          <span class="comment">// TODO-<span class="doctag">FIXME:</span> assert BasicLock-&gt;dhw != 0.</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// Must preserve store ordering. The monitor state must</span></span><br><span class="line">          <span class="comment">// be stable at the time of publishing the monitor address.</span></span><br><span class="line">          <span class="built_in">guarantee</span> (object-&gt;<span class="built_in">mark</span>() == markOopDesc::<span class="built_in">INFLATING</span>(), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//更新object中的信息</span></span><br><span class="line">          object-&gt;<span class="built_in">release_set_mark</span>(markOopDesc::<span class="built_in">encode</span>(m));</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Hopefully the performance counters are allocated on distinct cache lines</span></span><br><span class="line">          <span class="comment">// to avoid false sharing on MP systems ...</span></span><br><span class="line">          <span class="comment">//将计数器分布到不同的缓存行中???</span></span><br><span class="line">          <span class="keyword">if</span> (ObjectMonitor::_sync_Inflations != <span class="literal">NULL</span>) ObjectMonitor::_sync_Inflations-&gt;<span class="built_in">inc</span>() ;</span><br><span class="line">          <span class="built_in">TEVENT</span>(Inflate: overwrite stacklock) ;</span><br><span class="line">          <span class="keyword">if</span> (TraceMonitorInflation) &#123;</span><br><span class="line">            <span class="keyword">if</span> (object-&gt;<span class="built_in">is_instance</span>()) &#123;</span><br><span class="line">              ResourceMark rm;</span><br><span class="line">              tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;Inflating object &quot;</span> INTPTR_FORMAT <span class="string">&quot; , mark &quot;</span> INTPTR_FORMAT <span class="string">&quot; , type %s&quot;</span>,</span><br><span class="line">                (<span class="type">void</span> *) object, (<span class="type">intptr_t</span>) object-&gt;<span class="built_in">mark</span>(),</span><br><span class="line">                object-&gt;<span class="built_in">klass</span>()-&gt;<span class="built_in">external_name</span>());</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//返回监视器</span></span><br><span class="line">          <span class="keyword">return</span> m ;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// CASE: neutral</span></span><br><span class="line">      <span class="comment">// TODO-<span class="doctag">FIXME:</span> for entry we currently inflate and then try to CAS _owner.</span></span><br><span class="line">      <span class="comment">// If we know we&#x27;re inflating for entry it&#x27;s better to inflate by swinging a</span></span><br><span class="line">      <span class="comment">// pre-locked objectMonitor pointer into the object header.   A successful</span></span><br><span class="line">      <span class="comment">// CAS inflates the object *and* confers ownership to the inflating thread.</span></span><br><span class="line">      <span class="comment">// In the current implementation we use a 2-step mechanism where we CAS()</span></span><br><span class="line">      <span class="comment">// to inflate and then CAS() again to try to swing _owner from NULL to Self.</span></span><br><span class="line">      <span class="comment">// An inflateTry() method that we could call from fast_enter() and slow_enter()</span></span><br><span class="line">      <span class="comment">// would be useful.</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//情况4：现在状态是个无锁状态</span></span><br><span class="line">      </span><br><span class="line">      <span class="built_in">assert</span> (mark-&gt;<span class="built_in">is_neutral</span>(), <span class="string">&quot;invariant&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//申请一个监视器</span></span><br><span class="line">      ObjectMonitor * m = <span class="built_in">omAlloc</span> (Self) ;</span><br><span class="line">      <span class="comment">// prepare m for installation - set monitor to initial state</span></span><br><span class="line">      m-&gt;<span class="built_in">Recycle</span>();</span><br><span class="line">      m-&gt;<span class="built_in">set_header</span>(mark);</span><br><span class="line">      m-&gt;<span class="built_in">set_owner</span>(<span class="literal">NULL</span>);</span><br><span class="line">      m-&gt;<span class="built_in">set_object</span>(object);  <span class="comment">//监视器监视当前Object</span></span><br><span class="line">      m-&gt;OwnerIsThread = <span class="number">1</span> ;  <span class="comment">//锁持有者设置为1</span></span><br><span class="line">      m-&gt;_recursions   = <span class="number">0</span> ;</span><br><span class="line">      m-&gt;_Responsible  = <span class="literal">NULL</span> ;</span><br><span class="line">      m-&gt;_SpinDuration = ObjectMonitor::Knob_SpinLimit ;       <span class="comment">// consider: keep metastats by type/class</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//CAS操作更新监视器信息</span></span><br><span class="line">      <span class="keyword">if</span> (Atomic::<span class="built_in">cmpxchg_ptr</span> (markOopDesc::<span class="built_in">encode</span>(m), object-&gt;<span class="built_in">mark_addr</span>(), mark) != mark) &#123;</span><br><span class="line">          <span class="comment">//如果更新，说明有竞争，然后释放当前监视器，重新循环</span></span><br><span class="line">          </span><br><span class="line">          m-&gt;<span class="built_in">set_object</span> (<span class="literal">NULL</span>) ;</span><br><span class="line">          m-&gt;<span class="built_in">set_owner</span>  (<span class="literal">NULL</span>) ;</span><br><span class="line">          m-&gt;OwnerIsThread = <span class="number">0</span> ;</span><br><span class="line">          m-&gt;<span class="built_in">Recycle</span>() ;</span><br><span class="line">          <span class="built_in">omRelease</span> (Self, m, <span class="literal">true</span>) ;</span><br><span class="line">          m = <span class="literal">NULL</span> ;</span><br><span class="line">          <span class="keyword">continue</span> ;</span><br><span class="line">          <span class="comment">// interference - the markword changed - just retry.</span></span><br><span class="line">          <span class="comment">// The state-transitions are one-way, so there&#x27;s no chance of</span></span><br><span class="line">          <span class="comment">// live-lock -- &quot;Inflated&quot; is an absorbing state.</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Hopefully the performance counters are allocated on distinct</span></span><br><span class="line">      <span class="comment">// cache lines to avoid false sharing on MP systems ...</span></span><br><span class="line">      <span class="keyword">if</span> (ObjectMonitor::_sync_Inflations != <span class="literal">NULL</span>) ObjectMonitor::_sync_Inflations-&gt;<span class="built_in">inc</span>() ;</span><br><span class="line">      <span class="built_in">TEVENT</span>(Inflate: overwrite neutral) ;</span><br><span class="line">      <span class="keyword">if</span> (TraceMonitorInflation) &#123;</span><br><span class="line">        <span class="keyword">if</span> (object-&gt;<span class="built_in">is_instance</span>()) &#123;</span><br><span class="line">          ResourceMark rm;</span><br><span class="line">          tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;Inflating object &quot;</span> INTPTR_FORMAT <span class="string">&quot; , mark &quot;</span> INTPTR_FORMAT <span class="string">&quot; , type %s&quot;</span>,</span><br><span class="line">            (<span class="type">void</span> *) object, (<span class="type">intptr_t</span>) object-&gt;<span class="built_in">mark</span>(),</span><br><span class="line">            object-&gt;<span class="built_in">klass</span>()-&gt;<span class="built_in">external_name</span>());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> m ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//膨胀过程本质上就是获取监视器，而具体的加锁要在Entry方法中</span></span><br></pre></td></tr></table></div></figure>        <h3 id="重量级锁加锁流程图-膨胀"   >          <a href="#重量级锁加锁流程图-膨胀" class="heading-link"><i class="fas fa-link"></i></a><a href="#重量级锁加锁流程图-膨胀" class="headerlink" title="重量级锁加锁流程图(膨胀)"></a>重量级锁加锁流程图(膨胀)</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230803172249972.png"  alt="重量级锁加锁流程图(膨胀)">      </p><p><em><strong>膨胀过程本质上就是获取一个监视器</strong>，返回监视器，而具体加锁在监视器中的Entry方法中</em></p><p><em>过程就是判断是否有可用的Monitor，如果没有创建一个公共可用的Monitor数组(1024个)，然后将指向的监视器放到当前线程下可用的监视器中，然后公共可用的Monitor减少一个，具体代码如下</em></p>        <h3 id="申请监视器"   >          <a href="#申请监视器" class="heading-link"><i class="fas fa-link"></i></a><a href="#申请监视器" class="headerlink" title="申请监视器"></a>申请监视器</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">ObjectMonitor * ATTR ObjectSynchronizer::omAlloc (Thread * Self) &#123;</span><br><span class="line">    <span class="comment">// A large MAXPRIVATE value reduces both list lock contention</span></span><br><span class="line">    <span class="comment">// and list coherency traffic, but also tends to increase the</span></span><br><span class="line">    <span class="comment">// number of objectMonitors in circulation as well as the STW</span></span><br><span class="line">    <span class="comment">// scavenge costs.  As usual, we lean toward time in space-time</span></span><br><span class="line">    <span class="comment">// tradeoffs.</span></span><br><span class="line">    const <span class="type">int</span> <span class="variable">MAXPRIVATE</span> <span class="operator">=</span> <span class="number">1024</span> ;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        ObjectMonitor * m ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1: try to allocate from the thread&#x27;s local omFreeList.</span></span><br><span class="line">        <span class="comment">// Threads will attempt to allocate first from their local list, then</span></span><br><span class="line">        <span class="comment">// from the global list, and only after those attempts fail will the thread</span></span><br><span class="line">        <span class="comment">// attempt to instantiate new monitors.   Thread-local free lists take</span></span><br><span class="line">        <span class="comment">// heat off the ListLock and improve allocation latency, as well as reducing</span></span><br><span class="line">        <span class="comment">// coherency traffic on the shared global list.</span></span><br><span class="line">        m = Self-&gt;omFreeList ;</span><br><span class="line">        <span class="keyword">if</span> (m != NULL) &#123;</span><br><span class="line">           Self-&gt;omFreeList = m-&gt;FreeNext ;</span><br><span class="line">           Self-&gt;omFreeCount -- ;</span><br><span class="line">           <span class="comment">// CONSIDER: set m-&gt;FreeNext = BAD -- diagnostic hygiene</span></span><br><span class="line">           guarantee (m-&gt;object() == NULL, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">           <span class="keyword">if</span> (MonitorInUseLists) &#123;</span><br><span class="line">             m-&gt;FreeNext = Self-&gt;omInUseList;</span><br><span class="line">             Self-&gt;omInUseList = m;</span><br><span class="line">             Self-&gt;omInUseCount ++;</span><br><span class="line">             <span class="comment">// verifyInUse(Self);</span></span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             m-&gt;FreeNext = NULL;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> m ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2: try to allocate from the global gFreeList</span></span><br><span class="line">        <span class="comment">// CONSIDER: use muxTry() instead of muxAcquire().</span></span><br><span class="line">        <span class="comment">// If the muxTry() fails then drop immediately into case 3.</span></span><br><span class="line">        <span class="comment">// If we&#x27;re using thread-local free lists then try</span></span><br><span class="line">        <span class="comment">// to reprovision the caller&#x27;s free list.</span></span><br><span class="line">        <span class="keyword">if</span> (gFreeList != NULL) &#123;</span><br><span class="line">            <span class="comment">// Reprovision the thread&#x27;s omFreeList.</span></span><br><span class="line">            <span class="comment">// Use bulk transfers to reduce the allocation rate and heat</span></span><br><span class="line">            <span class="comment">// on various locks.</span></span><br><span class="line">            Thread::muxAcquire (&amp;ListLock, <span class="string">&quot;omAlloc&quot;</span>) ;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Self-&gt;omFreeProvision; --i &gt;= <span class="number">0</span> &amp;&amp; gFreeList != NULL; ) &#123;</span><br><span class="line">                MonitorFreeCount --;</span><br><span class="line">                ObjectMonitor * take = gFreeList ;</span><br><span class="line">                gFreeList = take-&gt;FreeNext ;</span><br><span class="line">                guarantee (take-&gt;object() == NULL, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">                guarantee (!take-&gt;is_busy(), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">                take-&gt;Recycle() ;</span><br><span class="line">                omRelease (Self, take, <span class="literal">false</span>) ;</span><br><span class="line">            &#125;</span><br><span class="line">            Thread::muxRelease (&amp;ListLock) ;</span><br><span class="line">            Self-&gt;omFreeProvision += <span class="number">1</span> + (Self-&gt;omFreeProvision/<span class="number">2</span>) ;</span><br><span class="line">            <span class="keyword">if</span> (Self-&gt;omFreeProvision &gt; MAXPRIVATE ) Self-&gt;omFreeProvision = MAXPRIVATE ;</span><br><span class="line">            TEVENT (omFirst - reprovision) ;</span><br><span class="line"></span><br><span class="line">            const <span class="type">int</span> <span class="variable">mx</span> <span class="operator">=</span> MonitorBound ;</span><br><span class="line">            <span class="keyword">if</span> (mx &gt; <span class="number">0</span> &amp;&amp; (MonitorPopulation-MonitorFreeCount) &gt; mx) &#123;</span><br><span class="line">              <span class="comment">// We can&#x27;t safely induce a STW safepoint from omAlloc() as our thread</span></span><br><span class="line">              <span class="comment">// state may not be appropriate for such activities and callers may hold</span></span><br><span class="line">              <span class="comment">// naked oops, so instead we defer the action.</span></span><br><span class="line">              InduceScavenge (Self, <span class="string">&quot;omAlloc&quot;</span>) ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3: allocate a block of new ObjectMonitors</span></span><br><span class="line">        <span class="comment">// Both the local and global free lists are empty -- resort to malloc().</span></span><br><span class="line">        <span class="comment">// In the current implementation objectMonitors are TSM - immortal.</span></span><br><span class="line">        <span class="keyword">assert</span> (_BLOCKSIZE &gt; <span class="number">1</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        ObjectMonitor * temp = <span class="keyword">new</span> <span class="title class_">ObjectMonitor</span>[_BLOCKSIZE];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> (almost) no way to recover if allocation failed.</span></span><br><span class="line">        <span class="comment">// We might be able to induce a STW safepoint and scavenge enough</span></span><br><span class="line">        <span class="comment">// objectMonitors to permit progress.</span></span><br><span class="line">        <span class="keyword">if</span> (temp == NULL) &#123;</span><br><span class="line">            vm_exit_out_of_memory (sizeof (ObjectMonitor[_BLOCKSIZE]), OOM_MALLOC_ERROR,</span><br><span class="line">                                   <span class="string">&quot;Allocate ObjectMonitors&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Format the block.</span></span><br><span class="line">        <span class="comment">// initialize the linked list, each monitor points to its next</span></span><br><span class="line">        <span class="comment">// forming the single linked free list, the very first monitor</span></span><br><span class="line">        <span class="comment">// will points to next block, which forms the block list.</span></span><br><span class="line">        <span class="comment">// The trick of using the 1st element in the block as gBlockList</span></span><br><span class="line">        <span class="comment">// linkage should be reconsidered.  A better implementation would</span></span><br><span class="line">        <span class="comment">// look like: class Block &#123; Block * next; int N; ObjectMonitor Body [N] ; &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; _BLOCKSIZE ; i++) &#123;</span><br><span class="line">           temp[i].FreeNext = &amp;temp[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// terminate the last monitor as the end of list</span></span><br><span class="line">        temp[_BLOCKSIZE - <span class="number">1</span>].FreeNext = NULL ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Element [0] is reserved for global list linkage</span></span><br><span class="line">        temp[<span class="number">0</span>].set_object(CHAINMARKER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Consider carving out this thread&#x27;s current request from the</span></span><br><span class="line">        <span class="comment">// block in hand.  This avoids some lock traffic and redundant</span></span><br><span class="line">        <span class="comment">// list activity.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Acquire the ListLock to manipulate BlockList and FreeList.</span></span><br><span class="line">        <span class="comment">// An Oyama-Taura-Yonezawa scheme might be more efficient.</span></span><br><span class="line">        Thread::muxAcquire (&amp;ListLock, <span class="string">&quot;omAlloc [2]&quot;</span>) ;</span><br><span class="line">        MonitorPopulation += _BLOCKSIZE-<span class="number">1</span>;</span><br><span class="line">        MonitorFreeCount += _BLOCKSIZE-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the new block to the list of extant blocks (gBlockList).</span></span><br><span class="line">        <span class="comment">// The very first objectMonitor in a block is reserved and dedicated.</span></span><br><span class="line">        <span class="comment">// It serves as blocklist &quot;next&quot; linkage.</span></span><br><span class="line">        temp[<span class="number">0</span>].FreeNext = gBlockList;</span><br><span class="line">        gBlockList = temp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the new string of objectMonitors to the global free list</span></span><br><span class="line">        temp[_BLOCKSIZE - <span class="number">1</span>].FreeNext = gFreeList ;</span><br><span class="line">        gFreeList = temp + <span class="number">1</span>;</span><br><span class="line">        Thread::muxRelease (&amp;ListLock) ;</span><br><span class="line">        TEVENT (Allocate block of monitors) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="重量级锁竞争"   >          <a href="#重量级锁竞争" class="heading-link"><i class="fas fa-link"></i></a><a href="#重量级锁竞争" class="headerlink" title="重量级锁竞争"></a>重量级锁竞争</h3>              <h4 id="ObjectMonitor-enter"   >          <a href="#ObjectMonitor-enter" class="heading-link"><i class="fas fa-link"></i></a><a href="#ObjectMonitor-enter" class="headerlink" title="ObjectMonitor::enter"></a>ObjectMonitor::enter</h4>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> ATTR <span class="title">ObjectMonitor::enter</span><span class="params">(TRAPS)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// The following code is ordered to check the most common cases first</span></span><br><span class="line">  <span class="comment">// and to reduce RTS-&gt;RTO cache line upgrades on SPARC and IA32 processors.</span></span><br><span class="line">  Thread * <span class="type">const</span> Self = THREAD ;</span><br><span class="line">  <span class="type">void</span> * cur ;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//记录当前线程，CUR记录CAS结果 </span></span><br><span class="line">  <span class="comment">//cas成功会返回null</span></span><br><span class="line">  cur = Atomic::<span class="built_in">cmpxchg_ptr</span> (Self, &amp;_owner, <span class="literal">NULL</span>) ;</span><br><span class="line">  <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="comment">//CAS成功 即加锁成功</span></span><br><span class="line">      </span><br><span class="line">     <span class="comment">// Either ASSERT _recursions == 0 or explicitly set _recursions = 0.</span></span><br><span class="line">     <span class="built_in">assert</span> (_recursions == <span class="number">0</span>   , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">     <span class="built_in">assert</span> (_owner      == Self, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">     <span class="comment">// CONSIDER: set or assert OwnerIsThread == 1</span></span><br><span class="line">     <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (cur == Self) &#123;</span><br><span class="line">      <span class="comment">//判断是否是当前线程，如果是就是重量级锁重入</span></span><br><span class="line">     <span class="comment">// TODO-<span class="doctag">FIXME:</span> check for integer overflow!  BUGID 6557169.</span></span><br><span class="line">     _recursions ++ ;</span><br><span class="line">      <span class="comment">//重量级锁重入次数++</span></span><br><span class="line">     <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (Self-&gt;<span class="built_in">is_lock_owned</span> ((address)cur)) &#123;</span><br><span class="line">    <span class="comment">//判断持锁线程是不是地址值，就是当前拥有轻量级锁的重入</span></span><br><span class="line">     <span class="built_in">assert</span> (_recursions == <span class="number">0</span>, <span class="string">&quot;internal state error&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//将重量级锁重入次数设置为1</span></span><br><span class="line">    _recursions = <span class="number">1</span> ;</span><br><span class="line">    <span class="comment">// Commute owner from a thread-specific on-stack BasicLockObject address to</span></span><br><span class="line">    <span class="comment">// a full-fledged &quot;Thread *&quot;.</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//将监视器的信息更新，锁变成重量级锁</span></span><br><span class="line">    _owner = Self ;</span><br><span class="line">    OwnerIsThread = <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We&#x27;ve encountered genuine contention.</span></span><br><span class="line">  <span class="built_in">assert</span> (Self-&gt;_Stalled == <span class="number">0</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  Self-&gt;_Stalled = <span class="built_in">intptr_t</span>(<span class="keyword">this</span>) ;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Try one round of spinning *before* enqueueing Self</span></span><br><span class="line">  <span class="comment">// and before going through the awkward and expensive state</span></span><br><span class="line">  <span class="comment">// transitions.  The following spin is strictly optional ...</span></span><br><span class="line">  <span class="comment">// Note that if we acquire the monitor from an initial spin</span></span><br><span class="line">  <span class="comment">// we forgo posting JVMTI events and firing DTRACE probes.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断环境变量是否能自旋，然后自适应自旋</span></span><br><span class="line">  <span class="keyword">if</span> (Knob_SpinEarly &amp;&amp; <span class="built_in">TrySpin</span> (Self) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="built_in">assert</span> (_owner == Self      , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">     <span class="built_in">assert</span> (_recursions == <span class="number">0</span>    , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">     <span class="built_in">assert</span> (((oop)(<span class="built_in">object</span>()))-&gt;<span class="built_in">mark</span>() == markOopDesc::<span class="built_in">encode</span>(<span class="keyword">this</span>), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">     Self-&gt;_Stalled = <span class="number">0</span> ;</span><br><span class="line">     <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">assert</span> (_owner != Self          , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  <span class="built_in">assert</span> (_succ  != Self          , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  <span class="built_in">assert</span> (Self-&gt;<span class="built_in">is_Java_thread</span>()  , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  JavaThread * jt = (JavaThread *) Self ;</span><br><span class="line">  <span class="built_in">assert</span> (!SafepointSynchronize::<span class="built_in">is_at_safepoint</span>(), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  <span class="built_in">assert</span> (jt-&gt;<span class="built_in">thread_state</span>() != _thread_blocked   , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  <span class="built_in">assert</span> (<span class="keyword">this</span>-&gt;<span class="built_in">object</span>() != <span class="literal">NULL</span>  , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  <span class="built_in">assert</span> (_count &gt;= <span class="number">0</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Prevent deflation at STW-time.  See deflate_idle_monitors() and is_busy().</span></span><br><span class="line">  <span class="comment">// Ensure the object-monitor relationship remains stable while there&#x27;s contention.</span></span><br><span class="line">  Atomic::<span class="built_in">inc_ptr</span>(&amp;_count);</span><br><span class="line"></span><br><span class="line">  EventJavaMonitorEnter event;</span><br><span class="line"></span><br><span class="line">  &#123; <span class="comment">// Change java thread status to indicate blocked on monitor enter.</span></span><br><span class="line">    <span class="function">JavaThreadBlockedOnMonitorEnterState <span class="title">jtbmes</span><span class="params">(jt, <span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DTRACE_MONITOR_PROBE</span>(contended__enter, <span class="keyword">this</span>, <span class="built_in">object</span>(), jt);</span><br><span class="line">    <span class="keyword">if</span> (JvmtiExport::<span class="built_in">should_post_monitor_contended_enter</span>()) &#123;</span><br><span class="line">      JvmtiExport::<span class="built_in">post_monitor_contended_enter</span>(jt, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// The current thread does not yet own the monitor and does not</span></span><br><span class="line">      <span class="comment">// yet appear on any queues that would get it made the successor.</span></span><br><span class="line">      <span class="comment">// This means that the JVMTI_EVENT_MONITOR_CONTENDED_ENTER event</span></span><br><span class="line">      <span class="comment">// handler cannot accidentally consume an unpark() meant for the</span></span><br><span class="line">      <span class="comment">// ParkEvent associated with this ObjectMonitor.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">OSThreadContendState <span class="title">osts</span><span class="params">(Self-&gt;osthread())</span></span>;</span><br><span class="line">    <span class="function">ThreadBlockInVM <span class="title">tbivm</span><span class="params">(jt)</span></span>;</span><br><span class="line"></span><br><span class="line">    Self-&gt;<span class="built_in">set_current_pending_monitor</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO-<span class="doctag">FIXME:</span> change the following for(;;) loop to straight-line code.</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="comment">//死循环(自旋) 进入EnterI,如果出现意外导致拿锁失败则退出 </span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      jt-&gt;<span class="built_in">set_suspend_equivalent</span>();</span><br><span class="line">      <span class="comment">// cleared by handle_special_suspend_equivalent_condition()</span></span><br><span class="line">      <span class="comment">// or java_suspend_self()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//进入EnterI方法</span></span><br><span class="line">      <span class="built_in">EnterI</span> (THREAD) ;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">ExitSuspendEquivalent</span>(jt)) <span class="keyword">break</span> ;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// We have acquired the contended monitor, but while we were</span></span><br><span class="line">      <span class="comment">// waiting another thread suspended us. We don&#x27;t want to enter</span></span><br><span class="line">      <span class="comment">// the monitor while suspended because that would surprise the</span></span><br><span class="line">      <span class="comment">// thread that suspended us.</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">          _recursions = <span class="number">0</span> ;</span><br><span class="line">      _succ = <span class="literal">NULL</span> ;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//出现意外导致拿锁失败了则结束</span></span><br><span class="line">      <span class="built_in">exit</span> (<span class="literal">false</span>, Self) ;</span><br><span class="line"></span><br><span class="line">      jt-&gt;<span class="built_in">java_suspend_self</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    Self-&gt;<span class="built_in">set_current_pending_monitor</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We cleared the pending monitor info since we&#x27;ve just gotten past</span></span><br><span class="line">    <span class="comment">// the enter-check-for-suspend dance and we now own the monitor free</span></span><br><span class="line">    <span class="comment">// and clear, i.e., it is no longer pending. The ThreadBlockInVM</span></span><br><span class="line">    <span class="comment">// destructor can go to a safepoint at the end of this block. If we</span></span><br><span class="line">    <span class="comment">// do a thread dump during that safepoint, then this thread will show</span></span><br><span class="line">    <span class="comment">// as having &quot;-locked&quot; the monitor, but the OS and java.lang.Thread</span></span><br><span class="line">    <span class="comment">// states will still report that the thread is blocked trying to</span></span><br><span class="line">    <span class="comment">// acquire it.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Atomic::<span class="built_in">dec_ptr</span>(&amp;_count);</span><br><span class="line">  <span class="built_in">assert</span> (_count &gt;= <span class="number">0</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  Self-&gt;_Stalled = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Must either set _recursions = 0 or ASSERT _recursions == 0.</span></span><br><span class="line">  <span class="built_in">assert</span> (_recursions == <span class="number">0</span>     , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  <span class="built_in">assert</span> (_owner == Self       , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  <span class="built_in">assert</span> (_succ  != Self       , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  <span class="built_in">assert</span> (((oop)(<span class="built_in">object</span>()))-&gt;<span class="built_in">mark</span>() == markOopDesc::<span class="built_in">encode</span>(<span class="keyword">this</span>), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The thread -- now the owner -- is back in vm mode.</span></span><br><span class="line">  <span class="comment">// Report the glorious news via TI,DTrace and jvmstat.</span></span><br><span class="line">  <span class="comment">// The probe effect is non-trivial.  All the reportage occurs</span></span><br><span class="line">  <span class="comment">// while we hold the monitor, increasing the length of the critical</span></span><br><span class="line">  <span class="comment">// section.  Amdahl&#x27;s parallel speedup law comes vividly into play.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Another option might be to aggregate the events (thread local or</span></span><br><span class="line">  <span class="comment">// per-monitor aggregation) and defer reporting until a more opportune</span></span><br><span class="line">  <span class="comment">// time -- such as next time some thread encounters contention but has</span></span><br><span class="line">  <span class="comment">// yet to acquire the lock.  While spinning that thread could</span></span><br><span class="line">  <span class="comment">// spinning we could increment JVMStat counters, etc.</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">DTRACE_MONITOR_PROBE</span>(contended__entered, <span class="keyword">this</span>, <span class="built_in">object</span>(), jt);</span><br><span class="line">  <span class="keyword">if</span> (JvmtiExport::<span class="built_in">should_post_monitor_contended_entered</span>()) &#123;</span><br><span class="line">    JvmtiExport::<span class="built_in">post_monitor_contended_entered</span>(jt, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The current thread already owns the monitor and is not going to</span></span><br><span class="line">    <span class="comment">// call park() for the remainder of the monitor enter protocol. So</span></span><br><span class="line">    <span class="comment">// it doesn&#x27;t matter if the JVMTI_EVENT_MONITOR_CONTENDED_ENTERED</span></span><br><span class="line">    <span class="comment">// event handler consumed an unpark() issued by the thread that</span></span><br><span class="line">    <span class="comment">// just exited the monitor.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (event.<span class="built_in">should_commit</span>()) &#123;</span><br><span class="line">    event.<span class="built_in">set_klass</span>(((oop)<span class="keyword">this</span>-&gt;<span class="built_in">object</span>())-&gt;<span class="built_in">klass</span>());</span><br><span class="line">    event.<span class="built_in">set_previousOwner</span>((TYPE_JAVALANGTHREAD)_previous_owner_tid);</span><br><span class="line">    event.<span class="built_in">set_address</span>((TYPE_ADDRESS)(<span class="type">uintptr_t</span>)(<span class="keyword">this</span>-&gt;<span class="built_in">object_addr</span>()));</span><br><span class="line">    event.<span class="built_in">commit</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ObjectMonitor::_sync_ContendedLockAttempts != <span class="literal">NULL</span>) &#123;</span><br><span class="line">     ObjectMonitor::_sync_ContendedLockAttempts-&gt;<span class="built_in">inc</span>() ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="ObjectMonitor-entryI"   >          <a href="#ObjectMonitor-entryI" class="heading-link"><i class="fas fa-link"></i></a><a href="#ObjectMonitor-entryI" class="headerlink" title="ObjectMonitor::entryI"></a>ObjectMonitor::entryI</h4>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> ATTR <span class="title">ObjectMonitor::EnterI</span> <span class="params">(TRAPS)</span> </span>&#123;</span><br><span class="line">    Thread * Self = THREAD ;</span><br><span class="line">    <span class="built_in">assert</span> (Self-&gt;<span class="built_in">is_Java_thread</span>(), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">    <span class="built_in">assert</span> (((JavaThread *) Self)-&gt;<span class="built_in">thread_state</span>() == _thread_blocked   , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Try the lock - TATAS</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//TryLock方法</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">TryLock</span> (Self) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">assert</span> (_succ != Self              , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        <span class="built_in">assert</span> (_owner == Self             , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        <span class="built_in">assert</span> (_Responsible != Self       , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DeferredInitialize</span> () ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We try one round of spinning *before* enqueueing Self.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// If the _owner is ready but OFFPROC we could use a YieldTo()</span></span><br><span class="line">    <span class="comment">// operation to donate the remainder of this thread&#x27;s quantum</span></span><br><span class="line">    <span class="comment">// to the owner.  This has subtle but beneficial affinity</span></span><br><span class="line">    <span class="comment">// effects.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//尝试自旋拿锁</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">TrySpin</span> (Self) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">assert</span> (_owner == Self        , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        <span class="built_in">assert</span> (_succ != Self         , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        <span class="built_in">assert</span> (_Responsible != Self  , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The Spin failed -- Enqueue and park the thread ...</span></span><br><span class="line">    <span class="built_in">assert</span> (_succ  != Self            , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">    <span class="built_in">assert</span> (_owner != Self            , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">    <span class="built_in">assert</span> (_Responsible != Self      , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enqueue &quot;Self&quot; on ObjectMonitor&#x27;s _cxq.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Node acts as a proxy for Self.</span></span><br><span class="line">    <span class="comment">// As an aside, if were to ever rewrite the synchronization code mostly</span></span><br><span class="line">    <span class="comment">// in Java, WaitNodes, ObjectMonitors, and Events would become 1st-class</span></span><br><span class="line">    <span class="comment">// Java objects.  This would avoid awkward lifecycle and liveness issues,</span></span><br><span class="line">    <span class="comment">// as well as eliminate a subset of ABA issues.</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> eliminate ObjectWaiter and enqueue either Threads or Events.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//自适应自旋拿不到锁 所以要入阻塞队列中</span></span><br><span class="line">    </span><br><span class="line">    <span class="function">ObjectWaiter <span class="title">node</span><span class="params">(Self)</span> </span>;</span><br><span class="line">    Self-&gt;_ParkEvent-&gt;<span class="built_in">reset</span>() ;</span><br><span class="line">    node._prev   = (ObjectWaiter *) <span class="number">0xBAD</span> ;</span><br><span class="line">    node.TState  = ObjectWaiter::TS_CXQ ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Push &quot;Self&quot; onto the front of the _cxq.</span></span><br><span class="line">    <span class="comment">// Once on cxq/EntryList, Self stays on-queue until it acquires the lock.</span></span><br><span class="line">    <span class="comment">// Note that spinning tends to reduce the rate at which threads</span></span><br><span class="line">    <span class="comment">// enqueue and dequeue on EntryList|cxq.</span></span><br><span class="line">    ObjectWaiter * nxt ;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//死循环</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">//获取cxq阻塞队列  node.next和nxt都指向这个阻塞队列</span></span><br><span class="line">        node._next = nxt = _cxq ;</span><br><span class="line">        <span class="comment">//CAS操作，如果成功说明这个ObjectWaiter进入了Monitor的阻塞队列中队列中</span></span><br><span class="line">        <span class="keyword">if</span> (Atomic::<span class="built_in">cmpxchg_ptr</span> (&amp;node, &amp;_cxq, nxt) == nxt) <span class="keyword">break</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Interference - the CAS failed because _cxq changed.  Just retry.</span></span><br><span class="line">        <span class="comment">// As an optional optimization we retry the lock.</span></span><br><span class="line">        <span class="comment">//尝试去获取锁，如果成功则返回1</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">TryLock</span> (Self) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">assert</span> (_succ != Self         , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">            <span class="built_in">assert</span> (_owner == Self        , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">            <span class="built_in">assert</span> (_Responsible != Self  , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check for cxq|EntryList edge transition to non-null.  This indicates</span></span><br><span class="line">    <span class="comment">// the onset of contention.  While contention persists exiting threads</span></span><br><span class="line">    <span class="comment">// will use a ST:MEMBAR:LD 1-1 exit protocol.  When contention abates exit</span></span><br><span class="line">    <span class="comment">// operations revert to the faster 1-0 mode.  This enter operation may interleave</span></span><br><span class="line">    <span class="comment">// (race) a concurrent 1-0 exit operation, resulting in stranding, so we</span></span><br><span class="line">    <span class="comment">// arrange for one of the contending thread to use a timed park() operations</span></span><br><span class="line">    <span class="comment">// to detect and recover from the race.  (Stranding is form of progress failure</span></span><br><span class="line">    <span class="comment">// where the monitor is unlocked but all the contending threads remain parked).</span></span><br><span class="line">    <span class="comment">// That is, at least one of the contended threads will periodically poll _owner.</span></span><br><span class="line">    <span class="comment">// One of the contending threads will become the designated &quot;Responsible&quot; thread.</span></span><br><span class="line">    <span class="comment">// The Responsible thread uses a timed park instead of a normal indefinite park</span></span><br><span class="line">    <span class="comment">// operation -- it periodically wakes and checks for and recovers from potential</span></span><br><span class="line">    <span class="comment">// strandings admitted by 1-0 exit operations.   We need at most one Responsible</span></span><br><span class="line">    <span class="comment">// thread per-monitor at any given moment.  Only threads on cxq|EntryList may</span></span><br><span class="line">    <span class="comment">// be responsible for a monitor.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Currently, one of the contended threads takes on the added role of &quot;Responsible&quot;.</span></span><br><span class="line">    <span class="comment">// A viable alternative would be to use a dedicated &quot;stranding checker&quot; thread</span></span><br><span class="line">    <span class="comment">// that periodically iterated over all the threads (or active monitors) and unparked</span></span><br><span class="line">    <span class="comment">// successors where there was risk of stranding.  This would help eliminate the</span></span><br><span class="line">    <span class="comment">// timer scalability issues we see on some platforms as we&#x27;d only have one thread</span></span><br><span class="line">    <span class="comment">// -- the checker -- parked on a timer.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行边界检查</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ((SyncFlags &amp; <span class="number">16</span>) == <span class="number">0</span> &amp;&amp; nxt == <span class="literal">NULL</span> &amp;&amp; _EntryList == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// Try to assume the role of responsible thread for the monitor.</span></span><br><span class="line">        <span class="comment">// CONSIDER:  ST vs CAS vs &#123; if (Responsible==null) Responsible=Self &#125;</span></span><br><span class="line">        Atomic::<span class="built_in">cmpxchg_ptr</span> (Self, &amp;_Responsible, <span class="literal">NULL</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The lock have been released while this thread was occupied queueing</span></span><br><span class="line">    <span class="comment">// itself onto _cxq.  To close the race and avoid &quot;stranding&quot; and</span></span><br><span class="line">    <span class="comment">// progress-liveness failure we must resample-retry _owner before parking.</span></span><br><span class="line">    <span class="comment">// Note the Dekker/Lamport duality: ST cxq; MEMBAR; LD Owner.</span></span><br><span class="line">    <span class="comment">// In this case the ST-MEMBAR is accomplished with CAS().</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Defer all thread state transitions until park-time.</span></span><br><span class="line">    <span class="comment">// Since state transitions are heavy and inefficient we&#x27;d like</span></span><br><span class="line">    <span class="comment">// to defer the state transitions until absolutely necessary,</span></span><br><span class="line">    <span class="comment">// and in doing so avoid some transitions ...</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">TEVENT</span> (Inflated enter - Contention) ;</span><br><span class="line">    <span class="type">int</span> nWakeups = <span class="number">0</span> ;</span><br><span class="line">    <span class="type">int</span> RecheckInterval = <span class="number">1</span> ;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//运行到这里说明已经进了阻塞队列中</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//尝试去获取锁，获取锁成功就跳出</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">TryLock</span> (Self) &gt; <span class="number">0</span>) <span class="keyword">break</span> ;</span><br><span class="line">        <span class="built_in">assert</span> (_owner != Self, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((SyncFlags &amp; <span class="number">2</span>) &amp;&amp; _Responsible == <span class="literal">NULL</span>) &#123;</span><br><span class="line">           Atomic::<span class="built_in">cmpxchg_ptr</span> (Self, &amp;_Responsible, <span class="literal">NULL</span>) ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//阻塞线程</span></span><br><span class="line">        <span class="comment">// park self</span></span><br><span class="line">        <span class="keyword">if</span> (_Responsible == Self || (SyncFlags &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="built_in">TEVENT</span> (Inflated enter - park TIMED) ;</span><br><span class="line">            Self-&gt;_ParkEvent-&gt;<span class="built_in">park</span> ((jlong) RecheckInterval) ;</span><br><span class="line">            <span class="comment">// Increase the RecheckInterval, but clamp the value.</span></span><br><span class="line">            RecheckInterval *= <span class="number">8</span> ;</span><br><span class="line">            <span class="keyword">if</span> (RecheckInterval &gt; <span class="number">1000</span>) RecheckInterval = <span class="number">1000</span> ;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">TEVENT</span> (Inflated enter - park UNTIMED) ;</span><br><span class="line">            Self-&gt;_ParkEvent-&gt;<span class="built_in">park</span>() ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取成功就跳出</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">TryLock</span>(Self) &gt; <span class="number">0</span>) <span class="keyword">break</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The lock is still contested.</span></span><br><span class="line">        <span class="comment">// Keep a tally of the # of futile wakeups.</span></span><br><span class="line">        <span class="comment">// Note that the counter is not protected by a lock or updated by atomics.</span></span><br><span class="line">        <span class="comment">// That is by design - we trade &quot;lossy&quot; counters which are exposed to</span></span><br><span class="line">        <span class="comment">// races during updates for a lower probe effect.</span></span><br><span class="line">        <span class="built_in">TEVENT</span> (Inflated enter - Futile wakeup) ;</span><br><span class="line">        <span class="keyword">if</span> (ObjectMonitor::_sync_FutileWakeups != <span class="literal">NULL</span>) &#123;</span><br><span class="line">           ObjectMonitor::_sync_FutileWakeups-&gt;<span class="built_in">inc</span>() ;</span><br><span class="line">        &#125;</span><br><span class="line">        ++ nWakeups ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Assuming this is not a spurious wakeup we&#x27;ll normally find _succ == Self.</span></span><br><span class="line">        <span class="comment">// We can defer clearing _succ until after the spin completes</span></span><br><span class="line">        <span class="comment">// TrySpin() must tolerate being called with _succ == Self.</span></span><br><span class="line">        <span class="comment">// Try yet another round of adaptive spinning.</span></span><br><span class="line">        <span class="keyword">if</span> ((Knob_SpinAfterFutile &amp; <span class="number">1</span>) &amp;&amp; <span class="built_in">TrySpin</span> (Self) &gt; <span class="number">0</span>) <span class="keyword">break</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We can find that we were unpark()ed and redesignated _succ while</span></span><br><span class="line">        <span class="comment">// we were spinning.  That&#x27;s harmless.  If we iterate and call park(),</span></span><br><span class="line">        <span class="comment">// park() will consume the event and return immediately and we&#x27;ll</span></span><br><span class="line">        <span class="comment">// just spin again.  This pattern can repeat, leaving _succ to simply</span></span><br><span class="line">        <span class="comment">// spin on a CPU.  Enable Knob_ResetEvent to clear pending unparks().</span></span><br><span class="line">        <span class="comment">// Alternately, we can sample fired() here, and if set, forgo spinning</span></span><br><span class="line">        <span class="comment">// in the next iteration.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((Knob_ResetEvent &amp; <span class="number">1</span>) &amp;&amp; Self-&gt;_ParkEvent-&gt;<span class="built_in">fired</span>()) &#123;</span><br><span class="line">           Self-&gt;_ParkEvent-&gt;<span class="built_in">reset</span>() ;</span><br><span class="line">           OrderAccess::<span class="built_in">fence</span>() ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (_succ == Self) _succ = <span class="literal">NULL</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Invariant: after clearing _succ a thread *must* retry _owner before parking.</span></span><br><span class="line">        OrderAccess::<span class="built_in">fence</span>() ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Egress :</span></span><br><span class="line">    <span class="comment">// Self has acquired the lock -- Unlink Self from the cxq or EntryList.</span></span><br><span class="line">    <span class="comment">// Normally we&#x27;ll find Self on the EntryList .</span></span><br><span class="line">    <span class="comment">// From the perspective of the lock owner (this thread), the</span></span><br><span class="line">    <span class="comment">// EntryList is stable and cxq is prepend-only.</span></span><br><span class="line">    <span class="comment">// The head of cxq is volatile but the interior is stable.</span></span><br><span class="line">    <span class="comment">// In addition, Self.TState is stable.</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert</span> (_owner == Self      , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">    <span class="built_in">assert</span> (<span class="built_in">object</span>() != <span class="literal">NULL</span>    , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">    <span class="comment">// I&#x27;d like to write:</span></span><br><span class="line">    <span class="comment">//   guarantee (((oop)(object()))-&gt;mark() == markOopDesc::encode(this), &quot;invariant&quot;) ;</span></span><br><span class="line">    <span class="comment">// but as we&#x27;re at a safepoint that&#x27;s not safe.</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">UnlinkAfterAcquire</span> (Self, &amp;node) ;</span><br><span class="line">    <span class="keyword">if</span> (_succ == Self) _succ = <span class="literal">NULL</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert</span> (_succ != Self, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (_Responsible == Self) &#123;</span><br><span class="line">        _Responsible = <span class="literal">NULL</span> ;</span><br><span class="line">        OrderAccess::<span class="built_in">fence</span>(); <span class="comment">// Dekker pivot-point</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// We may leave threads on cxq|EntryList without a designated</span></span><br><span class="line">        <span class="comment">// &quot;Responsible&quot; thread.  This is benign.  When this thread subsequently</span></span><br><span class="line">        <span class="comment">// exits the monitor it can &quot;see&quot; such preexisting &quot;old&quot; threads --</span></span><br><span class="line">        <span class="comment">// threads that arrived on the cxq|EntryList before the fence, above --</span></span><br><span class="line">        <span class="comment">// by LDing cxq|EntryList.  Newly arrived threads -- that is, threads</span></span><br><span class="line">        <span class="comment">// that arrive on cxq after the ST:MEMBAR, above -- will set Responsible</span></span><br><span class="line">        <span class="comment">// non-null and elect a new &quot;Responsible&quot; timer thread.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// This thread executes:</span></span><br><span class="line">        <span class="comment">//    ST Responsible=null; MEMBAR    (in enter epilog - here)</span></span><br><span class="line">        <span class="comment">//    LD cxq|EntryList               (in subsequent exit)</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Entering threads in the slow/contended path execute:</span></span><br><span class="line">        <span class="comment">//    ST cxq=nonnull; MEMBAR; LD Responsible (in enter prolog)</span></span><br><span class="line">        <span class="comment">//    The (ST cxq; MEMBAR) is accomplished with CAS().</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// The MEMBAR, above, prevents the LD of cxq|EntryList in the subsequent</span></span><br><span class="line">        <span class="comment">// exit operation from floating above the ST Responsible=null.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We&#x27;ve acquired ownership with CAS().</span></span><br><span class="line">    <span class="comment">// CAS is serializing -- it has MEMBAR/FENCE-equivalent semantics.</span></span><br><span class="line">    <span class="comment">// But since the CAS() this thread may have also stored into _succ,</span></span><br><span class="line">    <span class="comment">// EntryList, cxq or Responsible.  These meta-data updates must be</span></span><br><span class="line">    <span class="comment">// visible __before this thread subsequently drops the lock.</span></span><br><span class="line">    <span class="comment">// Consider what could occur if we didn&#x27;t enforce this constraint --</span></span><br><span class="line">    <span class="comment">// STs to monitor meta-data and user-data could reorder with (become</span></span><br><span class="line">    <span class="comment">// visible after) the ST in exit that drops ownership of the lock.</span></span><br><span class="line">    <span class="comment">// Some other thread could then acquire the lock, but observe inconsistent</span></span><br><span class="line">    <span class="comment">// or old monitor meta-data and heap data.  That violates the JMM.</span></span><br><span class="line">    <span class="comment">// To that end, the 1-0 exit() operation must have at least STST|LDST</span></span><br><span class="line">    <span class="comment">// &quot;release&quot; barrier semantics.  Specifically, there must be at least a</span></span><br><span class="line">    <span class="comment">// STST|LDST barrier in exit() before the ST of null into _owner that drops</span></span><br><span class="line">    <span class="comment">// the lock.   The barrier ensures that changes to monitor meta-data and data</span></span><br><span class="line">    <span class="comment">// protected by the lock will be visible before we release the lock, and</span></span><br><span class="line">    <span class="comment">// therefore before some other thread (CPU) has a chance to acquire the lock.</span></span><br><span class="line">    <span class="comment">// See also: http://gee.cs.oswego.edu/dl/jmm/cookbook.html.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Critically, any prior STs to _succ or EntryList must be visible before</span></span><br><span class="line">    <span class="comment">// the ST of null into _owner in the *subsequent* (following) corresponding</span></span><br><span class="line">    <span class="comment">// monitorexit.  Recall too, that in 1-0 mode monitorexit does not necessarily</span></span><br><span class="line">    <span class="comment">// execute a serializing instruction.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SyncFlags &amp; <span class="number">8</span>) &#123;</span><br><span class="line">       OrderAccess::<span class="built_in">fence</span>() ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="TryLock"   >          <a href="#TryLock" class="heading-link"><i class="fas fa-link"></i></a><a href="#TryLock" class="headerlink" title="TryLock"></a>TryLock</h4>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ObjectMonitor::TryLock</span> <span class="params">(Thread * Self)</span> </span>&#123;</span><br><span class="line"><span class="comment">//自旋</span></span><br><span class="line">   <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">   <span class="comment">//获取锁的持有者</span></span><br><span class="line">      <span class="type">void</span> * own = _owner ;</span><br><span class="line">       <span class="comment">//如果是有锁则返回0</span></span><br><span class="line">      <span class="keyword">if</span> (own != <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">      <span class="comment">//如果加锁成功了就返回1</span></span><br><span class="line">      <span class="keyword">if</span> (Atomic::<span class="built_in">cmpxchg_ptr</span> (Self, &amp;_owner, <span class="literal">NULL</span>) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">         </span><br><span class="line">         <span class="comment">// Either guarantee _recursions == 0 or set _recursions = 0.</span></span><br><span class="line">         <span class="built_in">assert</span> (_recursions == <span class="number">0</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">         <span class="built_in">assert</span> (_owner == Self, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">         <span class="comment">// CONSIDER: set or assert that OwnerIsThread == 1</span></span><br><span class="line">         <span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// The lock had been free momentarily, but we lost the race to the lock.</span></span><br><span class="line">      <span class="comment">// Interference -- the CAS failed.</span></span><br><span class="line">      <span class="comment">// We can either return -1 or retry.</span></span><br><span class="line">      <span class="comment">// Retry doesn&#x27;t make as much sense because the lock was just acquired.</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//锁没有主人但是竞争的时候失败了就返回-1</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="literal">true</span>) <span class="keyword">return</span> <span class="number">-1</span> ;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="自适应自旋"   >          <a href="#自适应自旋" class="heading-link"><i class="fas fa-link"></i></a><a href="#自适应自旋" class="headerlink" title="自适应自旋"></a>自适应自旋</h4>      <p>自适应自旋是指:如果上一次自旋获取到了那就会将自选次数添加，认为你能获取锁，如果上一次自旋之后还没有获取到，那就认为你获取不到锁，自旋次数就会减少，这个是一个很复杂的一个过程。具体代码如下</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ObjectMonitor::TrySpin_VaryDuration</span> <span class="params">(Thread * Self)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Dumb, brutal spin.  Good for comparative measurements against adaptive spinning.</span></span><br><span class="line">    <span class="type">int</span> ctr = Knob_FixedSpin ;</span><br><span class="line">    <span class="keyword">if</span> (ctr != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (--ctr &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">TryLock</span> (Self) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">            <span class="built_in">SpinPause</span> () ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ctr = Knob_PreSpin + <span class="number">1</span>; --ctr &gt;= <span class="number">0</span> ; ) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">TryLock</span>(Self) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Increase _SpinDuration ...</span></span><br><span class="line">        <span class="comment">// Note that we don&#x27;t clamp SpinDuration precisely at SpinLimit.</span></span><br><span class="line">        <span class="comment">// Raising _SpurDuration to the poverty line is key.</span></span><br><span class="line">        <span class="type">int</span> x = _SpinDuration ;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; Knob_SpinLimit) &#123;</span><br><span class="line">           <span class="keyword">if</span> (x &lt; Knob_Poverty) x = Knob_Poverty ;</span><br><span class="line">           _SpinDuration = x + Knob_BonusB ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">SpinPause</span> () ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Admission control - verify preconditions for spinning</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// We always spin a little bit, just to prevent _SpinDuration == 0 from</span></span><br><span class="line">    <span class="comment">// becoming an absorbing state.  Put another way, we spin briefly to</span></span><br><span class="line">    <span class="comment">// sample, just in case the system load, parallelism, contention, or lock</span></span><br><span class="line">    <span class="comment">// modality changed.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Consider the following alternative:</span></span><br><span class="line">    <span class="comment">// Periodically set _SpinDuration = _SpinLimit and try a long/full</span></span><br><span class="line">    <span class="comment">// spin attempt.  &quot;Periodically&quot; might mean after a tally of</span></span><br><span class="line">    <span class="comment">// the # of failed spin attempts (or iterations) reaches some threshold.</span></span><br><span class="line">    <span class="comment">// This takes us into the realm of 1-out-of-N spinning, where we</span></span><br><span class="line">    <span class="comment">// hold the duration constant but vary the frequency.</span></span><br><span class="line"></span><br><span class="line">    ctr = _SpinDuration  ;</span><br><span class="line">    <span class="keyword">if</span> (ctr &lt; Knob_SpinBase) ctr = Knob_SpinBase ;</span><br><span class="line">    <span class="keyword">if</span> (ctr &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Knob_SuccRestrict &amp;&amp; _succ != <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">if</span> (Knob_OState &amp;&amp; <span class="built_in">NotRunnable</span> (Self, (Thread *) _owner)) &#123;</span><br><span class="line">       <span class="built_in">TEVENT</span> (Spin abort - notrunnable [TOP]);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> MaxSpin = Knob_MaxSpinners ;</span><br><span class="line">    <span class="keyword">if</span> (MaxSpin &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (_Spinner &gt; MaxSpin) &#123;</span><br><span class="line">          <span class="built_in">TEVENT</span> (Spin abort -- too many spinners) ;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// Slighty racy, but benign ...</span></span><br><span class="line">       <span class="built_in">Adjust</span> (&amp;_Spinner, <span class="number">1</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We&#x27;re good to spin ... spin ingress.</span></span><br><span class="line">    <span class="comment">// CONSIDER: use Prefetch::write() to avoid RTS-&gt;RTO upgrades</span></span><br><span class="line">    <span class="comment">// when preparing to LD...CAS _owner, etc and the CAS is likely</span></span><br><span class="line">    <span class="comment">// to succeed.</span></span><br><span class="line">    <span class="type">int</span> hits    = <span class="number">0</span> ;</span><br><span class="line">    <span class="type">int</span> msk     = <span class="number">0</span> ;</span><br><span class="line">    <span class="type">int</span> caspty  = Knob_CASPenalty ;</span><br><span class="line">    <span class="type">int</span> oxpty   = Knob_OXPenalty ;</span><br><span class="line">    <span class="type">int</span> sss     = Knob_SpinSetSucc ;</span><br><span class="line">    <span class="keyword">if</span> (sss &amp;&amp; _succ == <span class="literal">NULL</span> ) _succ = Self ;</span><br><span class="line">    Thread * prv = <span class="literal">NULL</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// There are three ways to exit the following loop:</span></span><br><span class="line">    <span class="comment">// 1.  A successful spin where this thread has acquired the lock.</span></span><br><span class="line">    <span class="comment">// 2.  Spin failure with prejudice</span></span><br><span class="line">    <span class="comment">// 3.  Spin failure without prejudice</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (--ctr &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Periodic polling -- Check for pending GC</span></span><br><span class="line">      <span class="comment">// Threads may spin while they&#x27;re unsafe.</span></span><br><span class="line">      <span class="comment">// We don&#x27;t want spinning threads to delay the JVM from reaching</span></span><br><span class="line">      <span class="comment">// a stop-the-world safepoint or to steal cycles from GC.</span></span><br><span class="line">      <span class="comment">// If we detect a pending safepoint we abort in order that</span></span><br><span class="line">      <span class="comment">// (a) this thread, if unsafe, doesn&#x27;t delay the safepoint, and (b)</span></span><br><span class="line">      <span class="comment">// this thread, if safe, doesn&#x27;t steal cycles from GC.</span></span><br><span class="line">      <span class="comment">// This is in keeping with the &quot;no loitering in runtime&quot; rule.</span></span><br><span class="line">      <span class="comment">// We periodically check to see if there&#x27;s a safepoint pending.</span></span><br><span class="line">      <span class="keyword">if</span> ((ctr &amp; <span class="number">0xFF</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (SafepointSynchronize::<span class="built_in">do_call_back</span>()) &#123;</span><br><span class="line">            <span class="built_in">TEVENT</span> (Spin: safepoint) ;</span><br><span class="line">            <span class="keyword">goto</span> Abort ;           <span class="comment">// abrupt spin egress</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (Knob_UsePause &amp; <span class="number">1</span>) <span class="built_in">SpinPause</span> () ;</span><br><span class="line"></span><br><span class="line">         <span class="built_in">int</span> (*scb)(<span class="type">intptr_t</span>,<span class="type">int</span>) = SpinCallbackFunction ;</span><br><span class="line">         <span class="keyword">if</span> (hits &gt; <span class="number">50</span> &amp;&amp; scb != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="type">int</span> abend = (*scb)(SpinCallbackArgument, <span class="number">0</span>) ;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (Knob_UsePause &amp; <span class="number">2</span>) <span class="built_in">SpinPause</span>() ;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Exponential back-off ...  Stay off the bus to reduce coherency traffic.</span></span><br><span class="line">      <span class="comment">// This is useful on classic SMP systems, but is of less utility on</span></span><br><span class="line">      <span class="comment">// N1-style CMT platforms.</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// Trade-off: lock acquisition latency vs coherency bandwidth.</span></span><br><span class="line">      <span class="comment">// Lock hold times are typically short.  A histogram</span></span><br><span class="line">      <span class="comment">// of successful spin attempts shows that we usually acquire</span></span><br><span class="line">      <span class="comment">// the lock early in the spin.  That suggests we want to</span></span><br><span class="line">      <span class="comment">// sample _owner frequently in the early phase of the spin,</span></span><br><span class="line">      <span class="comment">// but then back-off and sample less frequently as the spin</span></span><br><span class="line">      <span class="comment">// progresses.  The back-off makes a good citizen on SMP big</span></span><br><span class="line">      <span class="comment">// SMP systems.  Oversampling _owner can consume excessive</span></span><br><span class="line">      <span class="comment">// coherency bandwidth.  Relatedly, if we _oversample _owner we</span></span><br><span class="line">      <span class="comment">// can inadvertently interfere with the the ST m-&gt;owner=null.</span></span><br><span class="line">      <span class="comment">// executed by the lock owner.</span></span><br><span class="line">      <span class="keyword">if</span> (ctr &amp; msk) <span class="keyword">continue</span> ;</span><br><span class="line">      ++hits ;</span><br><span class="line">      <span class="keyword">if</span> ((hits &amp; <span class="number">0xF</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// The 0xF, above, corresponds to the exponent.</span></span><br><span class="line">        <span class="comment">// Consider: (msk+1)|msk</span></span><br><span class="line">        msk = ((msk &lt;&lt; <span class="number">2</span>)|<span class="number">3</span>) &amp; BackOffMask ;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Probe _owner with TATAS</span></span><br><span class="line">      <span class="comment">// If this thread observes the monitor transition or flicker</span></span><br><span class="line">      <span class="comment">// from locked to unlocked to locked, then the odds that this</span></span><br><span class="line">      <span class="comment">// thread will acquire the lock in this spin attempt go down</span></span><br><span class="line">      <span class="comment">// considerably.  The same argument applies if the CAS fails</span></span><br><span class="line">      <span class="comment">// or if we observe _owner change from one non-null value to</span></span><br><span class="line">      <span class="comment">// another non-null value.   In such cases we might abort</span></span><br><span class="line">      <span class="comment">// the spin without prejudice or apply a &quot;penalty&quot; to the</span></span><br><span class="line">      <span class="comment">// spin count-down variable &quot;ctr&quot;, reducing it by 100, say.</span></span><br><span class="line"></span><br><span class="line">      Thread * ox = (Thread *) _owner ;</span><br><span class="line">      <span class="keyword">if</span> (ox == <span class="literal">NULL</span>) &#123;</span><br><span class="line">         ox = (Thread *) Atomic::<span class="built_in">cmpxchg_ptr</span> (Self, &amp;_owner, <span class="literal">NULL</span>) ;</span><br><span class="line">         <span class="keyword">if</span> (ox == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">// The CAS succeeded -- this thread acquired ownership</span></span><br><span class="line">            <span class="comment">// Take care of some bookkeeping to exit spin state.</span></span><br><span class="line">            <span class="keyword">if</span> (sss &amp;&amp; _succ == Self) &#123;</span><br><span class="line">               _succ = <span class="literal">NULL</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (MaxSpin &gt; <span class="number">0</span>) <span class="built_in">Adjust</span> (&amp;_Spinner, <span class="number">-1</span>) ;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Increase _SpinDuration :</span></span><br><span class="line">            <span class="comment">// The spin was successful (profitable) so we tend toward</span></span><br><span class="line">            <span class="comment">// longer spin attempts in the future.</span></span><br><span class="line">            <span class="comment">// CONSIDER: factor &quot;ctr&quot; into the _SpinDuration adjustment.</span></span><br><span class="line">            <span class="comment">// If we acquired the lock early in the spin cycle it</span></span><br><span class="line">            <span class="comment">// makes sense to increase _SpinDuration proportionally.</span></span><br><span class="line">            <span class="comment">// Note that we don&#x27;t clamp SpinDuration precisely at SpinLimit.</span></span><br><span class="line">            <span class="type">int</span> x = _SpinDuration ;</span><br><span class="line">            <span class="keyword">if</span> (x &lt; Knob_SpinLimit) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x &lt; Knob_Poverty) x = Knob_Poverty ;</span><br><span class="line">                _SpinDuration = x + Knob_Bonus ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// The CAS failed ... we can take any of the following actions:</span></span><br><span class="line">         <span class="comment">// * penalize: ctr -= Knob_CASPenalty</span></span><br><span class="line">         <span class="comment">// * exit spin with prejudice -- goto Abort;</span></span><br><span class="line">         <span class="comment">// * exit spin without prejudice.</span></span><br><span class="line">         <span class="comment">// * Since CAS is high-latency, retry again immediately.</span></span><br><span class="line">         prv = ox ;</span><br><span class="line">         <span class="built_in">TEVENT</span> (Spin: cas failed) ;</span><br><span class="line">         <span class="keyword">if</span> (caspty == <span class="number">-2</span>) <span class="keyword">break</span> ;</span><br><span class="line">         <span class="keyword">if</span> (caspty == <span class="number">-1</span>) <span class="keyword">goto</span> Abort ;</span><br><span class="line">         ctr -= caspty ;</span><br><span class="line">         <span class="keyword">continue</span> ;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Did lock ownership change hands ?</span></span><br><span class="line">      <span class="keyword">if</span> (ox != prv &amp;&amp; prv != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">          <span class="built_in">TEVENT</span> (spin: Owner changed)</span><br><span class="line">          <span class="keyword">if</span> (oxpty == <span class="number">-2</span>) <span class="keyword">break</span> ;</span><br><span class="line">          <span class="keyword">if</span> (oxpty == <span class="number">-1</span>) <span class="keyword">goto</span> Abort ;</span><br><span class="line">          ctr -= oxpty ;</span><br><span class="line">      &#125;</span><br><span class="line">      prv = ox ;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Abort the spin if the owner is not executing.</span></span><br><span class="line">      <span class="comment">// The owner must be executing in order to drop the lock.</span></span><br><span class="line">      <span class="comment">// Spinning while the owner is OFFPROC is idiocy.</span></span><br><span class="line">      <span class="comment">// Consider: ctr -= RunnablePenalty ;</span></span><br><span class="line">      <span class="keyword">if</span> (Knob_OState &amp;&amp; <span class="built_in">NotRunnable</span> (Self, ox)) &#123;</span><br><span class="line">         <span class="built_in">TEVENT</span> (Spin abort - notrunnable);</span><br><span class="line">         <span class="keyword">goto</span> Abort ;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (sss &amp;&amp; _succ == <span class="literal">NULL</span> ) _succ = Self ;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Spin failed with prejudice -- reduce _SpinDuration.</span></span><br><span class="line">   <span class="comment">// <span class="doctag">TODO:</span> Use an AIMD-like policy to adjust _SpinDuration.</span></span><br><span class="line">   <span class="comment">// AIMD is globally stable.</span></span><br><span class="line">   <span class="built_in">TEVENT</span> (Spin failure) ;</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="type">int</span> x = _SpinDuration ;</span><br><span class="line">     <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Consider an AIMD scheme like: x -= (x &gt;&gt; 3) + 100</span></span><br><span class="line">        <span class="comment">// This is globally sample and tends to damp the response.</span></span><br><span class="line">        x -= Knob_Penalty ;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x = <span class="number">0</span> ;</span><br><span class="line">        _SpinDuration = x ;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> Abort:</span><br><span class="line">   <span class="keyword">if</span> (MaxSpin &gt;= <span class="number">0</span>) <span class="built_in">Adjust</span> (&amp;_Spinner, <span class="number">-1</span>) ;</span><br><span class="line">   <span class="keyword">if</span> (sss &amp;&amp; _succ == Self) &#123;</span><br><span class="line">      _succ = <span class="literal">NULL</span> ;</span><br><span class="line">      <span class="comment">// Invariant: after setting succ=null a contending thread</span></span><br><span class="line">      <span class="comment">// must recheck-retry _owner before parking.  This usually happens</span></span><br><span class="line">      <span class="comment">// in the normal usage of TrySpin(), but it&#x27;s safest</span></span><br><span class="line">      <span class="comment">// to make TrySpin() as foolproof as possible.</span></span><br><span class="line">      OrderAccess::<span class="built_in">fence</span>() ;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">TryLock</span>(Self) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="阻塞队列图解"   >          <a href="#阻塞队列图解" class="heading-link"><i class="fas fa-link"></i></a><a href="#阻塞队列图解" class="headerlink" title="阻塞队列图解"></a>阻塞队列图解</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230803184039161.png"  alt="阻塞队列图解">      </p>        <h3 id="重量级锁竞争流程图"   >          <a href="#重量级锁竞争流程图" class="heading-link"><i class="fas fa-link"></i></a><a href="#重量级锁竞争流程图" class="headerlink" title="重量级锁竞争流程图"></a>重量级锁竞争流程图</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230803182841184.png"  alt="重量级锁竞争流程图">      </p>        <h2 id="锁释放"   >          <a href="#锁释放" class="heading-link"><i class="fas fa-link"></i></a><a href="#锁释放" class="headerlink" title="锁释放"></a>锁释放</h2>              <h3 id="轻量级锁释放-monitorexit"   >          <a href="#轻量级锁释放-monitorexit" class="heading-link"><i class="fas fa-link"></i></a><a href="#轻量级锁释放-monitorexit" class="headerlink" title="轻量级锁释放(monitorexit)"></a>轻量级锁释放(monitorexit)</h3>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CASE</span>(_monitorexit): &#123;</span><br><span class="line">    <span class="comment">//从栈中获取对象</span></span><br><span class="line">        oop lockee = <span class="built_in">STACK_OBJECT</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//对lockee判空</span></span><br><span class="line">        <span class="built_in">CHECK_NULL</span>(lockee);</span><br><span class="line">        <span class="comment">// derefing&#x27;s lockee ought to provoke implicit null check</span></span><br><span class="line">        <span class="comment">// find our monitor slot</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//指向栈顶的监视器</span></span><br><span class="line">        BasicObjectLock* limit = istate-&gt;<span class="built_in">monitor_base</span>();</span><br><span class="line">    <span class="comment">//指向栈底的监视器</span></span><br><span class="line">        BasicObjectLock* most_recent = (BasicObjectLock*) istate-&gt;<span class="built_in">stack_base</span>();</span><br><span class="line">    <span class="comment">//循环，当栈底和栈顶不指向同一个监视器时</span></span><br><span class="line">        <span class="keyword">while</span> (most_recent != limit ) &#123;</span><br><span class="line">            <span class="comment">//如果找到监视器监视的lockee是指向当前锁</span></span><br><span class="line">          <span class="keyword">if</span> ((most_recent)-&gt;<span class="built_in">obj</span>() == lockee) &#123;</span><br><span class="line">            BasicLock* lock = most_recent-&gt;<span class="built_in">lock</span>();</span><br><span class="line">            markOop header = lock-&gt;<span class="built_in">displaced_header</span>();</span><br><span class="line">              <span class="comment">//将监视器指向的obj设为空</span></span><br><span class="line">            most_recent-&gt;<span class="built_in">set_obj</span>(<span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">if</span> (!lockee-&gt;<span class="built_in">mark</span>()-&gt;<span class="built_in">has_bias_pattern</span>()) &#123;</span><br><span class="line">                <span class="comment">//如果这个锁不是偏向锁</span></span><br><span class="line">              <span class="type">bool</span> call_vm = UseHeavyMonitors;</span><br><span class="line">                <span class="comment">//获取环境变量是否禁用偏向锁和轻量级锁，默认是false</span></span><br><span class="line">              <span class="comment">// If it isn&#x27;t recursive we either must swap old header or call the runtime</span></span><br><span class="line">                <span class="comment">//判断头是否为空，因为头为空说明是一个重入锁，就不进这个判断，目的是找到第一个锁头</span></span><br><span class="line">              <span class="keyword">if</span> (header != <span class="literal">NULL</span> || call_vm) &#123;</span><br><span class="line">                  <span class="comment">//如果监视器的头不为空，那么CAS操作将锁的lock更新为无锁状态</span></span><br><span class="line">                <span class="keyword">if</span> (call_vm || Atomic::<span class="built_in">cmpxchg_ptr</span>(header, lockee-&gt;<span class="built_in">mark_addr</span>(), lock) != lock) &#123;</span><br><span class="line">                    <span class="comment">//如果失败则进入竞争锁的释放</span></span><br><span class="line">                  <span class="comment">// restore object for the slow case</span></span><br><span class="line">                  most_recent-&gt;<span class="built_in">set_obj</span>(lockee);</span><br><span class="line">                  <span class="built_in">CALL_VM</span>(InterpreterRuntime::<span class="built_in">monitorexit</span>(THREAD, most_recent), handle_exception);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">              <span class="comment">//运行到这里说明锁是偏向锁，偏向锁就不做任何处理，只更新PC计数器</span></span><br><span class="line">            <span class="built_in">UPDATE_PC_AND_TOS_AND_CONTINUE</span>(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          most_recent++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Need to throw illegal monitor state exception</span></span><br><span class="line">        <span class="built_in">CALL_VM</span>(InterpreterRuntime::<span class="built_in">throw_illegal_monitor_state_exception</span>(THREAD), handle_exception);</span><br><span class="line">        <span class="built_in">ShouldNotReachHere</span>();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="①InterpreterRuntime-monitorexit"   >          <a href="#①InterpreterRuntime-monitorexit" class="heading-link"><i class="fas fa-link"></i></a><a href="#①InterpreterRuntime-monitorexit" class="headerlink" title="①InterpreterRuntime::monitorexit"></a>①InterpreterRuntime::monitorexit</h4>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">IRT_ENTRY_NO_ASYNC</span>(<span class="type">void</span>, InterpreterRuntime::<span class="built_in">monitorexit</span>(JavaThread* thread, BasicObjectLock* elem))</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ASSERT</span></span><br><span class="line">  thread-&gt;<span class="built_in">last_frame</span>().<span class="built_in">interpreter_frame_verify_monitor</span>(elem);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//封装了线程和Object</span></span><br><span class="line">  <span class="function">Handle <span class="title">h_obj</span><span class="params">(thread, elem-&gt;obj())</span></span>;</span><br><span class="line">  <span class="built_in">assert</span>(Universe::<span class="built_in">heap</span>()-&gt;<span class="built_in">is_in_reserved_or_null</span>(<span class="built_in">h_obj</span>()),</span><br><span class="line">         <span class="string">&quot;must be NULL or an object&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (elem == <span class="literal">NULL</span> || <span class="built_in">h_obj</span>()-&gt;<span class="built_in">is_unlocked</span>()) &#123;</span><br><span class="line">    <span class="built_in">THROW</span>(vmSymbols::<span class="built_in">java_lang_IllegalMonitorStateException</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入Slow_exit</span></span><br><span class="line">  ObjectSynchronizer::<span class="built_in">slow_exit</span>(<span class="built_in">h_obj</span>(), elem-&gt;<span class="built_in">lock</span>(), thread);</span><br><span class="line">  <span class="comment">// Free entry. This must be done here, since a pending exception might be installed on</span></span><br><span class="line">  <span class="comment">// exit. If it is not cleared, the exception handling code will try to unlock the monitor again.</span></span><br><span class="line">  elem-&gt;<span class="built_in">set_obj</span>(<span class="literal">NULL</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ASSERT</span></span><br><span class="line">  thread-&gt;<span class="built_in">last_frame</span>().<span class="built_in">interpreter_frame_verify_monitor</span>(elem);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">IRT_END</span><br></pre></td></tr></table></div></figure>        <h4 id="②slow-exit"   >          <a href="#②slow-exit" class="heading-link"><i class="fas fa-link"></i></a><a href="#②slow-exit" class="headerlink" title="②slow_exit"></a>②slow_exit</h4>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ObjectSynchronizer::slow_exit</span><span class="params">(oop object, BasicLock* lock, TRAPS)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//进入fast_exit</span></span><br><span class="line">  <span class="built_in">fast_exit</span> (object, lock, THREAD) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="③fast-exit"   >          <a href="#③fast-exit" class="heading-link"><i class="fas fa-link"></i></a><a href="#③fast-exit" class="headerlink" title="③fast_exit"></a>③fast_exit</h4>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ObjectSynchronizer::fast_exit</span><span class="params">(oop object, BasicLock* lock, TRAPS)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">assert</span>(!object-&gt;<span class="built_in">mark</span>()-&gt;<span class="built_in">has_bias_pattern</span>(), <span class="string">&quot;should not see bias pattern here&quot;</span>);</span><br><span class="line">  <span class="comment">// if displaced header is null, the previous enter is recursive enter, no-op</span></span><br><span class="line">    <span class="comment">//获得锁头信息</span></span><br><span class="line">  markOop dhw = lock-&gt;<span class="built_in">displaced_header</span>();</span><br><span class="line">  markOop mark ;</span><br><span class="line">    <span class="comment">//如果lockee的头是null说明是一个重入</span></span><br><span class="line">  <span class="keyword">if</span> (dhw == <span class="literal">NULL</span>) &#123;</span><br><span class="line">     <span class="comment">// Recursive stack-lock.</span></span><br><span class="line">     <span class="comment">// Diagnostics -- Could be: stack-locked, inflating, inflated.</span></span><br><span class="line">     mark = object-&gt;<span class="built_in">mark</span>() ;</span><br><span class="line">     <span class="built_in">assert</span> (!mark-&gt;<span class="built_in">is_neutral</span>(), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">     <span class="keyword">if</span> (mark-&gt;<span class="built_in">has_locker</span>() &amp;&amp; mark != markOopDesc::<span class="built_in">INFLATING</span>()) &#123;</span><br><span class="line">        <span class="built_in">assert</span>(THREAD-&gt;<span class="built_in">is_lock_owned</span>((address)mark-&gt;<span class="built_in">locker</span>()), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (mark-&gt;<span class="built_in">has_monitor</span>()) &#123;</span><br><span class="line">        ObjectMonitor * m = mark-&gt;<span class="built_in">monitor</span>() ;</span><br><span class="line">        <span class="built_in">assert</span>(((oop)(m-&gt;<span class="built_in">object</span>()))-&gt;<span class="built_in">mark</span>() == mark, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        <span class="built_in">assert</span>(m-&gt;<span class="built_in">is_entered</span>(THREAD), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取BasicObjectLock头信息</span></span><br><span class="line">  mark = object-&gt;<span class="built_in">mark</span>() ;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If the object is stack-locked by the current thread, try to</span></span><br><span class="line">  <span class="comment">// swing the displaced header from the box back to the mark.</span></span><br><span class="line">  <span class="keyword">if</span> (mark == (markOop) lock) &#123;</span><br><span class="line">      <span class="comment">//如果这两个地址相同，说明是一个轻量级锁</span></span><br><span class="line">     <span class="built_in">assert</span> (dhw-&gt;<span class="built_in">is_neutral</span>(), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">      <span class="comment">//CAS操作将栈中的BasicObjectLock的头信息改成dhw</span></span><br><span class="line">     <span class="keyword">if</span> ((markOop) Atomic::<span class="built_in">cmpxchg_ptr</span> (dhw, object-&gt;<span class="built_in">mark_addr</span>(), mark) == mark) &#123;</span><br><span class="line">         <span class="comment">//如果CAS成功说明轻量级锁释放</span></span><br><span class="line">        <span class="built_in">TEVENT</span> (fast_exit: release stacklock) ;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有进入上面轻量级锁的释放说明在mark中的数据改变了，说明是重量级锁的释放</span></span><br><span class="line">    <span class="comment">//调用下面方法膨胀锁获取监视器对象，通过监视器的方法来释放锁</span></span><br><span class="line">  ObjectSynchronizer::<span class="built_in">inflate</span>(THREAD, object)-&gt;<span class="built_in">exit</span> (<span class="literal">true</span>, THREAD) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="重量级锁释放-ObjectMonitor-exit"   >          <a href="#重量级锁释放-ObjectMonitor-exit" class="heading-link"><i class="fas fa-link"></i></a><a href="#重量级锁释放-ObjectMonitor-exit" class="headerlink" title="重量级锁释放(ObjectMonitor::exit)"></a>重量级锁释放(ObjectMonitor::exit)</h3>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> ATTR <span class="title">ObjectMonitor::exit</span><span class="params">(<span class="type">bool</span> not_suspended, TRAPS)</span> </span>&#123;</span><br><span class="line">   Thread * Self = THREAD ;</span><br><span class="line">    <span class="comment">//判断当前线程是否是持锁线程，目的是将当前线程指向持锁线程</span></span><br><span class="line">   <span class="keyword">if</span> (THREAD != _owner) &#123;</span><br><span class="line">       <span class="comment">//如果当前线程不是持锁线程.那么从栈中找到持锁线程地址交给Thread</span></span><br><span class="line">     <span class="keyword">if</span> (THREAD-&gt;<span class="built_in">is_lock_owned</span>((address) _owner)) &#123;</span><br><span class="line">       <span class="comment">// Transmute _owner from a BasicLock pointer to a Thread address.</span></span><br><span class="line">       <span class="comment">// We don&#x27;t need to hold _mutex for this transition.</span></span><br><span class="line">       <span class="comment">// Non-null to Non-null is safe as long as all readers can</span></span><br><span class="line">       <span class="comment">// tolerate either flavor.</span></span><br><span class="line">       <span class="built_in">assert</span> (_recursions == <span class="number">0</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">       _owner = THREAD ;</span><br><span class="line">       _recursions = <span class="number">0</span> ;</span><br><span class="line">       OwnerIsThread = <span class="number">1</span> ;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// <span class="doctag">NOTE:</span> we need to handle unbalanced monitor enter/exit</span></span><br><span class="line">       <span class="comment">// in native code by throwing an exception.</span></span><br><span class="line">       <span class="comment">// <span class="doctag">TODO:</span> Throw an IllegalMonitorStateException ?</span></span><br><span class="line">       <span class="built_in">TEVENT</span> (Exit - Throw IMSX) ;</span><br><span class="line">       <span class="built_in">assert</span>(<span class="literal">false</span>, <span class="string">&quot;Non-balanced monitor enter/exit!&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">          <span class="built_in">THROW</span>(vmSymbols::<span class="built_in">java_lang_IllegalMonitorStateException</span>());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//运行到这里已经找到了持锁线程</span></span><br><span class="line"><span class="comment">//判断重入次数，如果不为0说明是重量级锁重入的释放</span></span><br><span class="line">   <span class="keyword">if</span> (_recursions != <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="comment">//重入次数-1然后结束方法</span></span><br><span class="line">     _recursions--;        <span class="comment">// this is simple recursive enter</span></span><br><span class="line">     <span class="built_in">TEVENT</span> (Inflated exit - recursive) ;</span><br><span class="line">     <span class="keyword">return</span> ;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Invariant: after setting Responsible=null an thread must execute</span></span><br><span class="line">   <span class="comment">// a MEMBAR or other serializing instruction before fetching EntryList|cxq.</span></span><br><span class="line">   <span class="keyword">if</span> ((SyncFlags &amp; <span class="number">4</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">      _Responsible = <span class="literal">NULL</span> ;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> INCLUDE_TRACE</span></span><br><span class="line">   <span class="comment">// get the owner&#x27;s thread id for the MonitorEnter event</span></span><br><span class="line">   <span class="comment">// if it is enabled and the thread isn&#x27;t suspended</span></span><br><span class="line">   <span class="keyword">if</span> (not_suspended &amp;&amp; Tracing::<span class="built_in">is_event_enabled</span>(TraceJavaMonitorEnterEvent)) &#123;</span><br><span class="line">     _previous_owner_tid = SharedRuntime::<span class="built_in">get_java_tid</span>(Self);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//自旋</span></span><br><span class="line">   <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      <span class="built_in">assert</span> (THREAD == _owner, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (Knob_ExitPolicy == <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="comment">// release semantics: prior loads and stores from within the critical section</span></span><br><span class="line">         <span class="comment">// must not float (reorder) past the following store that drops the lock.</span></span><br><span class="line">         <span class="comment">// On SPARC that requires MEMBAR #loadstore|#storestore.</span></span><br><span class="line">         <span class="comment">// But of course in TSO #loadstore|#storestore is not required.</span></span><br><span class="line">         <span class="comment">// I&#x27;d like to write one of the following:</span></span><br><span class="line">         <span class="comment">// A.  OrderAccess::release() ; _owner = NULL</span></span><br><span class="line">         <span class="comment">// B.  OrderAccess::loadstore(); OrderAccess::storestore(); _owner = NULL;</span></span><br><span class="line">         <span class="comment">// Unfortunately OrderAccess::release() and OrderAccess::loadstore() both</span></span><br><span class="line">         <span class="comment">// store into a _dummy variable.  That store is not needed, but can result</span></span><br><span class="line">         <span class="comment">// in massive wasteful coherency traffic on classic SMP systems.</span></span><br><span class="line">         <span class="comment">// Instead, I use release_store(), which is implemented as just a simple</span></span><br><span class="line">         <span class="comment">// ST on x64, x86 and SPARC.</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">//设置ObjectMonitor的Owner为NUll</span></span><br><span class="line">         OrderAccess::<span class="built_in">release_store_ptr</span> (&amp;_owner, <span class="literal">NULL</span>) ;   <span class="comment">// drop the lock</span></span><br><span class="line">         OrderAccess::<span class="built_in">storeload</span>() ;                         <span class="comment">// See if we need to wake a successor</span></span><br><span class="line">         </span><br><span class="line">          <span class="comment">//判断cxq阻塞队列和唤醒线程是否为空，如果为空就说明释放结束</span></span><br><span class="line">          <span class="keyword">if</span> ((<span class="built_in">intptr_t</span>(_EntryList)|<span class="built_in">intptr_t</span>(_cxq)) == <span class="number">0</span> || _succ != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">TEVENT</span> (Inflated exit - simple egress) ;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">TEVENT</span> (Inflated exit - complex egress) ;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Normally the exiting thread is responsible for ensuring succession,</span></span><br><span class="line">         <span class="comment">// but if other successors are ready or other entering threads are spinning</span></span><br><span class="line">         <span class="comment">// then this thread can simply store NULL into _owner and exit without</span></span><br><span class="line">         <span class="comment">// waking a successor.  The existence of spinners or ready successors</span></span><br><span class="line">         <span class="comment">// guarantees proper succession (liveness).  Responsibility passes to the</span></span><br><span class="line">         <span class="comment">// ready or running successors.  The exiting thread delegates the duty.</span></span><br><span class="line">         <span class="comment">// More precisely, if a successor already exists this thread is absolved</span></span><br><span class="line">         <span class="comment">// of the responsibility of waking (unparking) one.</span></span><br><span class="line">         <span class="comment">//</span></span><br><span class="line">         <span class="comment">// The _succ variable is critical to reducing futile wakeup frequency.</span></span><br><span class="line">         <span class="comment">// _succ identifies the &quot;heir presumptive&quot; thread that has been made</span></span><br><span class="line">         <span class="comment">// ready (unparked) but that has not yet run.  We need only one such</span></span><br><span class="line">         <span class="comment">// successor thread to guarantee progress.</span></span><br><span class="line">         <span class="comment">// See http://www.usenix.org/events/jvm01/full_papers/dice/dice.pdf</span></span><br><span class="line">         <span class="comment">// section 3.3 &quot;Futile Wakeup Throttling&quot; for details.</span></span><br><span class="line">         <span class="comment">//</span></span><br><span class="line">         <span class="comment">// Note that spinners in Enter() also set _succ non-null.</span></span><br><span class="line">         <span class="comment">// In the current implementation spinners opportunistically set</span></span><br><span class="line">         <span class="comment">// _succ so that exiting threads might avoid waking a successor.</span></span><br><span class="line">         <span class="comment">// Another less appealing alternative would be for the exiting thread</span></span><br><span class="line">         <span class="comment">// to drop the lock and then spin briefly to see if a spinner managed</span></span><br><span class="line">         <span class="comment">// to acquire the lock.  If so, the exiting thread could exit</span></span><br><span class="line">         <span class="comment">// immediately without waking a successor, otherwise the exiting</span></span><br><span class="line">         <span class="comment">// thread would need to dequeue and wake a successor.</span></span><br><span class="line">         <span class="comment">// (Note that we&#x27;d need to make the post-drop spin short, but no</span></span><br><span class="line">         <span class="comment">// shorter than the worst-case round-trip cache-line migration time.</span></span><br><span class="line">         <span class="comment">// The dropped lock needs to become visible to the spinner, and then</span></span><br><span class="line">         <span class="comment">// the acquisition of the lock by the spinner must become visible to</span></span><br><span class="line">         <span class="comment">// the exiting thread).</span></span><br><span class="line">         <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">// It appears that an heir-presumptive (successor) must be made ready.</span></span><br><span class="line">         <span class="comment">// Only the current lock owner can manipulate the EntryList or</span></span><br><span class="line">         <span class="comment">// drain _cxq, so we need to reacquire the lock.  If we fail</span></span><br><span class="line">         <span class="comment">// to reacquire the lock the responsibility for ensuring succession</span></span><br><span class="line">         <span class="comment">// falls to the new owner.</span></span><br><span class="line">         <span class="comment">//</span></span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          <span class="comment">//运行到这里说明线程的阻塞队列或者唤醒队列有线程等待</span></span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          <span class="comment">//CAS操作重新获取一把锁，将监视器指向持锁线程，说明唤醒线程操作只能由持锁线程进行</span></span><br><span class="line">         <span class="keyword">if</span> (Atomic::<span class="built_in">cmpxchg_ptr</span> (THREAD, &amp;_owner, <span class="literal">NULL</span>) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">             <span class="comment">//获取锁失败则返回</span></span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">TEVENT</span> (Exit - Reacquired) ;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//判断cxq阻塞队列和唤醒线程是否为空，如果为空就说明释放结束</span></span><br><span class="line">         <span class="keyword">if</span> ((<span class="built_in">intptr_t</span>(_EntryList)|<span class="built_in">intptr_t</span>(_cxq)) == <span class="number">0</span> || _succ != <span class="literal">NULL</span>) &#123;</span><br><span class="line">             </span><br><span class="line">             <span class="comment">//设置ObjectMonitor的Owner为NUll</span></span><br><span class="line">            OrderAccess::<span class="built_in">release_store_ptr</span> (&amp;_owner, <span class="literal">NULL</span>) ;   <span class="comment">// drop the lock</span></span><br><span class="line">            OrderAccess::<span class="built_in">storeload</span>() ;</span><br><span class="line">            <span class="comment">// Ratify the previously observed values.</span></span><br><span class="line">             </span><br><span class="line">             <span class="comment">//如果cxq为空 则结束</span></span><br><span class="line">            <span class="keyword">if</span> (_cxq == <span class="literal">NULL</span> || _succ != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">TEVENT</span> (Inflated exit - simple egress) ;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// inopportune interleaving -- the exiting thread (this thread)</span></span><br><span class="line">            <span class="comment">// in the fast-exit path raced an entering thread in the slow-enter</span></span><br><span class="line">            <span class="comment">// path.</span></span><br><span class="line">            <span class="comment">// We have two choices:</span></span><br><span class="line">            <span class="comment">// A.  Try to reacquire the lock.</span></span><br><span class="line">            <span class="comment">//     If the CAS() fails return immediately, otherwise</span></span><br><span class="line">            <span class="comment">//     we either restart/rerun the exit operation, or simply</span></span><br><span class="line">            <span class="comment">//     fall-through into the code below which wakes a successor.</span></span><br><span class="line">            <span class="comment">// B.  If the elements forming the EntryList|cxq are TSM</span></span><br><span class="line">            <span class="comment">//     we could simply unpark() the lead thread and return</span></span><br><span class="line">            <span class="comment">//     without having set _succ.</span></span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">             <span class="comment">//运行到这里说明cxq不为空，将持锁线程重新交给监视器的ONWER</span></span><br><span class="line">            <span class="keyword">if</span> (Atomic::<span class="built_in">cmpxchg_ptr</span> (THREAD, &amp;_owner, <span class="literal">NULL</span>) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="comment">//cas失败则加锁失败返回</span></span><br><span class="line">               <span class="built_in">TEVENT</span> (Inflated exit - reacquired succeeded) ;</span><br><span class="line">               <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">            <span class="built_in">TEVENT</span> (Inflated exit - reacquired failed) ;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">TEVENT</span> (Inflated exit - complex egress) ;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//接下来是唤醒等待队列线程的操作 通过Qmode来判断唤醒操作</span></span><br><span class="line">      <span class="built_in">guarantee</span> (_owner == THREAD, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">      ObjectWaiter * w = <span class="literal">NULL</span> ;</span><br><span class="line">      <span class="type">int</span> QMode = Knob_QMode ;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (QMode == <span class="number">2</span> &amp;&amp; _cxq != <span class="literal">NULL</span>) &#123;</span><br><span class="line">          <span class="comment">// QMode == 2 : cxq has precedence over EntryList.</span></span><br><span class="line">          <span class="comment">// Try to directly wake a successor from the cxq.</span></span><br><span class="line">          <span class="comment">// If successful, the successor will need to unlink itself from cxq.</span></span><br><span class="line">          w = _cxq ;</span><br><span class="line">          <span class="built_in">assert</span> (w != <span class="literal">NULL</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">          <span class="built_in">assert</span> (w-&gt;TState == ObjectWaiter::TS_CXQ, <span class="string">&quot;Invariant&quot;</span>) ;</span><br><span class="line">          <span class="built_in">ExitEpilog</span> (Self, w) ;</span><br><span class="line">          <span class="keyword">return</span> ;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (QMode == <span class="number">3</span> &amp;&amp; _cxq != <span class="literal">NULL</span>) &#123;</span><br><span class="line">          <span class="comment">// Aggressively drain cxq into EntryList at the first opportunity.</span></span><br><span class="line">          <span class="comment">// This policy ensure that recently-run threads live at the head of EntryList.</span></span><br><span class="line">          <span class="comment">// Drain _cxq into EntryList - bulk transfer.</span></span><br><span class="line">          <span class="comment">// First, detach _cxq.</span></span><br><span class="line">          <span class="comment">// The following loop is tantamount to: w = swap (&amp;cxq, NULL)</span></span><br><span class="line">          w = _cxq ;</span><br><span class="line">          <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">             <span class="built_in">assert</span> (w != <span class="literal">NULL</span>, <span class="string">&quot;Invariant&quot;</span>) ;</span><br><span class="line">             ObjectWaiter * u = (ObjectWaiter *) Atomic::<span class="built_in">cmpxchg_ptr</span> (<span class="literal">NULL</span>, &amp;_cxq, w) ;</span><br><span class="line">             <span class="keyword">if</span> (u == w) <span class="keyword">break</span> ;</span><br><span class="line">             w = u ;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">assert</span> (w != <span class="literal">NULL</span>              , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">          ObjectWaiter * q = <span class="literal">NULL</span> ;</span><br><span class="line">          ObjectWaiter * p ;</span><br><span class="line">          <span class="keyword">for</span> (p = w ; p != <span class="literal">NULL</span> ; p = p-&gt;_next) &#123;</span><br><span class="line">              <span class="built_in">guarantee</span> (p-&gt;TState == ObjectWaiter::TS_CXQ, <span class="string">&quot;Invariant&quot;</span>) ;</span><br><span class="line">              p-&gt;TState = ObjectWaiter::TS_ENTER ;</span><br><span class="line">              p-&gt;_prev = q ;</span><br><span class="line">              q = p ;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Append the RATs to the EntryList</span></span><br><span class="line">          <span class="comment">// <span class="doctag">TODO:</span> organize EntryList as a CDLL so we can locate the tail in constant-time.</span></span><br><span class="line">          ObjectWaiter * Tail ;</span><br><span class="line">          <span class="keyword">for</span> (Tail = _EntryList ; Tail != <span class="literal">NULL</span> &amp;&amp; Tail-&gt;_next != <span class="literal">NULL</span> ; Tail = Tail-&gt;_next) ;</span><br><span class="line">          <span class="keyword">if</span> (Tail == <span class="literal">NULL</span>) &#123;</span><br><span class="line">              _EntryList = w ;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              Tail-&gt;_next = w ;</span><br><span class="line">              w-&gt;_prev = Tail ;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Fall thru into code that tries to wake a successor from EntryList</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (QMode == <span class="number">4</span> &amp;&amp; _cxq != <span class="literal">NULL</span>) &#123;</span><br><span class="line">          <span class="comment">// Aggressively drain cxq into EntryList at the first opportunity.</span></span><br><span class="line">          <span class="comment">// This policy ensure that recently-run threads live at the head of EntryList.</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// Drain _cxq into EntryList - bulk transfer.</span></span><br><span class="line">          <span class="comment">// First, detach _cxq.</span></span><br><span class="line">          <span class="comment">// The following loop is tantamount to: w = swap (&amp;cxq, NULL)</span></span><br><span class="line">          w = _cxq ;</span><br><span class="line">          <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">             <span class="built_in">assert</span> (w != <span class="literal">NULL</span>, <span class="string">&quot;Invariant&quot;</span>) ;</span><br><span class="line">             ObjectWaiter * u = (ObjectWaiter *) Atomic::<span class="built_in">cmpxchg_ptr</span> (<span class="literal">NULL</span>, &amp;_cxq, w) ;</span><br><span class="line">             <span class="keyword">if</span> (u == w) <span class="keyword">break</span> ;</span><br><span class="line">             w = u ;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">assert</span> (w != <span class="literal">NULL</span>              , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">          ObjectWaiter * q = <span class="literal">NULL</span> ;</span><br><span class="line">          ObjectWaiter * p ;</span><br><span class="line">          <span class="keyword">for</span> (p = w ; p != <span class="literal">NULL</span> ; p = p-&gt;_next) &#123;</span><br><span class="line">              <span class="built_in">guarantee</span> (p-&gt;TState == ObjectWaiter::TS_CXQ, <span class="string">&quot;Invariant&quot;</span>) ;</span><br><span class="line">              p-&gt;TState = ObjectWaiter::TS_ENTER ;</span><br><span class="line">              p-&gt;_prev = q ;</span><br><span class="line">              q = p ;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Prepend the RATs to the EntryList</span></span><br><span class="line">          <span class="keyword">if</span> (_EntryList != <span class="literal">NULL</span>) &#123;</span><br><span class="line">              q-&gt;_next = _EntryList ;</span><br><span class="line">              _EntryList-&gt;_prev = q ;</span><br><span class="line">          &#125;</span><br><span class="line">          _EntryList = w ;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Fall thru into code that tries to wake a successor from EntryList</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      w = _EntryList  ;</span><br><span class="line">      <span class="keyword">if</span> (w != <span class="literal">NULL</span>) &#123;</span><br><span class="line">          <span class="comment">// I&#x27;d like to write: guarantee (w-&gt;_thread != Self).</span></span><br><span class="line">          <span class="comment">// But in practice an exiting thread may find itself on the EntryList.</span></span><br><span class="line">          <span class="comment">// Lets say thread T1 calls O.wait().  Wait() enqueues T1 on O&#x27;s waitset and</span></span><br><span class="line">          <span class="comment">// then calls exit().  Exit release the lock by setting O._owner to NULL.</span></span><br><span class="line">          <span class="comment">// Lets say T1 then stalls.  T2 acquires O and calls O.notify().  The</span></span><br><span class="line">          <span class="comment">// notify() operation moves T1 from O&#x27;s waitset to O&#x27;s EntryList. T2 then</span></span><br><span class="line">          <span class="comment">// release the lock &quot;O&quot;.  T2 resumes immediately after the ST of null into</span></span><br><span class="line">          <span class="comment">// _owner, above.  T2 notices that the EntryList is populated, so it</span></span><br><span class="line">          <span class="comment">// reacquires the lock and then finds itself on the EntryList.</span></span><br><span class="line">          <span class="comment">// Given all that, we have to tolerate the circumstance where &quot;w&quot; is</span></span><br><span class="line">          <span class="comment">// associated with Self.</span></span><br><span class="line">          <span class="built_in">assert</span> (w-&gt;TState == ObjectWaiter::TS_ENTER, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">          <span class="built_in">ExitEpilog</span> (Self, w) ;</span><br><span class="line">          <span class="keyword">return</span> ;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// If we find that both _cxq and EntryList are null then just</span></span><br><span class="line">      <span class="comment">// re-run the exit protocol from the top.</span></span><br><span class="line">      w = _cxq ;</span><br><span class="line">      <span class="keyword">if</span> (w == <span class="literal">NULL</span>) <span class="keyword">continue</span> ;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Drain _cxq into EntryList - bulk transfer.</span></span><br><span class="line">      <span class="comment">// First, detach _cxq.</span></span><br><span class="line">      <span class="comment">// The following loop is tantamount to: w = swap (&amp;cxq, NULL)</span></span><br><span class="line">      <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">          <span class="built_in">assert</span> (w != <span class="literal">NULL</span>, <span class="string">&quot;Invariant&quot;</span>) ;</span><br><span class="line">          ObjectWaiter * u = (ObjectWaiter *) Atomic::<span class="built_in">cmpxchg_ptr</span> (<span class="literal">NULL</span>, &amp;_cxq, w) ;</span><br><span class="line">          <span class="keyword">if</span> (u == w) <span class="keyword">break</span> ;</span><br><span class="line">          w = u ;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">TEVENT</span> (Inflated exit - drain cxq into EntryList) ;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">assert</span> (w != <span class="literal">NULL</span>              , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">      <span class="built_in">assert</span> (_EntryList  == <span class="literal">NULL</span>    , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Convert the LIFO SLL anchored by _cxq into a DLL.</span></span><br><span class="line">      <span class="comment">// The list reorganization step operates in O(LENGTH(w)) time.</span></span><br><span class="line">      <span class="comment">// It&#x27;s critical that this step operate quickly as</span></span><br><span class="line">      <span class="comment">// &quot;Self&quot; still holds the outer-lock, restricting parallelism</span></span><br><span class="line">      <span class="comment">// and effectively lengthening the critical section.</span></span><br><span class="line">      <span class="comment">// Invariant: s chases t chases u.</span></span><br><span class="line">      <span class="comment">// TODO-<span class="doctag">FIXME:</span> consider changing EntryList from a DLL to a CDLL so</span></span><br><span class="line">      <span class="comment">// we have faster access to the tail.</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (QMode == <span class="number">1</span>) &#123;</span><br><span class="line">         <span class="comment">// QMode == 1 : drain cxq to EntryList, reversing order</span></span><br><span class="line">         <span class="comment">// We also reverse the order of the list.</span></span><br><span class="line">         ObjectWaiter * s = <span class="literal">NULL</span> ;</span><br><span class="line">         ObjectWaiter * t = w ;</span><br><span class="line">         ObjectWaiter * u = <span class="literal">NULL</span> ;</span><br><span class="line">         <span class="keyword">while</span> (t != <span class="literal">NULL</span>) &#123;</span><br><span class="line">             <span class="built_in">guarantee</span> (t-&gt;TState == ObjectWaiter::TS_CXQ, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">             t-&gt;TState = ObjectWaiter::TS_ENTER ;</span><br><span class="line">             u = t-&gt;_next ;</span><br><span class="line">             t-&gt;_prev = u ;</span><br><span class="line">             t-&gt;_next = s ;</span><br><span class="line">             s = t;</span><br><span class="line">             t = u ;</span><br><span class="line">         &#125;</span><br><span class="line">         _EntryList  = s ;</span><br><span class="line">         <span class="built_in">assert</span> (s != <span class="literal">NULL</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// QMode == 0 or QMode == 2</span></span><br><span class="line">         _EntryList = w ;</span><br><span class="line">         ObjectWaiter * q = <span class="literal">NULL</span> ;</span><br><span class="line">         ObjectWaiter * p ;</span><br><span class="line">         <span class="keyword">for</span> (p = w ; p != <span class="literal">NULL</span> ; p = p-&gt;_next) &#123;</span><br><span class="line">             <span class="built_in">guarantee</span> (p-&gt;TState == ObjectWaiter::TS_CXQ, <span class="string">&quot;Invariant&quot;</span>) ;</span><br><span class="line">             p-&gt;TState = ObjectWaiter::TS_ENTER ;</span><br><span class="line">             p-&gt;_prev = q ;</span><br><span class="line">             q = p ;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// In 1-0 mode we need: ST EntryList; MEMBAR #storestore; ST _owner = NULL</span></span><br><span class="line">      <span class="comment">// The MEMBAR is satisfied by the release_store() operation in ExitEpilog().</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// See if we can abdicate to a spinner instead of waking a thread.</span></span><br><span class="line">      <span class="comment">// A primary goal of the implementation is to reduce the</span></span><br><span class="line">      <span class="comment">// context-switch rate.</span></span><br><span class="line">      <span class="keyword">if</span> (_succ != <span class="literal">NULL</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      w = _EntryList  ;</span><br><span class="line">      <span class="keyword">if</span> (w != <span class="literal">NULL</span>) &#123;</span><br><span class="line">          <span class="built_in">guarantee</span> (w-&gt;TState == ObjectWaiter::TS_ENTER, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">          <span class="built_in">ExitEpilog</span> (Self, w) ;</span><br><span class="line">          <span class="keyword">return</span> ;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="锁释放流程图"   >          <a href="#锁释放流程图" class="heading-link"><i class="fas fa-link"></i></a><a href="#锁释放流程图" class="headerlink" title="锁释放流程图"></a>锁释放流程图</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230803194242527.png"  alt="锁释放流程图">      </p>        <h2 id="锁的降级"   >          <a href="#锁的降级" class="heading-link"><i class="fas fa-link"></i></a><a href="#锁的降级" class="headerlink" title="锁的降级"></a>锁的降级</h2>      <p>我们在前面的偏向锁加锁和撤销偏向锁、轻量级锁膨胀、重量级锁膨胀、以及最后的锁的释放过程好像只是把锁头信息给改正，但是好像没有看到锁降级的过程，而锁降级确实是提供了一个方法</p><p><strong>即锁在虚拟机的全局安全点会检查是否有闲置的监控器</strong>，<strong>如果有会进行一个锁降级</strong></p><p>锁降级方法：在JVM的STW状态进行一个锁的降级</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ObjectSynchronizer::deflate_monitor</span><span class="params">(ObjectMonitor* mid, oop obj,</span></span></span><br><span class="line"><span class="params"><span class="function">                                         ObjectMonitor** FreeHeadp, ObjectMonitor** FreeTailp)</span> </span>&#123;</span><br><span class="line">  <span class="type">bool</span> deflated;</span><br><span class="line">  <span class="comment">// Normal case ... The monitor is associated with obj.</span></span><br><span class="line">  <span class="built_in">guarantee</span> (obj-&gt;<span class="built_in">mark</span>() == markOopDesc::<span class="built_in">encode</span>(mid), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  <span class="built_in">guarantee</span> (mid == obj-&gt;<span class="built_in">mark</span>()-&gt;<span class="built_in">monitor</span>(), <span class="string">&quot;invariant&quot;</span>);</span><br><span class="line">  <span class="built_in">guarantee</span> (mid-&gt;<span class="built_in">header</span>()-&gt;<span class="built_in">is_neutral</span>(), <span class="string">&quot;invariant&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (mid-&gt;<span class="built_in">is_busy</span>()) &#123;</span><br><span class="line">     <span class="keyword">if</span> (ClearResponsibleAtSTW) mid-&gt;_Responsible = <span class="literal">NULL</span> ;</span><br><span class="line">     deflated = <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">// Deflate the monitor if it is no longer being used</span></span><br><span class="line">     <span class="comment">// It&#x27;s idle - scavenge and return to the global free list</span></span><br><span class="line">     <span class="comment">// plain old deflation ...</span></span><br><span class="line">     <span class="built_in">TEVENT</span> (deflate_idle_monitors - scavenge1) ;</span><br><span class="line">     <span class="keyword">if</span> (TraceMonitorInflation) &#123;</span><br><span class="line">       <span class="keyword">if</span> (obj-&gt;<span class="built_in">is_instance</span>()) &#123;</span><br><span class="line">         ResourceMark rm;</span><br><span class="line">           tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;Deflating object &quot;</span> INTPTR_FORMAT <span class="string">&quot; , mark &quot;</span> INTPTR_FORMAT <span class="string">&quot; , type %s&quot;</span>,</span><br><span class="line">                (<span class="type">void</span> *) obj, (<span class="type">intptr_t</span>) obj-&gt;<span class="built_in">mark</span>(), obj-&gt;<span class="built_in">klass</span>()-&gt;<span class="built_in">external_name</span>());</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Restore the header back to obj</span></span><br><span class="line">     obj-&gt;<span class="built_in">release_set_mark</span>(mid-&gt;<span class="built_in">header</span>());</span><br><span class="line">     mid-&gt;<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">     <span class="built_in">assert</span> (mid-&gt;<span class="built_in">object</span>() == <span class="literal">NULL</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Move the object to the working free list defined by FreeHead,FreeTail.</span></span><br><span class="line">     <span class="keyword">if</span> (*FreeHeadp == <span class="literal">NULL</span>) *FreeHeadp = mid;</span><br><span class="line">     <span class="keyword">if</span> (*FreeTailp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">       ObjectMonitor * prevtail = *FreeTailp;</span><br><span class="line">       <span class="built_in">assert</span>(prevtail-&gt;FreeNext == <span class="literal">NULL</span>, <span class="string">&quot;cleaned up deflated?&quot;</span>); <span class="comment">// TODO KK</span></span><br><span class="line">       prevtail-&gt;FreeNext = mid;</span><br><span class="line">      &#125;</span><br><span class="line">     *FreeTailp = mid;</span><br><span class="line">     deflated = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> deflated;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入剖析并发编程-JUC篇[1-JUC并发编程基础]</title>
      <link href="/2023/08/01/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-JUC%E7%AF%87%5B1-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%5D/"/>
      <url>/2023/08/01/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-JUC%E7%AF%87%5B1-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%5D/</url>
      
        <content type="html"><![CDATA[<p><strong>JUC并发编程基础</strong></p><hr><ul><li>第一篇是JUC并发编程基础</li><li>第二篇是JMM、Volatile关键字、synchronize锁详解</li><li>第三篇是CAS机制原理、Unsafe魔法类、LockSupport工具类、ThreadLocal线程变量</li></ul><hr>        <h1 id="冯诺依曼体系结构"   >          <a href="#冯诺依曼体系结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#冯诺依曼体系结构" class="headerlink" title="冯诺依曼体系结构"></a>冯诺依曼体系结构</h1>      <p>首先，我们要了解并发过程中为什么会导致数据会出错</p><p>冯·诺依曼机（von Neumann machine），又称冯·诺依曼计算机，根据<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E5%86%AF%C2%B7%E8%AF%BA%E4%BE%9D%E6%9B%BC/388909?fromModule=lemma_inlink" >冯·诺依曼</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>提出的<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E7%A8%8B%E5%BA%8F/8800242?fromModule=lemma_inlink" >存储程序</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E6%A6%82%E5%BF%B5%E8%AE%BE%E8%AE%A1/1200478?fromModule=lemma_inlink" >概念设计</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>的<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA/140338?fromModule=lemma_inlink" >计算机</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。主要特征是：指令与<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E9%83%BD/20348401?fromModule=lemma_inlink" >数据都</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>以<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6/361457?fromModule=lemma_inlink" >二进制</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>形式储存在<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E5%99%A8/1583185?fromModule=lemma_inlink" >存储器</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>里；指令根据其储存的<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C/332454?fromModule=lemma_inlink" >顺序执行</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。 <span class="exturl"><a class="exturl__link"   href="https://www.termonline.cn/word/54892/1#s1" >[1]</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84/6688306?fromModule=lemma_inlink" >冯·诺伊曼结构</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>（von Neumann architecture），也称冯·诺伊曼模型（Von Neumann model）或普林斯顿结构（Princeton architecture），是一种将程序指令存储器和数据存储器合并在一起的计算机设计<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E6%A6%82%E5%BF%B5%E7%BB%93%E6%9E%84/22325298?fromModule=lemma_inlink" >概念结构</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。依据冯·诺伊曼<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/7481502?fromModule=lemma_inlink" >结构设计</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>出的计算机称做冯.诺依曼计算机，又称存储程序计算机。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801161725875.png"  alt="冯诺依曼计算机结构图">      </p>        <h1 id="CPU模型"   >          <a href="#CPU模型" class="heading-link"><i class="fas fa-link"></i></a><a href="#CPU模型" class="headerlink" title="CPU模型"></a>CPU模型</h1>      <p>我们已知线程是CPU任务调度和执行的基本单位，而线程之间通信出现问题导致了数据的不一致性</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801163419744.png"  alt="CPU内存模型">      </p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">因为数据在高速缓存中，而线程之间的环境是隔离的</span><br><span class="line">每次只会获取自己线程的Cache，那么数据的不可见性最终导致数据的错误</span><br></pre></td></tr></table></div></figure>        <h1 id="缓存行"   >          <a href="#缓存行" class="heading-link"><i class="fas fa-link"></i></a><a href="#缓存行" class="headerlink" title="缓存行"></a>缓存行</h1>      <p>首先我们要引入一个缓存行的概念，数据在缓存中是怎么存放的</p><p>缓存行是数据中存放的单元，在现在主流CPU Cache中缓存行都是64位的，例如一个数据是int类型那么是32位 一个缓存行就能存放两个数据</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801165444126.png"  alt="缓存行">      </p><p>因此当线程想要获取数据A的时候会将A所在的缓存行刷入自己的Cache中，而当要获取数据B的时候直接从自己的缓存中读取即可，但这就引起了另外的一个问题：伪共享问题</p>        <h1 id="伪共享"   >          <a href="#伪共享" class="heading-link"><i class="fas fa-link"></i></a><a href="#伪共享" class="headerlink" title="伪共享"></a>伪共享</h1>      <p>因此有一个伪共享问题的存在，例如两个Int数据存放在缓存行C1中，而线程T1想要读取数据A，而线程T2想要读取数据B，他们都会从内存将C1刷入自己的Cache中</p><p>而当线程T1更新数据A，而线程T2的数据A没有更新，且会因为缓存一致性协议(MESI协议)，将其置为失效状态(I)</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801171236659.png"  alt="image-20230801171236659">      </p><p><em>而解决伪共享的解决方案有：</em></p><p>1.将变量对齐，使其填满一个缓存行</p><p>2.将不同线程操作的对象处于不同缓存行中</p>        <h1 id="缓存一致性协议"   >          <a href="#缓存一致性协议" class="heading-link"><i class="fas fa-link"></i></a><a href="#缓存一致性协议" class="headerlink" title="缓存一致性协议"></a>缓存一致性协议</h1>      <p>因为缓存的不一致导致数据出错，那么就有了缓存一致性的需求、</p><p>来达到缓存的一致性有两个方式</p>        <h2 id="给总线加锁"   >          <a href="#给总线加锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#给总线加锁" class="headerlink" title="给总线加锁"></a>给总线加锁</h2>      <p>当线程要获取数据的时候发起Lock将与主内存的总线加锁，这样其他线程要获取数据的时候就会被阻塞</p><p>这样当线程执行完毕之后写回给内存之后会UnLock解锁，唤醒其他线程</p><p>弊端：这样导致了线程的串行化，会造成性能影响。和我们多线程的意愿违背</p>        <h2 id="缓存一致性协议-MESI协议"   >          <a href="#缓存一致性协议-MESI协议" class="heading-link"><i class="fas fa-link"></i></a><a href="#缓存一致性协议-MESI协议" class="headerlink" title="缓存一致性协议(MESI协议)"></a>缓存一致性协议(MESI协议)</h2>      <p>缓存一致性协议有很多，而我们这里只谈MESI协议</p><p><strong>MESI协议</strong></p><p>M:修改(Modified) ， 意思是这个数据只在本线程独有，并且这个数据与主存的数据不一致，是修改过后的数据</p><p>E：  独享(Exclusive)， 意思是这个数据只有本线程独有，并且和主存的数据一致</p><p>S：  分享(Shared)，    意思是这个数据被多个线程持有，并且和主存的数据一致</p><p>I：   失效(invalid)，     意思是这个数据已经被其他线程修改而导致失效了，需要重新从主存中获取数据</p><p>Cache Line在高速缓存Cache中的状态就变成 高两位为信号位(用来存放MESI状态)，后面为数据位</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801172256181.png"  alt="缓存行在Cache中">      </p>        <h2 id="消息"   >          <a href="#消息" class="heading-link"><i class="fas fa-link"></i></a><a href="#消息" class="headerlink" title="消息"></a>消息</h2>      <p>MESI状态变换要通过消息来进行变换，而每次CPU在进行数据操作的时候都会有一个嗅探机制来处理信号并且在一定条件下响应信号</p><ul><li><p>Read 信号：表示要读取某个缓存行，会附带目标的物理地址</p></li><li><p>Read Response信号：反馈Read信号，内容就是Read信号的目标缓存行。Read Response信号可以由内存发出，也可以由其他CPU核心发出</p></li><li><p>Invalidate信号： 表示数据要被更新，告诉共享的CPU核数据已经失效了</p></li><li><p>Invalidate Acknowledge信号：表示知道数据已经失效，准备清空缓存数据</p></li><li><p>Read Invalidate信号：为Read+Invalidate，既要读取数据又要更新数据，让其他缓存行数据失效</p></li><li><p>Writeback信号：数据回写信号，在某一定条件下数据从Cache写回内存中</p></li></ul>        <h2 id="图解MESI的各种变幻状态"   >          <a href="#图解MESI的各种变幻状态" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解MESI的各种变幻状态" class="headerlink" title="图解MESI的各种变幻状态"></a>图解MESI的各种变幻状态</h2>      <p>我们假设有两个线程来获取数据</p>        <h3 id="①线程A获取数据"   >          <a href="#①线程A获取数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#①线程A获取数据" class="headerlink" title="①线程A获取数据"></a>①线程A获取数据</h3>      <p>发起一个Read信号，想要读取内存中的数据放入到线程中Cache里</p><p>此时返回一个Read Response信号，此时Read Response信号来自内存，线程A中的缓存行状态为E态(独享)</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801171827789.png"  alt="仅线程A获取数据">      </p>        <h3 id="②线程B获取数据"   >          <a href="#②线程B获取数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#②线程B获取数据" class="headerlink" title="②线程B获取数据"></a>②线程B获取数据</h3>      <p>线程B也发起Read信号，返回一个Read Response信号,可能来自线程A中，将线程A中的缓存行状态改成S态(独享)</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801171947078.png"  alt="线程B也获取同一个数据">      </p>        <h3 id="③线程A更新数据"   >          <a href="#③线程A更新数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#③线程A更新数据" class="headerlink" title="③线程A更新数据"></a>③线程A更新数据</h3>      <p>发出Invalidate信号，将线程B中的数据更新成I态，此时线程A的缓存行状态为M态</p><p>线程B会返回一个Invalidate Acknowledge信号，表示自己已经知道数据失效了将要清空缓存</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801173716877.png"  alt="线程A更新数据">      </p>        <h3 id="④数据写回内存"   >          <a href="#④数据写回内存" class="heading-link"><i class="fas fa-link"></i></a><a href="#④数据写回内存" class="headerlink" title="④数据写回内存"></a>④数据写回内存</h3>      <p>发起WriteBack信号，写回数据，并将现场A缓存中数据置为E态</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801173940439.png"  alt="数据写回内存">      </p>        <h1 id="CPU空闲-–-引入Store-Buffer"   >          <a href="#CPU空闲-–-引入Store-Buffer" class="heading-link"><i class="fas fa-link"></i></a><a href="#CPU空闲-–-引入Store-Buffer" class="headerlink" title="CPU空闲 –&gt; 引入Store Buffer"></a>CPU空闲 –&gt; 引入Store Buffer</h1>      <p>当线程A发起写操作并且发起Invalidate信号必须要等其他线程返回Invalidate Acknowledge信号 那么就会有一个等待时间，而我们要的是CPU忙，让CPU空闲不是我们想要的</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801174606159.png"  alt="CPU空闲">      </p><p>所以引入了StoreBuffer，将修改之后的操作直接存入StoreBuffer中，而StoreBuffer以某种条件刷入到Cache中再去执行操作，这样就不会导致线程空闲。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801175207579.png"  alt="引入StroeBuffer之后">      </p><p>当线程有执行操作之后直接写入到StoreBuffer中，而StoreBuffer是一个先进先出的队列，这样能保证数据刷出的有序性</p><p>而线程要读取数据的时候发现StoreBuffer中有的时候可以直接从StroeBuffer中获取数据</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801175913669.png"  alt="处理模型">      </p><p><em>引出的问题</em>：StoreBuffer会引起缓存的不一致性，当数据还没刷出到Cache中的时候就导致了数据的错误</p><p><strong>解决方案</strong></p><p>添加屏障(CPU屏障)：写屏障或者全屏障，当写操作之前，将StoreBuffer的数据刷入到Cache中</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801180536132.png"  alt="添加屏障，将StoreBuffer数据写到Cache中">      </p>        <h1 id="引入Invalidate-Queues"   >          <a href="#引入Invalidate-Queues" class="heading-link"><i class="fas fa-link"></i></a><a href="#引入Invalidate-Queues" class="headerlink" title="引入Invalidate Queues"></a>引入Invalidate Queues</h1>      <p>当StoreBuffer打满要刷新到Cache中或者因为其他原因要写到Cache中，多个Invalidate信号要等待Invalidate AcknowLedge信号而Invalidate AcknowLedge信号很慢，这段时间会空闲，所以引入了一个失效队列，当失效信号发出就发到失效队列中，这样就异步解决了这个问题</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801181326286.png"  alt="引入Invalidate Queues">      </p><p><em>引出的问题</em>：Invalidate会引起缓存的不一致性，当信号还没执行，就要读取数据了而此时数据没更新会导致数据的错误</p><p><strong>解决方案</strong></p><p>添加屏障(CPU屏障)：读屏障或者全屏障，当读操作之前，将InvalidateQueue中作用到Cache中</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801181924213.png"  alt="添加屏障">      </p>        <h1 id="乱序问题"   >          <a href="#乱序问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#乱序问题" class="headerlink" title="乱序问题"></a>乱序问题</h1>      <p>因为指令在虚拟机执行可能会进行一个重排，导致一个不可见性，所以有可能出现乱序问题</p><ul><li><p>Load Load：有问题，线程A读取数据的时候第一次读取和第二次读取可能不一样(其他线程进行改动)</p></li><li><p>Load Store：没问题，线程A读取数据然后从写入数据到StoreBuffer中</p></li><li><p>Store Load：有问题，线程A写操作写入StoreBuffer而没有刷到主存中，线程B再读数据就会读到脏数据</p></li><li><p>Store Store：：没问题，线程A写入StoreBuffer中，因为StoreBuffer是先进先出的队列，只要保证Happens-before原则，那么执行的顺序就是有序的</p></li></ul><p>解决方案:利用屏障，将数据刷出在Cache中</p>        <h1 id="总结："   >          <a href="#总结：" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1>      <p>以上是从硬件层面来讲JUC为什么并发会导致数据错误，我们真正要进入Java的世界中去探讨JUC并发编程的问题了</p><hr>        <h1 id="后记"   >          <a href="#后记" class="heading-link"><i class="fas fa-link"></i></a><a href="#后记" class="headerlink" title="后记"></a>后记</h1>      <p>我学JUC这块我很幸运我能在大概几百个点击的时候在B站看到J3Code老哥对JUC并发编程的视频，我没有选择尚硅谷、马士兵、黑马的视频，可能是在学JUC这块看到了一些差评的原因，而黑马是因为视频有点旧了，实际上我学的还是JDK8的，到现在为止视频应该是可以学习的。但是因为有些评论说是因为PPT讲师造就PPT程序员，是吧。所以看差评这块影响心态被拿捏的死死的</p><hr><p>总之，我还是非常感谢J3Code老哥可以免费分享出他深入JUC这块的成果，下面是他的CSDN地址</p><div class="table-container"><table><thead><tr><th>作者</th><th>CSDN主页地址</th></tr></thead><tbody><tr><td>J3code</td><td><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/qq_40399646" >https://blog.csdn.net/qq_40399646</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MallChat项目分析</title>
      <link href="/2023/07/30/MallChat%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/"/>
      <url>/2023/07/30/MallChat%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[        <h1 id="先跑通项目"   >          <a href="#先跑通项目" class="heading-link"><i class="fas fa-link"></i></a><a href="#先跑通项目" class="headerlink" title="先跑通项目"></a>先跑通项目</h1>              <h2 id="尝试运行"   >          <a href="#尝试运行" class="heading-link"><i class="fas fa-link"></i></a><a href="#尝试运行" class="headerlink" title="尝试运行"></a>尝试运行</h2>              <h3 id="后端"   >          <a href="#后端" class="heading-link"><i class="fas fa-link"></i></a><a href="#后端" class="headerlink" title="后端:"></a>后端:</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230730100207953.png"  alt="image-20230730100207953">      </p><p>|INFO|2023-07-30 09:50:38.781|main||uid&#x3D;|Tomcat initialized with port(s): 8080 (http)|</p><p>找到内置的tomcat服务器端口号是8080</p>        <h3 id="前端"   >          <a href="#前端" class="heading-link"><i class="fas fa-link"></i></a><a href="#前端" class="headerlink" title="前端:"></a>前端:</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230730103826557.png"  alt="image-20230730103826557">      </p>        <h2 id="尝试进入Swagger"   >          <a href="#尝试进入Swagger" class="heading-link"><i class="fas fa-link"></i></a><a href="#尝试进入Swagger" class="headerlink" title="尝试进入Swagger"></a>尝试进入Swagger</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;</span><br><span class="line">    &lt;!--使用Swagger2--&gt;</span><br><span class="line">    &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.0</span><span class="number">.9</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></div></figure><p>因为找到了Swagger2依赖 所以项目中用了Swagger</p><p>尝试进入Swagger-ui页面</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230730100713827.png"  alt="image-20230730100713827">      </p><p>找到Swagger配置类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(value = &quot;defaultApi2&quot;)</span></span><br><span class="line">    Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                <span class="comment">//配置网站的基本信息</span></span><br><span class="line">                .apiInfo(<span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                        <span class="comment">//网站标题</span></span><br><span class="line">                        .title(<span class="string">&quot;mallchat接口文档&quot;</span>)</span><br><span class="line">                        <span class="comment">//标题后面的版本号</span></span><br><span class="line">                        .version(<span class="string">&quot;v1.0&quot;</span>)</span><br><span class="line">                        .description(<span class="string">&quot;mallchat接口文档&quot;</span>)</span><br><span class="line">                        <span class="comment">//联系人信息</span></span><br><span class="line">                        .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;阿斌&quot;</span>, <span class="string">&quot;http://www.mallchat.cn&quot;</span>, <span class="string">&quot;972627721@qq.com&quot;</span>))</span><br><span class="line">                        .build())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//指定接口的位置</span></span><br><span class="line">                .apis(RequestHandlerSelectors</span><br><span class="line">                        .withClassAnnotation(RestController.class)</span><br><span class="line">                )</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>通过mallchat文档中得知</p><p>SwaggerUI经过Knife4j优化之后URL变更了</p><p>从localhost:8080&#x2F;doc.html进入SwaggerUI中</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230730103929645.png"  alt="image-20230730103929645">      </p><p>获得了接口列表</p>        <h2 id="端口号分析"   >          <a href="#端口号分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#端口号分析" class="headerlink" title="端口号分析"></a>端口号分析</h2>      <p>3306: Mysql端口</p><p>6379: Redis端口</p><p>8080:本地tomcat端口</p><p>8090?</p><p>9000:minio端口</p><p>9988?</p>        <h2 id="进入前端界面尝试前后端联调"   >          <a href="#进入前端界面尝试前后端联调" class="heading-link"><i class="fas fa-link"></i></a><a href="#进入前端界面尝试前后端联调" class="headerlink" title="进入前端界面尝试前后端联调"></a>进入前端界面尝试前后端联调</h2>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230730161607692.png"  alt="image-20230730161607692">      </p>        <h2 id="申请测试号，来进行获取微信信息"   >          <a href="#申请测试号，来进行获取微信信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#申请测试号，来进行获取微信信息" class="headerlink" title="申请测试号，来进行获取微信信息"></a>申请测试号，来进行获取微信信息</h2>      <p>通过微信测试号可以获得登录的头像等微信信息</p>        <h2 id="通过测试号获取到登录信息之后进入前端页面进行测试"   >          <a href="#通过测试号获取到登录信息之后进入前端页面进行测试" class="heading-link"><i class="fas fa-link"></i></a><a href="#通过测试号获取到登录信息之后进入前端页面进行测试" class="headerlink" title="通过测试号获取到登录信息之后进入前端页面进行测试"></a>通过测试号获取到登录信息之后进入前端页面进行测试</h2>      <p>清除浏览器Session然后重新刷新页面抓到初始化请求</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230730225147538.png"  alt="image-20230730225147538">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/MallChat%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/image-20230731101441566.png"  alt="image-20230731101441566">      </p><div class="table-container"><table><thead><tr><th>name</th><th>请求类型</th><th>URL</th></tr></thead><tbody><tr><td>page?pageSize&#x3D;20</td><td>GET请求</td><td><span class="exturl"><a class="exturl__link"   href="http://localhost:9988/capi/chat/public/member/page?pageSize=20" >http://localhost:9988/capi/chat/public/member/page?pageSize=20</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td>statistic</td><td>GET请求</td><td><span class="exturl"><a class="exturl__link"   href="http://localhost:9988/capi/chat/public/member/statistic" >http://localhost:9988/capi/chat/public/member/statistic</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td>badges</td><td>GET请求</td><td><span class="exturl"><a class="exturl__link"   href="http://localhost:9988/capi/user/badges" >http://localhost:9988/capi/user/badges</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td>page?pageSize&#x3D;20&amp;roomId&#x3D;1</td><td>GET请求</td><td><span class="exturl"><a class="exturl__link"   href="http://localhost:9988/capi/chat/public/msg/page?pageSize=20&roomId=1" >http://localhost:9988/capi/chat/public/msg/page?pageSize=20&amp;roomId=1</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td>list</td><td>GET请求</td><td><span class="exturl"><a class="exturl__link"   href="http://localhost:9988/capi/user/emoji/list" >http://localhost:9988/capi/user/emoji/list</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr></tbody></table></div><p>然后点击登录按钮</p><p>通过微信扫码登录到聊天室中</p><p>我们来看新增的两个请求</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230731100759932.png"  alt="image-20230731100759932">      </p><div class="table-container"><table><thead><tr><th>name</th><th>请求类型</th><th>URL</th></tr></thead><tbody><tr><td>userInfo</td><td>GET请求</td><td><span class="exturl"><a class="exturl__link"   href="http://localhost:9988/capi/user/userInfo" >http://localhost:9988/capi/user/userInfo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td>list?uid&#x3D;10003</td><td>GET请求</td><td><span class="exturl"><a class="exturl__link"   href="http://localhost:9988/capi/user/emoji/list?uid=10003" >http://localhost:9988/capi/user/emoji/list?uid=10003</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr></tbody></table></div><p>这个登录是通过VX扫码实现的，我们之后再看这个逻辑实现</p><p>先从用户模块开始看吧</p>        <h2 id="用户模块"   >          <a href="#用户模块" class="heading-link"><i class="fas fa-link"></i></a><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h2>      <p>从Swaager-ui发起测试请求，响应结果是未登录</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230731102513714.png"  alt="image-20230731102513714">      </p><p>可知URI被拦截器拦截</p><p>找到Token拦截器</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//获取用户登录token</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> getToken(request);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">validUid</span> <span class="operator">=</span> loginService.getValidUid(token);</span><br><span class="line">    <span class="keyword">if</span> (Objects.nonNull(validUid)) &#123;<span class="comment">//有登录态</span></span><br><span class="line">        request.setAttribute(ATTRIBUTE_UID, validUid);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isPublicURI</span> <span class="operator">=</span> isPublicURI(request.getRequestURI());</span><br><span class="line">        <span class="keyword">if</span> (!isPublicURI) &#123;<span class="comment">//又没有登录态，又不是公开路径，直接401</span></span><br><span class="line">            HttpErrorEnum.ACCESS_DENIED.sendHttpError(response);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    MDC.put(MDCKey.UID, String.valueOf(validUid));</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>调用了一个isPublicURI方法 来判断是不是公开路径</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isPublicURI</span><span class="params">(String requestURI)</span> &#123;</span><br><span class="line">    String[] split = requestURI.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> split.length &gt; <span class="number">2</span> &amp;&amp; <span class="string">&quot;public&quot;</span>.equals(split[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将请求通过&#x27;/&#x27;分割,当数组长度大于2并且第四块为public的时候说明是公开路径</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">例如 http://localhost:9988/capi/user/userInfo</span></span><br><span class="line"><span class="comment">通过&#x27;/&#x27;切割 </span></span><br><span class="line"><span class="comment">则</span></span><br><span class="line"><span class="comment">split[0],</span></span><br><span class="line"><span class="comment">split[1],capi</span></span><br><span class="line"><span class="comment">split[2],user</span></span><br><span class="line"><span class="comment">split[3],userInfo</span></span><br><span class="line"><span class="comment">例如 http://localhost:9988/capi/chat/public/member/page</span></span><br><span class="line"><span class="comment">则</span></span><br><span class="line"><span class="comment">split[0],</span></span><br><span class="line"><span class="comment">split[1],capi</span></span><br><span class="line"><span class="comment">split[2],chat</span></span><br><span class="line"><span class="comment">split[3],public</span></span><br><span class="line"><span class="comment">split[4],member</span></span><br><span class="line"><span class="comment">split[5],page</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>决定用通过登录之后的前端来进行测试</p>        <h3 id="获得用户信息"   >          <a href="#获得用户信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#获得用户信息" class="headerlink" title="获得用户信息"></a>获得用户信息</h3>      <div class="table-container"><table><thead><tr><th>访问uri</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;user&#x2F;userInfo</td><td>GET请求</td></tr></tbody></table></div>        <h4 id="Controller层"   >          <a href="#Controller层" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/userInfo&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;用户详情&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;UserInfoResp&gt; <span class="title function_">getUserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//通过获取请求的上下文获取uid调用userService.getUserInfo方法  传入具体的Uid</span></span><br><span class="line">    <span class="keyword">return</span> ApiResult.success(userService.getUserInfo(RequestHolder.get().getUid()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>调用getUserInfo方法</p><p>将返回结果封装成APIResult对象(统一返回类型)</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;基础返回体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiResult</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;成功标识true or false&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;错误码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer errCode;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;错误消息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String errMsg;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;返回对象&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResult&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        ApiResult&lt;T&gt; result = <span class="keyword">new</span> <span class="title class_">ApiResult</span>&lt;T&gt;();</span><br><span class="line">        result.setData(data);</span><br><span class="line">        result.setSuccess(Boolean.TRUE);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传入的参数data是Controller层中的</span></span><br><span class="line"><span class="comment">//userService.getUserInfo(RequestHolder.get().getUid())</span></span><br></pre></td></tr></table></div></figure>        <h4 id="UserService层"   >          <a href="#UserService层" class="heading-link"><i class="fas fa-link"></i></a><a href="#UserService层" class="headerlink" title="UserService层"></a>UserService层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserInfoResp <span class="title function_">getUserInfo</span><span class="params">(Long uid)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> UserInfoResp <span class="title function_">getUserInfo</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">       <span class="comment">//查询缓存中有没有这个Uid,本质上调用map.get() 如果有则返回User 如果没有则返回null</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">userInfo</span> <span class="operator">=</span> userCache.getUserInfo(uid);</span><br><span class="line">       <span class="comment">//查询当前用户(Uid)的物品改名卡使用状态</span></span><br><span class="line">       <span class="type">Integer</span> <span class="variable">countByValidItemId</span> <span class="operator">=</span></span><br><span class="line">           userBackpackDao.getCountByValidItemId(uid, ItemEnum.MODIFY_NAME_CARD.getId());</span><br><span class="line">       <span class="keyword">return</span> UserAdapter.buildUserInfoResp(userInfo, countByValidItemId);</span><br><span class="line">       <span class="comment">//将缓存中的数据和当前用户改名卡状态发送到适配器中buildUserInfoResp中</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="getUserInfo"   >          <a href="#getUserInfo" class="heading-link"><i class="fas fa-link"></i></a><a href="#getUserInfo" class="headerlink" title="getUserInfo"></a>getUserInfo</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> User <span class="title function_">getUserInfo</span><span class="params">(Long uid)</span> &#123;<span class="comment">//todo 后期做二级缓存</span></span><br><span class="line"><span class="comment">//调用getUserInfoBatch获取一个Map&lt;Long,user&gt; 然后调用Map的get方法  如果有数据返回User,没有返回null</span></span><br><span class="line">       <span class="keyword">return</span> getUserInfoBatch(Collections.singleton(uid)).get(uid);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="getInfoBatch"   >          <a href="#getInfoBatch" class="heading-link"><i class="fas fa-link"></i></a><a href="#getInfoBatch" class="headerlink" title="getInfoBatch"></a>getInfoBatch</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;Long, User&gt; <span class="title function_">getUserInfoBatch</span><span class="params">(Set&lt;Long&gt; uids)</span> &#123;</span><br><span class="line">    <span class="comment">//将uids转换成流 然后调用RedisKey的封装类将其拼接成mallchat:userInfo:uid_%d的格式，然后转成List列表</span></span><br><span class="line">        List&lt;String&gt; keys = uids.stream().map(a -&gt; RedisKey.getKey(RedisKey.USER_INFO_STRING, a)).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//调用RedisUtils的mget方法，返回多个User放到List中</span></span><br><span class="line">        List&lt;User&gt; mget = RedisUtils.mget(keys, User.class);</span><br><span class="line">    <span class="comment">//过滤非空的对象，封装成Key为Uid,Value为User的map 这里的map是缓存中的map</span></span><br><span class="line">        Map&lt;Long, User&gt; map = mget.stream().filter(Objects::nonNull).collect(Collectors.toMap(User::getId, Function.identity()));</span><br><span class="line">        <span class="comment">//还需要load更新的uid</span></span><br><span class="line">    <span class="comment">//找到不包含在缓存中的uid放到needLoadUidList中</span></span><br><span class="line">        List&lt;Long&gt; needLoadUidList = uids.stream().filter(a -&gt; !map.containsKey(a)).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//如果needLoadUidList非空则说明有新数据要写到缓存中</span></span><br><span class="line">        <span class="keyword">if</span> (CollUtil.isNotEmpty(needLoadUidList)) &#123;</span><br><span class="line">            <span class="comment">//调用userDao的查询方法 ，UserDao调用getBaseMapper().selectBatchIds(idList)获取数据库中的user用户列表</span></span><br><span class="line">            List&lt;User&gt; needLoadUserList = userDao.listByIds(needLoadUidList);</span><br><span class="line">            <span class="comment">//统一转换成key为mallchat:userInfo:uid_%d,value为User的格式 放到Map</span></span><br><span class="line">            Map&lt;String, User&gt; redisMap = needLoadUserList.stream().collect(Collectors.toMap(a -&gt; RedisKey.getKey(RedisKey.USER_INFO_STRING, a.getId()), Function.identity()));</span><br><span class="line">            <span class="comment">//调用RedisUtils.mset 统一写进缓存 参数一:要写进去的数据,参数二:过期时间5*60</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//将查询UserInfo的缓存设置为300s 即5分钟</span></span><br><span class="line">            RedisUtils.mset(redisMap, <span class="number">5</span> * <span class="number">60</span>);</span><br><span class="line">            <span class="comment">//将更新完到缓存的数据放回到map中，用于进行返回用户数据</span></span><br><span class="line">            map.putAll(needLoadUserList.stream().collect(Collectors.toMap(User::getId, Function.identity())));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//返回map</span></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="UserBackPackDao"   >          <a href="#UserBackPackDao" class="heading-link"><i class="fas fa-link"></i></a><a href="#UserBackPackDao" class="headerlink" title="UserBackPackDao"></a>UserBackPackDao</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserBackpackDao</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserBackpackMapper, UserBackpack&gt; &#123;</span><br><span class="line"><span class="comment">//利用了MP</span></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getCountByValidItemId</span><span class="params">(Long uid, Long itemId)</span> &#123;</span><br><span class="line">        <span class="comment">//调用lambdaQuery方法</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//这个Select语句是 SELECT COUNT( 1 ) FROM user_backpack WHERE (uid = ? AND item_id = ? AND status = ?)</span></span><br><span class="line">        <span class="comment">//注入的参数是uid: 10004， itemId: 1 ,status =0</span></span><br><span class="line">        <span class="comment">//翻译过来是查询10004号用户，物品ID为1(改名卡),未被使用(0未使用,1已使用)</span></span><br><span class="line">        <span class="comment">//返回了1  即10004用户状态正如参数所示</span></span><br><span class="line">        <span class="keyword">return</span> lambdaQuery().eq(UserBackpack::getUid, uid)</span><br><span class="line">                .eq(UserBackpack::getItemId, itemId)</span><br><span class="line">                .eq(UserBackpack::getStatus, YesOrNoEnum.NO.getStatus())</span><br><span class="line">                .count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="流程"   >          <a href="#流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程" class="headerlink" title="流程"></a>流程</h4>      <p>①查询用户信息的时候，Controller调用service的查询userInfo的方法，传入请求中的uid 然后包装成APIResult返回前端</p><p>②serviceImpl 查询用户数据 直接查询缓存，如果查询到缓存则直接返回用户数据</p><p>③如果缓存中没有数据则通过userDao查询数据库，数据库返回到的数据先写回到Redis中设置过期时间为300秒</p><p>④将查询结果返回，然后查询用户物品使用信息 调用userBackpackDao的方法</p><p>⑤统一将用户详情信息、用户物品使用信息用userAdapter封装返回</p>        <h3 id="修改用户名"   >          <a href="#修改用户名" class="heading-link"><i class="fas fa-link"></i></a><a href="#修改用户名" class="headerlink" title="修改用户名"></a>修改用户名</h3>      <p>访问uil</p><div class="table-container"><table><thead><tr><th>访问uil</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;user&#x2F;name</td><td>PUT请求</td></tr></tbody></table></div>        <h4 id="Controller层-1"   >          <a href="#Controller层-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-1" class="headerlink" title="Controller层"></a>Controller层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping(&quot;/name&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;修改用户名&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;Void&gt; <span class="title function_">modifyName</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> ModifyNameReq req)</span> &#123;</span><br><span class="line">    userService.modifyName(RequestHolder.get().getUid(), req);</span><br><span class="line">    <span class="keyword">return</span> ApiResult.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>调用userService.modfiyName方法修改用户名</p><p>返回成功结果</p>        <h4 id="UserService层-1"   >          <a href="#UserService层-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#UserService层-1" class="headerlink" title="UserService层"></a>UserService层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">modifyName</span><span class="params">(Long uid, ModifyNameReq req)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modifyName</span><span class="params">(Long uid, ModifyNameReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//从请求中获取新的用户名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">newName</span> <span class="operator">=</span> req.getName();</span><br><span class="line">    <span class="comment">//检查用户名是否合法,如果不合法会抛出异常</span></span><br><span class="line">    AssertUtil.isFalse(sensitiveWordBs.hasSensitiveWord(newName), <span class="string">&quot;名字中包含敏感词，请重新输入&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//检查用户列表中有没有该用户使用这个用户名 如果有则会返回一个User</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">oldUser</span> <span class="operator">=</span> userDao.getByName(newName);</span><br><span class="line">    <span class="comment">//判断用户中有这个名字则抛出异常</span></span><br><span class="line">    AssertUtil.isEmpty(oldUser, <span class="string">&quot;名字已经被抢占了，请换一个哦~~&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断用户有没有改名机会，如果有改名机会则会返回一个UserBackpack 如果没有则会返回null</span></span><br><span class="line">    <span class="type">UserBackpack</span> <span class="variable">firstValidItem</span> <span class="operator">=</span> userBackpackDao.getFirstValidItem(uid, ItemEnum.MODIFY_NAME_CARD.getId());</span><br><span class="line">    <span class="comment">//如果没有改名卡则抛出异常</span></span><br><span class="line">    AssertUtil.isNotEmpty(firstValidItem, <span class="string">&quot;改名次数不够了，等后续活动送改名卡哦&quot;</span>);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//走到这里用户可以改名，然后判断有没有使用改名卡</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">useSuccess</span> <span class="operator">=</span> userBackpackDao.invalidItem(firstValidItem.getId());</span><br><span class="line">    <span class="comment">//采用乐观锁判断改名卡使用是否成功</span></span><br><span class="line">    <span class="keyword">if</span> (useSuccess) &#123;</span><br><span class="line">        <span class="comment">//如果用户改名成功，则进入条件判断中</span></span><br><span class="line">        <span class="comment">//改名</span></span><br><span class="line">        userDao.modifyName(uid, req.getName());</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//调用userInfoChange(uid) 删除缓存中用户信息并更新缓存数据物品使用信息</span></span><br><span class="line">        userCache.userInfoChange(uid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="getFirstValidItem"   >          <a href="#getFirstValidItem" class="heading-link"><i class="fas fa-link"></i></a><a href="#getFirstValidItem" class="headerlink" title="getFirstValidItem"></a>getFirstValidItem</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> UserBackpack <span class="title function_">getFirstValidItem</span><span class="params">(Long uid, Long itemId)</span> &#123;</span><br><span class="line">    <span class="comment">//调用LambdaQueryWrapper可以使用匿名类和lambda表达式进行查询条件的拼接</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//SELECT id,uid,item_id,status,idempotent,create_time,update_time FROM user_backpack </span></span><br><span class="line">    <span class="comment">//WHERE (uid = ? AND item_id = ? AND status = ?) limit 1</span></span><br><span class="line">    <span class="comment">//参数:10004(Long), 1(Long), 0(Integer)  </span></span><br><span class="line"> </span><br><span class="line">        LambdaQueryWrapper&lt;UserBackpack&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;UserBackpack&gt;().lambda()</span><br><span class="line">                .eq(UserBackpack::getUid, uid)   <span class="comment">//限制uid相等</span></span><br><span class="line">                .eq(UserBackpack::getItemId, itemId)  <span class="comment">//限制itemId相等</span></span><br><span class="line">                .eq(UserBackpack::getStatus, YesOrNoEnum.NO.getStatus())  <span class="comment">//限制物品使用情况，0即未使用</span></span><br><span class="line">                .last(<span class="string">&quot;limit 1&quot;</span>);  <span class="comment">//只能返回一个</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回一条查询结果</span></span><br><span class="line">        <span class="keyword">return</span> getOne(wrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="invaldItem"   >          <a href="#invaldItem" class="heading-link"><i class="fas fa-link"></i></a><a href="#invaldItem" class="headerlink" title="invaldItem"></a>invaldItem</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">invalidItem</span><span class="params">(Long id)</span> &#123;</span><br><span class="line"><span class="comment">//使用改名卡,修改用户物品信息表</span></span><br><span class="line">        <span class="type">UserBackpack</span> <span class="variable">update</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserBackpack</span>();</span><br><span class="line">        update.setId(id);</span><br><span class="line">        update.setStatus(YesOrNoEnum.YES.getStatus());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//UPDATE user_backpack SET status=? WHERE id=?</span></span><br><span class="line">    <span class="comment">//参数：1(Integer), 2(Long)</span></span><br><span class="line">    <span class="comment">//更新用户物品使用表，如果更新成功则返回true,如果更新失败则返回false</span></span><br><span class="line">        <span class="keyword">return</span> updateById(update);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="ModifyName"   >          <a href="#ModifyName" class="heading-link"><i class="fas fa-link"></i></a><a href="#ModifyName" class="headerlink" title="ModifyName"></a>ModifyName</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modifyName</span><span class="params">(Long uid, String name)</span> &#123;</span><br><span class="line">    <span class="comment">//更新用户表，用户使用了改名卡修改名字</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">update</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        update.setId(uid);</span><br><span class="line">        update.setName(name);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//更新用户信息</span></span><br><span class="line">    <span class="comment">//UPDATE user SET name=? WHERE id=?</span></span><br><span class="line">    <span class="comment">//参数：鱼鱼(String), 10004(Long)</span></span><br><span class="line">        updateById(update);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="userInfoChange"   >          <a href="#userInfoChange" class="heading-link"><i class="fas fa-link"></i></a><a href="#userInfoChange" class="headerlink" title="userInfoChange"></a>userInfoChange</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userInfoChange</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">    <span class="comment">//删除用户缓存</span></span><br><span class="line">        delUserInfo(uid);</span><br><span class="line">    <span class="comment">//更新缓存中用户物品使用时间</span></span><br><span class="line">        refreshUserModifyTime(uid);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="流程-1"   >          <a href="#流程-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程-1" class="headerlink" title="流程"></a>流程</h4>      <p>①调用Controller来处理改名请求，Controller调用service来进行改名操作</p><p>②判断用户名是否合法、用户名是否被占用、是否有改名次数，如果都有则进入改名阶段,如果有其一没有则抛出异常</p><p>③改名，先修改改名卡使用情况，如果修改成功则代表着改名成功，如果修改失败则说明有线程竞争</p><p>④改名成功，删除缓存中用户信息，缓存添加修改使用物品时间</p>        <h3 id="可选勋章预览"   >          <a href="#可选勋章预览" class="heading-link"><i class="fas fa-link"></i></a><a href="#可选勋章预览" class="headerlink" title="可选勋章预览"></a>可选勋章预览</h3>      <div class="table-container"><table><thead><tr><th>访问Uri</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;user&#x2F;badges</td><td>GET请求</td></tr></tbody></table></div>        <h4 id="Controller层-2"   >          <a href="#Controller层-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-2" class="headerlink" title="Controller层"></a>Controller层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/badges&quot;)</span></span><br><span class="line">   <span class="meta">@ApiOperation(&quot;可选徽章预览&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> ApiResult&lt;List&lt;BadgeResp&gt;&gt; <span class="title function_">badges</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> ApiResult.success(userService.badges(RequestHolder.get().getUid()));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure><p>调用Service层的badges方法 传入参数是请求中的uid</p>        <h4 id="Service层"   >          <a href="#Service层" class="heading-link"><i class="fas fa-link"></i></a><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;BadgeResp&gt; <span class="title function_">badges</span><span class="params">(Long uid)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;BadgeResp&gt; <span class="title function_">badges</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查询Cache中勋章列表   参数Type:2 表示勋章</span></span><br><span class="line">    List&lt;ItemConfig&gt; itemConfigs = itemCache.getByType(ItemTypeEnum.BADGE.getType());</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//查询uid下的可用勋章，然后返回一个List&lt;UserBackpack&gt;</span></span><br><span class="line">    List&lt;UserBackpack&gt; backpacks = userBackpackDao.getByItemIds(uid, itemConfigs.stream().map(ItemConfig::getId).collect(Collectors.toList()));</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//根据uid查询用户信息，获取当前用户佩戴的勋章</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.getById(uid);</span><br><span class="line">    <span class="comment">//将总勋章列表、用户可用勋章、当前用户佩戴勋章传入适配器中的buildBadgeResp中，然后返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> UserAdapter.buildBadgeResp(itemConfigs, backpacks, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="getByType"   >          <a href="#getByType" class="heading-link"><i class="fas fa-link"></i></a><a href="#getByType" class="headerlink" title="getByType"></a>getByType</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames = &quot;item&quot;, key = &quot;&#x27;itemsByType:&#x27;+#type&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ItemConfig&gt; <span class="title function_">getByType</span><span class="params">(Integer type)</span> &#123;</span><br><span class="line">        <span class="comment">//传入参数：2 表示勋章</span></span><br><span class="line">        <span class="comment">//调用itemConfigDao的方法 返回数据 写入缓存中</span></span><br><span class="line">        <span class="keyword">return</span> itemConfigDao.getByType(type);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;ItemConfig&gt; <span class="title function_">getByType</span><span class="params">(Integer type)</span> &#123;</span><br><span class="line">    <span class="comment">//返回list,list中装着ambdaQuery查询结果</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">//SELECT id,type,img,`describe`,create_time,update_time FROM item_config WHERE (type = ?) </span></span><br><span class="line">    <span class="comment">//限制Type==type,然后转化成list</span></span><br><span class="line">    <span class="keyword">return</span> lambdaQuery().eq(ItemConfig::getType, type).list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="getByItemId"   >          <a href="#getByItemId" class="heading-link"><i class="fas fa-link"></i></a><a href="#getByItemId" class="headerlink" title="getByItemId"></a>getByItemId</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;UserBackpack&gt; <span class="title function_">getByItemIds</span><span class="params">(Long uid, List&lt;Long&gt; itemIds)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Preparing: SELECT id,uid,item_id,status,idempotent,create_time,update_time </span></span><br><span class="line">    <span class="comment">//FROM user_backpack WHERE (uid = ? AND item_id IN (?,?,?,?,?) AND status = ?)</span></span><br><span class="line"><span class="comment">//==&gt; Parameters: 10004(Long), 2(Long), 3(Long), 4(Long), 5(Long), 6(Long), 0(Integer)</span></span><br><span class="line">    <span class="comment">//返回LambdaQuery结果</span></span><br><span class="line">    <span class="comment">//查询条件限制uid相等</span></span><br><span class="line">    <span class="keyword">return</span> lambdaQuery().eq(UserBackpack::getUid, uid)</span><br><span class="line">        <span class="comment">//在总勋章列表中的itemIds</span></span><br><span class="line">                .in(UserBackpack::getItemId, itemIds)</span><br><span class="line">            <span class="comment">//是否使用勋章</span></span><br><span class="line">                .eq(UserBackpack::getStatus, YesOrNoEnum.NO.getStatus())</span><br><span class="line">                .list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个方法就是判断用户是否有拥有的勋章</span></span><br></pre></td></tr></table></div></figure>        <h4 id="userDao-getById"   >          <a href="#userDao-getById" class="heading-link"><i class="fas fa-link"></i></a><a href="#userDao-getById" class="headerlink" title="userDao.getById"></a>userDao.getById</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> T <span class="title function_">getById</span><span class="params">(Serializable id)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//SELECT id,name,avatar,sex,open_id,last_opt_time,ip_info,item_id,status,create_time,update_time //FROM user WHERE id=?</span></span><br><span class="line">    <span class="comment">//调用mp的方法，查询uid为id的用户信息，获取当前用户佩戴的勋章</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getBaseMapper().selectById(id);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="buildBadgeResp"   >          <a href="#buildBadgeResp" class="heading-link"><i class="fas fa-link"></i></a><a href="#buildBadgeResp" class="headerlink" title="buildBadgeResp"></a>buildBadgeResp</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;BadgeResp&gt; <span class="title function_">buildBadgeResp</span><span class="params">(List&lt;ItemConfig&gt; itemConfigs, List&lt;UserBackpack&gt; backpacks, User user)</span> &#123;</span><br><span class="line">    <span class="comment">//判断user是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (ObjectUtil.isNull(user)) &#123;</span><br><span class="line">            <span class="comment">// 这里 user 入参可能为空，防止 NPE 问题</span></span><br><span class="line">            <span class="comment">//如果为空则返回空集合</span></span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将用户的可用勋章方法哦obtianItemSet中</span></span><br><span class="line">        Set&lt;Long&gt; obtainItemSet = backpacks.stream().map(UserBackpack::getItemId).collect(Collectors.toSet());</span><br><span class="line">    <span class="comment">//利用总勋章列表放到流中</span></span><br><span class="line">        <span class="keyword">return</span> itemConfigs.stream().map(a -&gt; &#123;</span><br><span class="line">            <span class="comment">//new一个勋章返回类型</span></span><br><span class="line">            <span class="type">BadgeResp</span> <span class="variable">resp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadgeResp</span>();</span><br><span class="line">            <span class="comment">//将a的属性copy到resp中</span></span><br><span class="line">            BeanUtil.copyProperties(a, resp);</span><br><span class="line">            <span class="comment">//设置勋章ID，为了下一步与用户是否佩戴进行一个比较</span></span><br><span class="line">            resp.setObtain(obtainItemSet.contains(a.getId()) ? YesOrNoEnum.YES.getStatus() : YesOrNoEnum.NO.getStatus());</span><br><span class="line">            <span class="comment">//用户列表中是否有使用这个勋章，如果有则是佩戴勋章</span></span><br><span class="line">            resp.setWearing(ObjectUtil.equal(a.getId(), user.getItemId()) ? YesOrNoEnum.YES.getStatus() : YesOrNoEnum.NO.getStatus());</span><br><span class="line">            <span class="keyword">return</span> resp;</span><br><span class="line">            <span class="comment">//排序</span></span><br><span class="line">        &#125;).sorted(Comparator.comparing(BadgeResp::getWearing, Comparator.reverseOrder())</span><br><span class="line">                .thenComparing(BadgeResp::getObtain, Comparator.reverseOrder()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="流程-2"   >          <a href="#流程-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程-2" class="headerlink" title="流程"></a>流程</h4>      <p>①Controller调用Service中的方法，封装成APIResult返回</p><p>②Service中先获取总的勋章列表并写入缓存中，其次再获取用户可用的勋章列表，最后获取用户信息来判断佩戴的勋章</p><p>③将总勋章列表、可用勋章列表、用户佩戴勋章传入适配器，适配器进行一个buildBadgeResp方法返回前端</p>        <h3 id="佩戴勋章"   >          <a href="#佩戴勋章" class="heading-link"><i class="fas fa-link"></i></a><a href="#佩戴勋章" class="headerlink" title="佩戴勋章"></a>佩戴勋章</h3>      <div class="table-container"><table><thead><tr><th>访问URI</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;user&#x2F;badge</td><td>PUT请求</td></tr></tbody></table></div>        <h4 id="Controller层-3"   >          <a href="#Controller层-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-3" class="headerlink" title="Controller层"></a>Controller层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping(&quot;/badge&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;佩戴徽章&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;Void&gt; <span class="title function_">wearingBadge</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> WearingBadgeReq req)</span> &#123;</span><br><span class="line">    userService.wearingBadge(RequestHolder.get().getUid(), req);</span><br><span class="line">    <span class="keyword">return</span> ApiResult.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>从请求中获取uid和整个请求都传入给userService.wearingBadge</p>        <h4 id="Service层-1"   >          <a href="#Service层-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Service层-1" class="headerlink" title="Service层"></a>Service层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">wearingBadge</span><span class="params">(Long uid, WearingBadgeReq req)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wearingBadge</span><span class="params">(Long uid, WearingBadgeReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//判断用户是否有这个勋章</span></span><br><span class="line">    <span class="type">UserBackpack</span> <span class="variable">firstValidItem</span> <span class="operator">=</span> userBackpackDao.getFirstValidItem(uid, req.getBadgeId());</span><br><span class="line">    <span class="comment">//如果没有勋章则会返回为null，为null则抛出异常</span></span><br><span class="line">    AssertUtil.isNotEmpty(firstValidItem, <span class="string">&quot;您没有这个徽章哦，快去达成条件获取吧&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断这个是不是勋章</span></span><br><span class="line">    <span class="type">ItemConfig</span> <span class="variable">itemConfig</span> <span class="operator">=</span> itemConfigDao.getById(firstValidItem.getItemId());</span><br><span class="line">    <span class="comment">//如果返回字段中类型不是勋章则会抛出异常</span></span><br><span class="line">    AssertUtil.equal(itemConfig.getType(), ItemTypeEnum.BADGE.getType(), <span class="string">&quot;该徽章不可佩戴&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//佩戴勋章 更新用户表</span></span><br><span class="line">    userDao.wearingBadge(uid, req.getBadgeId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    userCache.userInfoChange(uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>先调用getFirstValidItem方法 这里和使用改名卡那个方法是同一个，意义是确认是否拥有这个勋章如果有则会返回一条数据，如果没有则返回null</p>        <h4 id="getFirstValidItem-1"   >          <a href="#getFirstValidItem-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#getFirstValidItem-1" class="headerlink" title="getFirstValidItem"></a>getFirstValidItem</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> UserBackpack <span class="title function_">getFirstValidItem</span><span class="params">(Long uid, Long itemId)</span> &#123;</span><br><span class="line">    <span class="comment">//调用LambdaQueryWrapper可以使用匿名类和lambda表达式进行查询条件的拼接</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//SELECT id,uid,item_id,status,idempotent,create_time,update_time FROM user_backpack </span></span><br><span class="line">    <span class="comment">//WHERE (uid = ? AND item_id = ? AND status = ?) limit 1</span></span><br><span class="line">    <span class="comment">//参数:10004(Long), 2(Long), 0(Integer)  -0表示没有使用过 -1表示使用过  </span></span><br><span class="line"> </span><br><span class="line">        LambdaQueryWrapper&lt;UserBackpack&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;UserBackpack&gt;().lambda()</span><br><span class="line">                .eq(UserBackpack::getUid, uid)   <span class="comment">//限制uid相等</span></span><br><span class="line">                .eq(UserBackpack::getItemId, itemId)  <span class="comment">//限制itemId相等</span></span><br><span class="line">                .eq(UserBackpack::getStatus, YesOrNoEnum.NO.getStatus())  <span class="comment">//限制物品使用情况，0即未使用</span></span><br><span class="line">                .last(<span class="string">&quot;limit 1&quot;</span>);  <span class="comment">//只能返回一个</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回一条查询结果</span></span><br><span class="line">        <span class="keyword">return</span> getOne(wrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="itemConfigDao-getById"   >          <a href="#itemConfigDao-getById" class="heading-link"><i class="fas fa-link"></i></a><a href="#itemConfigDao-getById" class="headerlink" title="itemConfigDao.getById"></a>itemConfigDao.getById</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SELECT id,type,img,`describe`,create_time,update_time FROM item_config WHERE id=?</span></span><br><span class="line"><span class="comment">//Parameters: 2(Long)</span></span><br></pre></td></tr></table></div></figure><p>判断这个物品是不是勋章 ，查询结果会包含一个type字段，通过字段来判断是不是勋章</p>        <h4 id="wearingBadge"   >          <a href="#wearingBadge" class="heading-link"><i class="fas fa-link"></i></a><a href="#wearingBadge" class="headerlink" title="wearingBadge"></a>wearingBadge</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wearingBadge</span><span class="params">(Long uid, Long badgeId)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">update</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="comment">//设置Uid</span></span><br><span class="line">    update.setId(uid);</span><br><span class="line">    <span class="comment">//设置使用物品类型  即勋章类型</span></span><br><span class="line">    update.setItemId(badgeId);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//==&gt;  Preparing: UPDATE user SET item_id=? WHERE id=?</span></span><br><span class="line"><span class="comment">//==&gt; Parameters: 2(Long), 10004(Long)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//更新user表</span></span><br><span class="line">    updateById(update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="userInfoChange-1"   >          <a href="#userInfoChange-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#userInfoChange-1" class="headerlink" title="userInfoChange"></a>userInfoChange</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userInfoChange</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">    <span class="comment">//删除用户缓存</span></span><br><span class="line">        delUserInfo(uid);</span><br><span class="line">    <span class="comment">//更新缓存中用户物品使用时间</span></span><br><span class="line">        refreshUserModifyTime(uid);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="流程-3"   >          <a href="#流程-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程-3" class="headerlink" title="流程"></a>流程</h4>      <p>①先判断用户是否有这个物品。如果没有会抛出异常</p><p>②判断在合格物品是不是勋章。如果不是会抛出异常</p><p>③更新用户表信息，将Item_id设置为这个物品</p><p>④更新缓存，删除本地缓存删除Redis缓存</p>        <h3 id="黑名单"   >          <a href="#黑名单" class="heading-link"><i class="fas fa-link"></i></a><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h3>      <div class="table-container"><table><thead><tr><th>访问URI</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;user&#x2F;black</td><td>PUT请求</td></tr></tbody></table></div>        <h4 id="Controller层-4"   >          <a href="#Controller层-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-4" class="headerlink" title="Controller层"></a>Controller层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping(&quot;/black&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;拉黑用户&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;Void&gt; <span class="title function_">black</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> BlackReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//从请求上下文中获取拉黑用户uid</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">uid</span> <span class="operator">=</span> RequestHolder.get().getUid();</span><br><span class="line">    <span class="comment">//判断拉黑目标用户是否是管理员，如果是管理员返回true</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">hasPower</span> <span class="operator">=</span> iRoleService.hasPower(uid, RoleEnum.ADMIN);</span><br><span class="line">    <span class="comment">//如果是管理员则抛出异常没有权限拉黑</span></span><br><span class="line">    AssertUtil.isTrue(hasPower, <span class="string">&quot;没有权限&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//没有异常则可以运行到这里 说明有权限 调用Service方法来拉黑用户</span></span><br><span class="line">    userService.black(req);</span><br><span class="line">    <span class="keyword">return</span> ApiResult.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="Service层-2"   >          <a href="#Service层-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Service层-2" class="headerlink" title="Service层"></a>Service层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">black</span><span class="params">(BlackReq req)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">black</span><span class="params">(BlackReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//从请求上下文中获取要拉黑用户Uid</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">uid</span> <span class="operator">=</span> req.getUid();</span><br><span class="line">    <span class="comment">//创建一个黑名单用户</span></span><br><span class="line">    <span class="type">Black</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Black</span>();</span><br><span class="line">    <span class="comment">//设置拉黑用户UID、拉黑类型为UID  还有一种拉黑是拉黑IP地址</span></span><br><span class="line">    user.setTarget(uid.toString());</span><br><span class="line">    user.setType(BlackTypeEnum.UID.getType());</span><br><span class="line">    <span class="comment">//调用blackDao中的save方法 插入一条用户数据到User表中</span></span><br><span class="line">    </span><br><span class="line">    blackDao.save(user);</span><br><span class="line">    <span class="comment">//查询用户表中的UID用户 </span></span><br><span class="line">    <span class="type">User</span> <span class="variable">byId</span> <span class="operator">=</span> userDao.getById(uid);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//拉黑IP地址 一个是创建用户IP地址 一个是最后更新用户的IP地址 两个IP都拉黑</span></span><br><span class="line">    blackIp(byId.getIpInfo().getCreateIp());</span><br><span class="line">    blackIp(byId.getIpInfo().getUpdateIp());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//发布一条事件 一个用户拉黑事件</span></span><br><span class="line">    applicationEventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">UserBlackEvent</span>(<span class="built_in">this</span>, byId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="blackIp"   >          <a href="#blackIp" class="heading-link"><i class="fas fa-link"></i></a><a href="#blackIp" class="headerlink" title="blackIp"></a>blackIp</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">blackIp</span><span class="params">(String ip)</span> &#123;</span><br><span class="line">    <span class="comment">//判断IP是否为空，如果为空则直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isBlank(ip)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个拉黑用户</span></span><br><span class="line">        <span class="type">Black</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Black</span>();</span><br><span class="line">        <span class="comment">//设置IP地址</span></span><br><span class="line">        user.setTarget(ip);</span><br><span class="line">        user.setType(BlackTypeEnum.IP.getType());</span><br><span class="line">        <span class="comment">//更新黑名单表</span></span><br><span class="line">        blackDao.save(user);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;duplicate black ip:&#123;&#125;&quot;</span>, ip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="hasPower"   >          <a href="#hasPower" class="heading-link"><i class="fas fa-link"></i></a><a href="#hasPower" class="headerlink" title="hasPower"></a>hasPower</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPower</span><span class="params">(Long uid, RoleEnum roleEnum)</span> &#123;<span class="comment">//超级管理员无敌的好吧，后期做成权限=》资源模式</span></span><br><span class="line">    Set&lt;Long&gt; roleSet = userCache.getRoleSet(uid);</span><br><span class="line">    <span class="keyword">return</span> isAdmin(roleSet) || roleSet.contains(roleEnum.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="getRoleSet"   >          <a href="#getRoleSet" class="heading-link"><i class="fas fa-link"></i></a><a href="#getRoleSet" class="headerlink" title="getRoleSet"></a>getRoleSet</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames = &quot;user&quot;, key = &quot;&#x27;roles&#x27;+#uid&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;Long&gt; <span class="title function_">getRoleSet</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">    <span class="comment">//查询数据库判断是否有管理员身份</span></span><br><span class="line">    List&lt;UserRole&gt; userRoles = userRoleDao.listByUid(uid);</span><br><span class="line">    <span class="comment">//将用户身份返回一个set</span></span><br><span class="line">    <span class="keyword">return</span> userRoles.stream()</span><br><span class="line">            .map(UserRole::getRoleId)</span><br><span class="line">            .collect(Collectors.toSet());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="listByUid"   >          <a href="#listByUid" class="heading-link"><i class="fas fa-link"></i></a><a href="#listByUid" class="headerlink" title="listByUid"></a>listByUid</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;UserRole&gt; <span class="title function_">listByUid</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">    <span class="comment">//查询user_role表 通过uid来查询身份 返回集合</span></span><br><span class="line">    <span class="keyword">return</span> lambdaQuery()</span><br><span class="line">            .eq(UserRole::getUid, Objects.requireNonNull(uid))</span><br><span class="line">            .list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="流程-4"   >          <a href="#流程-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程-4" class="headerlink" title="流程"></a>流程</h4>      <p>①判断目标拉黑用户是否是管理员，如果是管理员则没有权限拉黑抛出异常结束方法，如果不是管理员则继续拉黑操作</p><p>②插入一条拉黑用户信息到拉黑数据表中 先是拉黑UID</p><p>③再判断创造用户时IP是否存在，如果存在则插入一条创建IP地址的拉黑用户信息</p><p>④再判断更新用户时IP是否存在，如果存在则插入一条更新IP地址的拉黑用户信息</p><p>⑤发布一条事件，用户拉黑事件</p>        <h3 id="徽章聚合信息"   >          <a href="#徽章聚合信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#徽章聚合信息" class="headerlink" title="徽章聚合信息"></a>徽章聚合信息</h3>      <div class="table-container"><table><thead><tr><th>访问URI</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;user&#x2F;public&#x2F;badges&#x2F;batch</td><td>POST请求</td></tr></tbody></table></div>        <h4 id="Controller层-5"   >          <a href="#Controller层-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-5" class="headerlink" title="Controller层"></a>Controller层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/public/badges/batch&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;徽章聚合信息-返回的代表需要刷新的&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;List&lt;ItemInfoDTO&gt;&gt; <span class="title function_">getItemInfo</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> ItemInfoReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//调用service层中的getItemInfo方法</span></span><br><span class="line">    <span class="keyword">return</span> ApiResult.success(userService.getItemInfo(req));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="Service层-3"   >          <a href="#Service层-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#Service层-3" class="headerlink" title="Service层"></a>Service层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ItemInfoDTO&gt; <span class="title function_">getItemInfo</span><span class="params">(ItemInfoReq req)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;ItemInfoDTO&gt; <span class="title function_">getItemInfo</span><span class="params">(ItemInfoReq req)</span> &#123;<span class="comment">//简单做，更新时间可判断被修改</span></span><br><span class="line">    <span class="keyword">return</span> req.getReqList().stream().map(a -&gt; &#123;</span><br><span class="line">        <span class="comment">//查询</span></span><br><span class="line">        <span class="type">ItemConfig</span> <span class="variable">itemConfig</span> <span class="operator">=</span> itemCache.getById(a.getItemId());</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(a.getLastModifyTime()) &amp;&amp; a.getLastModifyTime() &gt;= itemConfig.getUpdateTime().getTime()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ItemInfoDTO.skip(a.getItemId());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ItemInfoDTO</span> <span class="variable">dto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ItemInfoDTO</span>();</span><br><span class="line">        dto.setItemId(itemConfig.getId());</span><br><span class="line">        dto.setImg(itemConfig.getImg());</span><br><span class="line">        dto.setDescribe(itemConfig.getDescribe());</span><br><span class="line">        <span class="keyword">return</span> dto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="用户聚合信息"   >          <a href="#用户聚合信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#用户聚合信息" class="headerlink" title="用户聚合信息"></a>用户聚合信息</h3>      <div class="table-container"><table><thead><tr><th>访问URI</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;public&#x2F;summary&#x2F;userInfo&#x2F;batc</td><td>POST请求</td></tr></tbody></table></div><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/public/summary/userInfo/batch&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;用户聚合信息-返回的代表需要刷新的&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;List&lt;SummeryInfoDTO&gt;&gt; <span class="title function_">getSummeryUserInfo</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> SummeryInfoReq req)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ApiResult.success(userService.getSummeryUserInfo(req));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="异常情况"   >          <a href="#异常情况" class="heading-link"><i class="fas fa-link"></i></a><a href="#异常情况" class="headerlink" title="异常情况"></a>异常情况</h1>      <p><strong>打上断点进行调试</strong></p>        <h2 id="异常在线用户数量，用户已经下线而显示还在线上中"   >          <a href="#异常在线用户数量，用户已经下线而显示还在线上中" class="heading-link"><i class="fas fa-link"></i></a><a href="#异常在线用户数量，用户已经下线而显示还在线上中" class="headerlink" title="异常在线用户数量，用户已经下线而显示还在线上中"></a>异常在线用户数量，用户已经下线而显示还在线上中</h2>              <h3 id="用户端1"   >          <a href="#用户端1" class="heading-link"><i class="fas fa-link"></i></a><a href="#用户端1" class="headerlink" title="用户端1"></a>用户端1</h3>      <p>未登录用户界面</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/MallChat%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/image-20230804170246021.png"  alt="用戶端1">      </p><p>浏览器Cache</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/MallChat%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/image-20230804170416313.png"  alt="未登录Cache">      </p>        <h3 id="用户端2"   >          <a href="#用户端2" class="heading-link"><i class="fas fa-link"></i></a><a href="#用户端2" class="headerlink" title="用户端2"></a>用户端2</h3>      <p>已登录用户用户端</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/MallChat%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/image-20230804170527319.png"  alt="已登录用户端">      </p><p>浏览器Cache</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/MallChat%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/image-20230804170656484.png"  alt="浏览器Cache">      </p>        <h3 id="退出用户端2"   >          <a href="#退出用户端2" class="heading-link"><i class="fas fa-link"></i></a><a href="#退出用户端2" class="headerlink" title="退出用户端2"></a>退出用户端2</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/MallChat%E9%A1%B9%E7%9B%AE%E5%88%86%E6%9E%90/image-20230804170829700.png"  alt="退出用户端2">      </p><p>正如用户端1客户端显示一样</p>        <h2 id="抛出InvalidDataAccessApiUsageException异常"   >          <a href="#抛出InvalidDataAccessApiUsageException异常" class="heading-link"><i class="fas fa-link"></i></a><a href="#抛出InvalidDataAccessApiUsageException异常" class="headerlink" title="抛出InvalidDataAccessApiUsageException异常"></a>抛出InvalidDataAccessApiUsageException异常</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">JDBC Connection [HikariProxyConnection@<span class="number">2146628671</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@4cd7671d] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: UPDATE user SET last_opt_time=? WHERE id=?</span><br><span class="line">==&gt; Parameters: <span class="number">2023</span>-<span class="number">07</span>-<span class="number">30</span> <span class="number">17</span>:<span class="number">23</span>:<span class="number">43.267</span>(Timestamp), <span class="number">10003</span>(Long)</span><br><span class="line">|ERROR|<span class="number">2023</span>-<span class="number">07</span>-<span class="number">30</span> <span class="number">17</span>:<span class="number">23</span>:<span class="number">43.274</span>|mallchat-executor-<span class="number">7</span>||uid=|Unexpected exception occurred invoking async method: <span class="keyword">public</span> <span class="keyword">void</span> com.abin.mallchat.custom.common.event.listener.UserOfflineListener.saveRedisAndPush(com.abin.mallchat.common.common.event.UserOfflineEvent)|</span><br><span class="line">org.springframework.dao.InvalidDataAccessApiUsageException: Redisson is shutdown; nested exception is org.redisson.RedissonShutdownException: Redisson is shutdown</span><br><span class="line">at org.redisson.spring.data.connection.RedissonExceptionConverter.convert(RedissonExceptionConverter.java:<span class="number">52</span>)</span><br><span class="line">at org.redisson.spring.data.connection.RedissonExceptionConverter.convert(RedissonExceptionConverter.java:<span class="number">35</span>)</span><br><span class="line">at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:<span class="number">44</span>)</span><br><span class="line">at org.redisson.spring.data.connection.RedissonConnection.transform(RedissonConnection.java:<span class="number">200</span>)</span><br><span class="line">at org.redisson.spring.data.connection.RedissonConnection.syncFuture(RedissonConnection.java:<span class="number">195</span>)</span><br><span class="line">at org.redisson.spring.data.connection.RedissonConnection.sync(RedissonConnection.java:<span class="number">364</span>)</span><br><span class="line">at org.redisson.spring.data.connection.RedissonConnection.write(RedissonConnection.java:<span class="number">730</span>)</span><br><span class="line">at org.redisson.spring.data.connection.RedissonConnection.zRem(RedissonConnection.java:<span class="number">1021</span>)</span><br><span class="line">at org.springframework.data.redis.connection.DefaultStringRedisConnection.zRem(DefaultStringRedisConnection.java:<span class="number">1829</span>)</span><br><span class="line">at org.springframework.data.redis.core.DefaultZSetOperations.lambda$remove$<span class="number">27</span>(DefaultZSetOperations.java:<span class="number">444</span>)</span><br><span class="line">at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:<span class="number">223</span>)</span><br><span class="line">at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:<span class="number">190</span>)</span><br><span class="line">at org.springframework.data.redis.core.AbstractOperations.execute(AbstractOperations.java:<span class="number">97</span>)</span><br><span class="line">at org.springframework.data.redis.core.DefaultZSetOperations.remove(DefaultZSetOperations.java:<span class="number">444</span>)</span><br><span class="line">at com.abin.mallchat.common.common.utils.RedisUtils.zRemove(RedisUtils.java:<span class="number">803</span>)</span><br><span class="line">at com.abin.mallchat.common.common.utils.RedisUtils.zRemove(RedisUtils.java:<span class="number">799</span>)</span><br><span class="line">at com.abin.mallchat.common.user.service.cache.UserCache.offline(UserCache.java:<span class="number">85</span>)</span><br><span class="line">at com.abin.mallchat.common.user.service.cache.UserCache$$FastClassBySpringCGLIB$$4d4b28eb.invoke(&lt;generated&gt;)</span><br><span class="line">at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:<span class="number">218</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:<span class="number">386</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy.access$<span class="number">000</span>(CglibAopProxy.java:<span class="number">85</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:<span class="number">704</span>)</span><br><span class="line">at com.abin.mallchat.common.user.service.cache.UserCache$$EnhancerBySpringCGLIB$$6f823fec.offline(&lt;generated&gt;)</span><br><span class="line">at com.abin.mallchat.custom.common.event.listener.UserOfflineListener.saveRedisAndPush(UserOfflineListener.java:<span class="number">36</span>)</span><br><span class="line">at com.abin.mallchat.custom.common.event.listener.UserOfflineListener$$FastClassBySpringCGLIB$$c62500f3.invoke(&lt;generated&gt;)</span><br><span class="line">at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:<span class="number">218</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:<span class="number">793</span>)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:<span class="number">163</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:<span class="number">763</span>)</span><br><span class="line">at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$<span class="number">0</span>(AsyncExecutionInterceptor.java:<span class="number">115</span>)</span><br><span class="line">at java.util.concurrent.FutureTask.run(FutureTask.java:<span class="number">266</span>)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1149</span>)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">624</span>)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line">Caused by: org.redisson.RedissonShutdownException: Redisson is shutdown</span><br><span class="line">at org.redisson.command.RedisExecutor.execute(RedisExecutor.java:<span class="number">118</span>)</span><br><span class="line">at org.redisson.command.CommandAsyncService.async(CommandAsyncService.java:<span class="number">585</span>)</span><br><span class="line">at org.redisson.command.CommandAsyncService.writeAsync(CommandAsyncService.java:<span class="number">554</span>)</span><br><span class="line">at org.redisson.spring.data.connection.RedissonConnection.write(RedissonConnection.java:<span class="number">728</span>)</span><br><span class="line">... <span class="number">27</span> common frames omitted</span><br><span class="line">&lt;==    Updates: <span class="number">1</span></span><br></pre></td></tr></table></div></figure>        <h3 id="执行的SQL语句"   >          <a href="#执行的SQL语句" class="heading-link"><i class="fas fa-link"></i></a><a href="#执行的SQL语句" class="headerlink" title="执行的SQL语句"></a>执行的SQL语句</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">==&gt;Preparing: UPDATE user SET last_opt_time=? WHERE id=?</span><br><span class="line"><span class="comment">//更新user表 更新Last_opt_time(最后上下线时间) where id=?</span></span><br><span class="line">==&gt; Parameters: <span class="number">2023</span>-<span class="number">07</span>-<span class="number">30</span> <span class="number">17</span>:<span class="number">23</span>:<span class="number">43.267</span>(Timestamp), <span class="number">10003</span>(Long) </span><br><span class="line"><span class="comment">//传入时间戳和用户ID</span></span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line"><span class="comment">//报错RedisSon is shutdown;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&lt;==    Updates: <span class="number">1</span></span><br><span class="line"><span class="comment">//更新成功</span></span><br></pre></td></tr></table></div></figure>        <h3 id="异常复现"   >          <a href="#异常复现" class="heading-link"><i class="fas fa-link"></i></a><a href="#异常复现" class="headerlink" title="异常复现"></a>异常复现</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">==&gt;  Preparing: UPDATE user SET last_opt_time=? WHERE id=?</span><br><span class="line">==&gt; Parameters: <span class="number">2023</span>-<span class="number">07</span>-<span class="number">30</span> <span class="number">17</span>:<span class="number">45</span>:<span class="number">46.053</span>(Timestamp), <span class="number">10003</span>(Long)</span><br><span class="line">|ERROR|<span class="number">2023</span>-<span class="number">07</span>-<span class="number">30</span> <span class="number">17</span>:<span class="number">45</span>:<span class="number">46.061</span>|mallchat-executor-<span class="number">9</span>||uid=|Unexpected exception occurred invoking async method: <span class="keyword">public</span> <span class="keyword">void</span> com.abin.mallchat.custom.common.event.listener.UserOfflineListener.saveRedisAndPush(com.abin.mallchat.common.common.event.UserOfflineEvent)|</span><br><span class="line">org.springframework.dao.InvalidDataAccessApiUsageException: Redisson is shutdown; </span><br><span class="line">....</span><br><span class="line">... <span class="number">27</span> common frames omitted</span><br><span class="line">&lt;==    Updates: <span class="number">1</span></span><br></pre></td></tr></table></div></figure>        <h3 id="分析原因"   >          <a href="#分析原因" class="heading-link"><i class="fas fa-link"></i></a><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h3>      <p>RedisSon is Shutdown 抛出的异常是因为后端的关闭，导致RedisSon实例关闭</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抛出异常</span></span><br><span class="line">InvalidDataAccessApiUsageException: Redisson is shutdown; </span><br><span class="line">nested exception is org.redisson.RedissonShutdownException: Redisson is shutdown</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示Redisson已经关闭</span></span><br></pre></td></tr></table></div></figure>        <h3 id="处理"   >          <a href="#处理" class="heading-link"><i class="fas fa-link"></i></a><a href="#处理" class="headerlink" title="处理"></a>处理</h3>              <h2 id="空指针异常"   >          <a href="#空指针异常" class="heading-link"><i class="fas fa-link"></i></a><a href="#空指针异常" class="headerlink" title="空指针异常"></a>空指针异常</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">|ERROR|<span class="number">2023</span>-<span class="number">07</span>-<span class="number">30</span> <span class="number">17</span>:<span class="number">21</span>:<span class="number">35.653</span>|http-nio-<span class="number">8080</span>-exec-<span class="number">7</span>|7c7b1d92-b364-4de5-bfe8-7896ec4f2c07|uid=<span class="number">10003</span>|system exception！The reason is：<span class="literal">null</span>|</span><br><span class="line">java.lang.reflect.UndeclaredThrowableException: <span class="literal">null</span></span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:<span class="number">780</span>)</span><br><span class="line">at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:<span class="number">89</span>)</span><br><span class="line">at com.abin.mallchat.custom.common.intecepter.WebLogAspect.around(WebLogAspect.java:<span class="number">63</span>)</span><br><span class="line">at sun.reflect.GeneratedMethodAccessor199.invoke(Unknown Source)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:<span class="number">634</span>)</span><br><span class="line">at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:<span class="number">624</span>)</span><br><span class="line">at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:<span class="number">72</span>)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:<span class="number">186</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:<span class="number">763</span>)</span><br><span class="line">at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:<span class="number">97</span>)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:<span class="number">186</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:<span class="number">763</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:<span class="number">708</span>)</span><br><span class="line">at com.abin.mallchat.custom.user.controller.OssController$$EnhancerBySpringCGLIB$$94c0c149.getUploadUrl(&lt;generated&gt;)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:<span class="number">205</span>)</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:<span class="number">150</span>)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:<span class="number">117</span>)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:<span class="number">895</span>)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:<span class="number">808</span>)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:<span class="number">87</span>)</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:<span class="number">1067</span>)</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:<span class="number">963</span>)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:<span class="number">1006</span>)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:<span class="number">898</span>)</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">655</span>)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:<span class="number">883</span>)</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">764</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">227</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:<span class="number">53</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at com.abin.mallchat.custom.common.intecepter.HttpTraceIdFilter.doFilter(HttpTraceIdFilter.java:<span class="number">25</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:<span class="number">100</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:<span class="number">93</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:<span class="number">96</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:<span class="number">201</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:<span class="number">197</span>)</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:<span class="number">97</span>)</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:<span class="number">541</span>)</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:<span class="number">135</span>)</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:<span class="number">92</span>)</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:<span class="number">78</span>)</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:<span class="number">360</span>)</span><br><span class="line">at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:<span class="number">399</span>)</span><br><span class="line">at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:<span class="number">65</span>)</span><br><span class="line">at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:<span class="number">890</span>)</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:<span class="number">1743</span>)</span><br><span class="line">at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:<span class="number">49</span>)</span><br><span class="line">at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1191</span>)</span><br><span class="line">at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">659</span>)</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:<span class="number">61</span>)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line">Caused by: io.minio.errors.ErrorResponseException: The specified bucket does not exist</span><br><span class="line">at io.minio.S3Base$<span class="number">1.</span>onResponse(S3Base.java:<span class="number">690</span>)</span><br><span class="line">at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:<span class="number">519</span>)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1149</span>)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">624</span>)</span><br><span class="line">... <span class="number">1</span> common frames omitted</span><br></pre></td></tr></table></div></figure>        <h2 id="未知异常"   >          <a href="#未知异常" class="heading-link"><i class="fas fa-link"></i></a><a href="#未知异常" class="headerlink" title="未知异常"></a>未知异常</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">|ERROR|<span class="number">2023</span>-<span class="number">07</span>-<span class="number">31</span> <span class="number">10</span>:09:<span class="number">45.932</span>|http-nio-<span class="number">8080</span>-exec-<span class="number">10</span>|fa45bbb3-e84d-<span class="number">422f</span>-<span class="number">9053</span>-df13233dae8e|uid=<span class="number">10003</span>|system exception！The reason is：<span class="literal">null</span>|</span><br><span class="line">java.lang.reflect.UndeclaredThrowableException: <span class="literal">null</span></span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:<span class="number">780</span>)</span><br><span class="line">at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:<span class="number">89</span>)</span><br><span class="line">at com.abin.mallchat.custom.common.intecepter.WebLogAspect.around(WebLogAspect.java:<span class="number">63</span>)</span><br><span class="line">at sun.reflect.GeneratedMethodAccessor226.invoke(Unknown Source)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:<span class="number">634</span>)</span><br><span class="line">at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:<span class="number">624</span>)</span><br><span class="line">at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:<span class="number">72</span>)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:<span class="number">186</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:<span class="number">763</span>)</span><br><span class="line">at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:<span class="number">97</span>)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:<span class="number">186</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:<span class="number">763</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:<span class="number">708</span>)</span><br><span class="line">at com.abin.mallchat.custom.user.controller.OssController$$EnhancerBySpringCGLIB$$94c0c149.getUploadUrl(&lt;generated&gt;)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:<span class="number">205</span>)</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:<span class="number">150</span>)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:<span class="number">117</span>)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:<span class="number">895</span>)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:<span class="number">808</span>)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:<span class="number">87</span>)</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:<span class="number">1067</span>)</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:<span class="number">963</span>)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:<span class="number">1006</span>)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:<span class="number">898</span>)</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">655</span>)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:<span class="number">883</span>)</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">764</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">227</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:<span class="number">53</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at com.abin.mallchat.custom.common.intecepter.HttpTraceIdFilter.doFilter(HttpTraceIdFilter.java:<span class="number">25</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:<span class="number">100</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:<span class="number">93</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:<span class="number">96</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:<span class="number">201</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:<span class="number">197</span>)</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:<span class="number">97</span>)</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:<span class="number">541</span>)</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:<span class="number">135</span>)</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:<span class="number">92</span>)</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:<span class="number">78</span>)</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:<span class="number">360</span>)</span><br><span class="line">at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:<span class="number">399</span>)</span><br><span class="line">at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:<span class="number">65</span>)</span><br><span class="line">at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:<span class="number">890</span>)</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:<span class="number">1743</span>)</span><br><span class="line">at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:<span class="number">49</span>)</span><br><span class="line">at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1191</span>)</span><br><span class="line">at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">659</span>)</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:<span class="number">61</span>)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line">Caused by: java.net.ConnectException: Failed to connect to /<span class="number">192.168</span><span class="number">.88</span><span class="number">.127</span>:<span class="number">9000</span></span><br><span class="line">at okhttp3.internal.connection.RealConnection.connectSocket(RealConnection.kt:<span class="number">297</span>)</span><br><span class="line">at okhttp3.internal.connection.RealConnection.connect(RealConnection.kt:<span class="number">207</span>)</span><br><span class="line">at okhttp3.internal.connection.ExchangeFinder.findConnection(ExchangeFinder.kt:<span class="number">226</span>)</span><br><span class="line">at okhttp3.internal.connection.ExchangeFinder.findHealthyConnection(ExchangeFinder.kt:<span class="number">106</span>)</span><br><span class="line">at okhttp3.internal.connection.ExchangeFinder.find(ExchangeFinder.kt:<span class="number">74</span>)</span><br><span class="line">at okhttp3.internal.connection.RealCall.initExchange$okhttp(RealCall.kt:<span class="number">255</span>)</span><br><span class="line">at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.kt:<span class="number">32</span>)</span><br><span class="line">at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:<span class="number">109</span>)</span><br><span class="line">at okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.kt:<span class="number">95</span>)</span><br><span class="line">at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:<span class="number">109</span>)</span><br><span class="line">at okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.kt:<span class="number">83</span>)</span><br><span class="line">at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:<span class="number">109</span>)</span><br><span class="line">at okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.kt:<span class="number">76</span>)</span><br><span class="line">at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:<span class="number">109</span>)</span><br><span class="line">at okhttp3.internal.connection.RealCall.getResponseWithInterceptorChain$okhttp(RealCall.kt:<span class="number">201</span>)</span><br><span class="line">at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:<span class="number">517</span>)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1149</span>)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">624</span>)</span><br><span class="line">... <span class="number">1</span> common frames omitted</span><br><span class="line">Caused by: java.net.ConnectException: Connection refused: connect</span><br><span class="line">at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)</span><br><span class="line">at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:<span class="number">81</span>)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:<span class="number">476</span>)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:<span class="number">218</span>)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:<span class="number">200</span>)</span><br><span class="line">at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:<span class="number">162</span>)</span><br><span class="line">at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:<span class="number">394</span>)</span><br><span class="line">at java.net.Socket.connect(Socket.java:<span class="number">606</span>)</span><br><span class="line">at okhttp3.internal.platform.Platform.connectSocket(Platform.kt:<span class="number">120</span>)</span><br><span class="line">at okhttp3.internal.connection.RealConnection.connectSocket(RealConnection.kt:<span class="number">295</span>)</span><br><span class="line">... <span class="number">18</span> common frames omitted</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> MallChat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud面试题</title>
      <link href="/2023/07/27/SpringCloud%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/07/27/SpringCloud%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[        <h1 id="SpringCloud常见组件有哪些"   >          <a href="#SpringCloud常见组件有哪些" class="heading-link"><i class="fas fa-link"></i></a><a href="#SpringCloud常见组件有哪些" class="headerlink" title="SpringCloud常见组件有哪些?"></a>SpringCloud常见组件有哪些?</h1>              <h1 id="Nacos的服务注册表结构是怎么样的？"   >          <a href="#Nacos的服务注册表结构是怎么样的？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Nacos的服务注册表结构是怎么样的？" class="headerlink" title="Nacos的服务注册表结构是怎么样的？"></a>Nacos的服务注册表结构是怎么样的？</h1>              <h1 id="Nacos如何支撑数十万服务注册压力？"   >          <a href="#Nacos如何支撑数十万服务注册压力？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Nacos如何支撑数十万服务注册压力？" class="headerlink" title="Nacos如何支撑数十万服务注册压力？"></a>Nacos如何支撑数十万服务注册压力？</h1>              <h1 id="Nacos如何避免读写并发冲突问题？"   >          <a href="#Nacos如何避免读写并发冲突问题？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Nacos如何避免读写并发冲突问题？" class="headerlink" title="Nacos如何避免读写并发冲突问题？"></a>Nacos如何避免读写并发冲突问题？</h1>              <h1 id="Nacos和Eureka的区别有哪些？"   >          <a href="#Nacos和Eureka的区别有哪些？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Nacos和Eureka的区别有哪些？" class="headerlink" title="Nacos和Eureka的区别有哪些？"></a>Nacos和Eureka的区别有哪些？</h1>      ]]></content>
      
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentinel-[SpringCloud篇]</title>
      <link href="/2023/07/27/Sentinel-SpringCloud%E7%AF%87/"/>
      <url>/2023/07/27/Sentinel-SpringCloud%E7%AF%87/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos-[SpringCloud篇]</title>
      <link href="/2023/07/27/Nacos-SpringCloud%E7%AF%87/"/>
      <url>/2023/07/27/Nacos-SpringCloud%E7%AF%87/</url>
      
        <content type="html"><![CDATA[        <h1 id="准备工作"   >          <a href="#准备工作" class="heading-link"><i class="fas fa-link"></i></a><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1>      <p>想要解析Nacos首先得把Nacos源码下载下来，这自然是第一，再是尝试在本地启动Nacos源码</p>        <h2 id="Proto编译"   >          <a href="#Proto编译" class="heading-link"><i class="fas fa-link"></i></a><a href="#Proto编译" class="headerlink" title="Proto编译"></a>Proto编译</h2>      <p>因为nacos会按照Protobuf对数据做序列化和反序列化处理，这也是nacos能在多个平台运行的原因，正因为数据按照protobuf序列化了才会不同的语言才能运行</p><p>我们要将proto文件编译成java文件</p>        <h3 id="protobuf"   >          <a href="#protobuf" class="heading-link"><i class="fas fa-link"></i></a><a href="#protobuf" class="headerlink" title="protobuf"></a>protobuf</h3>      <p>protobuf是Google公司提出的一种轻便高效的结构化数据存储格式，常用于结构化数据的序列化，具有语言无关、平台无关、可扩展性特性，常用于通讯协议、服务端数据交换场景</p><p>类似Json也是一种结构化存储格式</p>        <h3 id="安装protoc"   >          <a href="#安装protoc" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装protoc" class="headerlink" title="安装protoc"></a>安装protoc</h3>      <p><strong>接下来我们要参考nacos的官网手册来对Nacos的服务注册、服务发现、心跳检测进行分析</strong></p><p><span class="exturl"><a class="exturl__link"   href="https://nacos.io/zh-cn/docs/open-api.html" >Nacos Open API</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="Nacos服务注册"   >          <a href="#Nacos服务注册" class="heading-link"><i class="fas fa-link"></i></a><a href="#Nacos服务注册" class="headerlink" title="Nacos服务注册"></a>Nacos服务注册</h1>              <h2 id="客户端"   >          <a href="#客户端" class="heading-link"><i class="fas fa-link"></i></a><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2>              <h2 id="服务端"   >          <a href="#服务端" class="heading-link"><i class="fas fa-link"></i></a><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2>      <p>对照Nacos Open API找到服务端服务注册</p><div class="table-container"><table><thead><tr><th>服务注册</th><th>请求路径</th></tr></thead><tbody><tr><td>POST请求</td><td>&#x2F;nacos&#x2F;v1&#x2F;ns&#x2F;instance</td></tr></tbody></table></div><p>通过UtilsAndCommons类找到</p><div class="table-container"><table><thead><tr><th>路径</th><th>常量</th></tr></thead><tbody><tr><td>&#x2F;nacos</td><td>NACOS_SERVER_CONTEXT</td></tr><tr><td>&#x2F;v1</td><td>NACOS_SERVER_VERSION</td></tr><tr><td>&#x2F;v1&#x2F;ns</td><td>DEFAULT_NACOS_NAMING_CONTEXT &#x3D; NACOS_SERVER_VERSION+ “&#x2F;ns”</td></tr></tbody></table></div><p>所以&#x2F;nacos&#x2F;v1&#x2F;ns就是NACOS_SERVER_CONTEXT +   DEFAULT_NACOS_NAMING_CONTEXT </p><p>我们的目标就是找到这个路径对应的Controller</p>        <h3 id="InstanceController"   >          <a href="#InstanceController" class="heading-link"><i class="fas fa-link"></i></a><a href="#InstanceController" class="headerlink" title="InstanceController"></a>InstanceController</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(UtilsAndCommons.NACOS_NAMING_CONTEXT + UtilsAndCommons.NACOS_NAMING_INSTANCE_CONTEXT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstanceController</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>从InstanceController找到Post请求对应的方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CanDistro</span></span><br><span class="line">   <span class="meta">@PostMapping</span></span><br><span class="line">   <span class="meta">@Secured(action = ActionTypes.WRITE)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//获取命名空间 namespaceId</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">String</span> <span class="variable">namespaceId</span> <span class="operator">=</span> WebUtils</span><br><span class="line">               .optional(request, CommonParams.NAMESPACE_ID, Constants.DEFAULT_NAMESPACE_ID);</span><br><span class="line">      </span><br><span class="line">       <span class="comment">//获取服务名称 servicename</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> WebUtils.required(request, CommonParams.SERVICE_NAME);</span><br><span class="line">       <span class="comment">//对seviceName做一个格式化检查</span></span><br><span class="line">       NamingUtils.checkServiceNameFormat(serviceName);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//创建一个实例对象，链式编程 创建一个实例(通过SwitchDomain.isDefaultInstanceEphemeral()判断是否是临时实例)</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">Instance</span> <span class="variable">instance</span> <span class="operator">=</span> HttpRequestInstanceBuilder.newBuilder()</span><br><span class="line">               .setDefaultInstanceEphemeral(switchDomain.isDefaultInstanceEphemeral()).setRequest(request).build();</span><br><span class="line">       <span class="comment">//上面创建一个临时实例或者是一个永久实例</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//调用getInstanceOperator.reregisterInstance方法注册实例  传入命名空间、服务名称、实例对象</span></span><br><span class="line">       getInstanceOperator().registerInstance(namespaceId, serviceName, instance);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//发布一个事务 当前已经注册了实例</span></span><br><span class="line">       <span class="comment">//传入参数</span></span><br><span class="line">       NotifyCenter.publishEvent(<span class="keyword">new</span> <span class="title class_">RegisterInstanceTraceEvent</span>(System.currentTimeMillis(), <span class="string">&quot;&quot;</span>, <span class="literal">false</span>, namespaceId , NamingUtils.getGroupName(serviceName) , NamingUtils.getServiceName(serviceName), instance.getIp(),instance.getPort()));</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="registerInstance"   >          <a href="#registerInstance" class="heading-link"><i class="fas fa-link"></i></a><a href="#registerInstance" class="headerlink" title="registerInstance"></a>registerInstance</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerInstance</span><span class="params">(String namespaceId, String serviceName, Instance instance)</span> <span class="keyword">throws</span> NacosException &#123;</span><br><span class="line">    NamingUtils.checkInstanceIsLegal(instance);</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="variable">ephemeral</span> <span class="operator">=</span> instance.isEphemeral();</span><br><span class="line">    <span class="type">String</span> <span class="variable">clientId</span> <span class="operator">=</span> IpPortBasedClient.getClientId(instance.toInetAddr(), ephemeral);</span><br><span class="line">    createIpPortClientIfAbsent(clientId);</span><br><span class="line">    <span class="type">Service</span> <span class="variable">service</span> <span class="operator">=</span> getService(namespaceId, serviceName, ephemeral);</span><br><span class="line">    clientOperationService.registerInstance(service, instance, clientId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="RegisterInstanceTraceEvent"   >          <a href="#RegisterInstanceTraceEvent" class="heading-link"><i class="fas fa-link"></i></a><a href="#RegisterInstanceTraceEvent" class="headerlink" title="RegisterInstanceTraceEvent"></a>RegisterInstanceTraceEvent</h2>      <div class="table-container"><table><thead><tr><th>形参</th><th>传入参数</th><th></th></tr></thead><tbody><tr><td>eventTime</td><td>System.currentTimeMillis()</td><td>当前时间戳</td></tr><tr><td>clientIp</td><td>“”</td><td>注册实例的请求IP，传入空字符串</td></tr><tr><td>rpc</td><td>false</td><td>来源是否为gRPC，传入false</td></tr><tr><td>serviceNamespace</td><td>namespaceId</td><td>命名空间</td></tr><tr><td>serviceGroup</td><td>NamingUtils.getGroupName(serviceName)</td><td>服务分组</td></tr><tr><td>serviceName</td><td>NamingUtils.getServiceName(serviceName)</td><td>服务名称</td></tr><tr><td>instanceIp</td><td>instance.getIp()</td><td>注册实例的地址IP&#x2F;HOST</td></tr><tr><td>instancePort</td><td>instance.getPort()</td><td>注册实例的端口Port</td></tr></tbody></table></div><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">RegisterInstanceTraceEvent</span><span class="params">(<span class="type">long</span> eventTime, String clientIp, <span class="type">boolean</span> rpc, String serviceNamespace,</span></span><br><span class="line"><span class="params">        String serviceGroup, String serviceName, String instanceIp, <span class="type">int</span> instancePort)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(<span class="string">&quot;REGISTER_INSTANCE_TRACE_EVENT&quot;</span>, eventTime, serviceNamespace, serviceGroup, serviceName);</span><br><span class="line">    <span class="built_in">this</span>.clientIp = clientIp;</span><br><span class="line">    <span class="built_in">this</span>.rpc = rpc;</span><br><span class="line">    <span class="built_in">this</span>.instanceIp = instanceIp;</span><br><span class="line">    <span class="built_in">this</span>.instancePort = instancePort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="publishEvent"   >          <a href="#publishEvent" class="heading-link"><i class="fas fa-link"></i></a><a href="#publishEvent" class="headerlink" title="publishEvent"></a>publishEvent</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">publishEvent</span><span class="params">(<span class="keyword">final</span> Event event)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> publishEvent(event.getClass(), event);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        LOGGER.error(<span class="string">&quot;There was an exception to the message publishing : &quot;</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE基础【总结篇】</title>
      <link href="/2023/07/21/JavaSE%E5%9F%BA%E7%A1%80%E3%80%90%E6%80%BB%E7%BB%93%E7%AF%87%E3%80%91/"/>
      <url>/2023/07/21/JavaSE%E5%9F%BA%E7%A1%80%E3%80%90%E6%80%BB%E7%BB%93%E7%AF%87%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><p>这个文档记录的是JavaSE的基础，本着我学习的路线再进一步深化和理解，这个过程是一个必不可少的过程。</p><p><em>光学别人的是别人教的好而不是我学的好，想要真正掌握必须自己重新查一遍、看一遍</em></p><p>复盘和深化学习路线参考于Java从入门到精通(第六版)目录，这一块要重新学习的主要是最最最基础的内容</p><hr>        <h1 id="Java语言基础"   >          <a href="#Java语言基础" class="heading-link"><i class="fas fa-link"></i></a><a href="#Java语言基础" class="headerlink" title="Java语言基础"></a>Java语言基础</h1>              <h2 id="基本数据类型"   >          <a href="#基本数据类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2>      <p>一共八个基本数据类型</p><p>整型：byte,short,int,long</p><p>浮点型:float,double</p><p>布尔型:boolean</p><p>字符型:char</p><div class="table-container"><table><thead><tr><th></th><th>字节数</th><th>二进制位</th><th>范围</th></tr></thead><tbody><tr><td>byte</td><td>1字节</td><td>8</td><td>[-2^7,2^7-1]</td></tr><tr><td>short</td><td>2字节</td><td>16</td><td>[-2^15,2^15-1]</td></tr><tr><td>int</td><td>4字节</td><td>32</td><td>[-2^31,2^31-1]</td></tr><tr><td>long</td><td>8字节</td><td>64</td><td>[-2^63,2^63-1]</td></tr><tr><td>float(单精度)</td><td>4字节</td><td>32</td><td></td></tr><tr><td>double(双精度)</td><td>8字节</td><td>64</td><td></td></tr><tr><td>boolean</td><td>1字节</td><td>8</td><td></td></tr><tr><td>char</td><td>2字节</td><td>16</td><td>[0,2^16-1]</td></tr></tbody></table></div>        <h2 id="变量和常量"   >          <a href="#变量和常量" class="heading-link"><i class="fas fa-link"></i></a><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h2>      <p>变量:在程序运行过程中，可以发生变化的量</p><p>常量:在程序运行过程中，不会发生变化的量</p><p>常量一般用final关键字进行修饰，只能赋值一次</p><p>变量有成员变量、局部变量、静态变量、参数变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">成员变量：定义在类中、方法外的变量，可以被类中的方法调用，可以被权限修饰符修饰</span><br><span class="line">局部变量：定义在方法体、代码块中的变量，作用域仅限当前方法、代码块中，局部变量在使用前必须先声明，并且不能被权限修饰符修饰</span><br><span class="line">静态变量：定义在类中、方法外的变量，并且用<span class="keyword">static</span>关键字修饰，可以被权限修饰符修饰</span><br><span class="line">参数变量: 方法声明时的变量，作用域仅限于方法体中</span><br></pre></td></tr></table></div></figure>        <h2 id="运算符"   >          <a href="#运算符" class="heading-link"><i class="fas fa-link"></i></a><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2>              <h2 id="数据类型转换"   >          <a href="#数据类型转换" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2>              <h2 id="关键字"   >          <a href="#关键字" class="heading-link"><i class="fas fa-link"></i></a><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2>              <h2 id="权限修饰符"   >          <a href="#权限修饰符" class="heading-link"><i class="fas fa-link"></i></a><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2>      <hr>        <h1 id="数组"   >          <a href="#数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#数组" class="headerlink" title="数组"></a>数组</h1>              <h2 id="一维数组"   >          <a href="#一维数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2>              <h2 id="二维数组"   >          <a href="#二维数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2>              <h2 id="数组的基本操作"   >          <a href="#数组的基本操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#数组的基本操作" class="headerlink" title="数组的基本操作"></a>数组的基本操作</h2>      <hr>        <h1 id="类和对象"   >          <a href="#类和对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1>              <h2 id="对象"   >          <a href="#对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#对象" class="headerlink" title="对象"></a>对象</h2>              <h2 id="类"   >          <a href="#类" class="heading-link"><i class="fas fa-link"></i></a><a href="#类" class="headerlink" title="类"></a>类</h2>              <h3 id="面向对象的操作"   >          <a href="#面向对象的操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#面向对象的操作" class="headerlink" title="面向对象的操作"></a>面向对象的操作</h3>      <hr>        <h1 id="字符串"   >          <a href="#字符串" class="heading-link"><i class="fas fa-link"></i></a><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1>      <hr>        <h1 id="异常"   >          <a href="#异常" class="heading-link"><i class="fas fa-link"></i></a><a href="#异常" class="headerlink" title="异常"></a>异常</h1>      <hr>        <h1 id="枚举"   >          <a href="#枚举" class="heading-link"><i class="fas fa-link"></i></a><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1>      <hr>        <h1 id="反射与注解"   >          <a href="#反射与注解" class="heading-link"><i class="fas fa-link"></i></a><a href="#反射与注解" class="headerlink" title="反射与注解"></a>反射与注解</h1>      <hr>        <h1 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h1>      ]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> javaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE基础-锁【源码篇】</title>
      <link href="/2023/07/20/JavaSE%E5%9F%BA%E7%A1%80-%E9%94%81%E3%80%90%E6%BA%90%E7%A0%81%E7%AF%87%E3%80%91/"/>
      <url>/2023/07/20/JavaSE%E5%9F%BA%E7%A1%80-%E9%94%81%E3%80%90%E6%BA%90%E7%A0%81%E7%AF%87%E3%80%91/</url>
      
        <content type="html"><![CDATA[        <h1 id="Lock"   >          <a href="#Lock" class="heading-link"><i class="fas fa-link"></i></a><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h1>      <p>我们首先要看JUC标准中的Lock接口</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//获取锁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">除非当前线程被中断，否则获取锁</span></span><br><span class="line"><span class="comment">1.如果锁可用则直接获取锁</span></span><br><span class="line"><span class="comment">2.如果锁不可用，则当前线程会被禁用并处于休眠状态直到两钟情况产生</span></span><br><span class="line"><span class="comment">1).锁被当前线程获取</span></span><br><span class="line"><span class="comment">2).其他线程会中断当前线程，并且支持中断锁</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">只有锁是空闲的时候才能获取锁</span></span><br><span class="line"><span class="comment">1.如果锁可用则获取锁，返回true</span></span><br><span class="line"><span class="comment">2.如果锁不可用则返回false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当锁在规定时间内是空闲并且没有线程中断，那么获取锁</span></span><br><span class="line"><span class="comment">形参:  </span></span><br><span class="line"><span class="comment">1.规定锁的超时时间</span></span><br><span class="line"><span class="comment">2.规定时间单位</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">1.true 获取锁成功</span></span><br><span class="line"><span class="comment">2.false 超时，获取锁失败</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//释放锁</span></span><br><span class="line"></span><br><span class="line">Condition <span class="title function_">newCondition</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//创建一个新的Condition实例</span></span><br></pre></td></tr></table></div></figure><p>我们接下来要看Lock的实现类</p>        <h2 id="1-ReentrantLock"   >          <a href="#1-ReentrantLock" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-ReentrantLock" class="headerlink" title="1.ReentrantLock"></a>1.ReentrantLock</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReentrantLock</span> <span class="keyword">implements</span> <span class="title class_">Lock</span>, java.io.Serializable &#123;</span><br><span class="line">    <span class="comment">/*一个可重入互斥锁</span></span><br><span class="line"><span class="comment">      当构造函数接收一个公平性参数，当设置为ture时，则下次获得锁的是等得最久的线程</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7373984872572414699L</span>;</span><br><span class="line"><span class="comment">//串行化ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*提供所有实施机制的同步器 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br></pre></td></tr></table></div></figure><p>内部类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;</span><br><span class="line">     </span><br><span class="line"> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span>;</span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">            acquire(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">NonfairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                acquire(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="构造方法"   >          <a href="#构造方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>无参构造</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReentrantLock</span><span class="params">()</span> &#123;</span><br><span class="line">        sync = <span class="keyword">new</span> <span class="title class_">NonfairSync</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建一个Reentrantlock实例，相当于ReentrantLock(false),创建了一个非公平可重入锁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*---有关的详细代码---</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">static final class NonfairSync extends Sync &#123;</span></span><br><span class="line"><span class="comment">        private static final long serialVersionUID = 7316153563782823691L;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        final void lock() &#123;</span></span><br><span class="line"><span class="comment">            if (compareAndSetState(0, 1))</span></span><br><span class="line"><span class="comment">                setExclusiveOwnerThread(Thread.currentThread());</span></span><br><span class="line"><span class="comment">            else</span></span><br><span class="line"><span class="comment">                acquire(1);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        protected final boolean tryAcquire(int acquires) &#123;</span></span><br><span class="line"><span class="comment">            return nonfairTryAcquire(acquires);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //因为NonfairSync类只有继承父类下的空参构造，所以会调用new Sync();</span></span><br><span class="line"><span class="comment">    abstract static class Sync extends AbstractQueuedSynchronizer &#123;</span></span><br><span class="line"><span class="comment">        abstract void lock();</span></span><br><span class="line"><span class="comment">        final boolean nonfairTryAcquire(int acquires) &#123;...&#125;</span></span><br><span class="line"><span class="comment">        protected final boolean tryRelease(int releases) &#123;...&#125;</span></span><br><span class="line"><span class="comment">       ...</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment">    //同理因为Sync类也没有空参构造，会调用父类的空参构造 即new AbstractQueuedSynchronizer();</span></span><br><span class="line"><span class="comment">    public abstract class AbstractQueuedSynchronizer extends AbstractOwnableSynchronizer</span></span><br><span class="line"><span class="comment">    implements java.io.Serializable &#123;</span></span><br><span class="line"><span class="comment">    protected AbstractQueuedSynchronizer() &#123; &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //同上，且因为abstract类是个抽象类</span></span><br><span class="line"><span class="comment">    //所以父类也是空参构造，那么这个方法最后调用的结果就是new AbstractOwnableSynchronizer()</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    //那么先暂时按官方说明的理解，调用了一个ReentrantLock(false),创建了一个非公平可重入锁</span></span><br><span class="line"><span class="comment">*/</span>    </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>有参构造</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReentrantLock</span><span class="params">(<span class="type">boolean</span> fair)</span> &#123;</span><br><span class="line">        sync = fair ? <span class="keyword">new</span> <span class="title class_">FairSync</span>() : <span class="keyword">new</span> <span class="title class_">NonfairSync</span>();</span><br><span class="line">    <span class="comment">//通过指定公平策略，创建一个实例ReentrantLock</span></span><br><span class="line">    <span class="comment">//当fair为true则创建FairSync反之创建NonfairSync();</span></span><br><span class="line">    <span class="comment">//默认情况下空参构造是创建一个非公平的可重入互斥锁</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="常用方法"   >          <a href="#常用方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3>              <h4 id="lock方法"   >          <a href="#lock方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#lock方法" class="headerlink" title="lock方法"></a>lock方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        sync.lock();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//sync.lock()</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//所以要去找sync的子类看具体的方法实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认情况下:创建一个NonfairSync</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//nonfairsync.lock()</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                acquire(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//锁状态从0更新到1则说明线程获取了互斥锁</span></span><br><span class="line">&#125;   </span><br><span class="line">    <span class="comment">/*-----详情代码----</span></span><br><span class="line"><span class="comment">    我们可以先通过判断成功与否来反推这个IF语句到底在干吗</span></span><br><span class="line"><span class="comment">    条件成立:</span></span><br><span class="line"><span class="comment">    protected final void setExclusiveOwnerThread(Thread thread) &#123;</span></span><br><span class="line"><span class="comment">        exclusiveOwnerThread = thread;</span></span><br><span class="line"><span class="comment">        //这个方法执行成功后，会获得互斥锁</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    private transient Thread exclusiveOwnerThread;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    条件不成立:</span></span><br><span class="line"><span class="comment">    public final void acquire(int arg) &#123;</span></span><br><span class="line"><span class="comment">        if (!tryAcquire(arg) &amp;&amp;acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span></span><br><span class="line"><span class="comment">        //当尝试获取锁失败并且添加到等待队列中，则会线程自己中断自己</span></span><br><span class="line"><span class="comment">            selfInterrupt();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //尝试获取锁</span></span><br><span class="line"><span class="comment">    protected boolean tryAcquire(int arg) &#123;</span></span><br><span class="line"><span class="comment">        throw new UnsupportedOperationException();</span></span><br><span class="line"><span class="comment">        //尝试获取锁，如果获取将使同步器处于非法操作则抛出异常</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    //给当前创建结点并且给一个标识表示当前线程正在抢夺互斥锁</span></span><br><span class="line"><span class="comment">    private Node addWaiter(Node mode) &#123;</span></span><br><span class="line"><span class="comment">        Node node = new Node(Thread.currentThread(), mode);</span></span><br><span class="line"><span class="comment">        //创建当前线程的结点</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        // Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line"><span class="comment">        Node pred = tail;</span></span><br><span class="line"><span class="comment">        if (pred != null) &#123;</span></span><br><span class="line"><span class="comment">            node.prev = pred;</span></span><br><span class="line"><span class="comment">            if (compareAndSetTail(pred, node)) &#123;</span></span><br><span class="line"><span class="comment">        //利用cas机制将当前线程结点添加到队尾，然后返回Node结束方法</span></span><br><span class="line"><span class="comment">                pred.next = node;</span></span><br><span class="line"><span class="comment">                return node;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        //运行到这里说明加入等待队尾失败        </span></span><br><span class="line"><span class="comment">        enq(node);</span></span><br><span class="line"><span class="comment">        //调用enq(node)</span></span><br><span class="line"><span class="comment">        return node;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    //enq为等待队列，这里会不断死循环直到数据插入到等待队列队尾</span></span><br><span class="line"><span class="comment">    private Node enq(final Node node) &#123;</span></span><br><span class="line"><span class="comment">        for (;;) &#123;</span></span><br><span class="line"><span class="comment">            Node t = tail;</span></span><br><span class="line"><span class="comment">            if (t == null) &#123; // Must initialize</span></span><br><span class="line"><span class="comment">            //如果队尾为空，说明该队列还没有创建，初始化</span></span><br><span class="line"><span class="comment">                if (compareAndSetHead(new Node()))</span></span><br><span class="line"><span class="comment">                //创建新结点插入队首，此时队伍只有队首一个元素,将尾结点指向第一个头结点</span></span><br><span class="line"><span class="comment">                    tail = head;</span></span><br><span class="line"><span class="comment">            &#125; else &#123;</span></span><br><span class="line"><span class="comment">            //队伍中有数据，那么将结点插入队伍</span></span><br><span class="line"><span class="comment">                node.prev = t;</span></span><br><span class="line"><span class="comment">                if (compareAndSetTail(t, node)) &#123;</span></span><br><span class="line"><span class="comment">                    t.next = node;</span></span><br><span class="line"><span class="comment">                    return t;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    因此我们大概可以知道如果状态从0置为1则说明获得了锁，失败了就会加入重试队伍中重试获取锁</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    判断条件:这里调用的是AbstractQueuedSynchronizer父类的方法</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    protected final boolean compareAndSetState(int expect, int update) &#123;</span></span><br><span class="line"><span class="comment">        return unsafe.compareAndSwapInt(this, stateOffset, expect, update);</span></span><br><span class="line"><span class="comment">        //参数1:调用的位置 参数2:偏移量 参数3:期待数  参数4:更新后的值</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    public final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    stateOffset = unsafe.objectFieldOffset (AbstractQueuedSynchronizer.class.getDeclaredField(&quot;state&quot;));0</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    public native long objectFieldOffset(Field var1);</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//创建了一个公平同步器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//FairSync.lock</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">            acquire(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//尝试获得互斥锁</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尝试获取互斥锁，如果成立返回true,反之线程加入等待队伍</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">            selfInterrupt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="tryLock方法"   >          <a href="#tryLock方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#tryLock方法" class="headerlink" title="tryLock方法"></a>tryLock方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尝试获取锁，以非公平的方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.nonfairTryAcquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//尝试以非公平的方式获取锁</span></span><br><span class="line"><span class="comment">//如果锁是第一次获取则状态置为1</span></span><br><span class="line"><span class="comment">//如果锁已经被当前线程获取过，那么状态会是原来的状态+1</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">nonfairTryAcquire</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            <span class="comment">//获得当前线程</span></span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line">            <span class="comment">//获得当前状态</span></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">                <span class="comment">//如果用cas机制成功将0更新成参数</span></span><br><span class="line">                    setExclusiveOwnerThread(current);</span><br><span class="line">                    <span class="comment">//将该线程设置为互斥锁的获得者</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="comment">//返回true表示获得锁成功 锁的状态为1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">            <span class="comment">//如果当前线程已经是锁的获得者了</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">nextc</span> <span class="operator">=</span> c + acquires;</span><br><span class="line">                <span class="comment">//将c加入参数值然后交给下一个nextc变量</span></span><br><span class="line">                <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">                setState(nextc);</span><br><span class="line">                <span class="comment">//将nextc设置成锁的状态</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">//返回true表示获得锁成功，锁的状态为当前状态+1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//返回false表示获得锁失败</span></span><br><span class="line">        &#125;    </span><br><span class="line">    </span><br></pre></td></tr></table></div></figure>        <h4 id="unlock方法"   >          <a href="#unlock方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#unlock方法" class="headerlink" title="unlock方法"></a>unlock方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尝试解锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">release</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">            <span class="comment">//设置了状态-1 </span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">h</span> <span class="operator">=</span> head;</span><br><span class="line">            <span class="keyword">if</span> (h != <span class="literal">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">                <span class="comment">//如果队首不为空并且结点不是置于等待状态，调用unparkSuccessor()方法</span></span><br><span class="line">                unparkSuccessor(h);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//返回true表示解锁成功</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//返回false表示解锁失败</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//试图设置state状态来释放独占锁，如果解锁导致同步器非法，那么就抛出异常</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unparkSuccessor</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ws</span> <span class="operator">=</span> node.waitStatus;</span><br><span class="line">    <span class="comment">//获得结点的等待状态,此时传入的结点是队首元素</span></span><br><span class="line">        <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">            compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//如果ws小于0 那么用compareAndSetWaitStatus方法将node结点的等待状态置为0</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Node</span> <span class="variable">s</span> <span class="operator">=</span> node.next;</span><br><span class="line">    <span class="comment">//获得下一个结点</span></span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//如果下一个结点为空或者下一个结点的等待状态大于0</span></span><br><span class="line">            s = <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//那么将下一个结点置为空</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail; t != <span class="literal">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">                <span class="comment">//从队尾结点开始循环，当尾结点不是当前结点并且非空的时候进入循环，每次循环结束t将指向前一个结点</span></span><br><span class="line">                <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="comment">//当t的状态字小于等于0的时候</span></span><br><span class="line">                    s = t;</span><br><span class="line">            <span class="comment">//将s置于t</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s != <span class="literal">null</span>)</span><br><span class="line">            <span class="comment">//如果s不为空</span></span><br><span class="line">            LockSupport.unpark(s.thread);</span><br><span class="line">    <span class="comment">//将下一个线程解除阻塞，即唤醒下一个等待线程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Makes available the permit for the given thread, if it was not already available. If the thread was blocked on park then it will unblock. Otherwise, its next call to park is guaranteed not to block. This operation is not guaranteed to have any effect at all if the given thread has not been started.</span></span><br><span class="line"><span class="comment">形参:</span></span><br><span class="line"><span class="comment">thread – the thread to unpark, or null, in which case this operation has no effect</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unpark</span><span class="params">(Thread thread)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (thread != <span class="literal">null</span>)</span><br><span class="line">            UNSAFE.unpark(thread);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">unpark</span><span class="params">(Object var1)</span>;</span><br></pre></td></tr></table></div></figure>        <h2 id="ReentrantReadWriteLock"   >          <a href="#ReentrantReadWriteLock" class="heading-link"><i class="fas fa-link"></i></a><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h2>      <p>变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">6992448646407690164L</span>;</span><br><span class="line"><span class="comment">//串行化ID</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock.ReadLock readerLock;</span><br><span class="line"><span class="comment">//内部类 读锁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock.WriteLock writerLock;</span><br><span class="line"><span class="comment">//内部类 写锁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Sync sync;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Unsafe mechanics</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> TID_OFFSET;</span><br></pre></td></tr></table></div></figure><p>内部类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2274990926593161451L</span>;</span><br><span class="line">    <span class="comment">//串行化ID</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">writerShouldBlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hasQueuedPredecessors();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">readerShouldBlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hasQueuedPredecessors();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //如果当前线程前面有一个排队线程则返回true</span></span><br><span class="line"><span class="comment">    //当线程位于队首或者队列为空则返回false</span></span><br><span class="line"><span class="comment">    public final boolean hasQueuedPredecessors() &#123;</span></span><br><span class="line"><span class="comment">        // The correctness of this depends on head being initialized</span></span><br><span class="line"><span class="comment">        // before tail and on head.next being accurate if the current</span></span><br><span class="line"><span class="comment">        // thread is first in queue.</span></span><br><span class="line"><span class="comment">        Node t = tail; // Read fields in reverse initialization order</span></span><br><span class="line"><span class="comment">        Node h = head;</span></span><br><span class="line"><span class="comment">        Node s;</span></span><br><span class="line"><span class="comment">        return h != t &amp;&amp;</span></span><br><span class="line"><span class="comment">            ((s = h.next) == null || s.thread != Thread.currentThread());</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Read vs write count extraction constants and functions.</span></span><br><span class="line"><span class="comment">         * Lock state is logically divided into two unsigned shorts:</span></span><br><span class="line"><span class="comment">         * The lower one representing the exclusive (writer) lock hold count,</span></span><br><span class="line"><span class="comment">         * and the upper the shared (reader) hold count.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SHARED_SHIFT</span>   <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SHARED_UNIT</span>    <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; SHARED_SHIFT);</span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_COUNT</span>      <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EXCLUSIVE_MASK</span> <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">HoldCounter</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// Use id, not reference, to avoid garbage retention</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">tid</span> <span class="operator">=</span> getThreadId(Thread.currentThread());</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalHoldCounter</span></span><br><span class="line">            <span class="keyword">extends</span> <span class="title class_">ThreadLocal</span>&lt;HoldCounter&gt; &#123;</span><br><span class="line">            <span class="keyword">public</span> HoldCounter <span class="title function_">initialValue</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HoldCounter</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="构造方法-1"   >          <a href="#构造方法-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>空参构造</span><br><span class="line">    <span class="comment">//默认创建一个非公平的ReentrantReadWriteLock</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ReentrantReadWriteLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//调用ReentrantReadWriteLock(boolean fair) 方法 传入false参数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>有参构造</span><br><span class="line">    <span class="comment">//给定指定参数，创建相应的读锁写锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ReentrantReadWriteLock</span><span class="params">(<span class="type">boolean</span> fair)</span> &#123;</span><br><span class="line">        sync = fair ? <span class="keyword">new</span> <span class="title class_">FairSync</span>() : <span class="keyword">new</span> <span class="title class_">NonfairSync</span>();</span><br><span class="line">        readerLock = <span class="keyword">new</span> <span class="title class_">ReadLock</span>(<span class="built_in">this</span>);</span><br><span class="line">        writerLock = <span class="keyword">new</span> <span class="title class_">WriteLock</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="方法"   >          <a href="#方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#方法" class="headerlink" title="方法"></a>方法</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回写锁</span></span><br><span class="line"><span class="keyword">public</span> ReentrantReadWriteLock.WriteLock <span class="title function_">writeLock</span><span class="params">()</span> &#123; <span class="keyword">return</span> writerLock; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回读锁</span></span><br><span class="line"><span class="keyword">public</span> ReentrantReadWriteLock.ReadLock  <span class="title function_">readLock</span><span class="params">()</span>  &#123; <span class="keyword">return</span> readerLock; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回是否公平</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isFair</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync <span class="keyword">instanceof</span> FairSync;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回锁的拥有线程</span></span><br><span class="line"><span class="keyword">protected</span> Thread <span class="title function_">getOwner</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getOwner();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回读锁数量，用于监测系统状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getReadLockCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getReadLockCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询写锁是否空闲</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isWriteLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isWriteLocked();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询当前线程是否有写锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isWriteLockedByCurrentThread</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isHeldExclusively();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询当前线程写锁的可重入数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWriteHoldCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getWriteHoldCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询当前线程读锁的可重入数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getReadHoldCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getReadHoldCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    </span><br></pre></td></tr></table></div></figure>        <h3 id="Sync常用方法"   >          <a href="#Sync常用方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#Sync常用方法" class="headerlink" title="Sync常用方法"></a>Sync常用方法</h3>              <h4 id="sync方法"   >          <a href="#sync方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#sync方法" class="headerlink" title="sync方法"></a>sync方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Sync() &#123;</span><br><span class="line">            readHolds = <span class="keyword">new</span> <span class="title class_">ThreadLocalHoldCounter</span>();</span><br><span class="line">            <span class="comment">//调用ThreadLocalHoldCounter()</span></span><br><span class="line">            </span><br><span class="line">            setState(getState()); <span class="comment">// ensures visibility of readHolds</span></span><br><span class="line">            <span class="comment">//设置状态字，确保readHolds的可见性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalHoldCounter</span> <span class="keyword">extends</span> <span class="title class_">ThreadLocal</span>&lt;HoldCounter&gt; &#123;</span><br><span class="line">            <span class="keyword">public</span> HoldCounter <span class="title function_">initialValue</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HoldCounter</span>();</span><br><span class="line">                <span class="comment">//调用方法 直接返回HoldCounter</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">HoldCounter</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//设置数量为0</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Use id, not reference, to avoid garbage retention</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">tid</span> <span class="operator">=</span> getThreadId(Thread.currentThread());</span><br><span class="line">            <span class="comment">//获取当前线程id，使得被标记省的被垃圾回收</span></span><br><span class="line">        &#125;        </span><br><span class="line">    </span><br></pre></td></tr></table></div></figure>        <h4 id="tryAcquire方法"   >          <a href="#tryAcquire方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#tryAcquire方法" class="headerlink" title="tryAcquire方法"></a>tryAcquire方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            如果是可重入获取或者队列策略允许，则该线程有权利加锁，那么将更新锁的状态并且设置持有者为当前线程</span></span><br><span class="line"><span class="comment">         如果读或写计数器非0，且不是当前线程持有，则返回false</span></span><br><span class="line"><span class="comment">         如果计数器将达到上限，则返回false</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line">    <span class="comment">//获取锁的状态</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> exclusiveCount(c);</span><br><span class="line">    <span class="comment">//获取锁的可重入数计数</span></span><br><span class="line">            <span class="keyword">if</span> (c != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// (Note: if c != 0 and w == 0 then shared count != 0)</span></span><br><span class="line">                <span class="keyword">if</span> (w == <span class="number">0</span> || current != getExclusiveOwnerThread())</span><br><span class="line">                    <span class="comment">//如果可重入数计数为空或者锁非当前线程持有，那么返回false</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)</span><br><span class="line">                    <span class="comment">//如果可重入数大于最大数量，抛出异常</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">                <span class="comment">// Reentrant acquire</span></span><br><span class="line">                <span class="comment">//可重入锁加锁成功</span></span><br><span class="line">                <span class="comment">//将计数器设回状态中</span></span><br><span class="line">                setState(c + acquires);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="comment">// 能运行到这里也没有抛出异常 那么说明锁空闲</span></span><br><span class="line">            <span class="keyword">if</span> (writerShouldBlock() ||!compareAndSetState(c, c + acquires))</span><br><span class="line">                <span class="comment">//进行判断，如果写操作被阻塞或者CAS机制发现更新操作失败(即多线程情况下别人线程已经获取了锁)</span></span><br><span class="line">                <span class="comment">//加锁失败</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//将当前线程设置为锁的持有者，返回true</span></span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">exclusiveCount</span><span class="params">(<span class="type">int</span> c)</span> &#123; <span class="keyword">return</span> c &amp; EXCLUSIVE_MASK; &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="tryRelease方法"   >          <a href="#tryRelease方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#tryRelease方法" class="headerlink" title="tryRelease方法"></a>tryRelease方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> releases)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isHeldExclusively())</span><br><span class="line">                <span class="comment">//当锁不是当前线程持有，则抛出异常</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalMonitorStateException</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//运行到这里说明锁的持有者是当前线程</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">nextc</span> <span class="operator">=</span> getState() - releases;</span><br><span class="line">    <span class="comment">//将当前状态数减去1之后设置为更新后的状态数</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">free</span> <span class="operator">=</span> exclusiveCount(nextc) == <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//如果更新之后数据为0，那么说明锁空闲</span></span><br><span class="line">            <span class="keyword">if</span> (free) </span><br><span class="line">                <span class="comment">//锁空闲之后设置者为null</span></span><br><span class="line">                setExclusiveOwnerThread(<span class="literal">null</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置更新之后的状态字</span></span><br><span class="line">            setState(nextc);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回可重入次数</span></span><br><span class="line">            <span class="keyword">return</span> free;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isHeldExclusively</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// While we must in general read state before owner,</span></span><br><span class="line">            <span class="comment">// we don&#x27;t need to do so to check if current thread is owner</span></span><br><span class="line">            <span class="keyword">return</span> getExclusiveOwnerThread() == Thread.currentThread();</span><br><span class="line">    <span class="comment">//如果当前线程不是锁的持有者则返回false</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="tryWriteLock方法"   >          <a href="#tryWriteLock方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#tryWriteLock方法" class="headerlink" title="tryWriteLock方法"></a>tryWriteLock方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryWriteLock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取当前线程和锁的状态字</span></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//如果锁有持有者</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> exclusiveCount(c);</span><br><span class="line">                <span class="comment">//获取锁的可重入数</span></span><br><span class="line">                <span class="keyword">if</span> (w == <span class="number">0</span> || current != getExclusiveOwnerThread())</span><br><span class="line">                    <span class="comment">//如果锁并非当前线程持有，则加写锁失败</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (w == MAX_COUNT)</span><br><span class="line">                    <span class="comment">//如果锁的可重入数达到上限，则抛出异常</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="comment">//执行到这里还没有抛出异常说明可重入数未达到上限或者锁空闲</span></span><br><span class="line">            <span class="keyword">if</span> (!compareAndSetState(c, c + <span class="number">1</span>))</span><br><span class="line">                <span class="comment">//用CAS机制设置状态失败</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//返回false</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果加锁成功，那么将锁持有者设置为当前线程</span></span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="tryReadLock方法"   >          <a href="#tryReadLock方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#tryReadLock方法" class="headerlink" title="tryReadLock方法"></a>tryReadLock方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">对读锁使用tryLock()方法</span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryReadLock</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">          <span class="comment">//获取当前线程</span></span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line">                <span class="comment">//获取锁的状态</span></span><br><span class="line">                <span class="keyword">if</span> (exclusiveCount(c) != <span class="number">0</span> &amp;&amp; getExclusiveOwnerThread() != current)</span><br><span class="line">                <span class="comment">//锁可重入数非空或者锁的持有者不是当前线程，则加锁失败</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> sharedCount(c);</span><br><span class="line">                <span class="comment">//获取分享状态字</span></span><br><span class="line">                <span class="keyword">if</span> (r == MAX_COUNT)</span><br><span class="line">                    <span class="comment">//如果分享数达到上限 抛出异常</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (compareAndSetState(c, c + SHARED_UNIT)) &#123;</span><br><span class="line">                    <span class="comment">//用CAS给状态c设置数据</span></span><br><span class="line">                    <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">//如果r为空</span></span><br><span class="line">                        firstReader = current;</span><br><span class="line">                        firstReaderHoldCount = <span class="number">1</span>;</span><br><span class="line">                        <span class="comment">//那么读锁持有数设置为1，第一头结点设置为当前线程</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">                        <span class="comment">//r非空，那么头结点获取线程数+1</span></span><br><span class="line">                        firstReaderHoldCount++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//缓冲区线程数设置为头结点线程数</span></span><br><span class="line">                        <span class="type">HoldCounter</span> <span class="variable">rh</span> <span class="operator">=</span> cachedHoldCounter;</span><br><span class="line">                        <span class="keyword">if</span> (rh == <span class="literal">null</span> || rh.tid != getThreadId(current))</span><br><span class="line">                            <span class="comment">//如果rh为空或者rh的线程id不等于当前线程id</span></span><br><span class="line">                            cachedHoldCounter = rh = readHolds.get();</span><br><span class="line">                        </span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                            readHolds.set(rh);</span><br><span class="line">                        rh.count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//加锁成功</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="tryAcquireShared方法"   >          <a href="#tryAcquireShared方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#tryAcquireShared方法" class="headerlink" title="tryAcquireShared方法"></a>tryAcquireShared方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tryAcquireShared</span><span class="params">(<span class="type">int</span> unused)</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            如果写锁被另一个线程持有，则失败</span></span><br><span class="line"><span class="comment">            如果当前线程能有资格持有写锁。询问队列策略是否应该被阻塞</span></span><br><span class="line"><span class="comment">            没有被阻塞，用CAS机制给锁更新状态和计数</span></span><br><span class="line"><span class="comment">            如果加锁失败，那么可能是线程不能持有写锁，或者CAS更新失败，或者计数器饱和</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line">            <span class="keyword">if</span> (exclusiveCount(c) != <span class="number">0</span> &amp;&amp;</span><br><span class="line">                getExclusiveOwnerThread() != current)</span><br><span class="line">                <span class="comment">//判断写锁是否被其他线程持有</span></span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> sharedCount(c);</span><br><span class="line">    <span class="comment">//将计数状态交给r</span></span><br><span class="line">            <span class="keyword">if</span> (!readerShouldBlock() &amp;&amp;</span><br><span class="line">                r &lt; MAX_COUNT &amp;&amp;</span><br><span class="line">                compareAndSetState(c, c + SHARED_UNIT)) &#123;</span><br><span class="line">                <span class="comment">//当不被阻塞,并且计数器小于最大值以及更新状态成功</span></span><br><span class="line">                <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//如果计数器为0 ，那么将当前线程设置为第一个顾客，可重入计数为1</span></span><br><span class="line">                    firstReader = current;</span><br><span class="line">                    firstReaderHoldCount = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">                    <span class="comment">//如果第一个获取锁的是当前线程，那么将计数器+1</span></span><br><span class="line">                    firstReaderHoldCount++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">HoldCounter</span> <span class="variable">rh</span> <span class="operator">=</span> cachedHoldCounter;</span><br><span class="line">                    <span class="keyword">if</span> (rh == <span class="literal">null</span> || rh.tid != getThreadId(current))</span><br><span class="line">                        cachedHoldCounter = rh = readHolds.get();</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                        readHolds.set(rh);</span><br><span class="line">                    rh.count++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> fullTryAcquireShared(current);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="synchronized关键字"   >          <a href="#synchronized关键字" class="heading-link"><i class="fas fa-link"></i></a><a href="#synchronized关键字" class="headerlink" title="synchronized关键字"></a>synchronized关键字</h1>      ]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sprng面试题</title>
      <link href="/2023/07/20/Sprng%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/07/20/Sprng%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[        <h1 id="Spring的事务传播行为"   >          <a href="#Spring的事务传播行为" class="heading-link"><i class="fas fa-link"></i></a><a href="#Spring的事务传播行为" class="headerlink" title="Spring的事务传播行为"></a>Spring的事务传播行为</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">事务有七种传播行为</span><br><span class="line"><span class="number">1.</span>REQUIRED:支持当前事务，当前有事务则直接加入该事务，当没有事务会创建一个新事务</span><br><span class="line"><span class="number">2.</span>SUPPORTS：支持当前事务，如果当前没事务就以非事务的方式进行</span><br><span class="line"><span class="number">3.</span>MANDATORY:支持当前事务，必须要有事务否则抛出异常</span><br><span class="line"><span class="number">4.</span>REQUIRES_NEW:不管有没有事务，都会开启新事务，会把当前事务挂起，当新事务执行结束老事务才会继续运行</span><br><span class="line"><span class="number">5.</span>NOT_SUPPORTED:以非事务的方式进行，如果有事务则把事务挂起</span><br><span class="line"><span class="number">6.</span>NEVER:不允许有事务，如果有事务则抛出异常</span><br><span class="line"><span class="number">7.</span>NESTED:如果当前有事务则嵌套在当前事务，如果没有会新建一个事务</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">REQUIRED和NESTED的区别:REQUIRED是同一个事务，子进程回滚也会导致父进程回滚，NESTED是嵌套事务，子事务回滚不会导致父事务回滚，</span><br></pre></td></tr></table></div></figure>        <h1 id="Spring事务什么时候会失效？"   >          <a href="#Spring事务什么时候会失效？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Spring事务什么时候会失效？" class="headerlink" title="Spring事务什么时候会失效？"></a>Spring事务什么时候会失效？</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.Bean对象没有被Spirng容器管理：自己new出来的bean对象而不是IOC中的Bean</span><br><span class="line">2.方法的访问权限不是Public，方法的访问权限是private也会失效</span><br><span class="line">3.数据库不支持事务，所以Spring的事务会失效</span><br><span class="line">4.异常被捕获了，导致本该回滚的数据没有回滚</span><br><span class="line">5.异常类型错误或者配置错误</span><br><span class="line">6.数据源没有配置事务管理器</span><br><span class="line">7.自身调用:本方法内调用本方法，那么就没有走aop的代理过程，所以会失效</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h1 id="Spring事务的本质？"   >          <a href="#Spring事务的本质？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Spring事务的本质？" class="headerlink" title="Spring事务的本质？"></a>Spring事务的本质？</h1>              <h1 id="说说你对IOC的理解"   >          <a href="#说说你对IOC的理解" class="heading-link"><i class="fas fa-link"></i></a><a href="#说说你对IOC的理解" class="headerlink" title="说说你对IOC的理解"></a>说说你对IOC的理解</h1>              <h1 id="说说你对AOP的理解"   >          <a href="#说说你对AOP的理解" class="heading-link"><i class="fas fa-link"></i></a><a href="#说说你对AOP的理解" class="headerlink" title="说说你对AOP的理解"></a>说说你对AOP的理解</h1>              <h1 id="AutoWired和Resource的区别"   >          <a href="#AutoWired和Resource的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#AutoWired和Resource的区别" class="headerlink" title="AutoWired和Resource的区别?"></a>AutoWired和Resource的区别?</h1>      ]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC面试题</title>
      <link href="/2023/07/20/SpringMVC%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/07/20/SpringMVC%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[        <h1 id="什么是SpringMVC"   >          <a href="#什么是SpringMVC" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是SpringMVC" class="headerlink" title="什么是SpringMVC"></a>什么是SpringMVC</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SpringMVC是Spring框架下的一个模块，用于处理web请求，基于MVC的web框架,而MVC是一种设计模式</span><br><span class="line">    M -model模型 </span><br><span class="line">   V -View 视图</span><br><span class="line">    C -controller控制器</span><br></pre></td></tr></table></div></figure>        <h1 id="能说说SpringMVC的工作流程吗？"   >          <a href="#能说说SpringMVC的工作流程吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#能说说SpringMVC的工作流程吗？" class="headerlink" title="能说说SpringMVC的工作流程吗？"></a>能说说SpringMVC的工作流程吗？</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>用户发送HTTP请求到前端控制器DispatcherServlet</span><br><span class="line"><span class="number">2.</span>DispatcherServlet调用handlerMapping(处理器映射器)找到映射器</span><br><span class="line"><span class="number">3.</span>handlerMapping通过url路径生成对应的处理器和拦截器，一起返回给DispatcherServlet</span><br><span class="line"><span class="number">4.</span>DispatcherServlet调用handlerAdapter(处理器适配器)</span><br><span class="line"><span class="number">5.</span>handlerApadter调用handler(处理器)[也就是我们写的Controller]</span><br><span class="line"><span class="number">6.</span>handler处理返回结果封装成ModelandView</span><br><span class="line"><span class="number">7.</span>handlerApadter将返回结果ModelandView返回给DispatcherServlet</span><br><span class="line"><span class="number">8.</span>DispatcherServlet将ModelandView发送给ViewReslover(视图解析器)</span><br><span class="line"><span class="number">9.</span>ViewReslover解析之后返回具体的View</span><br><span class="line"><span class="number">10.</span>DisPatcherServlet将View渲染</span><br><span class="line"><span class="number">11.</span>DisPatcherServlet相应用户</span><br><span class="line">    </span><br><span class="line">而面向接口编程有不同的工作流程</span><br><span class="line"><span class="number">1.</span>用户发送HTTP请求到前端控制器DispatcherServlet</span><br><span class="line"><span class="number">2.</span>DispatcherServlet调用handlerMapping(处理器映射器)找到映射器</span><br><span class="line"><span class="number">3.</span>handlerMapping通过url路径生成对应的处理器和拦截器，一起返回给DispatcherServlet</span><br><span class="line"><span class="number">4.</span>DispatcherServlet调用handlerAdapter(处理器适配器)</span><br><span class="line"><span class="number">5.</span>handlerApadter调用handler(处理器)[也就是我们写的Controller]</span><br><span class="line"><span class="number">6.</span>方法上添加ReSponseBody</span><br><span class="line"><span class="number">7.</span>通过HttpMessageConverter来返回结果转为Json格式并响应</span><br></pre></td></tr></table></div></figure>        <h1 id="SpringMVC的主要组件有哪些"   >          <a href="#SpringMVC的主要组件有哪些" class="heading-link"><i class="fas fa-link"></i></a><a href="#SpringMVC的主要组件有哪些" class="headerlink" title="SpringMVC的主要组件有哪些"></a>SpringMVC的主要组件有哪些</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">主要有五个组件:DisPatcherServlet、handlerMapping、handlerAdapter、handler、ViewReslover</span><br><span class="line"></span><br><span class="line">1.DisPatcherServlet:前端控制器    整个流程的控制中心，调用其他组件来处理网络请求</span><br><span class="line">2.handlerMapping   :处理器映射器  负责根据网络请求不同找到对应的处理器映射</span><br><span class="line">3.hander           :处理器       对具体的请求进行处理，通常是我们写的Controller</span><br><span class="line">4.handerAdapter    :处理器适配器  通过特定的规则去执行handler</span><br><span class="line">5.ViewReslover     :视图解析器    用于解析处理结果生成View</span><br></pre></td></tr></table></div></figure>        <h1 id="SpringMVC有哪些常用注解？"   >          <a href="#SpringMVC有哪些常用注解？" class="heading-link"><i class="fas fa-link"></i></a><a href="#SpringMVC有哪些常用注解？" class="headerlink" title="SpringMVC有哪些常用注解？"></a>SpringMVC有哪些常用注解？</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span> :用于处理请求url的注解，可用于类和方法上，用于类上则所有方法都需要有这个父地址</span><br><span class="line"><span class="meta">@RequestBody</span>    :实现接收网络请求中的JSON数据</span><br><span class="line"><span class="meta">@ResponseBody</span>   :用于返回Json格式的数据</span><br></pre></td></tr></table></div></figure>        <h1 id="Spring、SpringMVC、SpringBoot的区别"   >          <a href="#Spring、SpringMVC、SpringBoot的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#Spring、SpringMVC、SpringBoot的区别" class="headerlink" title="Spring、SpringMVC、SpringBoot的区别"></a>Spring、SpringMVC、SpringBoot的区别</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Spring是一个开发框架，核心的IOC和AOP</span><br><span class="line">SpringMVC是Spring的一个模块，用于处理网络请求的模块</span><br><span class="line">SpringBoot是基于Spring的一个脚手架，为开发Spring生态其他框架铺平道路</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某大厂的实习生线下面试</title>
      <link href="/2023/07/19/%E6%9F%90%E5%A4%A7%E5%8E%82%E7%9A%84%E5%AE%9E%E4%B9%A0%E7%94%9F%E7%BA%BF%E4%B8%8B%E9%9D%A2%E8%AF%95/"/>
      <url>/2023/07/19/%E6%9F%90%E5%A4%A7%E5%8E%82%E7%9A%84%E5%AE%9E%E4%B9%A0%E7%94%9F%E7%BA%BF%E4%B8%8B%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>一开始约的是两点面试，然后我是一点半就到了，搞来搞去变得直接上去在别人办公室里，等上一个哥们面试结束，然后直接就开始了。</p><h2 id=""><a href="#" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>1.简单介绍一下自己的家庭情况和学校的实习、学习情况，主修的课程、技能等</p><p>2.看你简历上有一个仿今日头条的项目?是出于什么目的进行开发的呢？</p><p>3.项目是几个人组成的小组?每个人的成员构成和职责是什么样的？</p><p>4.你负责的是哪个角色？</p><p>5.你应该也有在网上学习java，能说一下你在互联网是通过什么渠道学习的呢？</p><p>6.你了解前端开发吗？</p><p>7.有了解过集合吗？看过底层源码吗？</p><p>8.ArrayList底层是怎么进行创建和扩容的呢？</p><p>9.集合是怎么处理哈希碰撞的？</p><p>10.有了解过锁吗?Lock和Sychorized那些</p><p>11.final修饰符有学习过吗？它有什么使用场景</p><p>12.final修饰方法会怎么样？final修饰类会怎么样?</p><p>13.Integer和int能直接进行比较吗？</p><p>14.Integer底层有一个缓冲数组，在这个缓冲数组边界能直接使用吗？</p><p>15.&#x3D;&#x3D;和equals方法的区别</p><p>16.有了解过Volatile关键字吗？</p><p>17.说说SpringMVC的执行流程</p><p>18.说说你对Vue和H5的理解</p><p>19.V-show和V-if的使用场景</p><p>20.有了解过垃圾回收机制吗？</p><p>21.jdk1.8之后默认的GC是哪个？</p><p>22.有了解过主流的数据库吗？</p><p>23.说说你对Mysql优化的理解</p><p>24.有了解过范式和反范式吗？</p><p>25.你在项目中有使用过Redis，能说说你基于什么情况考虑使用的Redis呢?</p><p>26.Redis常用的数据类型有哪些？</p><p>27.你在Redis的环境下有没有开发部署过项目</p>        <h2 id="-1"   >          <a href="#-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#-1" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2>      <p>技术面部分结束了，然后hr问我有没有想对公司了解的情况</p><p>我当时问的是1.实习的时间段，是否支持转正</p><p>​2.上班工作的时间段</p><p>然后这个时候技术面试官追问了一条能不能接收996的情况</p><p>总结和复盘：</p><p>首先，我要感谢这个公司能给我一个这个时间段的一个技术线下面试，在目前我所在的阶段，这个机会是千载难逢的，这是不可否认的。</p><p>其次，我因为是第一次线下面试，经过这个技术面才能知道学习到的东西和当时在小房子里面能想起来的东西真的差距很大。</p><p>我进去脑子一片空白，和技术面试官大眼瞪小眼，你看着我我看着你，然后他问的东西有些其实我都知道也系统学习过看过源码，但是在当时的环境下，我脑子里面什么都不知道，所有的都是基于平常的理解再一点点一点点的复述出来。</p><p>第三，因为第一个问题就把我问爆了有点，我自己答得不对，甚至有可能是全错，这个面试官眉头一皱，我就知道这次其实噶了，但是万幸的是在这个时间段失败是可以接受的事，因为只有经过这次面试，我才知道在日常学习和真的面试中你能脑子里想出来的东西是不一样的，我得加强对面试情况的测试。</p><p>真得重新准备准备下EE的内容，因为基础有点忘记了搞得答出来很没有底气，我都不知道是对是错，等校招的时候好好发挥一下，在这个时间段就应该多投实习面试，去多尝试面试，锻炼面试经验</p><p>可以说很多准备的东西都没有问到，问到的都是偏向基础和底层，而这块确实是我现在目前尚未发现的问题。</p><p>输一场也不一定是坏事，是吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE基础-并发编程【源码篇】</title>
      <link href="/2023/07/19/JavaSE%E5%9F%BA%E7%A1%80-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%90%E6%BA%90%E7%A0%81%E7%AF%87%E3%80%91/"/>
      <url>/2023/07/19/JavaSE%E5%9F%BA%E7%A1%80-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%90%E6%BA%90%E7%A0%81%E7%AF%87%E3%80%91/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE基础-集合【源码篇】</title>
      <link href="/2023/07/15/JavaSE%E5%9F%BA%E7%A1%80-%E9%9B%86%E5%90%88%E3%80%90%E6%BA%90%E7%A0%81%E7%AF%87%E3%80%91/"/>
      <url>/2023/07/15/JavaSE%E5%9F%BA%E7%A1%80-%E9%9B%86%E5%90%88%E3%80%90%E6%BA%90%E7%A0%81%E7%AF%87%E3%80%91/</url>
      
        <content type="html"><![CDATA[        <h1 id="集合"   >          <a href="#集合" class="heading-link"><i class="fas fa-link"></i></a><a href="#集合" class="headerlink" title="集合"></a>集合</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">集合与数组的区别：1.集合的长度可变，而数组的长度不可变</span><br><span class="line">   2.集合只能存引用数据类型，而数组能存基本数据类型和引用数据类型</span><br><span class="line">   3.集合可以存放多种数据类型，而数组在定义是只能存放同一种的数据类型</span><br></pre></td></tr></table></div></figure><p>集合分为两种，一种是继承Collection的单列集合List和Set，另一种就是实现Map接口的双列集合</p>        <h2 id="Collection的子接口"   >          <a href="#Collection的子接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#Collection的子接口" class="headerlink" title="Collection的子接口"></a>Collection的子接口</h2>              <h3 id="1-List接口"   >          <a href="#1-List接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-List接口" class="headerlink" title="(1)List接口"></a>(1)List接口</h3>      <p>list的特性是：可重复、有序、有索引、可插入Null</p><p>实现List接口的实现类是ArrayList、LinkedList、Vector</p>        <h4 id="1、ArrayList"   >          <a href="#1、ArrayList" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、ArrayList" class="headerlink" title="1、ArrayList"></a>1、ArrayList</h4>      <p>ArrayList底层：</p><p>变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">8683452581122892189L</span>;</span><br><span class="line"><span class="comment">//序列化ID</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//默认长度</span></span><br><span class="line">  </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"><span class="comment">//空数组</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"><span class="comment">//默认初始化情况下的空数组</span></span><br><span class="line">   <span class="keyword">transient</span> Object[] elementData; </span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> size;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">创建ArrayList的时候：</span><br><span class="line"><span class="number">1.</span>无参构造 </span><br><span class="line">    <span class="comment">//  Constructs an empty list with an initial capacity of ten. 构建一个空的list并且将初始容量为10</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    //  The array buffer into which the elements of the ArrayList are stored. 这个缓冲区被用于存储ArrayList对象</span></span><br><span class="line"><span class="comment">    //  The capacity of the ArrayList is the length of this array buffer.  ArrayList的容量取决于这个缓冲区长度</span></span><br><span class="line"><span class="comment">    //  Any empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA will be expanded to DEFAULT_CAPACITY when the first element is added. </span></span><br><span class="line"><span class="comment">    任何空的ArrayList当缓冲区等于空的地址与默认为空的实例相等时将会扩容默认的容量当第一次元素添加</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">transient Object[] elementData;   </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//Shared empty array instance used for default sized empty instances.  用于默认大小的空实例的共享空数组实例。</span></span><br><span class="line"><span class="comment">//  We distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when first element is added.</span></span><br><span class="line"><span class="comment">我们将其与EMPTY_ELEMENTDATA区分开来，以了解添加第一个元素时要膨胀多少。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">总结 空参构造就是创建一个大小为<span class="number">0</span>的Object数组  它会当第一次元素添加的时候扩容</span><br><span class="line"><span class="number">2.</span>有参构造</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an empty list with the specified initial capacity. 构造一个指定大小容量的空List</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  initialCapacity  the initial capacity of the list   参数：这个List的容量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the specified initial capacity is negative</span></span><br><span class="line"><span class="comment">     抛出异常当这个指定的容量为负数时</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Shared empty array instance used for empty instances.</span></span><br><span class="line"><span class="comment">       共享一个空的数组实例用来代表空数组</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">       private static final Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;  <span class="comment">//传入参数：指定的容量</span></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">            <span class="comment">//如果这个参数大于0 则将创建一个这个参数大小的Object数组 并且赋值给缓冲区</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//如果这个参数等于0 则将空数组实例赋值给缓冲区</span></span><br><span class="line">            <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果这个参数为负数 则抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">总结 </span><br><span class="line">    参数大于<span class="number">0</span>的时候会创建一个这个参数大小的数组 </span><br><span class="line">    参数等于<span class="number">0</span>的时候会创建一个大小为<span class="number">0</span>的数组</span><br><span class="line">    参数小于<span class="number">0</span>的时候会抛出异常</span><br><span class="line">有参构造<span class="number">2</span>：</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a list containing the elements of the specified collection, in the order they are returned by the collection&#x27;s iterator.</span></span><br><span class="line"><span class="comment">     * 创建一个List，该List包含参数集合中的元素，按参数集合的迭代器返回的顺序排列。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c the collection whose elements are to be placed into this list  </span></span><br><span class="line"><span class="comment">       参数c是一个要被放入这个新list中的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment">       当参数集合是空集合的时候抛出空指针异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">    <span class="comment">//先将C数组化放到对象数组a中</span></span><br><span class="line">        <span class="keyword">if</span> ((size = a.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果数组a的长度不等于0的话，即这个传入进来的集合非空</span></span><br><span class="line">            <span class="keyword">if</span> (c.getClass() == ArrayList.class) &#123;</span><br><span class="line">        <span class="comment">//如果集合C也是一个ArrayList 就将a传入缓存区的指针中</span></span><br><span class="line">                elementData = a;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">//如果集合C不是ArrayList,就用Arrays.copy这个数组存入一个对象数组中，再传入ElementData中</span></span><br><span class="line">                elementData = Arrays.copyOf(a, size, Object[].class);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//当数组长度为0的时候，为空List</span></span><br><span class="line">            <span class="comment">// replace with empty array.</span></span><br><span class="line">            elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">总结：这个有参构造就是将集合的全部拷贝</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></div></figure><p>不仅如此，现在只是了解了ArrayList怎么创建的数组，但是空参构造会调用父类的构造方法，所以我们要看一下父类的构造方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>父类AbstractList</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractCollection</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">AbstractList</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="number">2.</span>父类AbstractCollection</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractCollection</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Collection</span>&lt;E&gt; &#123;</span><br><span class="line"> <span class="keyword">protected</span> <span class="title function_">AbstractCollection</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>但是问题来了，ArrayList已知创建一个大小为0的Object数组，并且提到会在第一次添加元素的时候进行扩容，这个扩容又是怎么处理的呢？我们重点要关注一下Add方法，且由于ArrayList的父类是抽象类，所以我们只要关注本身的Add方法即可</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Appends the specified element to the end of this list. 添加一个元素进入这个list的尾部</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e element to be appended to this list 参数：一个将要被添加到list中的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)  </span></span><br><span class="line"><span class="comment">   返回true </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The size of the ArrayList (the number of elements it contains).</span></span><br><span class="line"><span class="comment">   私有化一个size 用来表示这个ArrayList的长度(包含元素的个数)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">modCount</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">//用来记录集合操作的次数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ARRAY_SIZE</span> <span class="operator">=</span> Integer.MAX_VALUE - <span class="number">8</span>; 定义数组的最大长度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">//调用ensureCapacityInternal() 方法 传入size(现在这个ArrayList元素个数)+1</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="comment">//将size自增后将E插入进这个Object数组(缓存区) ==&gt; 插入数组尾部</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//返回Ture</span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line"><span class="comment">//传入参数 minCapacity即需要的最小长度</span></span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">    <span class="comment">//先看参数calculateCapacity(elementData, minCapacity)   </span></span><br><span class="line">    <span class="comment">//这个calculateCapacity()方法会返回一个数据，即扩容的大小</span></span><br><span class="line">    <span class="comment">//调用 ensureExplicitCapacity()方法，将计算出的大小传入进去</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line"><span class="comment">//传入参数:是经过计算之后算出的长度(默认长度10或者是大于10且是需要的最小长度)</span></span><br><span class="line"></span><br><span class="line">    modCount++;  </span><br><span class="line">    <span class="comment">//modCount是用来记录集合被操作过的次数  自增</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="comment">//说明这段代码是考虑过溢出的</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="comment">//如果需要的长度减去数组长度&gt;0的话 触发生长函数</span></span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateCapacity</span><span class="params">(Object[] elementData, <span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">//将缓冲区数组和需要最小长度传入</span></span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">    <span class="comment">//如果这个缓冲区是等于默认的空数组实例 即空数组</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    <span class="comment">/*返回一个最大值(在默认大小和最小需要长度之间)</span></span><br><span class="line"><span class="comment">    已知默认长度为10，假如目前数组中有0个数据一次性插入12个数据</span></span><br><span class="line"><span class="comment">    那么minCapacity应该为12  最小长度为现在数组个数+需要插入个数</span></span><br><span class="line"><span class="comment">    于是最终返回12</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当缓存区数组是存在数据的，那么直接返回需要的最小集合长度</span></span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line"><span class="comment">//传入参数：默认10或者是大于10但是需要的最小长度</span></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="comment">//定义一个变量 记录老数组的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义一个变量 记录新数组的长度  新数组的长度等于老数组的长度+老数组右移一位</span></span><br><span class="line"><span class="comment">    如： 老数组长度为10  则二进制是1010  右移一位就是101  ==&gt; 5</span></span><br><span class="line"><span class="comment">        所以新数组的长度是10+5  即新数组的长度是老数组的1.5倍  </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)  </span><br><span class="line">    <span class="comment">//如果新数组长度比需要的最小长度还小 则将新数组长度直接设为需要的最小长度</span></span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="comment">//如果新数组长度比数组最大长度还大 则调用hugeCapacity()方法</span></span><br><span class="line">    <span class="comment">//这个方法会1.抛出堆栈溢出错误2.返回定义的数组最大长度\整数的最大长度</span></span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    最后将老数组拷贝到新数组中，再赋值回老数组</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hugeCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line"><span class="comment">//传入需要的最小长度</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">    <span class="comment">//如果是小于0 则抛出异常  堆栈溢出</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">    <span class="comment">//如果最小长度比定义的最大数组长度还大，则直接返回整数的最大长度，否则返回定义的数组最大长度</span></span><br><span class="line">        Integer.MAX_VALUE : MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>所以关注子类的构造方法即可</p>        <h4 id="2、LinkedList"   >          <a href="#2、LinkedList" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、LinkedList" class="headerlink" title="2、LinkedList"></a>2、LinkedList</h4>      <p>linkedList底层:</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">结构:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractSequentialList</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable&#123;</span><br><span class="line"><span class="keyword">transient</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first; <span class="comment">//定义LinkedList的首结点</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;  <span class="comment">//定义LinkedList的尾结点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里是Node的结构</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">        E item;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = element;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">            <span class="built_in">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></div></figure><p>因此我们可以得出LinkedList的Node结构示意图</p><div class="table-container"><table><thead><tr><th align="center">Node<E> prev</th><th align="center">element</th><th align="center">Node<E> next</th></tr></thead></table></div><p>并且LinkedList是一个双端链表，它记录了头结点和尾结点的位置</p><p>我们接下来也要探究一下构造方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>空参构造</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an empty list. 创建一个空list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>有参构造</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a list containing the elements of the specified collection, in the order they are returned by the collection&#x27;s  iterator.</span></span><br><span class="line"><span class="comment">     创建一个list，新list包含传入参数集合的元素和构造器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  c the collection whose elements are to be placed into this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();   <span class="comment">//调用空参构造</span></span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> addAll(size, c); <span class="comment">//返回调用函数的结果</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        checkPositionIndex(index); </span><br><span class="line">        <span class="comment">//将LinkedList的容量传入</span></span><br><span class="line"></span><br><span class="line">        Object[] a = c.toArray();  <span class="comment">//将传入的集合C进行数组化</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">numNew</span> <span class="operator">=</span> a.length;     <span class="comment">//记录C中的元素个数</span></span><br><span class="line">        <span class="keyword">if</span> (numNew == <span class="number">0</span>)           <span class="comment">//如果C是空集合则返回false</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; pred, succ;        <span class="comment">//定义两个节点</span></span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;       <span class="comment">//如果index==size 即添加的位置在链表的尾部</span></span><br><span class="line">            succ = <span class="literal">null</span>;</span><br><span class="line">            pred = last;</span><br><span class="line">            <span class="comment">//设置index前结点为LinkedList的尾结点,尾结点设为空</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;   <span class="comment">//如果index!=size，说明添加的索引位置不在链表尾部，而是在队中</span></span><br><span class="line">            <span class="comment">//如果不位链表的尾部 </span></span><br><span class="line">            <span class="comment">//取出index结点的数据。</span></span><br><span class="line">            <span class="comment">//将succ置为index结点的数据，并将succ的前置结点信息交给pred，即pred指向index的前置结点</span></span><br><span class="line">            succ = node(index);</span><br><span class="line">            pred = succ.prev;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历数组a</span></span><br><span class="line">        <span class="keyword">for</span> (Object o : a) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E) o;</span><br><span class="line">            <span class="comment">//@SuppressWarnings(&quot;unchecked&quot;) 告诉编译器不要出现警告信息 E e =(E) o 强制类型转换成E</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//创建新结点newNode 将前驱结点设为pred 传入数据 尾结点置空 </span></span><br><span class="line">            Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(pred, e, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//如果前驱结点为空  则第一个节点就是newNode; 即这是链表第一个元素</span></span><br><span class="line">            <span class="keyword">if</span> (pred == <span class="literal">null</span>)</span><br><span class="line">                first = newNode;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            <span class="comment">//反之，前驱结点的后继结点设为新结点</span></span><br><span class="line">                pred.next = newNode;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//将前驱结点的指针往后移动到新节点上</span></span><br><span class="line">            pred = newNode;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//循环结束</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment">/*在循环开始之前,对index和size进行了判断</span></span><br><span class="line"><span class="comment">        如果index==size，说明这是链表尾部添加的数据。则将succ=null,pred=last即将pred置为链表尾部</span></span><br><span class="line"><span class="comment">        循环结束之后pred=newNode即说明pred指向的是新结点的位置</span></span><br><span class="line"><span class="comment">        如果index!=size，说明这不是尾部添加的数据，而是在链表中间添加的数据</span></span><br><span class="line"><span class="comment">        我们将index索引位置的结点取出来了并将其保存于succ中，前置结点的信息保存在pred中</span></span><br><span class="line"><span class="comment">        当循环结束之后pred中的位置指向新结点的位置</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (succ == <span class="literal">null</span>) &#123;</span><br><span class="line">            last = pred;</span><br><span class="line">            <span class="comment">//说明这是链表尾部添加的数据，当循环结束之后我们只要把last指针指向pred 即尾指针指向最后添加的结点即可</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//反之这是队中的数据</span></span><br><span class="line">            <span class="comment">//将新结点的后继结点置为succ 即置为原本index索引位置上的结点</span></span><br><span class="line">            <span class="comment">//将succ的前置结点设为新结点，保证双向链表的建立</span></span><br><span class="line">            pred.next = succ;</span><br><span class="line">            succ.prev = pred;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment">//将C中元素个数加入到size中</span></span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="comment">//modCount++ 指的是记录这个链表操作次数+1</span></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkPositionIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isPositionIndex(index))</span><br><span class="line">            <span class="comment">//如果返回False 则抛出异常</span></span><br><span class="line">            <span class="comment">//这个函数在有参构造时调用会返回True，不会进入IF语句中</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isPositionIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= size;</span><br><span class="line">        <span class="comment">/*当index大于等于0并且index小于等于size 时返回True   </span></span><br><span class="line"><span class="comment">           有参构造调用方法的时候传入的index==size，所以这个方法调用时会返回true</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>除了关注LinkedList本身的构造函数我们也要关注一下父类的构造</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>父类AbstractSequentialList</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractSequentialList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt; &#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">AbstractSequentialList</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2.</span>父类AbstractList</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractCollection</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">AbstractList</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="number">3.</span>父类AbstractCollection</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractCollection</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Collection</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AbstractCollection</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>所以关注子类的构造方法即可</p>        <h4 id="3、Vector"   >          <a href="#3、Vector" class="heading-link"><i class="fas fa-link"></i></a><a href="#3、Vector" class="headerlink" title="3、Vector"></a>3、Vector</h4>      <p>Vector属性:</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object[] elementData;    <span class="comment">//定义一个Object数组</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="type">int</span> elementCount;   <span class="comment">//定义变量记录元素个数</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> <span class="type">int</span> capacityIncrement;   <span class="comment">//定义容器应该增长时的数量</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2767605614048989439L</span>; <span class="comment">//序列化ID</span></span><br><span class="line">   </span><br></pre></td></tr></table></div></figure><p>Vector的添加方法:</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">addElement</span><span class="params">(E obj)</span> &#123;</span><br><span class="line">        modCount++;  </span><br><span class="line">        ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">        elementData[elementCount++] = obj;</span><br><span class="line">     <span class="comment">//记录操作数+1 确保容量大小 然后将数据存放到新的索引位置中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">        elementData[elementCount++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//记录操作数+1 确保容量大小 然后将数据存放到新的索引位置中 返回true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; elementCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(index);</span><br><span class="line"></span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">numNew</span> <span class="operator">=</span> a.length;</span><br><span class="line">        ensureCapacityHelper(elementCount + numNew);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> elementCount - index;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">                             numMoved);</span><br><span class="line"></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">        elementCount += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//记录操作数++  当index为负或者大于容量个数时抛出索引越界异常</span></span><br><span class="line">    <span class="comment">//扩容，拷贝原数组到扩容后的新数组</span></span><br><span class="line">    <span class="comment">//当参数中的集合元素不为0的时候返回true反之false</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>分析ArrayList、LinkedList和Vector的不同点某过于Vector方法中都带有Synchronized锁</p><p>即说明Vector是同步的，是线程安全的而ArrayList、LinkedList是不同步的，是线程不安全的</p>        <h3 id="2-Set接口"   >          <a href="#2-Set接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-Set接口" class="headerlink" title="(2)Set接口"></a>(2)Set接口</h3>      <p>Set的特性有:不可重复、无序、无索引、可以存NULL【只能存一个】</p>        <h4 id="1、HashSet"   >          <a href="#1、HashSet" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、HashSet" class="headerlink" title="1、HashSet"></a>1、HashSet</h4>      <p>基本变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">5024744406713321676L</span>; <span class="comment">//序列化ID</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map; <span class="comment">//HashMap</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();        <span class="comment">//一个Objectg对象</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>构造方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>无参构造</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has default initial capacity (16) and load factor (0.75).</span></span><br><span class="line"><span class="comment">     //构造一个空的set,HashMap初始容量为16并且负载因子0.75</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">即创建一个HashMap，容量为<span class="number">16</span>并且负载因子为<span class="number">0.75</span>    </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="number">2.</span>有参构造</span><br><span class="line">【<span class="number">1</span>】</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a new set containing the elements in the specified collection.</span></span><br><span class="line"><span class="comment">        The &lt;tt&gt;HashMap&lt;/tt&gt; is created with default load factor(0.75) and an initial capacity sufficient to contain the elements in the specified collection.</span></span><br><span class="line"><span class="comment"> //创建一个set包含了这个传入集合的元素，这个HashMap将是默认的负载因子0.75，创建的容量大小足够包含传入参数集合的元素</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c the collection whose elements are to be placed into this set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(Math.max((<span class="type">int</span>) (c.size()/<span class="number">.75f</span>) + <span class="number">1</span>, <span class="number">16</span>));</span><br><span class="line">    <span class="comment">//将会调用HashSet(int initialCapacity)方法  </span></span><br><span class="line">    <span class="comment">//调用方法传入参数为 c的大小/0.75后+1 与 16的最大值</span></span><br><span class="line">        addAll(c);  </span><br><span class="line">    <span class="comment">//调用父类的addAll()方法 传入指定集合</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">modified</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (E e : c)                      <span class="comment">//遍历集合的每一个元素</span></span><br><span class="line">            <span class="keyword">if</span> (add(e))</span><br><span class="line">                modified = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> modified;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">        <span class="comment">//这个方法返回True说明集合因此改变，如果集合由于任何原因而拒绝添加特定元素，而不是因为它已经包含该元素，那么它必须抛出异常（而不是返回false）。此实现总是抛出UnsupportedOperationException。</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">即创建一个HashMap，初始负载因子为<span class="number">0.75</span>,初始容量可以容下原本集合的元素或者<span class="number">16</span>个    </span><br><span class="line">【<span class="number">2</span>】</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has the specified initial capacity and the specified load factor.</span></span><br><span class="line"><span class="comment">     //构建一个HashMap,负载因子和容量都需要作为参数传入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>      initialCapacity   the initial capacity of the hash map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>      loadFactor        the load factor of the hash map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>     IllegalArgumentException if the initial capacity is less</span></span><br><span class="line"><span class="comment">     *             than zero, or if the load factor is nonpositive</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">    &#125;</span><br><span class="line">即创建一个HashMap，负载因子和容量都需要作为参数传入       </span><br><span class="line">【<span class="number">3</span>】</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has the specified initial capacity and default load factor (0.75).</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>      initialCapacity   the initial capacity of the hash table</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>     IllegalArgumentException if the initial capacity is less</span></span><br><span class="line"><span class="comment">     *             than zero</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">即创建一个HashMap，负载因子为<span class="number">0.75</span>，容量需要作为参数传入</span><br><span class="line">【<span class="number">4</span>】</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a new, empty linked hash set.  (This package private constructor is only used by LinkedHashSet.)</span></span><br><span class="line"><span class="comment">     //这个构造方法专属于LinkedHashSet</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     The backingHashMap instance is a LinkedHashMap with the specified initial capacity and the specified load factor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>      initialCapacity   the initial capacity of the hash map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>      loadFactor        the load factor of the hash map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>      dummy             ignored (distinguishes this constructor from other int, float constructor.)</span></span><br><span class="line"><span class="comment">     //dummy参数表示被忽略(与其他构造函数相比)</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>     IllegalArgumentException if the initial capacity is less</span></span><br><span class="line"><span class="comment">     *             than zero, or if the load factor is nonpositive</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    HashSet(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor, <span class="type">boolean</span> dummy) &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">    &#125;</span><br><span class="line">即创建一个LinkedHashMap(多态的关系)</span><br><span class="line">    </span><br></pre></td></tr></table></div></figure><p>同时因为HashSet有父类，所以我们也要看一下父类的构造函数</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、父类AbstractSet</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractSet</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractCollection</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Set</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AbstractSet</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2</span>、父类AbstractCollection</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractCollection</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Collection</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AbstractCollection</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></div></figure><p>所以关注子类的构造方法即可</p><p>所以HashSet底层都是创建了一个HashMap或者LinkedHashMap实现</p>        <h4 id="2、LinkedHashSet"   >          <a href="#2、LinkedHashSet" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、LinkedHashSet" class="headerlink" title="2、LinkedHashSet"></a>2、LinkedHashSet</h4>      <p>构造方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>空参构造</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="number">16</span>, <span class="number">.75f</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">调用父类HashSet的方法</span></span><br><span class="line"><span class="comment">HashSet(int initialCapacity, float loadFactor, boolean dummy) &#123;</span></span><br><span class="line"><span class="comment">        map = new LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);</span></span><br><span class="line"><span class="comment">        //传入参数容量16和负载因子0.75  </span></span><br><span class="line"><span class="comment">        //调用LinkedHashMap&lt;&gt;(initialCapacity, loadFactor)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="number">2.</span>有参构造</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(initialCapacity, loadFactor, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(initialCapacity, <span class="number">.75f</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Math.max(<span class="number">2</span>*c.size(), <span class="number">11</span>), <span class="number">.75f</span>, <span class="literal">true</span>);</span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>LinkedHashSet的构造方法最后都是调用父类HashSet的有参构造，即HashSet(int initialCapacity, float loadFactor, boolean dummy)</p><p>所以要一探究竟这LinkedHashSet到底是什么实现还得等到双端链表中的LinkedHashMap</p><p>所以先不谈</p>        <h4 id="3、TreeSet"   >          <a href="#3、TreeSet" class="heading-link"><i class="fas fa-link"></i></a><a href="#3、TreeSet" class="headerlink" title="3、TreeSet"></a>3、TreeSet</h4>      <p>基本变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> NavigableMap&lt;E,Object&gt; m;</span><br><span class="line"><span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></div></figure><p>构造方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、无参构造</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;E,Object&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">创建一个TreeMap对象</span><br><span class="line"><span class="number">2</span>、有参构造</span><br><span class="line">TreeSet(NavigableMap&lt;E,Object&gt; m) &#123;</span><br><span class="line">        <span class="built_in">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> E&gt; comparator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(comparator));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">(SortedSet&lt;E&gt; s)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(s.comparator());</span><br><span class="line">        addAll(s);</span><br><span class="line">    &#125;</span><br><span class="line">创建TreeMap对象</span><br></pre></td></tr></table></div></figure><p>所以TreeSet底层是封装了TreeMap对象来实现效果</p>        <h3 id="小结"   >          <a href="#小结" class="heading-link"><i class="fas fa-link"></i></a><a href="#小结" class="headerlink" title="小结"></a>小结</h3>      <div class="table-container"><table><thead><tr><th></th><th>底层原理</th><th>特点</th></tr></thead><tbody><tr><td>ArrayList</td><td>底层实际上是Object数组,开始初始容量为10,扩容为原来的1.5倍,因为是数组结构所以利于查找不利增删</td><td>有序、可重复、有索引、非线程安全</td></tr><tr><td>LinkedList</td><td>底层是双端链表,所以利于增删不利于查找</td><td>有序、可重复、有索引、非线程安全</td></tr><tr><td>Vector</td><td>底层是Object数组,但是因为方法中加有synchronized关键字,所以多线程下线程安全,但是效率低下</td><td>有序、可重复、有索引、线程安全</td></tr><tr><td>HashSet</td><td>底层封装了HashMap，本质上就是一个HashMap，默认初始容量为16，负载因子为0.75,每次扩容为原来容量的两倍。因为底层是HashMap所以线程不安全</td><td>无序、不可重复、没有索引、非线程安全</td></tr><tr><td>LinkedHashSet</td><td>底层封装了LinkedHashMap，默认初始容量为16，负载因子为0.75,线程不安全</td><td>无序、不可重复、没有索引</td></tr><tr><td>TreeSet</td><td>底层封装了TreeMap，TreeMap底层是二叉树(红黑树),所以线程不安全</td><td>无序、不可重复、没有索引、非线程安全</td></tr></tbody></table></div>        <h2 id="Map的子接口"   >          <a href="#Map的子接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#Map的子接口" class="headerlink" title="Map的子接口"></a>Map的子接口</h2>              <h3 id="1、HashMap"   >          <a href="#1、HashMap" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、HashMap" class="headerlink" title="1、HashMap"></a>1、HashMap</h3>      <p>基本变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个默认的容量   1左移4位 即二进制1 ==&gt; 10000 则初始容量为16</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个最大的容量   1左移30位即二进制1 ==&gt;100000000000000000000000000000 即最大容量为1073741824</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义默认的负载因子  0.75</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个链表的长度,当链表的长度达到这个长度会转化成红黑树      链表转化长度阈值为8</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个退化的阈值，当红黑树的链表长度低于这个数则会转化为链表  红黑树退化长度阈值为6</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个数组的长度，当数组的长度大于64的时候才会转化成红黑树   数组转化长度阈值为64</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个Node数组 用于存放结点</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个entrySet 存放键值对</span></span><br><span class="line">   <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个变量记录Map数量</span></span><br><span class="line">   <span class="keyword">transient</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个变量用于记录集合的操作次数</span></span><br><span class="line">   <span class="keyword">transient</span> <span class="type">int</span> modCount;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//（javadoc描述在序列化时为true。此外，如果表数组尚未分配，则此字段将保留初始数组容量，或零表示DEFAULT_initial_capacity。）</span></span><br><span class="line"><span class="comment">//数组扩容阈值</span></span><br><span class="line"><span class="type">int</span> threshold;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载因子</span></span><br><span class="line">   <span class="keyword">final</span> <span class="type">float</span> loadFactor;</span><br></pre></td></tr></table></div></figure>        <h4 id="1、构造方法："   >          <a href="#1、构造方法：" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、构造方法：" class="headerlink" title="1、构造方法："></a>1、构造方法：</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>空参构造</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; </span><br><span class="line">    <span class="comment">//将默认的加载因子为0.75给成员变量loadFactor中</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">2.</span>有参构造</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">    <span class="comment">//传入一个初始容量和一个默认的负载因子0.75 </span></span><br><span class="line">    <span class="comment">//然后调用public HashMap(int initialCapacity, float loadFactor) </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="comment">//如果容量是负数，则抛出异常</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="comment">//如果容量超过了设定的最大容量 则将最大容量给变量init</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line">        <span class="comment">//如果负载因子小于等于0，或者负载因子为空则抛出异常</span></span><br><span class="line">        <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="comment">//将这个传入的负载因子传入成员变量loadFactor中</span></span><br><span class="line">        <span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">     <span class="comment">//调用tableSizeFor(int cap) 将结果给threshold 即调用结果就是数组扩容的阈值   </span></span><br><span class="line">        <span class="comment">//调用这个方法就知道下次数组该什么时候扩容，但是这个数据是1:最大容量:n+1</span></span><br><span class="line">        <span class="comment">//我们后续会在resize()方法将阈值进行调整</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> cap)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        假设传入的数cap=11 则n会等于10 </span></span><br><span class="line"><span class="comment">        因为执行到最后n |= n &gt;&gt;&gt; 16  n会无符号右移16位所以二进制位表示会是32位的</span></span><br><span class="line"><span class="comment">        【无符号右移】高位补零</span></span><br><span class="line"><span class="comment">        n的二进制数字为0000 0000 0000 0000 0000 0000 0000 1010</span></span><br><span class="line"><span class="comment">        n | = n &gt;&gt;&gt;1  即 n = 0000 1010 | 0000 0101  ==&gt; 0000 1111</span></span><br><span class="line"><span class="comment">        n | = n &gt;&gt;&gt;2  即 n = 0000 1111 | 0000 0011  ==&gt; 0000 1111</span></span><br><span class="line"><span class="comment">        ....</span></span><br><span class="line"><span class="comment">        因此我们可以知道这个结果n最后一定会是二进制的倍数-1  我们这里假设得到的数就是15        </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">         <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//当n&lt;0时返回1 否则n&gt;=0会进入判断n是否大于等于最大的容量 如果是则返回最大容量 反之则返回n+1</span></span><br><span class="line">        <span class="comment">//所以我们最后返回的数据就是16</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">        <span class="comment">//将默认的加载因子0.75赋值给成员变量loadFactor</span></span><br><span class="line">        </span><br><span class="line">        putMapEntries(m, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//调用PutMapEntries()方法  传入一个已经存在的map</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">形参:</span></span><br><span class="line"><span class="comment">m – the map</span></span><br><span class="line"><span class="comment">evict – false when initially constructing this map, else true (relayed to method afterNodeInsertion).</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> m.size();</span><br><span class="line">        <span class="comment">//用s记录集合m的大小</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (table == <span class="literal">null</span>) &#123; <span class="comment">// pre-size</span></span><br><span class="line">                <span class="comment">//s&gt;0 且table ==null 说明传入的集合非空但是接收的集合为空</span></span><br><span class="line">                <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> ((<span class="type">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">                <span class="comment">//将s除以负载因子后+1 用ft记录下来</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> ((ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">                         (<span class="type">int</span>)ft : MAXIMUM_CAPACITY);</span><br><span class="line">                <span class="comment">//用变量t记录结果：如果ft小于最大的容量则为ft 反之则为最大的容量  【用于限制ft的最大大小】</span></span><br><span class="line">                <span class="keyword">if</span> (t &gt; threshold)</span><br><span class="line">                    threshold = tableSizeFor(t);</span><br><span class="line">                    <span class="comment">//如果t大于数组扩容因子，调用数组扩容函数计算出需要的容量并且记录在threshold中</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">            <span class="comment">//s&gt;0但是table不是null 说明传入的集合非空且接收的集合非空  </span></span><br><span class="line">                <span class="comment">//s&gt;threshold 说明超过了数组的阈值，需要对数组扩容 调用resize()方法</span></span><br><span class="line">                resize();  <span class="comment">//resize()方法到扩容那方面在展开说</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;? <span class="keyword">extends</span> <span class="title class_">K</span>, ? <span class="keyword">extends</span> <span class="title class_">V</span>&gt; e : m.entrySet()) &#123;</span><br><span class="line">                <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> e.getKey();</span><br><span class="line">                <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">                <span class="comment">//遍历entryset然后调用putval()方法，简单说就是将数据传入新的集合中</span></span><br><span class="line">                putVal(hash(key), key, value, <span class="literal">false</span>, evict);</span><br><span class="line">                <span class="comment">//put方法后面再展开说</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>小结：HashTable底层是用Node[]数组和链表+红黑树组成</p><p>我们来说说刚刚忽略的内部类</p>        <h4 id="2、内部类"   >          <a href="#2、内部类" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、内部类" class="headerlink" title="2、内部类"></a>2、内部类</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Node结点</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//指向下一个结点</span></span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.hash = hash;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">getKey</span><span class="params">()</span>        &#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">getValue</span><span class="params">()</span>      &#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//重写了HashCode方法，返回值是对象key哈希值和Value哈希值异或结果</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">setValue</span><span class="params">(V newValue)</span> &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">//SetValue方法会将老数据进行返回 </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="built_in">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/*重写了Equals方法 1.当地址相同直接返回tree</span></span><br><span class="line"><span class="comment">      2.地址不同则比较Entry实体，如果元素相同则返回True</span></span><br><span class="line"><span class="comment">      反之都不同则返回False</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">       </span><br><span class="line">    TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">       <span class="comment">//记录红黑树的父节点</span></span><br><span class="line">    </span><br><span class="line">    TreeNode&lt;K,V&gt; left;</span><br><span class="line">    <span class="comment">//记录左子节点</span></span><br><span class="line">    </span><br><span class="line">        TreeNode&lt;K,V&gt; right;</span><br><span class="line">    <span class="comment">//记录右子节点</span></span><br><span class="line">    </span><br><span class="line">        TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">    <span class="comment">//记录前一个结点 【HashMap由数组+链表+红黑树构成，红黑树是链表转化而成的，所以数组中有结点用于挂载红黑树】 </span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> red;</span><br><span class="line">    <span class="comment">//记录结点是红还是黑</span></span><br><span class="line">    </span><br><span class="line">        TreeNode(<span class="type">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="built_in">super</span>(hash, key, val, next);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns root of tree containing this node.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title function_">root</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; r = <span class="built_in">this</span>, p;;) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((p = r.parent) == <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> r;</span><br><span class="line">                r = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="3、常用方法"   >          <a href="#3、常用方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#3、常用方法" class="headerlink" title="3、常用方法"></a>3、常用方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br></pre></td><td class="code"><pre><span class="line">Put方法:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//将Key,Value传入 然后调用putVal()进行返回;</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,<span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    参数</span></span><br><span class="line"><span class="comment">    1:hash值  这个是调用了hash()方法之后的结果</span></span><br><span class="line"><span class="comment">       2:key值   这个是传入的Key</span></span><br><span class="line"><span class="comment">       3:Value值 这个是传入的Value值</span></span><br><span class="line"><span class="comment">       4:onlyIfAbsent  表示如果存在键相同时是否更新旧值为新值 true是不更新旧值 false是更新旧值为新值</span></span><br><span class="line"><span class="comment">       5:evict         传入true</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义一个Node[]数组 tab </span></span><br><span class="line"><span class="comment">    定义一个Node结点 p</span></span><br><span class="line"><span class="comment">    定义一个变量n  用于记录数组长度</span></span><br><span class="line"><span class="comment">    定义一个变量i  用于记录索引</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//先将本地的table数组赋值给tab 再把tab的长度赋值给n  </span></span><br><span class="line">            <span class="comment">//如果tab为空或者长度为0，将tab进行resize()方法扩容之后的长度赋值给n</span></span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">//将n-1和hash值做与运算 赋值给索引i 如果再将结点p指向tab[i] 并且判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">            <span class="comment">//如果tab[i]为空即这个位置为空 则调用newNode()方法，将hash值，K,V，和下一个结点为NULL传入</span></span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Node&lt;K,V&gt; newNode(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span></span><br><span class="line"><span class="comment">        return new Node&lt;&gt;(hash, key, value, next);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span></span><br><span class="line"><span class="comment">            this.hash = hash;</span></span><br><span class="line"><span class="comment">            this.key = key;</span></span><br><span class="line"><span class="comment">            this.value = value;</span></span><br><span class="line"><span class="comment">            this.next = next;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//反之  tab[i]不为空 即这个位置有元素了 下面第一个IF有三种情况</span></span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) </span><br><span class="line">            <span class="comment">//1.如果这个位置p的hash和传入的hash相同 并且 (p的key和传入的k地址相同||p的key和key值相同)</span></span><br><span class="line">                e = p;</span><br><span class="line">            <span class="comment">//则将这个位置p赋值给结点e，并且跳出第一个if语句</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="comment">//反之位置P和传入的数据不同 ，判断 p instanceof TreeNode 即判断p是否为树(红黑树)</span></span><br><span class="line">                <span class="comment">//如果是则添加到红黑树里面 调用putTreeVal()方法</span></span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//最终位置P和传入的数据不同也不是红黑树结构 ==&gt;那么应该是链表结构</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="comment">//死循环 用一个变量binCount记录链表长度</span></span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">//当p不指向下一个结点，则将这个数据变成新的结点插入p的后继节点中</span></span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                        <span class="comment">//对循环次数做判断 </span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">        <span class="comment">//当binCount&gt;=7的时候说明已经至少循环7次,即添加此次数据之后链表长度应该到8了,调用treeifyBin()方法，尝试转化成红黑树</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//如果e的hash值相同且key相同(地址或值)相同 则直接跳出循环 </span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">//将指针p指向下一个结点 [在if ((e = p.next) == null) &#123;...&#125;判断时e指向了p的下一个结点]</span></span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//-------------这里结束第一个IF语句---------------------------</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                <span class="comment">//如果e不为空 即说明e和新值发生了哈希碰撞，e为老结点</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                    <span class="comment">//onlyIfAbsent是用来判断是否更新旧值的，为False时说明更新旧值为新值</span></span><br><span class="line">                    <span class="comment">//支持更新旧值或者老值为NUll时，新值代替旧值</span></span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                // Callbacks to allow LinkedHashMap post-actions</span></span><br><span class="line"><span class="comment">       void afterNodeAccess(Node&lt;K,V&gt; p) &#123; &#125; 这个方法仅允许LinkedHashMap调用</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//返回老值</span></span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">    <span class="comment">//操作记录数++</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断添加操作之后数组是否需要进行扩容</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();  </span><br><span class="line">    <span class="comment">//调用resize()方法扩容</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//空实现</span></span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    void afterNodeInsertion(boolean evict) &#123; &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//是红黑树则添加到红黑树里，这里是红黑树调整的规则，暂不做分析</span></span><br><span class="line"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title function_">putTreeVal</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,</span></span><br><span class="line"><span class="params">                                       <span class="type">int</span> h, K k, V v)</span> &#123;</span><br><span class="line">            Class&lt;?&gt; kc = <span class="literal">null</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">searched</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            TreeNode&lt;K,V&gt; root = (parent != <span class="literal">null</span>) ? root() : <span class="built_in">this</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">                <span class="type">int</span> dir, ph; K pk;</span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                    dir = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    dir = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="literal">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                          (kc = comparableClassFor(k)) == <span class="literal">null</span>) ||</span><br><span class="line">                         (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!searched) &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; q, ch;</span><br><span class="line">                        searched = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">if</span> (((ch = p.left) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                             (q = ch.find(h, k, kc)) != <span class="literal">null</span>) ||</span><br><span class="line">                            ((ch = p.right) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                             (q = ch.find(h, k, kc)) != <span class="literal">null</span>))</span><br><span class="line">                            <span class="keyword">return</span> q;</span><br><span class="line">                    &#125;</span><br><span class="line">                    dir = tieBreakOrder(k, pk);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    Node&lt;K,V&gt; xpn = xp.next;</span><br><span class="line">                    TreeNode&lt;K,V&gt; x = map.newTreeNode(h, k, v, xpn);</span><br><span class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                        xp.left = x;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        xp.right = x;</span><br><span class="line">                    xp.next = x;</span><br><span class="line">                    x.parent = x.prev = xp;</span><br><span class="line">                    <span class="keyword">if</span> (xpn != <span class="literal">null</span>)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)xpn).prev = x;</span><br><span class="line">                    moveRootToFront(tab, balanceInsertion(root, x));</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个方法是用来链表尝试转换成红黑树的  </span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> hash)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">            <span class="comment">//当数组长度小于64的时候我们进行扩容，将链表的值散落的落在数组上来提高查找效率而不转化成红黑树</span></span><br><span class="line">            resize();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="literal">null</span>);</span><br><span class="line">                <span class="keyword">if</span> (tl == <span class="literal">null</span>)</span><br><span class="line">                    hd = p;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    p.prev = tl;</span><br><span class="line">                    tl.next = p;</span><br><span class="line">                &#125;</span><br><span class="line">                tl = p;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span> ((tab[index] = hd) != <span class="literal">null</span>)</span><br><span class="line">                hd.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">resize()方法</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line">        <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    变量用处：1.oldTab :记录老的数组</span></span><br><span class="line"><span class="comment">    2.oldCap:记录老的容量，老数组为空则为0</span></span><br><span class="line"><span class="comment">    3.oldThr:记录原扩容阈值</span></span><br><span class="line"><span class="comment">    4.newcap:记录新的容量</span></span><br><span class="line"><span class="comment">    5.newThr:记录新的扩容阈值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//当老数组中存在元素时走这个分支</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">                <span class="comment">//如果老数组大于等于最大限制容量，则扩容阈值为Integer最大值</span></span><br><span class="line">                <span class="comment">//这个情况下数组已经达到了最大值，不能再扩容</span></span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">           <span class="comment">//newCap是oldCap左移一位即newCap是oldCap的两倍</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                <span class="comment">//如果老数组扩大两倍还小于数组最大限制，并且老数组大于等于默认容量 </span></span><br><span class="line">                <span class="comment">//则设置新的阈值：为老阈值两倍</span></span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//当老数组不存在元素时</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">            <span class="comment">//如果老数组阈值大于0，则新数组的容量就是老数组的阈值</span></span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">            <span class="comment">//如果老数组阈值小于等于0  就进行默认的方式进行扩容</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">            <span class="comment">//新数组的容量为默认的数值(16)</span></span><br><span class="line">            <span class="comment">//新数组的扩容阈值为(扩容因子*初始容量)= 0.75*16=12</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">newThr==0有两种情况 1.oldCap&gt;=MAXIMUM_CAPACITY 即老数组的容量达到极限</span></span><br><span class="line"><span class="comment">  2.oldCap&lt;=0&amp;&amp;oldThr&gt;0 即老数组不存在元素，且老数组阈值不为0</span></span><br><span class="line"><span class="comment">当老数组不存在元素但是老数组阈值不为0则说明  它经过tableSizeFor()方法设置过初始阈值</span></span><br><span class="line"><span class="comment">我们通过这个resize方法这个分支调整新的阈值  </span></span><br><span class="line"><span class="comment">例如tableSizeFor()之后初始阈值为16,经过这个调整会变成16*0.75=12</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)newCap * loadFactor;</span><br><span class="line">            <span class="comment">//ft=新数组容量*加载因子  用来记录新数组的扩容阈值</span></span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">            <span class="comment">//如果新数组容量没达到极限并且扩容阈值小于极限 则新数组的扩容阈值为计算出的ft 反之阈值则是Integer的最大值</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将新阈值传入变量threshold中</span></span><br><span class="line">        threshold = newThr;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">        <span class="comment">//创建Node[]数组，传入newTab中  我们在构造方法中没有见到创建数组的操作，而在resize()中见到了创造数组</span></span><br><span class="line">    <span class="comment">//第一次put的时候调用resize方法创建数组 为了延时加载，提高效率</span></span><br><span class="line">    </span><br><span class="line">    table = newTab;</span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果老数组非空</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                <span class="comment">//遍历老数组  j作为索引值，当j小于老数组容量时条件成立</span></span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//如果老数组索引位置上有元素 则交给中间变量e记录  然后将这个位置置为空</span></span><br><span class="line">                    oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">                        <span class="comment">//如果e的后继结点为null，因为e的位置是在数组上所以这个条件成立时说明这个位置只有一个元素</span></span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    则将e.hash&amp;(newCap-1)计算出索引值index，将e存入newTab[index]中</span></span><br><span class="line"><span class="comment">                    这个index很熟悉我们好像在哪里见过？</span></span><br><span class="line"><span class="comment">                    if ((p = tab[i = (n - 1) &amp; hash]) == null)</span></span><br><span class="line"><span class="comment">                    put方法中的条件判断中出现了这个索引计算公式</span></span><br><span class="line"><span class="comment">                    说明新索引值和老索引值用的是同一个计算公式</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                    <span class="comment">//将e存入新数组的新下标位置即可</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        <span class="comment">//如果e是红黑树结构 则拆分红黑树 </span></span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                        <span class="comment">//反之e是链表</span></span><br><span class="line">                        </span><br><span class="line">                        Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                      <span class="comment">/*</span></span><br><span class="line"><span class="comment">                      变量</span></span><br><span class="line"><span class="comment">                      lohead:记录链表旧位置的头结点</span></span><br><span class="line"><span class="comment">                      loTail:记录链表旧位置的尾结点</span></span><br><span class="line"><span class="comment">                      hihead:记录链表新位置的头结点</span></span><br><span class="line"><span class="comment">                      hitial:记录链表新位置的尾结点</span></span><br><span class="line"><span class="comment">                      */</span>  </span><br><span class="line">                        </span><br><span class="line">                        Node&lt;K,V&gt; next;</span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                            <span class="comment">//将next指向e的后置节点</span></span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="comment">//如果当前位置哈希和老数组容量做与运算等于0</span></span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                    <span class="comment">//如果旧链表尾结点为空</span></span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="comment">//则将e置为头结点</span></span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    <span class="comment">//将尾结点的后置结点置为e</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                <span class="comment">//则链表旧位置的尾结点为e</span></span><br><span class="line">                                loTail = e;</span><br><span class="line">                                </span><br><span class="line">                                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                                这段好像有点字都认识，但是合在一起就不知道什么意思了</span></span><br><span class="line"><span class="comment">                                再重新读一遍，如果经过运算等于0条件成立</span></span><br><span class="line"><span class="comment">                                如果旧链表尾结点没数据，则将e置于头结点</span></span><br><span class="line"><span class="comment">                                如果旧链表结尾有数据，则将e插入链表尾部</span></span><br><span class="line"><span class="comment">                                比如第一次插入就是没数据，e插入链表中作为头结点和尾结点</span></span><br><span class="line"><span class="comment">                                第二次插入数据时，e插入链表尾部，并将尾结点指针往后移动</span></span><br><span class="line"><span class="comment">                                ---</span></span><br><span class="line"><span class="comment">                                这段代码的意思是如果当前位置哈希和老数组容量做与运算等于0 则保持位置不变</span></span><br><span class="line"><span class="comment">                                */</span></span><br><span class="line">                                </span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="comment">//反之则说明要变动位置，这里与上面原理一样，不过是在新的位置</span></span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                      </span><br><span class="line">                        </span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                            loTail.next = <span class="literal">null</span>;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                            <span class="comment">//结束循环之后旧链表位置不变的存入同一个下标中</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                            hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                            <span class="comment">//结束循环之后，链表要变动位置的要存入下标为:老下标+老数组容量</span></span><br><span class="line">                            </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br><span class="line">小结:</span><br><span class="line">这里告诉我们数组扩容的原理以及元素位置的处理:</span><br><span class="line"><span class="number">1.</span>数组    存入下标为e.hash &amp; (newCap - <span class="number">1</span>)中</span><br><span class="line"><span class="number">2.</span>红黑树  拆分红黑树</span><br><span class="line">            <span class="number">3.</span>链表   如果是</span><br><span class="line">                (e.hash &amp; oldCap) == <span class="number">0</span>则原位置不变</span><br><span class="line">                反之</span><br><span class="line">新链表位置为原下标+老数组容量</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">split</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, <span class="type">int</span> index, <span class="type">int</span> bit)</span> &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; b = <span class="built_in">this</span>;</span><br><span class="line">            <span class="comment">// Relink into lo and hi lists, preserving order</span></span><br><span class="line">            TreeNode&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">            TreeNode&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lc</span> <span class="operator">=</span> <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; e = b, next; e != <span class="literal">null</span>; e = next) &#123;</span><br><span class="line">                next = (TreeNode&lt;K,V&gt;)e.next;</span><br><span class="line">                e.next = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> ((e.hash &amp; bit) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e.prev = loTail) == <span class="literal">null</span>)</span><br><span class="line">                        loHead = e;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        loTail.next = e;</span><br><span class="line">                    loTail = e;</span><br><span class="line">                    ++lc;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e.prev = hiTail) == <span class="literal">null</span>)</span><br><span class="line">                        hiHead = e;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        hiTail.next = e;</span><br><span class="line">                    hiTail = e;</span><br><span class="line">                    ++hc;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (loHead != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">                    tab[index] = loHead.untreeify(map);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    tab[index] = loHead;</span><br><span class="line">                    <span class="keyword">if</span> (hiHead != <span class="literal">null</span>) <span class="comment">// (else is already treeified)</span></span><br><span class="line">                        loHead.treeify(tab);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (hiHead != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">                    tab[index + bit] = hiHead.untreeify(map);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    tab[index + bit] = hiHead;</span><br><span class="line">                    <span class="keyword">if</span> (loHead != <span class="literal">null</span>)</span><br><span class="line">                        hiHead.treeify(tab);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hash()方法</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*当Key为空的时候返回0,说明支持Null值传入</span></span><br><span class="line"><span class="comment">  当Key非空时  key经过hashcode()传入h中 再与h右移16位进行异或运算  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">其实我们还有一些东西没有讲到 就是前面put方法中i = (n - <span class="number">1</span>) &amp; hash的意义在哪</span><br><span class="line">参数n是数组长度或者经过resize()扩容后的数组长度，那么n常是二的倍数</span><br><span class="line">n的表现形式类似为<span class="number">0000</span> .... <span class="number">0000</span> <span class="number">1000</span>   直接与hash值做&amp;运算那么结果只跟数组长度有关</span><br><span class="line">则n-<span class="number">1</span>的二进制为 <span class="number">0000</span> .... <span class="number">0000</span> <span class="number">0111</span> </span><br><span class="line">再与hash做与运算，可以降低hash碰撞</span><br><span class="line">    </span><br><span class="line">h ^ (h&gt;&gt;&gt;<span class="number">16</span>)的意义</span><br><span class="line">假设有一个哈希值为 <span class="number">11000000</span> <span class="number">00111100</span>  <span class="number">11000000</span> <span class="number">00110011</span></span><br><span class="line">我们直接与n-<span class="number">1</span>做&amp;运算 <span class="number">0000</span> .... <span class="number">0000</span> <span class="number">0111</span>  那么只有低位有效与高位无关</span><br><span class="line">    </span><br><span class="line">h和进行h的无符号右移<span class="number">16</span>位异或运算        <span class="number">00000000</span> <span class="number">00000000</span>  <span class="number">11000000</span> <span class="number">00111100</span></span><br><span class="line">    ^  <span class="number">11000000</span> <span class="number">00111100</span>  <span class="number">11000000</span> <span class="number">00110011</span></span><br><span class="line">那么高位也能参与运算 所以能降低hash碰撞</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"> get()方法</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="literal">null</span> ? <span class="literal">null</span> : e.value;</span><br><span class="line">    <span class="comment">//将key和hash值传入getNode()方法中， 最后返回null或者getNode取得的结点的value值</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> hash, Object key)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="type">int</span> n; K k;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;(first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//数组非空且数组中存有数据，所以取得数组中索引的第一个结点</span></span><br><span class="line">            <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">                ((k = first.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="comment">//如果第一个结点哈希值相同，并且Key的地址或者值相同 则说明找到元素就是第一个元素，直接返回</span></span><br><span class="line">                <span class="keyword">return</span> first;</span><br><span class="line">            <span class="keyword">if</span> ((e = first.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//如果头结点还有后置结点，则取出后置结点</span></span><br><span class="line">                <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="comment">//如果这个是红黑树 调用红黑树的getTreeNode()方法</span></span><br><span class="line">                    <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="comment">//反之就是普通的链表</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="comment">//判断哈希值相同，并且Key的地址或者值相同 则说明找到元素，返回元素e</span></span><br><span class="line">                        <span class="keyword">return</span> e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);<span class="comment">//当后置结点为空的时候结束循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断结束说明没有找到这个Key对应的结点，返回NULL</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title function_">getTreeNode</span><span class="params">(<span class="type">int</span> h, Object k)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ((parent != <span class="literal">null</span>) ? root() : <span class="built_in">this</span>).find(h, k, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="4、HashMap在jdk1-7产生死循环"   >          <a href="#4、HashMap在jdk1-7产生死循环" class="heading-link"><i class="fas fa-link"></i></a><a href="#4、HashMap在jdk1-7产生死循环" class="headerlink" title="4、HashMap在jdk1.7产生死循环"></a>4、HashMap在jdk1.7产生死循环</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">因为HashMap在<span class="number">1.7</span>的时候采用的是头插法，所以在并发情况下扩容可能会产生死循环</span><br><span class="line"></span><br><span class="line">正常情况A-&gt;B-&gt;C  那么当扩容时，应该是C-&gt;B-&gt;A</span><br><span class="line"></span><br><span class="line">并发扩容下的异常情况  A-&gt;B-&gt;C  假设现在有两个线程T1,线程T2</span><br><span class="line">那么此时T1和T2指向A结点，并且T1.NEXT和T2.NEXT都指向B结点</span><br><span class="line">  线程T1进行扩容，线程T2进行休眠</span><br><span class="line">  T1扩容之后ABC的关系变成了==&gt;  C-&gt;B&gt;A  </span><br><span class="line">  线程T2在T1在扩容时是不可知的。那么线程T2指向在A结点而T2.NEXT指向B  但是因为扩容之后B.NEXT是A </span><br><span class="line">  这就是死循环</span><br></pre></td></tr></table></div></figure>        <h3 id="2、HashTable"   >          <a href="#2、HashTable" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、HashTable" class="headerlink" title="2、HashTable"></a>2、HashTable</h3>      <p>基本变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;?,?&gt;[] table;</span><br><span class="line"><span class="comment">//定义数组用来存储数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> count;</span><br><span class="line"><span class="comment">//定义一个变量用来记录哈希表中的个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> threshold;</span><br><span class="line"><span class="comment">//扩容阈值</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">float</span> loadFactor;</span><br><span class="line"><span class="comment">//负载因子</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ARRAY_SIZE</span> <span class="operator">=</span> Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">modCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></div></figure>        <h4 id="1、构造方法"   >          <a href="#1、构造方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、构造方法" class="headerlink" title="1、构造方法"></a>1、构造方法</h4>      <p>1.空参构造</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Hashtable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">11</span>, <span class="number">0.75f</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个默认的哈希表 容量为11 负载因子为0.75</span></span><br></pre></td></tr></table></div></figure><p>2.有参构造</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Hashtable</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(initialCapacity, <span class="number">0.75f</span>);</span><br><span class="line">        <span class="comment">//创建一个指定容量，负载因子为0.75的哈希表</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Hashtable</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//当指定容量为负数时抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="comment">//当加载因子为空或者小于等于0时抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Load: &quot;</span>+loadFactor);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity==<span class="number">0</span>)</span><br><span class="line">        <span class="comment">//当指定容量为0时，将转化为1</span></span><br><span class="line">            initialCapacity = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">        table = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;?,?&gt;[initialCapacity];</span><br><span class="line">    <span class="comment">//创建一个指定容量的哈希表</span></span><br><span class="line">        threshold = (<span class="type">int</span>)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//扩容阈值，在指定容量*0.75和最大容量+1之间的最小值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Hashtable</span><span class="params">(Map&lt;? extends K, ? extends V&gt; t)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(Math.max(<span class="number">2</span>*t.size(), <span class="number">11</span>), <span class="number">0.75f</span>);</span><br><span class="line">    putAll(t);</span><br><span class="line">    <span class="comment">//传入一个存在的map,直接创建负载因子为0.75,容量为原集合的两倍或者11之间的最大值的哈希表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="2、常用方法"   >          <a href="#2、常用方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、常用方法" class="headerlink" title="2、常用方法"></a>2、常用方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">put方法</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="comment">// Make sure the value is not null</span></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果value为空则抛出异常 说明不支持空值</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">        Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> key.hashCode();</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="comment">//取得哈希 然后对数组长度做模运算, 获得索引值</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">        <span class="keyword">for</span>(; entry != <span class="literal">null</span> ; entry = entry.next) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span><br><span class="line">            <span class="comment">//如果key值相同则返回老值用新值替代老值</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">old</span> <span class="operator">=</span> entry.value;</span><br><span class="line">                entry.value = value;</span><br><span class="line">                <span class="keyword">return</span> old;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        addEntry(hash, key, value, index);</span><br><span class="line">    <span class="comment">//当key值不存在时添加元素</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">        <span class="keyword">if</span> (count &gt;= threshold) &#123;</span><br><span class="line">            <span class="comment">// Rehash the table if the threshold is exceeded</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//当哈希表的元素个数大于等于阈值 调用rehash()扩容</span></span><br><span class="line">            </span><br><span class="line">            rehash();</span><br><span class="line"></span><br><span class="line">            tab = table;</span><br><span class="line">            hash = key.hashCode();</span><br><span class="line">            index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Creates the new entry.</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) tab[index];</span><br><span class="line">        tab[index] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">    <span class="comment">//因为数据不存在所以直接插入到哈希表中 并且记录个数++</span></span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rehash方法</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">rehash</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> table.length;</span><br><span class="line">    <span class="comment">//取出老哈希表长度</span></span><br><span class="line">        Entry&lt;?,?&gt;[] oldMap = table;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> (oldCapacity &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//新的容量为老容量的两倍+1</span></span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (oldCapacity == MAX_ARRAY_SIZE)</span><br><span class="line">                <span class="comment">// Keep running with MAX_ARRAY_SIZE buckets</span></span><br><span class="line">                <span class="comment">//如果老数组达到了上限，直接返回</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">//新容量如果超过了上限,则新容量为上限</span></span><br><span class="line">            newCapacity = MAX_ARRAY_SIZE;</span><br><span class="line">        &#125;</span><br><span class="line">        Entry&lt;?,?&gt;[] newMap = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;?,?&gt;[newCapacity];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作数+1</span></span><br><span class="line">        modCount++;</span><br><span class="line">    </span><br><span class="line">        threshold = (<span class="type">int</span>)Math.min(newCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//记录新阈值为 新容量*负载因子和最大上限+1之间的最小值</span></span><br><span class="line">        table = newMap;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> oldCapacity ; i-- &gt; <span class="number">0</span> ;) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;K,V&gt; old = (Entry&lt;K,V&gt;)oldMap[i] ; old != <span class="literal">null</span> ; ) &#123;</span><br><span class="line">                <span class="comment">//取出每一个元素</span></span><br><span class="line">                Entry&lt;K,V&gt; e = old;</span><br><span class="line">                old = old.next;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (e.hash &amp; <span class="number">0x7FFFFFFF</span>) % newCapacity;</span><br><span class="line">                e.next = (Entry&lt;K,V&gt;)newMap[index];</span><br><span class="line">                newMap[index] = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//将每一个元素放到扩容后的新数组中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get方法</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> key.hashCode();</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="literal">null</span> ; e = e.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">                <span class="keyword">return</span> (V)e.value;</span><br><span class="line">    <span class="comment">//当哈希值存在且Key值存在时 返回对应结点的Value           </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//返回NUll 代表不存在这个K-V对</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="3、TreeMap"   >          <a href="#3、TreeMap" class="heading-link"><i class="fas fa-link"></i></a><a href="#3、TreeMap" class="headerlink" title="3、TreeMap"></a>3、TreeMap</h3>      <p>基本变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//这个树的比较器,如果使用元素的自然排序则为null</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="built_in">super</span> K&gt; comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根节点</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; root;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//用于统计树有多少个实体</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//计数器，统计操作次数</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">modCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Red-black mechanics</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">RED</span>   <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">BLACK</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="1、构造方法-1"   >          <a href="#1、构造方法-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、构造方法-1" class="headerlink" title="1、构造方法"></a>1、构造方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>空参构造</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">()</span> &#123;</span><br><span class="line">        comparator = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个比较器为空的树,排序方法为自然排序</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>有参构造</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> K&gt; comparator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line"><span class="comment">//传入比较器，构造一个指定比较器的空树</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">        comparator = <span class="literal">null</span>;</span><br><span class="line">        putAll(m);</span><br><span class="line"><span class="comment">//传入已有map，构造一个自然比较的树，然后调用putAll()方法把元素存入</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">(SortedMap&lt;K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">        comparator = m.comparator();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            buildFromSorted(m.size(), m.entrySet().iterator(), <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (java.io.IOException cannotHappen) &#123;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException cannotHappen) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//传入已有的SortedMap,取得原有map的构造器 调用buildFormSorted方法 创建一个红黑树</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="2、常用方法-1"   >          <a href="#2、常用方法-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、常用方法-1" class="headerlink" title="2、常用方法"></a>2、常用方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">put方法</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        Entry&lt;K,V&gt; t = root;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果r==null则说明这是一个空树，根节点为空</span></span><br><span class="line">            compare(key, key); <span class="comment">// type (and possibly null) check</span></span><br><span class="line"><span class="comment">//不允许空值作为Key值传入</span></span><br><span class="line">            </span><br><span class="line">            root = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, <span class="literal">null</span>);</span><br><span class="line">            size = <span class="number">1</span>;</span><br><span class="line">            modCount++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//将数据插入到根节点,树的大小+1,记录操作数++ 结束方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//反之，这个树不是一个空树</span></span><br><span class="line">        <span class="type">int</span> cmp;</span><br><span class="line">        Entry&lt;K,V&gt; parent;</span><br><span class="line">        <span class="comment">// split comparator and comparable paths</span></span><br><span class="line">        Comparator&lt;? <span class="built_in">super</span> K&gt; cpr = comparator;</span><br><span class="line">    <span class="comment">//获得比较器cpr</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (cpr != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">//通过比较器的比较方法从根节点开始找是否有相同结点</span></span><br><span class="line">                <span class="comment">//如果比根节点小则往左子树找,比根节点大则往右子树找,找到相同结点就调用setValue方法更新数据</span></span><br><span class="line">                parent = t;</span><br><span class="line">                cmp = cpr.compare(key, t.key);</span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    t = t.left;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    t = t.right;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//当比较器为空的时候,通过自然排序找是否有相同的结点</span></span><br><span class="line">            <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                Comparable&lt;? <span class="built_in">super</span> K&gt; k = (Comparable&lt;? <span class="built_in">super</span> K&gt;) key;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                parent = t;</span><br><span class="line">                cmp = k.compareTo(t.key);</span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    t = t.left;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    t = t.right;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//运行到这里 说明树有数据但是树中没有相同的数据，并且经过上面查找循环parent已经指向了叶子结点</span></span><br><span class="line">        Entry&lt;K,V&gt; e = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, parent);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">            parent.left = e;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            parent.right = e;</span><br><span class="line">    <span class="comment">//将新的数据作为找到的叶子结点的子节点插入</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        fixAfterInsertion(e);</span><br><span class="line">    <span class="comment">//调用方法对树进行调整</span></span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//调整红黑树的结构</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fixAfterInsertion</span><span class="params">(Entry&lt;K,V&gt; x)</span> &#123;</span><br><span class="line">        x.color = RED;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (x != <span class="literal">null</span> &amp;&amp; x != root &amp;&amp; x.parent.color == RED) &#123;</span><br><span class="line">            <span class="keyword">if</span> (parentOf(x) == leftOf(parentOf(parentOf(x)))) &#123;</span><br><span class="line">                Entry&lt;K,V&gt; y = rightOf(parentOf(parentOf(x)));</span><br><span class="line">                <span class="keyword">if</span> (colorOf(y) == RED) &#123;</span><br><span class="line">                    setColor(parentOf(x), BLACK);</span><br><span class="line">                    setColor(y, BLACK);</span><br><span class="line">                    setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                    x = parentOf(parentOf(x));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (x == rightOf(parentOf(x))) &#123;</span><br><span class="line">                        x = parentOf(x);</span><br><span class="line">                        rotateLeft(x);</span><br><span class="line">                    &#125;</span><br><span class="line">                    setColor(parentOf(x), BLACK);</span><br><span class="line">                    setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                    rotateRight(parentOf(parentOf(x)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Entry&lt;K,V&gt; y = leftOf(parentOf(parentOf(x)));</span><br><span class="line">                <span class="keyword">if</span> (colorOf(y) == RED) &#123;</span><br><span class="line">                    setColor(parentOf(x), BLACK);</span><br><span class="line">                    setColor(y, BLACK);</span><br><span class="line">                    setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                    x = parentOf(parentOf(x));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (x == leftOf(parentOf(x))) &#123;</span><br><span class="line">                        x = parentOf(x);</span><br><span class="line">                        rotateRight(x);</span><br><span class="line">                    &#125;</span><br><span class="line">                    setColor(parentOf(x), BLACK);</span><br><span class="line">                    setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                    rotateLeft(parentOf(parentOf(x)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        root.color = BLACK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get方法</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        Entry&lt;K,V&gt; p = getEntry(key);</span><br><span class="line">    <span class="comment">//调用getEntry方法 将Key传入</span></span><br><span class="line">        <span class="keyword">return</span> (p==<span class="literal">null</span> ? <span class="literal">null</span> : p.value);</span><br><span class="line">    <span class="comment">//如果key值对应的Entry不存在则返回null，如果存在则返回对应的value值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title function_">getEntry</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="comment">// Offload comparator-based version for sake of performance</span></span><br><span class="line">        <span class="keyword">if</span> (comparator != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> getEntryUsingComparator(key);</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="comment">//返回当Key为空则抛出空指针异常</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            Comparable&lt;? <span class="built_in">super</span> K&gt; k = (Comparable&lt;? <span class="built_in">super</span> K&gt;) key;</span><br><span class="line">    <span class="comment">//获得比较器</span></span><br><span class="line">    </span><br><span class="line">        Entry&lt;K,V&gt; p = root;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">/*如果p存在，则调用compareTo()方法  通过比较器的排序方法比较</span></span><br><span class="line"><span class="comment">            if cpm==0 则说明存在  直接返回</span></span><br><span class="line"><span class="comment">               cpm&lt;0  未找到结点,找左子树</span></span><br><span class="line"><span class="comment">               cpm&gt;0  未找到结点，找右子树</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> k.compareTo(p.key);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                p = p.left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                p = p.right;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">size()方法</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用于返回树的大小</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="4、LinkedHashMap"   >          <a href="#4、LinkedHashMap" class="heading-link"><i class="fas fa-link"></i></a><a href="#4、LinkedHashMap" class="headerlink" title="4、LinkedHashMap"></a>4、LinkedHashMap</h3>      <p>基本变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">3801124242820219131L</span>;</span><br><span class="line"><span class="comment">//序列化ID</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; head;</span><br><span class="line"><span class="comment">//头结点指针</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; tail;</span><br><span class="line">   <span class="comment">//尾结点指针</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The iteration ordering method for this linked hash map: &lt;tt&gt;true&lt;/tt&gt;for access-order, &lt;tt&gt;false&lt;/tt&gt; for insertion-order.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//哈希映射的迭代排序方法：true表示访问顺序，false表示插入顺序。</span></span><br><span class="line">   <span class="keyword">final</span> <span class="type">boolean</span> accessOrder;</span><br></pre></td></tr></table></div></figure>        <h4 id="1、构造方法-2"   >          <a href="#1、构造方法-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、构造方法-2" class="headerlink" title="1、构造方法"></a>1、构造方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>无参构造</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        accessOrder = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//调用父类的调用方法 即默认容器大小为16 负载因子为0.75  迭代排序方法为false表示插入顺序。</span></span><br><span class="line">    <span class="comment">//创建一个插入序的LinkedHashMap</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>有参构造</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(initialCapacity, loadFactor);</span><br><span class="line">        accessOrder = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//传入容量大小和负载因子,然后调用父类的构造方法  创建一个插入序的LinkedHashMap</span></span><br><span class="line">    &#125; </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(initialCapacity);</span><br><span class="line">        accessOrder = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//传入容量大小,然后调用父类的构造方法  创建一个插入序的LinkedHashMap</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        accessOrder = <span class="literal">false</span>;</span><br><span class="line">        putMapEntries(m, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//调用父类的空参构造,创建一个插入序的LinkedHashMap</span></span><br><span class="line">    <span class="comment">//调用putMapEntries()方法把元素存入</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">(<span class="type">int</span> initialCapacity,</span></span><br><span class="line"><span class="params">                         <span class="type">float</span> loadFactor,</span></span><br><span class="line"><span class="params">                         <span class="type">boolean</span> accessOrder)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(initialCapacity, loadFactor);</span><br><span class="line">        <span class="built_in">this</span>.accessOrder = accessOrder;</span><br><span class="line">    <span class="comment">//传入容量、负载因子、排序顺序   创建一个自定义容量、负载因子和排序顺序的LinkedHashMap</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">小结:在如果不传入排序方式，默认都是创建一个插入序的LinkedHashMap</span><br></pre></td></tr></table></div></figure>        <h4 id="2、常用方法-2"   >          <a href="#2、常用方法-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、常用方法-2" class="headerlink" title="2、常用方法"></a>2、常用方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br></pre></td><td class="code"><pre><span class="line">put方法</span><br><span class="line">说实话我找了一会发现没有put方法在LinkedHashMap中,这怎么可能呢?那就应该是没有重写Put方法而是直接调用了父类的put方法,我们拿回原来HashMap中的Put方法进来</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//将Key,Value传入 然后调用putVal()进行返回;</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,<span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    参数</span></span><br><span class="line"><span class="comment">    1:hash值  这个是调用了hash()方法之后的结果</span></span><br><span class="line"><span class="comment">       2:key值   这个是传入的Key</span></span><br><span class="line"><span class="comment">       3:Value值 这个是传入的Value值</span></span><br><span class="line"><span class="comment">       4:onlyIfAbsent  表示如果存在键相同时是否更新旧值为新值 true是不更新旧值 false是更新旧值为新值</span></span><br><span class="line"><span class="comment">       5:evict         传入true</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义一个Node[]数组 tab </span></span><br><span class="line"><span class="comment">    定义一个Node结点 p</span></span><br><span class="line"><span class="comment">    定义一个变量n  用于记录数组长度</span></span><br><span class="line"><span class="comment">    定义一个变量i  用于记录索引</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//先将本地的table数组赋值给tab 再把tab的长度赋值给n  </span></span><br><span class="line">            <span class="comment">//如果tab为空或者长度为0，将tab进行resize()方法扩容之后的长度赋值给n</span></span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">//将n-1和hash值做与运算 赋值给索引i 如果再将结点p指向tab[i] 并且判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">            <span class="comment">//如果tab[i]为空即这个位置为空 则调用newNode()方法，将hash值，K,V，和下一个结点为NULL传入</span></span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Node&lt;K,V&gt; newNode(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span></span><br><span class="line"><span class="comment">        return new Node&lt;&gt;(hash, key, value, next);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span></span><br><span class="line"><span class="comment">            this.hash = hash;</span></span><br><span class="line"><span class="comment">            this.key = key;</span></span><br><span class="line"><span class="comment">            this.value = value;</span></span><br><span class="line"><span class="comment">            this.next = next;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//反之  tab[i]不为空 即这个位置有元素了 下面第一个IF有三种情况</span></span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) </span><br><span class="line">            <span class="comment">//1.如果这个位置p的hash和传入的hash相同 并且 (p的key和传入的k地址相同||p的key和key值相同)</span></span><br><span class="line">                e = p;</span><br><span class="line">            <span class="comment">//则将这个位置p赋值给结点e，并且跳出第一个if语句</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="comment">//反之位置P和传入的数据不同 ，判断 p instanceof TreeNode 即判断p是否为树(红黑树)</span></span><br><span class="line">                <span class="comment">//如果是则添加到红黑树里面 调用putTreeVal()方法</span></span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//最终位置P和传入的数据不同也不是红黑树结构 ==&gt;那么应该是链表结构</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="comment">//死循环 用一个变量binCount记录链表长度</span></span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">//当p不指向下一个结点，则将这个数据变成新的结点插入p的后继节点中</span></span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                        <span class="comment">//对循环次数做判断 </span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">        <span class="comment">//当binCount&gt;=7的时候说明已经至少循环7次,即添加此次数据之后链表长度应该到8了,调用treeifyBin()方法，尝试转化成红黑树</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//如果e的hash值相同且key相同(地址或值)相同 则直接跳出循环 </span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">//将指针p指向下一个结点 [在if ((e = p.next) == null) &#123;...&#125;判断时e指向了p的下一个结点]</span></span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//-------------这里结束第一个IF语句---------------------------</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                <span class="comment">//如果e不为空 即说明e和新值发生了哈希碰撞，e为老结点</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                    <span class="comment">//onlyIfAbsent是用来判断是否更新旧值的，为False时说明更新旧值为新值</span></span><br><span class="line">                    <span class="comment">//支持更新旧值或者老值为NUll时，新值代替旧值</span></span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                // Callbacks to allow LinkedHashMap post-actions</span></span><br><span class="line"><span class="comment">       void afterNodeAccess(Node&lt;K,V&gt; p) &#123; &#125; 这个方法仅允许LinkedHashMap调用</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//返回老值</span></span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">    <span class="comment">//操作记录数++</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断添加操作之后数组是否需要进行扩容</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();  </span><br><span class="line">    <span class="comment">//调用resize()方法扩容</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//空实现</span></span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    void afterNodeInsertion(boolean evict) &#123; &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我们不难得出里面有两个方法仅供LinkedHashMap调用</span><br><span class="line">因为HashMap中是空实现，那我们就需要关注这两个方法，这个会在常用方法区底部详细说说</span><br><span class="line">afterNodeAccess(e);</span><br><span class="line">afterNodeInsertion(evict);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Remove方法  因为有上面put方法的经验,所以直接找到父类的Remove方法</span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>)) == <span class="literal">null</span> ?</span><br><span class="line">            <span class="literal">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">removeNode</span><span class="params">(<span class="type">int</span> hash, Object key, Object value,</span></span><br><span class="line"><span class="params">                               <span class="type">boolean</span> matchValue, <span class="type">boolean</span> movable)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, index;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">            Node&lt;K,V&gt; node = <span class="literal">null</span>, e; K k; V v;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                node = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key ||</span><br><span class="line">                             (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                            node = e;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        p = e;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                                 (value != <span class="literal">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="built_in">this</span>, tab, movable);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                    tab[index] = node.next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p.next = node.next;</span><br><span class="line">                ++modCount;</span><br><span class="line">                --size;</span><br><span class="line">                afterNodeRemoval(node);</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我们关注到这里有一个 afterNodeRemoval(node)方法，这个方法也是仅供LinkedHashMap调用</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">if</span> ((e = getNode(hash(key), key)) == <span class="literal">null</span>)</span><br><span class="line">            <span class="comment">//如果这个结点为空则返回空值说明不存在</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (accessOrder)</span><br><span class="line">            <span class="comment">//存在数据,如果排序是访问顺序的话调用afterNodeAccess()方法</span></span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//返回数据</span></span><br><span class="line">        <span class="keyword">return</span> e.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--------------------------底下是HashMap仅供LinkedHashMap的方法-----------------------</span><br><span class="line">afterNodeAccess方法</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">//移动结点到链表尾部 说明最近有被使用过    </span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> &#123; <span class="comment">// move node to last</span></span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line">        <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">            <span class="comment">//当accessOrder为true 即排序是访问顺序的LinkedHashMap</span></span><br><span class="line">            <span class="comment">//并且当尾结点不为传入的结点e的时候</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//这里执行的逻辑是链表的双端删除,将e结点前后的结点相互链接,然后将e放到链表的尾部</span></span><br><span class="line">            LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">                (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">            p.after = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (b == <span class="literal">null</span>)</span><br><span class="line">                head = a;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                b.after = a;</span><br><span class="line">            <span class="keyword">if</span> (a != <span class="literal">null</span>)</span><br><span class="line">                a.before = b;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                last = b;</span><br><span class="line">            <span class="keyword">if</span> (last == <span class="literal">null</span>)</span><br><span class="line">                head = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.before = last;</span><br><span class="line">                last.after = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tail = p;</span><br><span class="line">            ++modCount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">afterNodeInsertion方法</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//这里注释说可能用于删除最老的结点?而什么是最老结点?我想到了最久未被使用的结点</span></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">afterNodeInsertion</span><span class="params">(<span class="type">boolean</span> evict)</span> &#123; <span class="comment">// possibly remove eldest</span></span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; first;</span><br><span class="line">        <span class="keyword">if</span> (evict &amp;&amp; (first = head) != <span class="literal">null</span> &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class="line">            <span class="comment">//当evict为true 并且头结点非空 而且需要removeEldestEntry()方法返回true</span></span><br><span class="line">            <span class="comment">//而当看向removeEldestEntry方法,它是返回false的,所以这个方法放在插入数据之后很奇怪，因为不会调用</span></span><br><span class="line">            <span class="comment">//可能需要我们自己扩展重写方法，实现相应的删除头结点操作</span></span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> first.key;()方法返回<span class="literal">true</span></span><br><span class="line">            <span class="title function_">removeNode</span><span class="params">(hash(key)</span>, key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//回调父类的removeNode()方法删除结点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">afterNodeRemoval方法</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">afterNodeRemoval</span><span class="params">(Node&lt;K,V&gt; e)</span> &#123; <span class="comment">// unlink</span></span><br><span class="line">    <span class="comment">//链表的双端删除  将结点e两端结点项链，然后e因为没有引用会被GC给回收</span></span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">        p.before = p.after = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="literal">null</span>)</span><br><span class="line">            head = a;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b.after = a;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="literal">null</span>)</span><br><span class="line">            tail = b;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            a.before = b;</span><br><span class="line">    &#125;    </span><br></pre></td></tr></table></div></figure>        <h4 id="3、额外"   >          <a href="#3、额外" class="heading-link"><i class="fas fa-link"></i></a><a href="#3、额外" class="headerlink" title="3、额外"></a>3、额外</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">因为LinkedHashMap有afterNodeRemoval、afterNodeInsertion、afterNodeAccess三个特有的方法，提供一个思路用于实现LRU算法</span><br><span class="line">    </span><br><span class="line">LRU算法即=最近最少被使用，我们可以利用afterNodeAccess将最近使用过的结点放到链表的尾部，然后慢慢地头部结点就是最近最少未被使用的结点，当需要淘汰结点时我们将头部结点淘汰就完成了LRU算法的构成</span><br><span class="line"></span><br><span class="line">在这里仅仅提供思路</span><br></pre></td></tr></table></div></figure>        <h3 id="5、ConcurrentHashMap"   >          <a href="#5、ConcurrentHashMap" class="heading-link"><i class="fas fa-link"></i></a><a href="#5、ConcurrentHashMap" class="headerlink" title="5、ConcurrentHashMap"></a>5、ConcurrentHashMap</h3>      <p>【1.8以后】</p><p>基本变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="comment">//最大的容量 即1左移30位==&gt;1*2^30</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"><span class="comment">//默认的容量16,必须为2的幂次方(最少是1最大是MAXIMUM_CAPACITY)</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ARRAY_SIZE</span> <span class="operator">=</span> Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"><span class="comment">//最大的数组大小</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CONCURRENCY_LEVEL</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"><span class="comment">//默认的并发级别，未使用但是为了与老版本版本兼容而保留</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line"><span class="comment">//负载因子0.75</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">//链表转化为树的阈值为8</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"><span class="comment">//红黑树退化为链表阈值为6</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line"><span class="comment">//数组转化为树的阈值为64，最少是4*TREEIFY_THRESHOLD以避免调整大小阈值和树化阈值之间的冲突。</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TRANSFER_STRIDE</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">RESIZE_STAMP_BITS</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_RESIZERS</span> <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; (<span class="number">32</span> - RESIZE_STAMP_BITS)) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RESIZE_STAMP_SHIFT</span> <span class="operator">=</span> <span class="number">32</span> - RESIZE_STAMP_BITS;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Encodings for Node hash fields. </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOVED</span>     <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// hash for forwarding nodes  当前hash正在迁移</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEBIN</span>   <span class="operator">=</span> -<span class="number">2</span>; <span class="comment">// hash for roots of trees   当前hash是个树</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RESERVED</span>  <span class="operator">=</span> -<span class="number">3</span>; <span class="comment">// hash for transient reservations 当前hash已经被预定</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">HASH_BITS</span> <span class="operator">=</span> <span class="number">0x7fffffff</span>; <span class="comment">// usable bits of normal node hash  </span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Number of CPUS, to place bounds on some sizings */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NCPU</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------------- Fields -------------- */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The array of bins. Lazily initialized upon first insertion.</span></span><br><span class="line"><span class="comment">    * Size is always a power of two. Accessed directly by iterators.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The next table to use; non-null only while resizing.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Base counter value, used mainly when there is no contention,</span></span><br><span class="line"><span class="comment">    * but also as a fallback during table initialization</span></span><br><span class="line"><span class="comment">    * races. Updated via CAS.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">long</span> baseCount;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Table initialization and resizing control.  When negative, the</span></span><br><span class="line"><span class="comment">    * table is being initialized or resized: -1 for initialization,</span></span><br><span class="line"><span class="comment">    * else -(1 + the number of active resizing threads).  Otherwise,</span></span><br><span class="line"><span class="comment">    * when table is null, holds the initial table size to use upon</span></span><br><span class="line"><span class="comment">    * creation, or 0 for default. After initialization, holds the</span></span><br><span class="line"><span class="comment">    * next element count value upon which to resize the table.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">int</span> sizeCtl;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The next table index (plus one) to split while resizing.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">int</span> transferIndex;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Spinlock (locked via CAS) used when resizing and/or creating CounterCells.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">int</span> cellsBusy;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Table of counter cells. When non-null, size is a power of 2.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> CounterCell[] counterCells;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// views</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> KeySetView&lt;K,V&gt; keySet;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> ValuesView&lt;K,V&gt; values;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> EntrySetView&lt;K,V&gt; entrySet;</span><br></pre></td></tr></table></div></figure><p>1.如何理解ConcurrentHashMap的安全性</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       ConcurrentHashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">       <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> map.get(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">           <span class="keyword">if</span>(count==<span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="comment">//当count==null说明没有这个数据</span></span><br><span class="line">               map.put(<span class="string">&quot;count&quot;</span>,<span class="number">1</span>);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               map.put(<span class="string">&quot;count&quot;</span>,count+<span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*  当两个线程t1、t2进入程序中查询到count==null</span></span><br><span class="line"><span class="comment">       *   都进入if条件中，那么执行结果是执行两次put(&quot;count&quot;,1)，数据造成丢失</span></span><br><span class="line"><span class="comment">       *   ConcurrentHashMap是无法保证又写又查的情况下线程安全</span></span><br><span class="line"><span class="comment">       * */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//经过改造之后</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">           <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> map.get(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">           <span class="keyword">if</span>(count==<span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="comment">//当count==null说明没有这个数据</span></span><br><span class="line">               <span class="keyword">if</span>(map.putIfAbsent(<span class="string">&quot;count&quot;</span>,<span class="number">1</span>)==<span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="comment">//当执行putIfAbsent()方法执行成功则会返回null,我们就跳出循环</span></span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">if</span>(map.replace(<span class="string">&quot;count&quot;</span>,count,count+<span class="number">1</span>))&#123;</span><br><span class="line">                   <span class="comment">//我们利用CAS机制，修改数据</span></span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">/* 当两个线程t1、t2进入程序中查询到Count==null</span></span><br><span class="line"><span class="comment">       *  都进入IF条件中，我们假设先获得cpu的是t1,那么t1执行完putIFAbsent()方法之后得到返回null值跳出循环</span></span><br><span class="line"><span class="comment">       *  而t2再进入判断时就跳不出循环，第二次进入循环的时候就会走下面的分支</span></span><br><span class="line"><span class="comment">       *  使用replace方法对老值做替换</span></span><br><span class="line"><span class="comment">       *  这样我们就保证了两次操作的不丢失==&gt;数据的不被破坏</span></span><br><span class="line"><span class="comment">       * */</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="1、构造方法-3"   >          <a href="#1、构造方法-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、构造方法-3" class="headerlink" title="1、构造方法"></a>1、构造方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>无参构造</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">//创建一个默认容量为16的表【数组】   </span></span><br><span class="line"><span class="number">2.</span>有参构造</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</span><br><span class="line">                   MAXIMUM_CAPACITY :</span><br><span class="line">                   tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">this</span>.sizeCtl = cap;</span><br><span class="line">    <span class="comment">//把cap赋值给sizeCtl，创建一个指定大小的表</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> c - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sizeCtl = DEFAULT_CAPACITY;</span><br><span class="line">        putAll(m);</span><br><span class="line">     <span class="comment">//创建一个默认容量的数组，把数据都存入</span></span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(initialCapacity, loadFactor, <span class="number">1</span>);</span><br><span class="line">     <span class="comment">//调用ConcurrentHashMap(int initialCapacity,float loadFactor, int concurrencyLevel)方法</span></span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(<span class="type">int</span> initialCapacity,</span></span><br><span class="line"><span class="params">                             <span class="type">float</span> loadFactor, <span class="type">int</span> concurrencyLevel)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0.0f</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; concurrencyLevel)   <span class="comment">// Use at least as many bins</span></span><br><span class="line">            initialCapacity = concurrencyLevel;   <span class="comment">// as estimated threads</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> (<span class="type">long</span>)(<span class="number">1.0</span> + (<span class="type">long</span>)initialCapacity / loadFactor);</span><br><span class="line">        <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> (size &gt;= (<span class="type">long</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">            MAXIMUM_CAPACITY : tableSizeFor((<span class="type">int</span>)size);</span><br><span class="line">        <span class="built_in">this</span>.sizeCtl = cap;</span><br><span class="line">     <span class="comment">//创建一个指定大小，指定扩容因子的ConcurrentHashMap</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>经过上面的构造函数,我们基本都能发现有一个sizeCtl,我们详细说说sizeCtl有什么意义</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Table initialization and resizing control.  When negative, thetable is being initialized or resized: -1 for initialization, else -(1 + the number of active resizing threads).  Otherwise,when table is null, holds the initial table size to use upon creation, or 0 for default. After initialization, holds the next element count value upon which to resize the table.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">int</span> sizeCtl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sizeCtl用来代表现在数组的状态</span><br><span class="line">   sizeCtl== -<span class="number">1</span>  ---&gt;说明现在数组正在初始化</span><br><span class="line">   sizeCtl==  <span class="number">0</span>  ---&gt;说明数组未被初始化，用的默认容量<span class="number">16</span></span><br><span class="line">   sizeCtl&gt;   <span class="number">0</span> ---&gt;如果数组未被初始化，则记录数组的初始容量，如果已经初始化过，那么记录的是数组扩容阈值(容量*负载因子<span class="number">0.75</span>)</span><br><span class="line">   sizeCtl&lt;  -<span class="number">1</span>  ---&gt;说明数组正在扩容, 值为-(n+<span class="number">1</span>).n为正在扩容中的线程数</span><br></pre></td></tr></table></div></figure>        <h4 id="2、常用方法-3"   >          <a href="#2、常用方法-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、常用方法-3" class="headerlink" title="2、常用方法"></a>2、常用方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br></pre></td><td class="code"><pre><span class="line">Put方法 </span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(key, value, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//调用下面的putVal()方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Implementation for put and putIfAbsent */</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(K key, V value, <span class="type">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span> || value == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="comment">//说明Key和Value不允许设为空值，否则抛出空指针异常</span></span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> spread(key.hashCode());</span><br><span class="line">    <span class="comment">//得到Key对应的hash值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            <span class="comment">//设置一个临时表tab,然后死循环</span></span><br><span class="line">            </span><br><span class="line">            Node&lt;K,V&gt; f; <span class="type">int</span> n, i, fh;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            变量说明  f:表示数组索引i位置的数据 即tab[i]</span></span><br><span class="line"><span class="comment">             n:表示数组长度</span></span><br><span class="line"><span class="comment">             i:表示索引</span></span><br><span class="line"><span class="comment">             fh:tab[i]的哈希值</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//tab为空指针或者tab中没有数据,将数组长度由n记录,调用initTable()方法</span></span><br><span class="line">                tab = initTable();</span><br><span class="line">            <span class="comment">//把初始化之后的表给临时表table中,因为后面没有其他语句所以进入下一次循环</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//数组已经初始化了,将数据插入Map中    </span></span><br><span class="line">                <span class="comment">//取出索引i位置的数据交给f,如果f不存在，说明数组中这个位置为空</span></span><br><span class="line">                <span class="keyword">if</span> (casTabAt(tab, i, <span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(hash, key, value, <span class="literal">null</span>)))</span><br><span class="line">                    <span class="comment">//则将f以cas的方式插入数据 ==&gt;将索引i的数据以null设置成新结点</span></span><br><span class="line">                    <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            tabAt(数组,i) 表示获得索引为为i的数组元素即table[i]</span></span><br><span class="line"><span class="comment">            casTabAt(数组,1,2,3) 表示数组将索引i位置的数据以cas的方式从2修改到3</span></span><br><span class="line"><span class="comment">          </span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           </span><br><span class="line">            &#125;</span><br><span class="line">         </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Encodings for Node hash fields. </span></span><br><span class="line"><span class="comment">            static final int MOVED     = -1; // hash for forwarding nodes  当前hash正在迁移</span></span><br><span class="line"><span class="comment">            static final int TREEBIN   = -2; // hash for roots of trees   当前hash是个树</span></span><br><span class="line"><span class="comment">            static final int RESERVED  = -3; // hash for transient reservations 当前hash已经被预定</span></span><br><span class="line"><span class="comment">            static final int HASH_BITS = 0x7fffffff; // usable bits of normal node hash </span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                <span class="comment">//如果fh是MOVED的话 则说明当前数组在扩容，需要当前线程进行帮助数据迁移</span></span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//fh！= -1</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">oldVal</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                   <span class="comment">/*</span></span><br><span class="line"><span class="comment">                   对f进行加锁，而f是tab[i]这个位置的数据</span></span><br><span class="line"><span class="comment">                   tab[i]这个位置要么是1.一个结点</span></span><br><span class="line"><span class="comment">                   要么是2.一个结点挂着红黑树</span></span><br><span class="line"><span class="comment">                   要么是3.一个结点挂着链表</span></span><br><span class="line"><span class="comment">                   而对f进行加锁则意思是锁住f这个桶,即不锁住整个数组只是锁住索引i这个位置下的数据</span></span><br><span class="line"><span class="comment">                   */</span></span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        <span class="comment">//再一次对f进行判断</span></span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">//如果fh&gt;=0 说明是正常数据</span></span><br><span class="line">                            binCount = <span class="number">1</span>;</span><br><span class="line">                            <span class="comment">//将binCount计数器置为1  说明这有一个数据</span></span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                                <span class="comment">//将f赋值给结点e,进行死循环</span></span><br><span class="line">                                K ek;</span><br><span class="line">                                <span class="keyword">if</span> (e.hash == hash &amp;&amp;((ek = e.key) == key ||</span><br><span class="line">                                     (ek != <span class="literal">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                    <span class="comment">//如果e的哈希值和当前哈希值相同,并且当前key的地址或者内容相同</span></span><br><span class="line">                                    <span class="comment">//说明找到老的数据，提取到原数据放到oldval中</span></span><br><span class="line">                                    oldVal = e.val;</span><br><span class="line">                                    </span><br><span class="line">                                    </span><br><span class="line">                                    <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                        <span class="comment">//onlyIfAbsent为False时说明更新旧值为新值，为ture则不做处理</span></span><br><span class="line">                                        e.val = value;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                Node&lt;K,V&gt; pred = e;</span><br><span class="line">                                <span class="keyword">if</span> ((e = e.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                                    pred.next = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                              value, <span class="literal">null</span>);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            <span class="comment">//如果f是个树</span></span><br><span class="line">                            Node&lt;K,V&gt; p;</span><br><span class="line">                            binCount = <span class="number">2</span>;</span><br><span class="line">                            <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                           value)) != <span class="literal">null</span>) &#123;</span><br><span class="line">                                oldVal = p.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    p.val = value;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//判断是否需要转化成红黑树, 调用treeifyBin方法尝试转化</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                        treeifyBin(tab, i);</span><br><span class="line">                    <span class="keyword">if</span> (oldVal != <span class="literal">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> oldVal;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">    <span class="comment">//调用addCount方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Encodings for Node hash fields. </span></span><br><span class="line"><span class="comment">static final int MOVED     = -1; // hash for forwarding nodes  当前hash正在迁移</span></span><br><span class="line"><span class="comment">static final int TREEBIN   = -2; // hash for roots of trees   当前hash是个树</span></span><br><span class="line"><span class="comment">static final int RESERVED  = -3; // hash for transient reservations 当前hash已经被预定</span></span><br><span class="line"><span class="comment">static final int HASH_BITS = 0x7fffffff; // usable bits of normal node hash </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">spread</span><span class="params">(<span class="type">int</span> h)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (h ^ (h &gt;&gt;&gt; <span class="number">16</span>)) &amp; HASH_BITS;</span><br><span class="line">    <span class="comment">//HASH_BITS = 01111111 11111111 11111111 11111111  </span></span><br><span class="line">    <span class="comment">//计算出的哈希值与HASH_BITS做与运算保证结果是正数，因为负数有特殊的含义</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//initTable用于初始化表</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; <span class="type">int</span> sc;</span><br><span class="line">    <span class="comment">//循环判断是否为空，直到初始化成功</span></span><br><span class="line">        <span class="keyword">while</span> ((tab = table) == <span class="literal">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//当表为null或者表长度为0时,说明未被初始化</span></span><br><span class="line">            <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="comment">//sizeCtl&lt;0时说明正在扩容</span></span><br><span class="line">                <span class="comment">//当前线程放弃cpu的使用权，在这里自旋</span></span><br><span class="line">                Thread.<span class="keyword">yield</span>(); <span class="comment">// lost initialization race; just spin</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="comment">//当sizeCtl运行到这里，说明sc&gt;=0  利用cas将sizeCtl设置为-1意思是将他置为初始化</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">//再一次进行对表的判断，是否为空表 防止多线程情况下的多次初始化  </span></span><br><span class="line">                        <span class="comment">/*例如线程t2刚好运行到if底部的sc=n-(n&gt;&gt;&gt;2) 而线程t1运行到这个判断，如果不做判断则会多次初始化</span></span><br><span class="line"><span class="comment">                        所以这个再次判断是确保只初始化一次</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class="line">                        <span class="comment">//将sc大于0则设为sc,否则设置为默认的长度16</span></span><br><span class="line">                        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                        Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>&lt;?,?&gt;[n];</span><br><span class="line">                        table = tab = nt;</span><br><span class="line">                        sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                        <span class="comment">//将sc设为扩容阈值 n-n/4 即0.75n</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//更新sizeCtl设为扩容阈值</span></span><br><span class="line">                    sizeCtl = sc;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tab;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; Node&lt;K,V&gt; <span class="title function_">tabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class="type">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="type">boolean</span> <span class="title function_">casTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> i,</span></span><br><span class="line"><span class="params">                                        Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> U.compareAndSwapObject(tab, ((<span class="type">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Helps transfer if a resize is in progress.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//用于辅助线程迁移</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] nextTab; <span class="type">int</span> sc;</span><br><span class="line">        <span class="keyword">if</span> (tab != <span class="literal">null</span> &amp;&amp; (f <span class="keyword">instanceof</span> ForwardingNode) &amp;&amp;</span><br><span class="line">            (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> resizeStamp(tab.length);</span><br><span class="line">            <span class="keyword">while</span> (nextTab == nextTable &amp;&amp; table == tab &amp;&amp;</span><br><span class="line">                   (sc = sizeCtl) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                    sc == rs + MAX_RESIZERS || transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, sc + <span class="number">1</span>)) &#123;</span><br><span class="line">                    transfer(tab, nextTab);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> nextTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> table;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//treeifyBin 尝试转化成红黑树</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; b; <span class="type">int</span> n, sc;</span><br><span class="line">        <span class="keyword">if</span> (tab != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">                <span class="comment">//当数组长度小于最大数组限制即64的时候调用tryPresize方法</span></span><br><span class="line">                tryPresize(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((b = tabAt(tab, index)) != <span class="literal">null</span> &amp;&amp; b.hash &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (b) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, index) == b) &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = b; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">                            TreeNode&lt;K,V&gt; p =</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">TreeNode</span>&lt;K,V&gt;(e.hash, e.key, e.val,</span><br><span class="line">                                                  <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                            <span class="keyword">if</span> ((p.prev = tl) == <span class="literal">null</span>)</span><br><span class="line">                                hd = p;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                tl.next = p;</span><br><span class="line">                            tl = p;</span><br><span class="line">                        &#125;</span><br><span class="line">                        setTabAt(tab, index, <span class="keyword">new</span> <span class="title class_">TreeBin</span>&lt;K,V&gt;(hd));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">tryPresize</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> (size &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ? MAXIMUM_CAPACITY :</span><br><span class="line">            tableSizeFor(size + (size &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//判断c是否到达了最大限度，如果到达了就设置为最大限度，如果没达到就调用tableSizeFor方法</span></span><br><span class="line">    <span class="comment">//因为tableSizeFor方法在HashMap中提到过，就是为了保证最后是二的n次幂</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> sc;</span><br><span class="line">        <span class="keyword">while</span> ((sc = sizeCtl) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//sc如果大于等于0，说明数组未被初始化或者是数组已经初始化过，sc记录的是扩容阈值</span></span><br><span class="line">            Node&lt;K,V&gt;[] tab = table; <span class="type">int</span> n;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//如果表为null或者n长度为0说明未被初始化过</span></span><br><span class="line">                n = (sc &gt; c) ? sc : c;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="comment">//将sizeCtl置为-1用来表示正在初始化</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (table == tab) &#123;</span><br><span class="line">                            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>&lt;?,?&gt;[n];</span><br><span class="line">                            table = nt;</span><br><span class="line">                            sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        sizeCtl = sc;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c &lt;= sc || n &gt;= MAXIMUM_CAPACITY)</span><br><span class="line">                <span class="comment">//表已经初始化过，判断c是否达到阈值或者n是否超出最大数组长度 </span></span><br><span class="line">                <span class="comment">//如果没有达到阈值或者n已经超出限制,那么不做处理跳出循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (tab == table) &#123;</span><br><span class="line">                <span class="comment">//开始扩容</span></span><br><span class="line">                <span class="comment">//rs得到的是一个扩容戳(高十六位代表扩容标识，低16位做扩容线程数)</span></span><br><span class="line">                <span class="comment">//sizeCtl小于-1 则sizeCtl=-(n+1)，n表示正在扩容的线程数</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> resizeStamp(n);</span><br><span class="line">                <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    Node&lt;K,V&gt;[] nt;</span><br><span class="line">                    <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                        sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="literal">null</span> ||</span><br><span class="line">                        transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</span><br><span class="line">                        transfer(tab, nt);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc,</span><br><span class="line">                                             (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</span><br><span class="line">                    transfer(tab, <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">transfer()方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//用于数据迁移    </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> tab.length, stride;</span><br><span class="line">        <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class="line">            stride = MIN_TRANSFER_STRIDE; <span class="comment">// subdivide range</span></span><br><span class="line">        <span class="keyword">if</span> (nextTab == <span class="literal">null</span>) &#123;            <span class="comment">// initiating</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">                nextTab = nt;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;      <span class="comment">// try to cope with OOME</span></span><br><span class="line">                sizeCtl = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nextTable = nextTab;</span><br><span class="line">            transferIndex = n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">nextn</span> <span class="operator">=</span> nextTab.length;</span><br><span class="line">        ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> <span class="title class_">ForwardingNode</span>&lt;K,V&gt;(nextTab);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">advance</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">finishing</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// to ensure sweep before committing nextTab</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="type">int</span> fh;</span><br><span class="line">            <span class="keyword">while</span> (advance) &#123;</span><br><span class="line">                <span class="type">int</span> nextIndex, nextBound;</span><br><span class="line">                <span class="keyword">if</span> (--i &gt;= bound || finishing)</span><br><span class="line">                    advance = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    i = -<span class="number">1</span>;</span><br><span class="line">                    advance = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt</span><br><span class="line">                         (<span class="built_in">this</span>, TRANSFERINDEX, nextIndex,</span><br><span class="line">                          nextBound = (nextIndex &gt; stride ?</span><br><span class="line">                                       nextIndex - stride : <span class="number">0</span>))) &#123;</span><br><span class="line">                    bound = nextBound;</span><br><span class="line">                    i = nextIndex - <span class="number">1</span>;</span><br><span class="line">                    advance = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class="line">                <span class="type">int</span> sc;</span><br><span class="line">                <span class="keyword">if</span> (finishing) &#123;</span><br><span class="line">                    nextTable = <span class="literal">null</span>;</span><br><span class="line">                    table = nextTab;</span><br><span class="line">                    sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    finishing = advance = <span class="literal">true</span>;</span><br><span class="line">                    i = n; <span class="comment">// recheck before commit</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="literal">null</span>)</span><br><span class="line">                advance = casTabAt(tab, i, <span class="literal">null</span>, fwd);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                advance = <span class="literal">true</span>; <span class="comment">// already processed</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        Node&lt;K,V&gt; ln, hn;</span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">runBit</span> <span class="operator">=</span> fh &amp; n;</span><br><span class="line">                            Node&lt;K,V&gt; lastRun = f;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="literal">null</span>; p = p.next) &#123;</span><br><span class="line">                                <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> p.hash &amp; n;</span><br><span class="line">                                <span class="keyword">if</span> (b != runBit) &#123;</span><br><span class="line">                                    runBit = b;</span><br><span class="line">                                    lastRun = p;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123;</span><br><span class="line">                                ln = lastRun;</span><br><span class="line">                                hn = <span class="literal">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                hn = lastRun;</span><br><span class="line">                                ln = <span class="literal">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class="line">                                <span class="type">int</span> <span class="variable">ph</span> <span class="operator">=</span> p.hash; <span class="type">K</span> <span class="variable">pk</span> <span class="operator">=</span> p.key; <span class="type">V</span> <span class="variable">pv</span> <span class="operator">=</span> p.val;</span><br><span class="line">                                <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</span><br><span class="line">                                    ln = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hn = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class="line">                            &#125;</span><br><span class="line">                            setTabAt(nextTab, i, ln);</span><br><span class="line">                            setTabAt(nextTab, i + n, hn);</span><br><span class="line">                            setTabAt(tab, i, fwd);</span><br><span class="line">                            advance = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                            TreeNode&lt;K,V&gt; lo = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                            TreeNode&lt;K,V&gt; hi = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">lc</span> <span class="operator">=</span> <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">                                <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> e.hash;</span><br><span class="line">                                TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> <span class="title class_">TreeNode</span>&lt;K,V&gt;</span><br><span class="line">                                    (h, e.key, e.val, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                                <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> ((p.prev = loTail) == <span class="literal">null</span>)</span><br><span class="line">                                        lo = p;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        loTail.next = p;</span><br><span class="line">                                    loTail = p;</span><br><span class="line">                                    ++lc;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="keyword">if</span> ((p.prev = hiTail) == <span class="literal">null</span>)</span><br><span class="line">                                        hi = p;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        hiTail.next = p;</span><br><span class="line">                                    hiTail = p;</span><br><span class="line">                                    ++hc;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class="line">                                (hc != <span class="number">0</span>) ? <span class="keyword">new</span> <span class="title class_">TreeBin</span>&lt;K,V&gt;(lo) : t;</span><br><span class="line">                            hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class="line">                                (lc != <span class="number">0</span>) ? <span class="keyword">new</span> <span class="title class_">TreeBin</span>&lt;K,V&gt;(hi) : t;</span><br><span class="line">                            setTabAt(nextTab, i, ln);</span><br><span class="line">                            setTabAt(nextTab, i + n, hn);</span><br><span class="line">                            setTabAt(tab, i, fwd);</span><br><span class="line">                            advance = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="小结-1"   >          <a href="#小结-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3>      <div class="table-container"><table><thead><tr><th></th><th>底层原理</th><th align="left">特点</th></tr></thead><tbody><tr><td>HashMap</td><td>底层是Node[]数组+链表+红黑树构成,默认容量为16,负载因子是0.75,扩容是原容量的两倍,线程不安全</td><td align="left">无序、非线程安全</td></tr><tr><td>HashTable</td><td>底层是哈希表(数组),默认容量是11,负载因子是0.75,扩容时新数组是原数组左移1位+1,即容量是原来两倍+1,因为被synchronized修饰所以是线程安全的</td><td align="left">线程安全、效率低</td></tr><tr><td>TreeMap</td><td>底层是二叉树(红黑树)</td><td align="left">可排序、非线程安全</td></tr><tr><td>LinkedHashMap</td><td>底层是HashMap,默认容量为16，负载因子是0.75，默认排序方式是插入序，线程不安全，可用于开发LRU算法的实现</td><td align="left">有序、非线程安全</td></tr><tr><td>ConcurrentHashMap</td><td>采用了synchronized+CAS的机制实现了线程安全</td><td align="left">线程安全</td></tr></tbody></table></div>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> javaSE </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ面试题</title>
      <link href="/2023/07/13/RabbitMQ%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/07/13/RabbitMQ%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[        <h1 id="RabbitMQ怎么保证消息的不丢失"   >          <a href="#RabbitMQ怎么保证消息的不丢失" class="heading-link"><i class="fas fa-link"></i></a><a href="#RabbitMQ怎么保证消息的不丢失" class="headerlink" title="RabbitMQ怎么保证消息的不丢失"></a>RabbitMQ怎么保证消息的不丢失</h1>      <p>我答:</p><p>1.RabbitMQ在生产端有确认机制，打开生产确认消息机制，当生产者消息没有发到交换机时会调用ConfirmCallBack函数，当交换机消息没有发到Queue时会有一个ReturnsCallBack函数。这样我们保证了消息到达队列的不丢失</p><p>2.消息的持久化，防止因为MQ宕机导致消息的不丢失，主要是交换机、队列和消息的持久化</p><p>3.在消费端有一个签收机制，我们可以打开签收机制设置为Auto 由Spring来判断是否产生异常，如果异常了设置一个ReSet机制，重试三次之后发送到Error队列由人工干涉</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">消息的不丟失主要由三方面考虑</span><br><span class="line">1.RabbitMQ在生产端有确认机制，打开生产确认消息机制，当生产者消息没有发到交换机时会调用ConfirmCallBack函数，当交换机消息没有发到Queue时会有一个ReturnsCallBack函数。这样我们保证了消息到达队列的不丢失</span><br><span class="line"></span><br><span class="line">2.消息的持久化，防止因为MQ宕机导致消息的不丢失，主要是交换机、队列和消息的持久化</span><br><span class="line"></span><br><span class="line">3.在消费端有一个签收机制，我们可以打开签收机制设置为Auto 由Spring来判断是否产生异常，如果异常了设置一个ReSet机制，重试三次之后发送到Error队列由人工干涉</span><br></pre></td></tr></table></div></figure>        <h1 id="RabbitMQ怎么保障消息的幂等性"   >          <a href="#RabbitMQ怎么保障消息的幂等性" class="heading-link"><i class="fas fa-link"></i></a><a href="#RabbitMQ怎么保障消息的幂等性" class="headerlink" title="RabbitMQ怎么保障消息的幂等性"></a>RabbitMQ怎么保障消息的幂等性</h1>      <p>我答:1.可以引用一个全局的唯一ID，消费者要消费的时候查询Redis如果存在这个全局ID则说明已经消费过了</p><p>​2.利用DB的主键，消费者查询MySql中的主键存在即说明消息也消费过了</p><p>​3.利用Redis的Set命令，因为Key是唯一的，所以有天生的互斥性</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.可以引用一个全局的唯一ID，消费者要消费的时候查询Redis如果存在这个全局ID则说明已经消费过了</span><br><span class="line"></span><br><span class="line">2.利用DB的主键，消费者查询MySql中的主键存在即说明消息也消费过了</span><br><span class="line"></span><br><span class="line">3.利用Redis的Set命令，因为Key是唯一的，所以有天生的互斥性</span><br></pre></td></tr></table></div></figure>        <h1 id="RabbitMQ中死信队列？延时队列有了解过吗？"   >          <a href="#RabbitMQ中死信队列？延时队列有了解过吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#RabbitMQ中死信队列？延时队列有了解过吗？" class="headerlink" title="RabbitMQ中死信队列？延时队列有了解过吗？"></a>RabbitMQ中死信队列？延时队列有了解过吗？</h1>      <p>我答：</p><p>1.RabbitMQ中死信队列也就是一个正常的交换机，主要是为了处理死信的。</p><p>​一般因为三个原因会导致消息成为死信：1.消息超时了</p><p>​ 2.消息数量超过了队列限制消息数目 </p><p>​ 3.消息被拒签了</p><p>2.延时队列:RabbitMQ是不能直接创建延时队列的，但是我们可以通过对设置TTL和死信队列来达到延时队列的效果</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.RabbitMQ中死信队列也就是一个正常的交换机，主要是为了处理死信的。</span><br><span class="line"></span><br><span class="line">  一般因为三个原因会导致消息成为死信：1.消息超时了</span><br><span class="line"></span><br><span class="line">2.消息数量超过了队列限制消息数目 </span><br><span class="line"></span><br><span class="line">3.消息被拒签了</span><br><span class="line"></span><br><span class="line">2.延时队列:RabbitMQ是不能直接创建延时队列的，但是我们可以通过对设置TTL和死信队列来达到延时队列的效果</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h1 id="RabbitMQ中如果有100w条消息堆积，是如何解决的-消息堆积"   >          <a href="#RabbitMQ中如果有100w条消息堆积，是如何解决的-消息堆积" class="heading-link"><i class="fas fa-link"></i></a><a href="#RabbitMQ中如果有100w条消息堆积，是如何解决的-消息堆积" class="headerlink" title="RabbitMQ中如果有100w条消息堆积，是如何解决的(消息堆积)"></a>RabbitMQ中如果有100w条消息堆积，是如何解决的(消息堆积)</h1>      <p>我答:1.RabbitMQ中可以设置消费者能一次处理的消息个数，这样可以有效的保障MQ的正常使用</p><p>​         2.消息和Queue可以设置过期时间，当TTL到了之后消息会成为死信或被丢弃，但是这样会导致消息的丢失</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">我在开发中没有遇到过这样的问题，但是如果发生了消息堆积也是有解决方案</span><br><span class="line">1.增多消费者数目，提高消费速度</span><br><span class="line">2.在消费者端开启线程池，加快处理速度[消费者总数不变]</span><br><span class="line">3.采用惰性队列，扩大队列容积      【创建队列的时候加上lazy】 </span><br><span class="line">    采用惰性队列的优势：①接收消息然后存放到磁盘中而不是内存中 ②性能比较稳定，消息上限高</span><br><span class="line">    劣势：1.受限于磁盘IO</span><br><span class="line">     2.消费者要消费消息的时候才会将磁盘中的消息读取到内存中，会降低消息的时效性</span><br></pre></td></tr></table></div></figure>        <h1 id="RabbitMQ的高可用机制有了解过吗？"   >          <a href="#RabbitMQ的高可用机制有了解过吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#RabbitMQ的高可用机制有了解过吗？" class="headerlink" title="RabbitMQ的高可用机制有了解过吗？"></a>RabbitMQ的高可用机制有了解过吗？</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在开发中我运用了镜像队列的方式来保证高可用</span><br><span class="line">镜像队列本质上就是主从模式，所有操作在主节点中完成然后备份到镜像节点。</span><br><span class="line">当主节点宕机挂掉之后，镜像节点就会上位成为主节点。</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ使用【进阶篇】</title>
      <link href="/2023/07/13/RabbitMQ%E4%BD%BF%E7%94%A8%E3%80%90%E8%BF%9B%E9%98%B6%E7%AF%87%E3%80%91/"/>
      <url>/2023/07/13/RabbitMQ%E4%BD%BF%E7%94%A8%E3%80%90%E8%BF%9B%E9%98%B6%E7%AF%87%E3%80%91/</url>
      
        <content type="html"><![CDATA[        <h1 id="如何保证RabbitMQ的消息发送可靠性"   >          <a href="#如何保证RabbitMQ的消息发送可靠性" class="heading-link"><i class="fas fa-link"></i></a><a href="#如何保证RabbitMQ的消息发送可靠性" class="headerlink" title="如何保证RabbitMQ的消息发送可靠性"></a>如何保证RabbitMQ的消息发送可靠性</h1>              <h2 id="利用确认机制和回退机制"   >          <a href="#利用确认机制和回退机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#利用确认机制和回退机制" class="headerlink" title="利用确认机制和回退机制"></a>利用确认机制和回退机制</h2>              <h3 id="1-确认机制"   >          <a href="#1-确认机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-确认机制" class="headerlink" title="(1)确认机制:"></a>(1)确认机制:</h3>      <p>生产者与交换机之间有一个确认机制，当开启确认机制之后，无论消息是否发送到交换机都会调用一个ConfirmCallBack的函数</p>        <h4 id="相关代码"   >          <a href="#相关代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#相关代码" class="headerlink" title="相关代码:"></a>相关代码:</h4>      <p>application.yml</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">#   设置消息发送确认模式  none:无需确认(默认) correlated:消息从生产者到交换机调用回调函数  simple：单个确认(发一条确认一条)</span><br><span class="line">  publisher-confirm-type: correlated</span><br></pre></td></tr></table></div></figure><p>POM</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.amqp&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-rabbit-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></div></figure><p>RabbitMQConfig</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_CONFIRM_NAME=<span class="string">&quot;topic_ConfirmExchange&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_CONFIRM_NAME=<span class="string">&quot;topic_Confirmqueue&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*消息的可靠性保障 确认模式*/</span></span><br><span class="line"><span class="comment">//创建交换机</span></span><br><span class="line"><span class="meta">@Bean(&quot;ConfirmExchange&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Exchange <span class="title function_">bootConfirmExchange</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_CONFIRM_NAME).durable(<span class="literal">true</span>).build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Queue</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(&quot;ConfirmQueue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">bootConfirmQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QueueBuilder.durable(QUEUE_CONFIRM_NAME).build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Queue和交换机绑定</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">bootConfirmBinding</span><span class="params">(<span class="meta">@Qualifier(&quot;ConfirmExchange&quot;)</span> Exchange exchange, <span class="meta">@Qualifier(&quot;ConfirmQueue&quot;)</span> Queue queue)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;confirm.*&quot;</span>).noargs();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>生产者端</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Produce</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * confirm(CorrelationData correlationData, boolean b, String s)</span></span><br><span class="line"><span class="comment">    * 参数1  配置信息</span></span><br><span class="line"><span class="comment">    * 参数2  是否正常到Exchange  如果是为True,如果不是为false;</span></span><br><span class="line"><span class="comment">    * 参数3  错误原因</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="comment">//确认模式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ToConfirmSend</span><span class="params">()</span>&#123;</span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> b, String s)</span> &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;Confirm方法被调用了&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(b)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;成功收到消息&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;失败消息原因&quot;</span>+s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">  rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_CONFIRM_NAME,<span class="string">&quot;confirm.haha&quot;</span>,<span class="string">&quot;需要确认信息&quot;</span>);<span class="comment">//成功发送</span></span><br><span class="line"><span class="comment">//rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_CONFIRM_NAME+&quot;000&quot;,&quot;confirm.hehe&quot;,&quot;确认信息&quot;);//失败发送</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>代码效果</p>        <h5 id="1-成功发送："   >          <a href="#1-成功发送：" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-成功发送：" class="headerlink" title="1.成功发送："></a>1.成功发送：</h5>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713155029776.png"  alt="image-20230713155029776">      </p>        <h5 id="2-失败发送"   >          <a href="#2-失败发送" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-失败发送" class="headerlink" title="2.失败发送"></a>2.失败发送</h5>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713155150627.png"  alt="image-20230713155150627">      </p>        <h3 id="2-回退机制"   >          <a href="#2-回退机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-回退机制" class="headerlink" title="(2)回退机制"></a>(2)回退机制</h3>              <h4 id="相关代码-1"   >          <a href="#相关代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#相关代码-1" class="headerlink" title="相关代码"></a>相关代码</h4>      <p>application.yml</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">#   设置消息发送回退模式</span><br><span class="line">    publisher-returns: <span class="literal">true</span></span><br></pre></td></tr></table></div></figure><p>生产者端</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Produce</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ToConfirmSend</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        回退模式，只有在Exchange到Queue失败才会执行的回调函数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    rabbitTemplate.setReturnsCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ReturnsCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(ReturnedMessage returnedMessage)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;执行了ReturnCallback方法&quot;</span>);</span><br><span class="line">                System.out.println(returnedMessage.getMessage()); <span class="comment">//获得消息体</span></span><br><span class="line">                System.out.println(returnedMessage.getExchange());<span class="comment">//获得交换机信息</span></span><br><span class="line">                System.out.println(returnedMessage.getReplyCode());<span class="comment">//获得错误代码</span></span><br><span class="line">                System.out.println(returnedMessage.getRoutingKey());<span class="comment">//获得路由key</span></span><br><span class="line">                System.out.println(returnedMessage.getReplyText());<span class="comment">//获得被退回原因</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//正确发送 错误路由</span></span><br><span class="line">         rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_CONFIRM_NAME,<span class="string">&quot;return.haha&quot;</span>,<span class="string">&quot;需要确认信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>RabbitMQConfig</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_CONFIRM_NAME=<span class="string">&quot;topic_ConfirmExchange&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_CONFIRM_NAME=<span class="string">&quot;topic_Confirmqueue&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*消息的可靠性保障 确认模式*/</span></span><br><span class="line"><span class="comment">//创建交换机</span></span><br><span class="line"><span class="meta">@Bean(&quot;ConfirmExchange&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Exchange <span class="title function_">bootConfirmExchange</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_CONFIRM_NAME).durable(<span class="literal">true</span>).build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Queue</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(&quot;ConfirmQueue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">bootConfirmQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QueueBuilder.durable(QUEUE_CONFIRM_NAME).build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Queue和交换机绑定</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">bootConfirmBinding</span><span class="params">(<span class="meta">@Qualifier(&quot;ConfirmExchange&quot;)</span> Exchange exchange, <span class="meta">@Qualifier(&quot;ConfirmQueue&quot;)</span> Queue queue)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;confirm.*&quot;</span>).noargs();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="效果"   >          <a href="#效果" class="heading-link"><i class="fas fa-link"></i></a><a href="#效果" class="headerlink" title="效果"></a>效果</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713161242108.png"  alt="image-20230713161242108">      </p>        <h1 id="RabbitMQ的消息接收的确认"   >          <a href="#RabbitMQ的消息接收的确认" class="heading-link"><i class="fas fa-link"></i></a><a href="#RabbitMQ的消息接收的确认" class="headerlink" title="RabbitMQ的消息接收的确认"></a>RabbitMQ的消息接收的确认</h1>      <p>设置Queue到消费者的确认方式</p>        <h2 id="相关代码-2"   >          <a href="#相关代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#相关代码-2" class="headerlink" title="相关代码"></a>相关代码</h2>      <p>application.yml</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">#    设置ACK签收模式   manual为手动签收   none为无需确认  auto为自动确认</span><br><span class="line">    listener:</span><br><span class="line">      direct:</span><br><span class="line">        acknowledge-mode: manual</span><br></pre></td></tr></table></div></figure><p>消费者端</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQconfirmListen</span> <span class="keyword">implements</span> <span class="title class_">ChannelAwareMessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topic_Confirmqueue&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">deliveryTag</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            deliveryTag = message.getMessageProperties().getDeliveryTag();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理业务逻辑</span></span><br><span class="line">            System.out.println(<span class="string">&quot;正在处理业务逻辑...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//签收消息</span></span><br><span class="line">            <span class="comment">/*basicAck(long deliveryTag, boolean multiple)</span></span><br><span class="line"><span class="comment">             * 参数1:消息标签</span></span><br><span class="line"><span class="comment">             * 参数2:是否支持多条消息的签收</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="type">int</span> i=<span class="number">3</span>/<span class="number">0</span> ; <span class="comment">//模仿出错</span></span><br><span class="line">            channel.basicAck(deliveryTag, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//        因为异常拒绝签收</span></span><br><span class="line">            <span class="comment">/* basicNack(long deliveryTag, boolean multiple, boolean requeue)</span></span><br><span class="line"><span class="comment">             * 参数1:消息标签</span></span><br><span class="line"><span class="comment">             * 参数2:是否支持多条消息的签收</span></span><br><span class="line"><span class="comment">             * 参数3：是否退回队列</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            channel.basicNack(deliveryTag, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="效果-1"   >          <a href="#效果-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3>              <h4 id="1-正常签收"   >          <a href="#1-正常签收" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-正常签收" class="headerlink" title="(1)正常签收"></a>(1)正常签收</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713163939606.png"  alt="image-20230713163939606">      </p>        <h4 id="2-异常签收"   >          <a href="#2-异常签收" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-异常签收" class="headerlink" title="(2)异常签收"></a>(2)异常签收</h4>      <p>![](RabbitMQ%E4%BD%BF%E7%94%A8%E3%80%90%E8%BF%9B%E9%98%B6%E7%AF%87%E3%80%91&#x2F;image-20230713162956067.png</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713163128985.png"  alt="image-20230713163128985">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/RabbitMQ%E4%BD%BF%E7%94%A8%E3%80%90%E8%BF%9B%E9%98%B6%E7%AF%87%E3%80%91/image-20230713163221136.png"  alt="image-20230713163221136">      </p>        <h1 id="RabbitMQ的消费端限流"   >          <a href="#RabbitMQ的消费端限流" class="heading-link"><i class="fas fa-link"></i></a><a href="#RabbitMQ的消费端限流" class="headerlink" title="RabbitMQ的消费端限流"></a>RabbitMQ的消费端限流</h1>      <p>使用场景:限制消费端的接收消息的数量，防止因为系统维护等导致队列中的消息多,因而导致一个消费端巨量的压力过大，影响系统性能</p><p>实现要求</p><p>1.打开手动签收模式</p><p>2.将application中的prefetch设置为可消费的消息数量</p>        <h2 id="相关代码-3"   >          <a href="#相关代码-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#相关代码-3" class="headerlink" title="相关代码"></a>相关代码</h2>      <p>application.yml</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line"></span><br><span class="line">#    设置ACK签收模式   manual为手动签收   none为无需确认  auto为自动确认</span><br><span class="line">    listener:</span><br><span class="line">      direct:</span><br><span class="line">        acknowledge-mode: manual</span><br><span class="line">#  设置消费端一次能接受的消息数量</span><br><span class="line">        prefetch: <span class="number">1</span></span><br><span class="line">      simple:</span><br><span class="line">        acknowledge-mode: manual</span><br><span class="line">        prefetch: <span class="number">1</span></span><br></pre></td></tr></table></div></figure><p>消费者端</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QosListen</span> <span class="keyword">implements</span> <span class="title class_">ChannelAwareMessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topic_Confirmqueue&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">long</span> <span class="variable">deliveryTag</span> <span class="operator">=</span> message.getMessageProperties().getDeliveryTag();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line"><span class="comment">//          手动签收消息</span></span><br><span class="line"><span class="comment">//            channel.basicAck(deliveryTag, true);</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>生产者端</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ToSendQos</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">           rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_CONFIRM_NAME, <span class="string">&quot;confirm.haha&quot;</span>, <span class="string">&quot;这是第&quot;</span>+i+<span class="string">&quot;条信息，&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="效果-2"   >          <a href="#效果-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#效果-2" class="headerlink" title="效果"></a>效果</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713165421300.png"  alt="image-20230713165421300">              <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713165439057.png"  alt="image-20230713165439057">      </p><p>总共有20条 19条Ready  1条未被签收</p>        <h1 id="RabbitMQ的TTL"   >          <a href="#RabbitMQ的TTL" class="heading-link"><i class="fas fa-link"></i></a><a href="#RabbitMQ的TTL" class="headerlink" title="RabbitMQ的TTL"></a>RabbitMQ的TTL</h1>      <p>消息到达存活时间之后还未被消费则会被自动清除</p>        <h2 id="队列设置过期时间"   >          <a href="#队列设置过期时间" class="heading-link"><i class="fas fa-link"></i></a><a href="#队列设置过期时间" class="headerlink" title="队列设置过期时间"></a>队列设置过期时间</h2>              <h3 id="相关代码-4"   >          <a href="#相关代码-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#相关代码-4" class="headerlink" title="相关代码"></a>相关代码</h3>      <p>RabbitMQConfig</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_TTL_NAME=<span class="string">&quot;topic_TtlExchange&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_TTL_NAME=<span class="string">&quot;topic_Ttlqueue&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建交换机</span></span><br><span class="line">    <span class="meta">@Bean(&quot;TtlExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Exchange <span class="title function_">TtlExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_TTL_NAME).durable(<span class="literal">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建Queue</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;TtlQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">TtlQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(QUEUE_TTL_NAME).ttl(<span class="number">10000</span>).build(); <span class="comment">//设置队列消息过期时间为10S</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Queue和交换机绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">TtlBinding</span><span class="params">(<span class="meta">@Qualifier(&quot;TtlExchange&quot;)</span> Exchange exchange, <span class="meta">@Qualifier(&quot;TtlQueue&quot;)</span> Queue queue)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;ttl.*&quot;</span>).noargs();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>生产者</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ToSendTTL</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">           rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_TTL_NAME, <span class="string">&quot;ttl.haha&quot;</span>, <span class="string">&quot;这是第&quot;</span>+i+<span class="string">&quot;条信息，&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="效果-3"   >          <a href="#效果-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#效果-3" class="headerlink" title="效果"></a>效果</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713170744420.png"  alt="image-20230713170744420">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/RabbitMQ%E4%BD%BF%E7%94%A8%E3%80%90%E8%BF%9B%E9%98%B6%E7%AF%87%E3%80%91/image-20230713170756794.png"  alt="image-20230713170756794">      </p>        <h2 id="单个消息设置过期时间"   >          <a href="#单个消息设置过期时间" class="heading-link"><i class="fas fa-link"></i></a><a href="#单个消息设置过期时间" class="headerlink" title="单个消息设置过期时间"></a>单个消息设置过期时间</h2>              <h3 id="相关代码-5"   >          <a href="#相关代码-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#相关代码-5" class="headerlink" title="相关代码"></a>相关代码</h3>      <p>生产者端</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ToSendTTLMessage</span><span class="params">()</span>&#123;</span><br><span class="line">       rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_TTL_NAME, <span class="string">&quot;ttl.haha&quot;</span>,<span class="string">&quot;ttl...&quot;</span>, <span class="keyword">new</span> <span class="title class_">MessagePostProcessor</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> Message <span class="title function_">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException &#123;</span><br><span class="line">               message.getMessageProperties().setExpiration(String.valueOf(<span class="number">5000</span>));<span class="comment">//设置过期时间为5s</span></span><br><span class="line">               <span class="keyword">return</span>  message;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="效果-4"   >          <a href="#效果-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#效果-4" class="headerlink" title="效果"></a>效果</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713171755975.png"  alt="image-20230713171755975">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/RabbitMQ%E4%BD%BF%E7%94%A8%E3%80%90%E8%BF%9B%E9%98%B6%E7%AF%87%E3%80%91/image-20230713171808499.png"  alt="image-20230713171808499">      </p>        <h2 id="小结"   >          <a href="#小结" class="heading-link"><i class="fas fa-link"></i></a><a href="#小结" class="headerlink" title="小结"></a>小结</h2>      <p>1.当Queue的TTL和消息的TTL共同存在的时候，则会优先执行短的</p><p>2.当消息的过期时间到了 但是不在队列的首部的时候不会立即删除[像Redis的惰性删除，只有在调用的时候发现过期了才删除]</p>        <h1 id="死信队列"   >          <a href="#死信队列" class="heading-link"><i class="fas fa-link"></i></a><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h1>      <p>当消息过期\被拒绝签收\队伍消息长度达到限制的消息则会放到死信队列中</p><p>死信队列也是一个交换机，它的存在是处理死信的交换机，其他与正常交换机没有区别</p>        <h2 id="相关代码-6"   >          <a href="#相关代码-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#相关代码-6" class="headerlink" title="相关代码"></a>相关代码</h2>      <p>RabbitMQConfig</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_DLX_NAME=<span class="string">&quot;topic_DLxExchange&quot;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_DLX_NAME=<span class="string">&quot;topic_DLXqueue&quot;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_DLXTRUE_NAME=<span class="string">&quot;topic_DLEtureExchange&quot;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_DLXTRUE_NAME=<span class="string">&quot;topic_DLXtruequeue&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建死信交换机</span></span><br><span class="line">   <span class="meta">@Bean(&quot;DLXExchange&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Exchange <span class="title function_">DLXExchange</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_DLX_NAME).durable(<span class="literal">true</span>).build();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//创建死信Queue</span></span><br><span class="line">   <span class="meta">@Bean(&quot;DLXQueue&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Queue <span class="title function_">DLXQueue</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> QueueBuilder.durable(QUEUE_DLX_NAME).build();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//创建正常交换机</span></span><br><span class="line">   <span class="meta">@Bean(&quot;DLXTrueExchange&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Exchange <span class="title function_">DLXTrueExchange</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_DLXTRUE_NAME).durable(<span class="literal">true</span>).build();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//创建正常Queue</span></span><br><span class="line">   <span class="meta">@Bean(&quot;DLXTrueQueue&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Queue <span class="title function_">DLXTrueQueue</span><span class="params">(<span class="meta">@Qualifier(&quot;DLXExchange&quot;)</span> Exchange exchange)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> QueueBuilder.durable(QUEUE_DLXTRUE_NAME).ttl(<span class="number">100000</span>).maxLength(<span class="number">10</span>).deadLetterExchange(exchange.getName()).deadLetterRoutingKey(<span class="string">&quot;dlx.haha&quot;</span>).build();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//正常Queue和交换机绑定</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Binding <span class="title function_">DLXTrueBinding</span><span class="params">(<span class="meta">@Qualifier(&quot;DLXTrueExchange&quot;)</span> Exchange exchange, <span class="meta">@Qualifier(&quot;DLXTrueQueue&quot;)</span> Queue queue)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;info.#&quot;</span>).noargs();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//死信Queue和死信交换机绑定</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Binding <span class="title function_">DLXBinding</span><span class="params">(<span class="meta">@Qualifier(&quot;DLXExchange&quot;)</span> Exchange exchange, <span class="meta">@Qualifier(&quot;DLXQueue&quot;)</span> Queue queue)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;dlx.*&quot;</span>).noargs();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>生产者代码</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ToSendDlxMessage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">                rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_DLXTRUE_NAME, <span class="string">&quot;info&quot;</span>, <span class="string">&quot;这是&quot;</span>+i+<span class="string">&quot;条消息&quot;</span>, <span class="keyword">new</span> <span class="title class_">MessagePostProcessor</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Message <span class="title function_">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException &#123;</span><br><span class="line"><span class="comment">//                        message.getMessageProperties().setExpiration(String.valueOf(6000));</span></span><br><span class="line">                        <span class="keyword">return</span> message;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>消费者代码</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DlxListen</span> <span class="keyword">implements</span> <span class="title class_">ChannelAwareMessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topic_DLXtruequeue&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">deliveryTag</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            deliveryTag = message.getMessageProperties().getDeliveryTag();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line"><span class="comment">//          手动签收消息</span></span><br><span class="line">            <span class="type">int</span> i=<span class="number">3</span>/<span class="number">0</span>;</span><br><span class="line">            channel.basicAck(deliveryTag, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">//不签收消息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;拒绝签收消息&quot;</span>);</span><br><span class="line">            channel.basicNack(deliveryTag,<span class="literal">true</span>,<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="效果-5"   >          <a href="#效果-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#效果-5" class="headerlink" title="效果"></a>效果</h3>              <h4 id="1-当消息到了过期时间"   >          <a href="#1-当消息到了过期时间" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-当消息到了过期时间" class="headerlink" title="(1)当消息到了过期时间"></a>(1)当消息到了过期时间</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713181912511.png"  alt="image-20230713181912511">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713181933839.png"  alt="image-20230713181933839">      </p>        <h4 id="2-当消息长度超过了队列限制"   >          <a href="#2-当消息长度超过了队列限制" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-当消息长度超过了队列限制" class="headerlink" title="(2)当消息长度超过了队列限制"></a>(2)当消息长度超过了队列限制</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713181912511.png"  alt="image-20230713181912511">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713181933839.png"  alt="image-20230713181933839">      </p>        <h4 id="3-消息在消费端拒收"   >          <a href="#3-消息在消费端拒收" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-消息在消费端拒收" class="headerlink" title="(3)消息在消费端拒收"></a>(3)消息在消费端拒收</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713183932822.png"  alt="image-20230713183932822">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713183952193.png"  alt="image-20230713183952193">      </p>        <h3 id="提示"   >          <a href="#提示" class="heading-link"><i class="fas fa-link"></i></a><a href="#提示" class="headerlink" title="提示"></a>提示</h3>      <p>当消息总数超过队列长度限制时，因为队列是先进先出的，所以成为死信的消息应该是先进入队列的消息</p>        <h1 id="延迟队列"   >          <a href="#延迟队列" class="heading-link"><i class="fas fa-link"></i></a><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h1>      <p>RabbitMQ无法直接创建延迟队列，但是可以通过TTL和死信队列达到延迟队列的效果，则这样延迟队列为该死信队列的Queue</p>        <h1 id="消息补偿机制"   >          <a href="#消息补偿机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#消息补偿机制" class="headerlink" title="消息补偿机制"></a>消息补偿机制</h1>      <p>【图片来源于CSDN，借鉴于此】</p><p>【<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/m0_48481908/article/details/120160022?ops_request_misc=&request_id=&biz_id=102&utm_term=RabbitMQ%E6%B6%88%E6%81%AF%E8%A1%A5%E5%81%BF&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-120160022.nonecase&spm=1018.2226.3001.4187%E3%80%91" >https://blog.csdn.net/m0_48481908/article/details/120160022?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=RabbitMQ%E6%B6%88%E6%81%AF%E8%A1%A5%E5%81%BF&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-120160022.nonecase&amp;spm=1018.2226.3001.4187】</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6I235YyF6JuL5LuK5aSp5pyJ5aW95aW95a2m5Lmg5ZCX77yf,size_14,color_FFFFFF,t_70,g_se,x_16.png"  alt="在这里插入图片描述">      </p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">思路：</span><br><span class="line">1.生产者生产数据并写入自己的数据库</span><br><span class="line">2.生产者发送消息给Q1，并且会延迟一段时间发送相同的消息给Q3。Q1会被Consumer监听到，会产生一个确认信息的信号给Q2,Q2会被回调检查服务监听到，此时会直接将消息写到MDB中</span><br><span class="line">3.消费者将消费数据写入自己的DB中。</span><br><span class="line">4.延迟发送相同的消息给Q3，Q3被回调检查服务监听，会与MDB中数据比对，如果MDB中没有这个消息则说明Q3的消息未被消费，即发送消息给Q1失败，则会调用Producer重发消息</span><br><span class="line">5.定时检查服务来检查生产者DB和MessageDB 如果不一致，如业务DB多于消息MDB则说明有消息未被消费。则需要生产者重发消息【这是为了防止发送消息和延迟发送消息都失败的情况】</span><br></pre></td></tr></table></div></figure>        <h1 id="消息幂等性的保证"   >          <a href="#消息幂等性的保证" class="heading-link"><i class="fas fa-link"></i></a><a href="#消息幂等性的保证" class="headerlink" title="消息幂等性的保证"></a>消息幂等性的保证</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">消息的幂等性：指的是消息的多次执行和一次执行的效果是一样的</span><br><span class="line"></span><br><span class="line">比如消费者的确认时宕机 导致生产者多次发送同样的消息，所以此时要保证消息的幂等性，不要重复消费</span><br><span class="line"></span><br><span class="line">实现思路：</span><br><span class="line"></span><br><span class="line">1.使用Redis的Set命令，因为Set的Key是唯一的，所以这样不会重复消费消息</span><br><span class="line"></span><br><span class="line">2.使用UUID等方式，全局唯一ID，所以每次消息来了去Redis查是否有这个UUID，如果有则说明消费过</span><br><span class="line"></span><br><span class="line">3.利用数据库主键的方式，因为主键也是唯一的</span><br></pre></td></tr></table></div></figure>        <h1 id="消息转换器"   >          <a href="#消息转换器" class="heading-link"><i class="fas fa-link"></i></a><a href="#消息转换器" class="headerlink" title="消息转换器"></a>消息转换器</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SpringAMQP中会有一个消息转化器(MessageConverter)，当我们调用RabbitTamplate的convertAndSend方法的时候，传入的消息参数都是Object类型，然后他会在底层帮我们进行一个序列化，而这个序列化是基于Java底层的ObjectOutPutStream来实现。</span><br><span class="line">我们可以引入一个Json格式的消息转化器来达到约定大于配置将Spring自带的消息转化器替代，我们用JSon格式做序列化</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="相关代码-7"   >          <a href="#相关代码-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#相关代码-7" class="headerlink" title="相关代码"></a>相关代码</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Pom依赖</span><br><span class="line">&lt;!--        定义json格式转化器--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></div></figure><p>启动类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageConverter <span class="title function_">jsonMessageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">&#125;</span><br><span class="line">因为约定大于配置，自己创建一个Bean来覆盖初始的消息转化器</span><br></pre></td></tr></table></div></figure><p>RabbitMQConfig</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_OBJECT_NAME=<span class="string">&quot;direct_ObjectExchange&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_OBJECT_NAME=<span class="string">&quot;direct_Objectqueue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Object交换机</span></span><br><span class="line">    <span class="meta">@Bean(&quot;ObjectExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Exchange <span class="title function_">ObjectExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_OBJECT_NAME).durable(<span class="literal">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建Queue</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;ObjectQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">ObjectQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(QUEUE_OBJECT_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Queue和交换机绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">ObjectBinding</span><span class="params">(<span class="meta">@Qualifier(&quot;ObjectExchange&quot;)</span> Exchange exchange, <span class="meta">@Qualifier(&quot;ObjectQueue&quot;)</span> Queue queue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;queue.object&quot;</span>).noargs();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>生产者端</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ToObjectMessage</span><span class="params">()</span>&#123;</span><br><span class="line"> HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_OBJECT_NAME,<span class="string">&quot;queue.object&quot;</span>,map);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>消费者端</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectListen</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;direct_Objectqueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Map&lt;String,Object&gt; msg)</span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="效果-6"   >          <a href="#效果-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#效果-6" class="headerlink" title="效果"></a>效果</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230720224428282.png" >      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230720225911561.png"  alt="image-20230720225911561">      </p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>单机RabbitMq的启动命令</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service rabbitmq-server start 启动</span><br><span class="line">service rabbitmq-server stop  停机</span><br><span class="line">service rabbitmq-server restart 重启</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础面试题</title>
      <link href="/2023/07/12/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/07/12/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[        <h1 id="final修饰符有学习过吗？它有什么使用场景"   >          <a href="#final修饰符有学习过吗？它有什么使用场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#final修饰符有学习过吗？它有什么使用场景" class="headerlink" title="final修饰符有学习过吗？它有什么使用场景"></a>final修饰符有学习过吗？它有什么使用场景</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Final修饰符表示是最终的</span><br><span class="line">Final修饰符可以用于修饰变量、方法、类</span><br><span class="line"><span class="number">1</span>)Final修饰变量的时候:这个变量叫常量，一旦被赋值就不能改变</span><br><span class="line"><span class="number">2</span>)Final修饰方法的时候:这个方法不能被子类重写</span><br><span class="line"><span class="number">3</span>)Final修饰类的时候:这个类是最终类，不能被继承</span><br></pre></td></tr></table></div></figure>        <h1 id="jvm、jdk、jre的区别"   >          <a href="#jvm、jdk、jre的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#jvm、jdk、jre的区别" class="headerlink" title="jvm、jdk、jre的区别"></a>jvm、jdk、jre的区别</h1>      <p>jvm是java虚拟机，里面含有java运行的一切要求</p><p>jdk是java提供的api库</p><p>jre是最小开发环境</p><p>jvm、jdk、jre的关系是jvm包含jdk包含jre</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JVM:JVM为java虚拟机</span><br><span class="line">JRE:JRE为Java运行环境，JRE包括标准类库和JVM</span><br><span class="line">JDK:JDK为Java开发环境，JDK包括了JRE和开发工具</span><br><span class="line">    </span><br><span class="line">总结:JDK包含JRE，JRE包含JVM，如果只需要运行java程序只要装JRE即可</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230721203141902.png"  alt="image-20230721203141902">      </p>        <h1 id="java的八大基本类型"   >          <a href="#java的八大基本类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#java的八大基本类型" class="headerlink" title="java的八大基本类型"></a>java的八大基本类型</h1>      <p>我答:</p><p>Char、short、int、Long、Float、Double、String、Boolean</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">整型:<span class="type">byte</span>、<span class="type">short</span>、<span class="type">int</span>、<span class="type">long</span></span><br><span class="line">字符型：<span class="type">char</span></span><br><span class="line">浮点型：Float、Double</span><br><span class="line">布尔型：Boolean</span><br></pre></td></tr></table></div></figure>        <h1 id="多态如何实现的"   >          <a href="#多态如何实现的" class="heading-link"><i class="fas fa-link"></i></a><a href="#多态如何实现的" class="headerlink" title="多态如何实现的"></a>多态如何实现的</h1>              <h1 id="进程和线程的区别"   >          <a href="#进程和线程的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h1>              <h1 id="同步和异步的区别"   >          <a href="#同步和异步的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#同步和异步的区别" class="headerlink" title="同步和异步的区别"></a>同步和异步的区别</h1>              <h1 id="如何理解序列化"   >          <a href="#如何理解序列化" class="heading-link"><i class="fas fa-link"></i></a><a href="#如何理解序列化" class="headerlink" title="如何理解序列化"></a>如何理解序列化</h1>              <h1 id="HashMap-和-TreeMap-讲讲？"   >          <a href="#HashMap-和-TreeMap-讲讲？" class="heading-link"><i class="fas fa-link"></i></a><a href="#HashMap-和-TreeMap-讲讲？" class="headerlink" title="HashMap 和 TreeMap 讲讲？"></a>HashMap 和 TreeMap 讲讲？</h1>              <h1 id="讲讲-Java-提供了哪些锁？它们有什么区别？"   >          <a href="#讲讲-Java-提供了哪些锁？它们有什么区别？" class="heading-link"><i class="fas fa-link"></i></a><a href="#讲讲-Java-提供了哪些锁？它们有什么区别？" class="headerlink" title="讲讲 Java 提供了哪些锁？它们有什么区别？"></a>讲讲 Java 提供了哪些锁？它们有什么区别？</h1>              <h1 id="有了解过集合吗？看过底层源码吗？"   >          <a href="#有了解过集合吗？看过底层源码吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#有了解过集合吗？看过底层源码吗？" class="headerlink" title="有了解过集合吗？看过底层源码吗？"></a>有了解过集合吗？看过底层源码吗？</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">有了解过集合，看过底层源码</span><br><span class="line">集合就是有两个顶级接口Collection单列集合和Map双列集合</span><br><span class="line">Collection接口的子接口有List、Set</span><br><span class="line">List接口的实现类有ArrayList、LinkedList、Vector</span><br><span class="line">Set接口的实现类有HashSet、TreeSet、LinkedHashSet</span><br><span class="line">而Map集合的实现类有HashMap、LinkedHashMap、HashTable、TreeMap、ConcurrentHashMap</span><br><span class="line">您看我具体要从哪方面讲讲呢?</span><br></pre></td></tr></table></div></figure>        <h1 id="ArrayList底层是怎么进行创建和扩容的呢？"   >          <a href="#ArrayList底层是怎么进行创建和扩容的呢？" class="heading-link"><i class="fas fa-link"></i></a><a href="#ArrayList底层是怎么进行创建和扩容的呢？" class="headerlink" title="ArrayList底层是怎么进行创建和扩容的呢？"></a>ArrayList底层是怎么进行创建和扩容的呢？</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList底层是创建了一个Object数组来存放数据的，默认的空参构造时创建一个数组长度为<span class="number">10</span>的Obejct数组，也可以在构建方法传入指定长度，构建一个指定长度的Object数组。</span><br><span class="line">ArrayList在添加数据的时候会判断这个数组是不是满了，一旦满了就进行扩容，ArrayList的扩容是原来容量的<span class="number">1.5</span>倍</span><br><span class="line">具体操作是拿出老容量加上老容量右移一位再赋值给新数组，然后把老数组的元素copy到新数组中，最后添加新加入的数据</span><br></pre></td></tr></table></div></figure>        <h1 id="集合是怎么处理哈希碰撞的？"   >          <a href="#集合是怎么处理哈希碰撞的？" class="heading-link"><i class="fas fa-link"></i></a><a href="#集合是怎么处理哈希碰撞的？" class="headerlink" title="集合是怎么处理哈希碰撞的？"></a>集合是怎么处理哈希碰撞的？</h1>      <p>我答：</p><p>集合获取这个索引I是把集合长度n-1再和由key经过hashcode方法得到的哈希值做一个与运算<br>由key算出的hash值具体是 拿出key经过hashcode获得一个哈希值，将这个哈希值和这个哈希值无符号右移16位做一个异或运算 使得高位数据也能参与hash中 最后得到的值传回去</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当发生哈希碰撞的时候有以下几种解决哈希碰撞的方法：链式寻址法、再hash算法、公共溢出法、线性探测法</span><br><span class="line">而HashMap在处理哈希碰撞的时候就是利用链式寻址法和红黑树，<span class="number">1.7</span>是将新数据插入到链表头部，而<span class="number">1.8</span>会将数据插入到链表尾部，并且插入新数据的时候会进行判断链表长度是否超过<span class="number">8</span>且数组长度超过<span class="number">64</span>，如果超过了则会转成红黑树结构，红黑树是为了优化因为链表过长导致搜索时间复杂度增加的一个问题</span><br></pre></td></tr></table></div></figure>        <h1 id="有了解过锁吗-Lock和Sychorized那些"   >          <a href="#有了解过锁吗-Lock和Sychorized那些" class="heading-link"><i class="fas fa-link"></i></a><a href="#有了解过锁吗-Lock和Sychorized那些" class="headerlink" title="有了解过锁吗?Lock和Sychorized那些"></a>有了解过锁吗?Lock和Sychorized那些</h1>              <h1 id="final修饰方法会怎么样？final修饰类会怎么样"   >          <a href="#final修饰方法会怎么样？final修饰类会怎么样" class="heading-link"><i class="fas fa-link"></i></a><a href="#final修饰方法会怎么样？final修饰类会怎么样" class="headerlink" title="final修饰方法会怎么样？final修饰类会怎么样?"></a>final修饰方法会怎么样？final修饰类会怎么样?</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span>修饰方法会让方法无法被重写</span><br><span class="line"><span class="keyword">final</span>修饰类会使这个类成为最终类,无法被继承</span><br></pre></td></tr></table></div></figure>        <h1 id="Integer和int能直接进行比较吗？"   >          <a href="#Integer和int能直接进行比较吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Integer和int能直接进行比较吗？" class="headerlink" title="Integer和int能直接进行比较吗？"></a>Integer和int能直接进行比较吗？</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer类型和Int值能直接比较，因为在Integer会进行自动拆箱和装箱</span><br><span class="line">在Integer和<span class="type">int</span>进行比较的时候Integer会自动拆箱成<span class="type">int</span>类型</span><br></pre></td></tr></table></div></figure>        <h1 id="Integer底层有一个缓冲数组，在这个缓冲数组边界能直接进行比较吗？"   >          <a href="#Integer底层有一个缓冲数组，在这个缓冲数组边界能直接进行比较吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Integer底层有一个缓冲数组，在这个缓冲数组边界能直接进行比较吗？" class="headerlink" title="Integer底层有一个缓冲数组，在这个缓冲数组边界能直接进行比较吗？"></a>Integer底层有一个缓冲数组，在这个缓冲数组边界能直接进行比较吗？</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer底层有一个<span class="type">int</span>的缓冲数组，缓冲数组的范围是负<span class="number">128</span>到正<span class="number">127</span>，在这个范围里会直接找到缓冲区的地址</span><br><span class="line">在缓冲数据的边界也能进行直接比较的</span><br></pre></td></tr></table></div></figure>        <h1 id="和equals方法的区别"   >          <a href="#和equals方法的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#和equals方法的区别" class="headerlink" title="&#x3D;&#x3D;和equals方法的区别"></a>&#x3D;&#x3D;和equals方法的区别</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">==在比较基本数据类型的时候比较的是具体的值,而在比较引用数据类型的时候比较两边的地址值</span><br><span class="line">equals方法比较的是两边的属性值</span><br></pre></td></tr></table></div></figure>        <h1 id="有了解过Volatile关键字吗？"   >          <a href="#有了解过Volatile关键字吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#有了解过Volatile关键字吗？" class="headerlink" title="有了解过Volatile关键字吗？"></a>有了解过Volatile关键字吗？</h1>              <h1 id="说说SpringMVC的执行流程"   >          <a href="#说说SpringMVC的执行流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#说说SpringMVC的执行流程" class="headerlink" title="说说SpringMVC的执行流程"></a>说说SpringMVC的执行流程</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTTP请求会发送到DispatcherServlet(前端控制器)中然后DisPatcherServlet会通过url找到HandlerMapping(处理器映射器)获得映射，HandlerMapping会将这个hander处理器和拦截器一起发送回DisPatcherServlet中，DisPatcherServlet会通过映射查到HandleAdapter(处理器适配器),HandleAdapater会找到具体的Handle,然后将Handle传回来的ModelandView传回给DisPatcherServlet，DisPachthersevlet去找View <span class="title function_">Reslover</span><span class="params">(视图解析器)</span>,View Reslover会将解析出来的View返回给DisPachterServlet，然后DisPachter再渲染反映给前端</span><br><span class="line">而现在一般是面向接口编程，我们不用返回View而是Handle通过ResponBody注解再通过(HttpMessageConverter)消息转化器返回一个Json格式的数据就可以了</span><br></pre></td></tr></table></div></figure>        <h1 id="ArrayList-线程安全吗？Vector-呢？那并发性能高的-ArrayList-是什么？"   >          <a href="#ArrayList-线程安全吗？Vector-呢？那并发性能高的-ArrayList-是什么？" class="heading-link"><i class="fas fa-link"></i></a><a href="#ArrayList-线程安全吗？Vector-呢？那并发性能高的-ArrayList-是什么？" class="headerlink" title="ArrayList 线程安全吗？Vector 呢？那并发性能高的 ArrayList 是什么？"></a>ArrayList 线程安全吗？Vector 呢？那并发性能高的 ArrayList 是什么？</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList线程不安全，而Vector是线程安全的，</span><br><span class="line">ArrayList底层是Object数组，默认初始化的数组长度为<span class="number">10</span></span><br></pre></td></tr></table></div></figure>        <h1 id="线程池有用过吗？有哪些参数？"   >          <a href="#线程池有用过吗？有哪些参数？" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程池有用过吗？有哪些参数？" class="headerlink" title="线程池有用过吗？有哪些参数？"></a>线程池有用过吗？有哪些参数？</h1>              <h1 id="线程池如何配置？有什么策略策略？"   >          <a href="#线程池如何配置？有什么策略策略？" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程池如何配置？有什么策略策略？" class="headerlink" title="线程池如何配置？有什么策略策略？"></a>线程池如何配置？有什么策略策略？</h1>              <h1 id="讲讲-ThreadPoolExecutor-的七个参数？怎么配置？"   >          <a href="#讲讲-ThreadPoolExecutor-的七个参数？怎么配置？" class="heading-link"><i class="fas fa-link"></i></a><a href="#讲讲-ThreadPoolExecutor-的七个参数？怎么配置？" class="headerlink" title="讲讲 ThreadPoolExecutor 的七个参数？怎么配置？"></a>讲讲 ThreadPoolExecutor 的七个参数？怎么配置？</h1>              <h1 id="能说一下ThreadPoolExecutor核心线程数、最大线程数、工作队列之间的数量关系吗？"   >          <a href="#能说一下ThreadPoolExecutor核心线程数、最大线程数、工作队列之间的数量关系吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#能说一下ThreadPoolExecutor核心线程数、最大线程数、工作队列之间的数量关系吗？" class="headerlink" title="能说一下ThreadPoolExecutor核心线程数、最大线程数、工作队列之间的数量关系吗？"></a>能说一下ThreadPoolExecutor核心线程数、最大线程数、工作队列之间的数量关系吗？</h1>              <h1 id="普通For、增强For和ForEach的区别"   >          <a href="#普通For、增强For和ForEach的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#普通For、增强For和ForEach的区别" class="headerlink" title="普通For、增强For和ForEach的区别"></a>普通For、增强For和ForEach的区别</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">普通For是通过索引I来获得元素，而增强For是通过迭代器来获得元素</span><br><span class="line">ForEach就是增强For</span><br></pre></td></tr></table></div></figure><hr>        <h1 id="未整理区"   >          <a href="#未整理区" class="heading-link"><i class="fas fa-link"></i></a><a href="#未整理区" class="headerlink" title="未整理区"></a>未整理区</h1>              <h2 id="与equals的区别，String类里面的equals方法实现看过吗，大概的实现流程"   >          <a href="#与equals的区别，String类里面的equals方法实现看过吗，大概的实现流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#与equals的区别，String类里面的equals方法实现看过吗，大概的实现流程" class="headerlink" title="&#x3D;&#x3D;与equals的区别，String类里面的equals方法实现看过吗，大概的实现流程"></a>&#x3D;&#x3D;与equals的区别，String类里面的equals方法实现看过吗，大概的实现流程</h2>              <h2 id="Redis有哪些常见数据类型，string，hash，还有zset的内部实现用的什么数据结构，zset数据结构有哪些应用场景-排行榜，实时排名，去重统计"   >          <a href="#Redis有哪些常见数据类型，string，hash，还有zset的内部实现用的什么数据结构，zset数据结构有哪些应用场景-排行榜，实时排名，去重统计" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis有哪些常见数据类型，string，hash，还有zset的内部实现用的什么数据结构，zset数据结构有哪些应用场景-排行榜，实时排名，去重统计" class="headerlink" title="Redis有哪些常见数据类型，string，hash，还有zset的内部实现用的什么数据结构，zset数据结构有哪些应用场景(排行榜，实时排名，去重统计)"></a>Redis有哪些常见数据类型，string，hash，还有zset的内部实现用的什么数据结构，zset数据结构有哪些应用场景(排行榜，实时排名，去重统计)</h2>              <h2 id="你的项目中用到了分布式锁，使用分布式锁的时候需要注意哪些问题，分布式锁的使用场景（答的商品秒杀）；为什么要用分布式锁，不用synchronized锁住代码块来保证线程安全。"   >          <a href="#你的项目中用到了分布式锁，使用分布式锁的时候需要注意哪些问题，分布式锁的使用场景（答的商品秒杀）；为什么要用分布式锁，不用synchronized锁住代码块来保证线程安全。" class="heading-link"><i class="fas fa-link"></i></a><a href="#你的项目中用到了分布式锁，使用分布式锁的时候需要注意哪些问题，分布式锁的使用场景（答的商品秒杀）；为什么要用分布式锁，不用synchronized锁住代码块来保证线程安全。" class="headerlink" title="你的项目中用到了分布式锁，使用分布式锁的时候需要注意哪些问题，分布式锁的使用场景（答的商品秒杀）；为什么要用分布式锁，不用synchronized锁住代码块来保证线程安全。"></a>你的项目中用到了分布式锁，使用分布式锁的时候需要注意哪些问题，分布式锁的使用场景（答的商品秒杀）；为什么要用分布式锁，不用synchronized锁住代码块来保证线程安全。</h2>              <h2 id="什么是回表？"   >          <a href="#什么是回表？" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是回表？" class="headerlink" title="什么是回表？"></a>什么是回表？</h2>              <h2 id="MySQL存储引擎Innodb的数据结构，可以用hashmap吗，索引用有序数组查询效率会怎么样，有什么问题"   >          <a href="#MySQL存储引擎Innodb的数据结构，可以用hashmap吗，索引用有序数组查询效率会怎么样，有什么问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#MySQL存储引擎Innodb的数据结构，可以用hashmap吗，索引用有序数组查询效率会怎么样，有什么问题" class="headerlink" title="MySQL存储引擎Innodb的数据结构，可以用hashmap吗，索引用有序数组查询效率会怎么样，有什么问题"></a>MySQL存储引擎Innodb的数据结构，可以用hashmap吗，索引用有序数组查询效率会怎么样，有什么问题</h2>              <h2 id="编程题：输入一个整数，转为二进制，并求出1个个数。"   >          <a href="#编程题：输入一个整数，转为二进制，并求出1个个数。" class="heading-link"><i class="fas fa-link"></i></a><a href="#编程题：输入一个整数，转为二进制，并求出1个个数。" class="headerlink" title="编程题：输入一个整数，转为二进制，并求出1个个数。"></a>编程题：输入一个整数，转为二进制，并求出1个个数。</h2>      ]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql面试题</title>
      <link href="/2023/07/12/MySql%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/07/12/MySql%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[        <h1 id="InnoDb和MyIsam的区别"   >          <a href="#InnoDb和MyIsam的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#InnoDb和MyIsam的区别" class="headerlink" title="InnoDb和MyIsam的区别"></a>InnoDb和MyIsam的区别</h1>      <p>我答:</p><p>MySql5以后默认的引擎是InnoDB,InnoDB支持行锁、事务</p><p>MyIsam主要在内存中，不支持事务</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">主要从四个方面来区别</span><br><span class="line">InnoDB支持事务、行级锁、外键</span><br><span class="line">而Myisam不支持事务、行级锁、外键</span><br><span class="line"></span><br><span class="line">存储结构的不同</span><br><span class="line">    </span><br><span class="line">InnoDB的存储方式是索引和数据存放在.idb文件中</span><br><span class="line">myisam的存储是索引和数据分开存放 索引存在.MYI中 数据存在.MYD中</span><br></pre></td></tr></table></div></figure>        <h1 id="介绍一下Mysql中事务的特性"   >          <a href="#介绍一下Mysql中事务的特性" class="heading-link"><i class="fas fa-link"></i></a><a href="#介绍一下Mysql中事务的特性" class="headerlink" title="介绍一下Mysql中事务的特性"></a>介绍一下Mysql中事务的特性</h1>      <p>我答:mySql的事务主要有四个特性 ACID</p><p>1.原子性2.一致性3.隔离性4.。。。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">事务是一组操作的集合，它是一个不可分割的操作单元，当事务提交之后，这些操作要么同时成功要么同时失败</span><br><span class="line">事务有四个特性即ACID</span><br><span class="line"><span class="number">1.</span>原子性:表示事务是不可分割的操作单元，事务内的操作要么全部被执行要么全部不被执行</span><br><span class="line"><span class="number">2.</span>一致性:事务完成时，所有数据必须保持一致状态，主要是约束一致性和数据一致性</span><br><span class="line"><span class="number">3.</span>隔离性:数据库提供的隔离机制，保证一个事务内部是对其他并发事务隔离的</span><br><span class="line"><span class="number">4.</span>持久性:当事务一旦提交,它对数据库中数据改变应该是永久的</span><br><span class="line">实现事务的原子性和一致性依赖于undo log日志 而事务的持久性依赖于redo log日志</span><br><span class="line">就举一个转账的例子:当A向B转账<span class="number">500</span>元时，原子性提现在A和B操作要么同时成功要么同时失败，而一致性表现在当A减少<span class="number">500</span>元B就必须要增加<span class="number">500</span>元保证数据的一致，隔离性表现在A像B转账的时候不会受到其他事务的影响，而持久性体现在一旦转账成功，数据修改就是永久性的。</span><br></pre></td></tr></table></div></figure>        <h1 id="并发事务会带来哪些问题？"   >          <a href="#并发事务会带来哪些问题？" class="heading-link"><i class="fas fa-link"></i></a><a href="#并发事务会带来哪些问题？" class="headerlink" title="并发事务会带来哪些问题？"></a>并发事务会带来哪些问题？</h1>      <p>我答：1.脏读2.不可重复读3.幻读</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">事务并发操作可能会带来有四个问题</span><br><span class="line"><span class="number">1.</span>更新丢失:更新丢失又分为两种一种是回滚覆盖，一种是更新覆盖，我们解决更新丢失一般采用乐观锁的思想加入版本号</span><br><span class="line"><span class="number">2.</span>脏读:脏读指一个事务读到了另一个事务还未提交的数据，那么读到的数据就是脏数据</span><br><span class="line"><span class="number">3.</span>不可重复读:不可重复读意思是当事务多次读取同一行数据时，前后读到的数据不一致</span><br><span class="line"><span class="number">4.</span>幻读:幻读指的是在事务按照相同条件查询，而前后查询到的数据行数的不一致，通常是当插入操作时查询数据不存在而当执行插入操作时数据又存在了。</span><br></pre></td></tr></table></div></figure>        <h1 id="并发事务带来的更新丢失是什么"   >          <a href="#并发事务带来的更新丢失是什么" class="heading-link"><i class="fas fa-link"></i></a><a href="#并发事务带来的更新丢失是什么" class="headerlink" title="并发事务带来的更新丢失是什么?"></a>并发事务带来的更新丢失是什么?</h1>      <p>我答:在并发操作下，可能会产生数据覆盖的情况，导致前一个线程的数据被覆盖也就是更新丢失了</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">更新丢失是当多个事务更新同一行数据的时候可能产生的数据丢失现象，更新丢失分为两钟：</span><br><span class="line">    一种是回滚覆盖，一种是更新覆盖</span><br><span class="line">    回滚覆盖：当事务进行回滚操作时，把其他事务提交的数据给覆盖了</span><br><span class="line">    更新覆盖：当事务进行更新操作时，把其他事务提交的数据给覆盖了 【例如一个更新年龄一个更新金额，后提交的会把前一个给覆盖了】</span><br><span class="line">    </span><br><span class="line">我们解决更新丢失是采用乐观锁的机制，方案是版本号，通过版本号确认是否数据被修改过</span><br></pre></td></tr></table></div></figure>        <h1 id="事务隔离级别有哪些？MySql默认的事务隔离级别是哪个"   >          <a href="#事务隔离级别有哪些？MySql默认的事务隔离级别是哪个" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务隔离级别有哪些？MySql默认的事务隔离级别是哪个" class="headerlink" title="事务隔离级别有哪些？MySql默认的事务隔离级别是哪个"></a>事务隔离级别有哪些？MySql默认的事务隔离级别是哪个</h1>      <p>我答:读未提交、读已提交(RC)、可重复读(RR)、串行化</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">事务隔离级别有四个：</span><br><span class="line"><span class="number">1.</span>读未提交：脏读、不可重复读、幻读都没有解决</span><br><span class="line"><span class="number">2.</span>读已提交：解决了脏读的问题，没有解决不可重复读、幻读</span><br><span class="line"><span class="number">3.</span>可重复读：解决了脏读、不可重复读的问题，没有解决幻读的现象，这是MySql默认的事务级别</span><br><span class="line"><span class="number">4.</span>串行化：解决了脏读、不可重复读、幻读，但是因为事务是串行执行(排队)，所以性能较差</span><br></pre></td></tr></table></div></figure><div class="table-container"><table><thead><tr><th align="center">隔离级别</th><th align="center">回滚覆盖</th><th align="center">提交覆盖</th><th align="center">幻读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">读未提交（READ UNCOMMITTED）</td><td align="center">×</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">读已提交（READ COMMITTED）</td><td align="center">×</td><td align="center">√</td><td align="center">×</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">可重复读（REPEATABLE READ)</td><td align="center">×</td><td align="center">×</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">串行化  （SERIALIZABLE）</td><td align="center">×</td><td align="center">×</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table></div>        <h1 id="Redo-Log和Undo-Log的区别"   >          <a href="#Redo-Log和Undo-Log的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redo-Log和Undo-Log的区别" class="headerlink" title="Redo Log和Undo Log的区别"></a>Redo Log和Undo Log的区别</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Redo Log:当数据发生变化的时，redo log buffer会先将数据写入到redo log file中，当数据库宕机时可以冲redo log file中恢复数据</span><br><span class="line">undo log:记录的是数据的逻辑日志，他主要的作用在提供回滚和MVCC中。当日志执行回滚操作的时候读取undo log来回滚到之前的数据</span><br><span class="line">    </span><br><span class="line">redo log保证了事务的持久性，而undo log保证了事务的原子性和一致性</span><br></pre></td></tr></table></div></figure>        <h1 id="事务的隔离性是怎么保证的-（说说MVCC机制的理解）"   >          <a href="#事务的隔离性是怎么保证的-（说说MVCC机制的理解）" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务的隔离性是怎么保证的-（说说MVCC机制的理解）" class="headerlink" title="事务的隔离性是怎么保证的?（说说MVCC机制的理解）"></a>事务的隔离性是怎么保证的?（说说MVCC机制的理解）</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">事务的隔离性主要是依靠锁+MVCC机制的实现</span><br><span class="line">其中MVCC指的是多版本并发空值，MVCC实现主要是有三个部分</span><br><span class="line">    第一个部分是隐藏字段，在Mysql中会有三个隐藏字段<span class="number">1.</span>事务ID(trx_id)<span class="number">2.</span>回滚指针(roll_pointer)<span class="number">3.</span>隐式主键(ROW_id)</span><br><span class="line">    第二个部分是undo log版本链，每个数据都有多个版本，多版本之间通过undo log链进行链接，链头是最新版本即最新数据，链尾是最老版本即最老数据</span><br><span class="line">    第三部分是Read View，ReadView解决的是一个事务选择的哪个版本的问题，而不同隔离级别的快照读也不同，RC级别下每一条Select语句都会生成ReadView 而RR级别只会在第一次执行Select生成ReadView然后后面复用这个ReadView，所以RR解决了不可重复读的问题，而RC没有解决不可重复读的问题</span><br></pre></td></tr></table></div></figure>        <h1 id="说说MySql的主从复制"   >          <a href="#说说MySql的主从复制" class="heading-link"><i class="fas fa-link"></i></a><a href="#说说MySql的主从复制" class="headerlink" title="说说MySql的主从复制"></a>说说MySql的主从复制</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MySql的主从搭建主要的用途：</span><br><span class="line"><span class="number">1.</span>实时灾备，用于故障切换</span><br><span class="line"><span class="number">2.</span>读写分离</span><br><span class="line"><span class="number">3.</span>用于数据备份</span><br><span class="line"></span><br><span class="line">MySql的主从复制的实现主要是以下三个步骤</span><br><span class="line"><span class="number">1.</span>主库开启了Binlog日志，当事务提交的时候会将记录在二进制日志文件binlog中</span><br><span class="line"><span class="number">2.</span>从库的IOthread读取到主库的BinLog日志的信息写到自己的中继日志 relay Log中</span><br><span class="line"><span class="number">3.</span>从库从relay Log进行数据的重做</span><br></pre></td></tr></table></div></figure>        <h1 id="你们项目中有没有使用过分库分表呢"   >          <a href="#你们项目中有没有使用过分库分表呢" class="heading-link"><i class="fas fa-link"></i></a><a href="#你们项目中有没有使用过分库分表呢" class="headerlink" title="你们项目中有没有使用过分库分表呢?"></a>你们项目中有没有使用过分库分表呢?</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">分库分表主要是因为单机存储达到瓶颈或者连接数，处理能力达到上限才需要用到</span><br><span class="line">我项目中没有用到分库分表[当单表数据量超过1000w或者20G时可以考虑分库分表]</span><br><span class="line">而对数据库优化这方面我学习到了分库分表的思想</span><br><span class="line"></span><br><span class="line">分库分表就是把一个数据库的数据分散存放到多个数据库上，分库分表包括垂直分库、垂直分表、水平分库、水平分表这四部分</span><br><span class="line"><span class="number">1.</span>垂直分库，将一个数据库按照业务不同来进行分库，将不同业务的表分布到不同数据库中</span><br><span class="line"><span class="number">2.</span>垂直分库，将一个数据库的表按照字段分表，不同字段分到不同表中</span><br><span class="line"><span class="number">3.</span>水平分库，将一个数据库的表，分散到不同数据库中【表结构一样数据不一样】</span><br><span class="line"><span class="number">4.</span>水平分表，将一个表的数据，分散到不同的表中【可以是同一个数据库中】</span><br></pre></td></tr></table></div></figure>        <h1 id="说说数据库中锁的种类"   >          <a href="#说说数据库中锁的种类" class="heading-link"><i class="fas fa-link"></i></a><a href="#说说数据库中锁的种类" class="headerlink" title="说说数据库中锁的种类"></a>说说数据库中锁的种类</h1>              <h1 id="我们如何定位慢查询"   >          <a href="#我们如何定位慢查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#我们如何定位慢查询" class="headerlink" title="我们如何定位慢查询"></a>我们如何定位慢查询</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>我们可以开启MySql的慢查询日志，我们通过查看慢查询日志的信息可以知道慢查询的情况</span><br><span class="line"><span class="number">2.</span>通过show profile命令可以知道每一条SQL的执行耗时的基本情况，然后通过show profile <span class="keyword">for</span> query query_id 查询到指定的SQL各个阶段的耗时情况</span><br><span class="line"><span class="number">3.</span>通过在SQL语句前面添加explain关键字，查询当前sql的执行计划,可以通过key和key_len字段知道是否有命中索引，索引是否失效，通过type字段查看是否有优化空间，是否存在全盘扫描或者全索引扫描，通过extra字段知道是否有回表</span><br></pre></td></tr></table></div></figure>        <h1 id="什么是聚簇索引和非聚簇索引"   >          <a href="#什么是聚簇索引和非聚簇索引" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是聚簇索引和非聚簇索引" class="headerlink" title="什么是聚簇索引和非聚簇索引"></a>什么是聚簇索引和非聚簇索引</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">聚簇索引主要是数据和索引放在一起，索引结构的叶子结点保存了行数据。一般情况下是主键作为聚簇索引</span><br><span class="line">非聚簇索引就是数据和索引分开存放的，叶子结点存放的是对应主键的位置，我们创建的索引通常都是非聚簇索引</span><br></pre></td></tr></table></div></figure>        <h1 id="什么是回表查询"   >          <a href="#什么是回表查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是回表查询" class="headerlink" title="什么是回表查询"></a>什么是回表查询</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过非聚簇索引找到的数据不够，要通过主键值返回去查询聚簇索引获得整个行数据这个情况就是回表查询</span><br></pre></td></tr></table></div></figure>        <h1 id="什么是覆盖索引？"   >          <a href="#什么是覆盖索引？" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是覆盖索引？" class="headerlink" title="什么是覆盖索引？"></a>什么是覆盖索引？</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">覆盖索引指的是在查询时使用了索引，并且需要返回的列，在本次查找中可以全部找到。可以不用通过回表查询，这样能显著提高性能</span><br></pre></td></tr></table></div></figure>        <h1 id="什么情况下会造成索引失效？"   >          <a href="#什么情况下会造成索引失效？" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么情况下会造成索引失效？" class="headerlink" title="什么情况下会造成索引失效？"></a>什么情况下会造成索引失效？</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>使用联合索引违背了最左前缀法则.</span><br><span class="line"><span class="number">2.</span>字符串没有加单引号，会导致类型转化造成了索引失效</span><br><span class="line"><span class="number">3.</span>在索引列上进行了运算操作，会导致索引失效</span><br><span class="line"><span class="number">4.</span>使用了模糊匹配，如果仅仅是尾部模糊匹配索引不会失效，而使用了头部模糊匹配索引会失效、</span><br><span class="line"><span class="number">5.</span>使用了or关键字，or条件一侧有索引一侧没有索引会造成索引失效，而两侧都有索引则不会失效</span><br><span class="line"><span class="number">6.</span>数据分布造成影响，如果使用索引比走全表扫描还慢则不会使用索引</span><br><span class="line"><span class="number">7.</span>范围查询右边的列索引会失效 如使用&lt;,&gt;则右边的列会失效</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h1 id="数据库优化"   >          <a href="#数据库优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySql优化我觉得主要从两个部分</span><br></pre></td></tr></table></div></figure>        <h2 id="设计层面进行优化"   >          <a href="#设计层面进行优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#设计层面进行优化" class="headerlink" title="设计层面进行优化"></a>设计层面进行优化</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>可以使用MySql主从集群，可以防止单个MySql宕机导致服务不可用，搭建集群可以保证服务的高可用</span><br><span class="line"><span class="number">2.</span>可以使用主从结构，进行读写分离</span><br><span class="line"><span class="number">3.</span>可以使用分库分表的思想，降低单个服务器节点上的IO压力</span><br></pre></td></tr></table></div></figure>        <h2 id="SQL优化"   >          <a href="#SQL优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>查询尽量使用索引来进行数据扫描</span><br><span class="line"><span class="number">2.</span>join优化，尽量使用inner join而不使用left join和right join 如果必须要用，则一定要以小表驱动</span><br><span class="line"><span class="number">3.</span>联合查询尽量用union all 替代union    union会多一次过滤操作，降低性能</span><br><span class="line"><span class="number">4.</span>插入数据的时候，批量插入，顺序插入 如果要大批量插入使用load命令</span><br><span class="line"><span class="number">5.</span>主键优化，主键长度尽量短、顺序插入</span><br><span class="line"><span class="number">6.</span>limit优化 使用覆盖索引+子查询</span><br><span class="line"><span class="number">7.</span>count优化 count(<span class="number">1</span>)≈count(*)&gt;count(主键id)&gt;count(字段)</span><br><span class="line"><span class="number">8.</span>update优化 尽量根据主键\索引更新数据  防止行锁升级成表锁java</span><br><span class="line"><span class="number">9.</span>group by  索引，多字段满足最左前缀法则</span><br><span class="line"><span class="number">10.</span>order by 直接通过索引返回数据</span><br></pre></td></tr></table></div></figure>        <h1 id="为什么MySql用B-树不用跳表？"   >          <a href="#为什么MySql用B-树不用跳表？" class="heading-link"><i class="fas fa-link"></i></a><a href="#为什么MySql用B-树不用跳表？" class="headerlink" title="为什么MySql用B+树不用跳表？"></a>为什么MySql用B+树不用跳表？</h1>      ]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot面试題</title>
      <link href="/2023/07/11/SpringBoot%E9%9D%A2%E8%AF%95%E9%A1%8C/"/>
      <url>/2023/07/11/SpringBoot%E9%9D%A2%E8%AF%95%E9%A1%8C/</url>
      
        <content type="html"><![CDATA[        <h1 id="SpringBoot的核心配置类"   >          <a href="#SpringBoot的核心配置类" class="heading-link"><i class="fas fa-link"></i></a><a href="#SpringBoot的核心配置类" class="headerlink" title="SpringBoot的核心配置类"></a>SpringBoot的核心配置类</h1>      <p>我答:</p><p>@AutoWired</p><p>@Resouce</p><p>@RequestMapping</p><p>@RestController</p><p>@Configuration</p><p>@Bean</p><p>@Service</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplicaion 标志这个类是个SpringBoot启动类</span><br><span class="line">@SpringBootConfiguration 这个注解被@Configuration注解标记着 意味着这个类就是个配置类</span><br><span class="line">@EnableAutoConfiguration 这个注解向Spring容器注入一个Selector，用来加载SpringBoot自动配置类，最后自动加载为配置Bean</span><br><span class="line">@Conditional...</span><br><span class="line">例如@ConditionalOnBean  当有这个Bean对象的时候创建</span><br><span class="line">   @ConditionalOnMissingBean 当没有这个Bean对象的时候创建</span><br><span class="line">...</span><br></pre></td></tr></table></div></figure><p>​</p>        <h1 id="SpringBoot的自动配置原理"   >          <a href="#SpringBoot的自动配置原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#SpringBoot的自动配置原理" class="headerlink" title="SpringBoot的自动配置原理"></a>SpringBoot的自动配置原理</h1>      <p>我答：</p><p>Spring启动的时候会解读@EnableAutoConfiguration注解，这里有个@Import注解主要导入到IOC容器管理中，底层有个@defforImportSelector为底层注入自动配置</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">通过@SpringBootConfiguration注解导入了@EnableAutoConfiguration注解</span><br><span class="line">@EnableAutoConfiguration注解导入了@Import注解</span><br><span class="line">Spring启动的时候加载IOC容器就会解析@Import注解</span><br><span class="line">@import注解导入了@deferredImportSelector注解(它会将SpringBoot自动配置的类放到最后，方便我们自己的Bean类覆盖)</span><br><span class="line">通过读取/META-INF/spring.factors文件</span><br><span class="line">读取到所有的AutoConfigurationClass类型的类</span><br><span class="line">最后通过@ConditionalOn...注解排除无效的自动配置类</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h1 id="Spring和SpringBoot的区别和关系"   >          <a href="#Spring和SpringBoot的区别和关系" class="heading-link"><i class="fas fa-link"></i></a><a href="#Spring和SpringBoot的区别和关系" class="headerlink" title="Spring和SpringBoot的区别和关系"></a>Spring和SpringBoot的区别和关系</h1>      <p>我答:</p><p>SpingBoot就是简易的Spring，基于SpringBoot能快速构成一个Spring框架的项目</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SpringBoot是Spring生态的一个产品</span><br><span class="line">Spring Framework是一个框架</span><br><span class="line">SpringBoot不是一个框架，SpringBoot可以快速构建基于Spring框架的脚手架(包括了Spring和其他框架)，为开发Spring生态其他框架铺平道路</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis面试题</title>
      <link href="/2023/07/11/Redis%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/07/11/Redis%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>#复习用   </p>        <h1 id="布隆过滤器有了解过吗？"   >          <a href="#布隆过滤器有了解过吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#布隆过滤器有了解过吗？" class="headerlink" title="布隆过滤器有了解过吗？"></a>布隆过滤器有了解过吗？</h1>      <p>我答:Bloom过滤器主要是BitMap的这种0101的位图，主要作用是做一个白名单的过滤，当请求打进来的时候去查找白名单这个数据是否为1如果是1的话则放行如果是0的话则将数据返回</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">布隆过滤器是一些由0101构成的位图，通过它自身的Hash算法把数据存入多个位置将其置位1，当查询这个数据的时候这些位同时都为1的时候说明数据可能存在，而这些位有一个不为1则说明该数据不存在</span><br><span class="line"></span><br><span class="line">优点：1.他是一串二进制数组组成的所以占用空间小</span><br><span class="line"> 2.hash速度快，查询速度也快，时间复杂度为O(k),k为K个哈希函数，原因是底层都是01的数组 只要知道偏移量就很快知道是否为1</span><br><span class="line"> 3.数据的加密性，数据只有0和1 所以别人不知道这个数据代表着什么意思</span><br><span class="line"> </span><br><span class="line">缺点:</span><br><span class="line"> 1.不易于删除 有可能一个位对应多个数据，存在误判</span><br></pre></td></tr></table></div></figure>        <h1 id="Redis为什么这么快"   >          <a href="#Redis为什么这么快" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis为什么这么快" class="headerlink" title="Redis为什么这么快"></a>Redis为什么这么快</h1>      <p>我答: 第一、Redis是内存中的一种存放Key-Value值的NoSql数据库，因为它在内存中所以他的运行速度较快</p><p>​ 第二、Redis是单线程的，所有操作都是单线程处理的，所以Redis自己处理业务逻辑的时候不用上锁所以速度快 </p><p>​         第三、Redis因为有IO的多路复用则能高效的提升Redis的运行效率</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、Redis是在内存中的 没有额外的磁盘IO上面的开销</span><br><span class="line">2、Redis是单线程的，没有多个线程的切换上下文和锁的限制</span><br><span class="line">3、Redis是多路IO复用，用一个线程来轮询多个时间描述符</span><br><span class="line">4、Redis底层对数据结构进行了优化</span><br></pre></td></tr></table></div></figure>        <h1 id="缓存穿透、雪崩、击穿、预热"   >          <a href="#缓存穿透、雪崩、击穿、预热" class="heading-link"><i class="fas fa-link"></i></a><a href="#缓存穿透、雪崩、击穿、预热" class="headerlink" title="缓存穿透、雪崩、击穿、预热"></a>缓存穿透、雪崩、击穿、预热</h1>      <p>我答:</p><p>缓存穿透：在Redis没有数据并且在MySql也没有数据，非法人员利用这个漏洞不断把请求打到MySql中导致MySql的性能降低</p><p>解决方案: 1.返回空值 2.利用布隆过滤器对其筛选  3.利用分布式锁</p><p>缓存雪崩：大量热点Key的同时失效或者是Redis单机宕机导致的大量请求打到MySql中</p><p>解决方案：1.部署集群防止Redis单机宕机造成的影响 2.分散设置Key的过期时间，不要同时过期</p><p>缓存击穿：某个热点Key的突然失效，导致请求直接打到MySql中 </p><p>解决方案：1.利用分布式锁</p><p>缓存预热：在服务还未提供之前将MySql的数据提前写入到Redis中 防止缓存击穿</p><p>​ </p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">缓存穿透：一个数据在Redis中没有在MySql中也没有则会多次反复的打到MySql服务器上，可能会造成MySql服务器的宕机</span><br><span class="line">   解决方案 </span><br><span class="line">   1.返回空值:将返回的空值写入Redis中 例如：Key =1 value =null </span><br><span class="line">   优点是操作简单 </span><br><span class="line">   缺点是大量为NUll的数据会占用内存 并且有可能会导致数据不一致[后期MySql存入了Key=1的值 但是Redis的值依旧是NULL]</span><br><span class="line">    2.利用Bloom过滤器 </span><br><span class="line">    3.利用分布式锁</span><br><span class="line">缓存雪崩:大量Key同时过期或者Redis宕机导致MySql一次性接入大量请求导致失效或者宕机</span><br><span class="line">解决方案</span><br><span class="line">1.将多个Key分开设置过期时间防止同时失效 </span><br><span class="line">2.利用集群，防止单机的Redis宕机</span><br><span class="line">缓存击穿:一个热点Key的忽然失效导致大量请求打到MySql服务器中</span><br><span class="line">解决方案</span><br><span class="line">1.利用分布式锁 查询数据之后发现数据过期了,设置一个互斥锁,等待数据库将缓存写回Redis中，写回Redis之后再进行返回数据</span><br><span class="line">   特点是 高一致性、性能较差</span><br><span class="line">    2.设置逻辑过期  Redis中不设置过期时间 但是会带有一个过期时间的字段 当查询这个字段过期了 会设置互斥锁对数据进行重新写回Redis。这个线程不用等数据的缓存更新而是直接返回过期的数据 。当更新完缓存之后的线程再查询这个数据时则返回最新的数据</span><br><span class="line">    特点是 高可用、性能较好、可能会导致返回数据的不一致性</span><br></pre></td></tr></table></div></figure>        <h1 id="LRU和LFU的实现原理"   >          <a href="#LRU和LFU的实现原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#LRU和LFU的实现原理" class="headerlink" title="LRU和LFU的实现原理"></a>LRU和LFU的实现原理</h1>      <p>我答：</p><p>LRU是最少最近被使用到，LRU是淘汰最远未被使用的页</p><p>LFU是最近最低频次被使用到,而LFU是淘汰最少频率的页</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LRU用双向链表维护 头插法将最近使用到的放在头部，当需要淘汰老的数据的时候则在尾部的淘汰就可以了</span><br><span class="line">LFU是Redis Object 底层有一个计数器如最近被使用到则计数器重新置位1开始计数，则计数数值大的被淘汰</span><br></pre></td></tr></table></div></figure>        <h1 id="Redis为什么要选择用单线程？"   >          <a href="#Redis为什么要选择用单线程？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis为什么要选择用单线程？" class="headerlink" title="Redis为什么要选择用单线程？"></a>Redis为什么要选择用单线程？</h1>      <p>Redis操作都是原子性的，单线程没有多线程这种切换线程的上下文和锁资源的抢夺</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redis中CPU不是限制Redis的瓶颈，Redis的瓶颈可能是网络带宽或者是内存不足引起的，既然单线程容易处理业务逻辑，就不会使用到多线程了</span><br></pre></td></tr></table></div></figure>        <h1 id="Redis底层对数据结构进行了哪方面的优化"   >          <a href="#Redis底层对数据结构进行了哪方面的优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis底层对数据结构进行了哪方面的优化" class="headerlink" title="Redis底层对数据结构进行了哪方面的优化?"></a>Redis底层对数据结构进行了哪方面的优化?</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">【底层有封装Len长度 所以获得数据的数很快】</span><br><span class="line">1.String   底层是SDS 简单动态字符串 因为底层是c而c语言中没有字符串 字符串只是字符数组以&#x27;\0的方式结束的字符数组 所以redis底层自己封装了一个字符串</span><br><span class="line">有三个编码格式 1.int 2.embStr 3.raw</span><br><span class="line">当数字是int 当不是整数且字符数小于等于39则是embStr  当字符数大于39的时候是Raw</span><br><span class="line"></span><br><span class="line">2.Hash  底层是ZipList和HashTable【Redis6以前】 底层是Listpack和HashTable[Redis7以后]  </span><br><span class="line">当结点个数小于512个 并且每个结点长度小于64个时[默认]用ziplist 超过了就转成HashTable</span><br><span class="line">ZipList是连续的一串Node节点 每个节点会存放上一个节点的长度 因此会有连锁更新的现象[当第一个节点更新导致后面所有的节点都更新]</span><br><span class="line">Listpack是紧凑列表 不会记录上一个节点长度 只会记录当前节点长度</span><br><span class="line"></span><br><span class="line">3.list类型 底层是quicklist+ziplist【Redis6以前】 底层是quicklist+listpack[Redis7以后] </span><br><span class="line">quickList 是一个双向链表和压缩表</span><br><span class="line"></span><br><span class="line">4.set类型</span><br><span class="line">intset+HashTable 哈希表+整数集合</span><br><span class="line"></span><br><span class="line">5.zset类型 底层是zipList+skipList[Redis6以前] 底层是zipList+SkipList[Redis7以后]</span><br><span class="line">SkipList是跳表 跳表底层是链表+多级索引</span><br><span class="line">跳表的时间复杂度是O(LogN)</span><br><span class="line">最上层是 1个索引</span><br><span class="line">倒数第二层是两个索引</span><br><span class="line">倒数第三层是4个索引</span><br><span class="line">第一层是2的N次方-1个索引  所以一共树的高度是LogN</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h1 id="讲讲对Redis哈希分槽的理解"   >          <a href="#讲讲对Redis哈希分槽的理解" class="heading-link"><i class="fas fa-link"></i></a><a href="#讲讲对Redis哈希分槽的理解" class="headerlink" title="讲讲对Redis哈希分槽的理解"></a>讲讲对Redis哈希分槽的理解</h1>      <p>Redis分三个片区 总的片区为16384 在分成这么多片区的时候已经够Redis使用了。</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Redis在集群的時候要对数据进行分片算法   要算出某个数据的槽位是多少即由这个槽位下的节点来管理数据</span><br><span class="line">slot = CRC（16）算法 % 16384；</span><br><span class="line">对集群中每个节点会率先对16384个槽位进行分配  然后哈希分片算法算出的是多少槽位就会在这个槽位下的节点管理</span><br></pre></td></tr></table></div></figure>        <h1 id="讲讲Redis的过期键删除策略"   >          <a href="#讲讲Redis的过期键删除策略" class="heading-link"><i class="fas fa-link"></i></a><a href="#讲讲Redis的过期键删除策略" class="headerlink" title="讲讲Redis的过期键删除策略"></a>讲讲Redis的过期键删除策略</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">定时删除：给Key设置一个过期时间，一旦这个过期时间到了就立即删除(立即删除)</span><br><span class="line">惰性删除：给Key设置一个过期时间，当Key过期之后不会主动删除而是等下次再被调用的时候再判断Key是否过期，如果过期了就删除并且返回空</span><br><span class="line">定期删除: 每隔一段时间执行删除过期键的操作，采用随机抽取的策略</span><br><span class="line"></span><br><span class="line">Redis采用了惰性删除+定期删除的策略</span><br></pre></td></tr></table></div></figure>        <h1 id="讲讲Redis的淘汰算法策略"   >          <a href="#讲讲Redis的淘汰算法策略" class="heading-link"><i class="fas fa-link"></i></a><a href="#讲讲Redis的淘汰算法策略" class="headerlink" title="讲讲Redis的淘汰算法策略"></a>讲讲Redis的淘汰算法策略</h1>      <p>   1.一有过期就删除  这样会大量占用Redis Redis大部分都用于删除Key值会影响性能</p><ol start="2"><li><p>完全没有过期 因为内存是有限的，如果缓存一直不删除则会一直堆积在内存中</p><p>3.随机过期的值   这样会导致仍然有部分漏网之鱼未被删除</p></li><li><p>随机删除值    这样会导致有效Key的删除</p></li><li><p>LRU算法 删除最近最少被使用的Key</p></li><li><p>LFU算法 删除最近使用频率最小的Key</p></li></ol><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">定期删除+惰性删除配合使用</span><br><span class="line">定期删除：Redis定期检查Key的过期时间。 一旦发现过期的时候就删除 这个缺点是频繁扫描会降低性能</span><br><span class="line">惰性删除：Redis在要使用Key的时候检查是否过期，一旦过期就删除 这样的弊端是有些Key一直未被使用但是过期了会占用空间</span><br><span class="line"></span><br><span class="line">八大策略</span><br><span class="line">4(定期、LRU、LFU、随机)*2(过期不过期)</span><br><span class="line">1.不删除  内存不足时会直接报错</span><br><span class="line">2.定期删除过期</span><br><span class="line">3.利用LRU删除过期</span><br><span class="line">4.利用LRU删除【不论过期不过期】</span><br><span class="line">5.利用LFU删除过期</span><br><span class="line">6.利用LFU删除【不论过期不过期】</span><br><span class="line">7.随机删除过期</span><br><span class="line">8.随机删除【不论过期不过期】</span><br></pre></td></tr></table></div></figure>        <h1 id="聊聊Redis怎么实现的IO多路复用"   >          <a href="#聊聊Redis怎么实现的IO多路复用" class="heading-link"><i class="fas fa-link"></i></a><a href="#聊聊Redis怎么实现的IO多路复用" class="headerlink" title="聊聊Redis怎么实现的IO多路复用"></a>聊聊Redis怎么实现的IO多路复用</h1>      <p>Redis用一个文件监听器来监听多个网络IO，用Select+poll+Epoll函数进行IO多路复用</p><p>Redis用一个进程来监听多个网络IO，一旦有IO请求的时候则会唤醒线程用Epoll函数处理要有网络请求的IO，若没有请求时则会阻塞线程，这样可以减少无用的操作，提升效率</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Redis底层用文件事件处理器，监听多个Socket，根据Socket分发给不同的文件处理器</span><br><span class="line">Redis用一个进程来监听多个Socket，一旦有Socket时则会唤醒线程用Epoll函数，若没有请求时则会阻塞线程，这样可以减少无用的操作，提升效率</span><br></pre></td></tr></table></div></figure>        <h1 id="为什么Key没有设置过期时间但是却被Redis删除了"   >          <a href="#为什么Key没有设置过期时间但是却被Redis删除了" class="heading-link"><i class="fas fa-link"></i></a><a href="#为什么Key没有设置过期时间但是却被Redis删除了" class="headerlink" title="为什么Key没有设置过期时间但是却被Redis删除了"></a>为什么Key没有设置过期时间但是却被Redis删除了</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置了最大内存限制之后，超过限制容量可能触发了淘汰策略  </span><br><span class="line">可能是随机删除Key、利用LRU删除Key、利用LFU删除Key</span><br></pre></td></tr></table></div></figure>        <h1 id="为什么Redis的哈希槽是16384个"   >          <a href="#为什么Redis的哈希槽是16384个" class="heading-link"><i class="fas fa-link"></i></a><a href="#为什么Redis的哈希槽是16384个" class="headerlink" title=".为什么Redis的哈希槽是16384个"></a>.为什么Redis的哈希槽是16384个</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">因为16384/8/=2KB 而65536/8=8KB  </span><br><span class="line">用65536个槽位的话心跳包的消息头要8KB，过于庞大 而16384个槽位只要2KB</span><br></pre></td></tr></table></div></figure>        <h1 id="Redis数据持久化策略有哪些？"   >          <a href="#Redis数据持久化策略有哪些？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis数据持久化策略有哪些？" class="headerlink" title=".Redis数据持久化策略有哪些？"></a>.Redis数据持久化策略有哪些？</h1>      <p>我答：利用aof存储  2.利用rdb的方式存储  </p><p>利用RDB的方式存储 则保存的是历史指令，每一个指令都会被记录在RDB中 当Redis宕机重启后会重读RDB文件  恢复数据</p><p>利用AOF存储 保存的是改变最终数据的指令  他将最后实现数据的指令存在.aof文件中  最后要重启Redis之后只需要执行少部分影响数据的指令即可</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一共有两钟：1.RDB 2.AOF </span><br><span class="line">RDB:是快照文件，把整个Redis数据写入在内存中，当Redis重启时可以从快照恢复数据</span><br><span class="line">AOF:是追加写入文件，只记录写命令，当Redis宕机重启时重新执行一遍命令来恢复数据</span><br><span class="line"></span><br><span class="line">RDB和AOF优缺点: RDB是二进制文件，体积比较小，恢复速度更快，但是丢数据风险更高</span><br><span class="line">  AOF是写入文件，体积比较大，恢复速度更慢但是丢数据风险更低，我们可以配置刷盘策略来设置多久写入命令</span><br></pre></td></tr></table></div></figure>        <h1 id="Redis作为缓存，MySql的数据如何与Redis进行同步-双写一致性"   >          <a href="#Redis作为缓存，MySql的数据如何与Redis进行同步-双写一致性" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis作为缓存，MySql的数据如何与Redis进行同步-双写一致性" class="headerlink" title=".Redis作为缓存，MySql的数据如何与Redis进行同步?(双写一致性)"></a>.Redis作为缓存，MySql的数据如何与Redis进行同步?(双写一致性)</h1>      <p>我答：Redis作为缓存，而MySql作为底单数据  我们一般是业务先写入MySql中然后利用Canal监控对Redis和MySql的数据变化，当MySql的数据发生变化的时候查询MySql写回到Redis中保持了数据的一致性</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1.延迟双删 </span><br><span class="line">延迟双删:先把缓存删除再更新数据库数据最后延迟删除缓存，延时主要是为了数据库的主从一致。</span><br><span class="line">        缺点是1.我们不能准确把控延时的时间</span><br><span class="line">             2.延时的过程仍然有脏数据的风险 </span><br><span class="line">             【</span><br><span class="line">             假如有线程T1,T2,T3 当线程T1删除了缓存更新数据库的时候</span><br><span class="line">             线程T2发现缓存没有之后查询DB获取到未更新完的数据(老数据)，然后写回缓存</span><br><span class="line">             线程T3发现缓存没有之后查询DB获取到未更新完的数据(老数据)，然后要写回缓存之前阻塞</span><br><span class="line">             线程T1更新完数据之后 </span><br><span class="line">             一定时间之后删除缓存(删除线程T2写回的老数据)</span><br><span class="line">             这个时候T3唤醒，执行了写回缓存操作</span><br><span class="line">             那么就会造成缓存和DB数据不一致的情况 出现了脏数据</span><br><span class="line">              </span><br><span class="line">             】</span><br><span class="line">2.利用分布式锁【保证数据的实时性】[利用Redisson实现]</span><br><span class="line">             1)读数据的时候利用共享读锁</span><br><span class="line">             2)在写数据的时候利用互斥写锁</span><br><span class="line">        特性是：利用读写锁可以保证数据的强一致性，但是写锁会堵塞其他线程降低性能</span><br><span class="line">3.利用异步通知的方式</span><br><span class="line">            1)利用MQ的方式，更新数据之后，通知缓存删除</span><br><span class="line">            2)利用canal的方式，Canal伪装成MySql的一个节点，通过读取binlog数据。再同步写回Redis中</span><br></pre></td></tr></table></div></figure>        <h1 id="如果数据库有1000w条数据，但是Redis只能存20w的数据，如何保证Redis保存的是热点数据呢？"   >          <a href="#如果数据库有1000w条数据，但是Redis只能存20w的数据，如何保证Redis保存的是热点数据呢？" class="heading-link"><i class="fas fa-link"></i></a><a href="#如果数据库有1000w条数据，但是Redis只能存20w的数据，如何保证Redis保存的是热点数据呢？" class="headerlink" title=".如果数据库有1000w条数据，但是Redis只能存20w的数据，如何保证Redis保存的是热点数据呢？"></a>.如果数据库有1000w条数据，但是Redis只能存20w的数据，如何保证Redis保存的是热点数据呢？</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AllKeys-Lru  选择最近最少访问的数据淘汰</span><br></pre></td></tr></table></div></figure>        <h1 id="Redis脑裂现象怎么解决？"   >          <a href="#Redis脑裂现象怎么解决？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis脑裂现象怎么解决？" class="headerlink" title="Redis脑裂现象怎么解决？"></a>Redis脑裂现象怎么解决？</h1>      <p>我答：Redis的脑裂现象主要出现于master存入数据时，哨兵因为网络波动无法检测到Master于是投票选举了一个salve上位成master，这样原Master连接回来只能成为Slave，造成了数据丢失，解决方案是可以在配置中配置至少有Slave节点才能执行写操作</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">脑裂现象主要出现于master存入数据时，哨兵因为网络波动无法检测到Master于是投票选举了一个salve上位成master，这样原Master连接回来只能成为Slave，造成了数据丢失</span><br><span class="line">解决方案是1.可以在配置中配置至少有Slave节点才能执行写操作</span><br><span class="line">2.可以设置主从节点之间的最大延迟时间，如果超过了延迟时间则拒绝写入</span><br></pre></td></tr></table></div></figure><p>##为什么Redis中使用跳表而不用B+树呢？-跳表</p>        <h1 id="底层实现是什么数据结构-跳表"   >          <a href="#底层实现是什么数据结构-跳表" class="heading-link"><i class="fas fa-link"></i></a><a href="#底层实现是什么数据结构-跳表" class="headerlink" title="底层实现是什么数据结构-跳表"></a>底层实现是什么数据结构-跳表</h1>              <h1 id="结点的数据结构保存了什么信息-跳表"   >          <a href="#结点的数据结构保存了什么信息-跳表" class="heading-link"><i class="fas fa-link"></i></a><a href="#结点的数据结构保存了什么信息-跳表" class="headerlink" title="结点的数据结构保存了什么信息-跳表"></a>结点的数据结构保存了什么信息-跳表</h1>              <h1 id="新结点的层数如何确定-跳表"   >          <a href="#新结点的层数如何确定-跳表" class="heading-link"><i class="fas fa-link"></i></a><a href="#新结点的层数如何确定-跳表" class="headerlink" title="新结点的层数如何确定?-跳表"></a>新结点的层数如何确定?-跳表</h1>              <h1 id="跳表的创建过程-跳表"   >          <a href="#跳表的创建过程-跳表" class="heading-link"><i class="fas fa-link"></i></a><a href="#跳表的创建过程-跳表" class="headerlink" title="跳表的创建过程?-跳表"></a>跳表的创建过程?-跳表</h1>              <h1 id="跳表最多多少层-跳表"   >          <a href="#跳表最多多少层-跳表" class="heading-link"><i class="fas fa-link"></i></a><a href="#跳表最多多少层-跳表" class="headerlink" title="跳表最多多少层?-跳表"></a>跳表最多多少层?-跳表</h1>      ]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM调优实例</title>
      <link href="/2023/04/27/JVM%E8%B0%83%E4%BC%98%E5%AE%9E%E4%BE%8B/"/>
      <url>/2023/04/27/JVM%E8%B0%83%E4%BC%98%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[        <h1 id="准备工作"   >          <a href="#准备工作" class="heading-link"><i class="fas fa-link"></i></a><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1>              <h2 id="java源码"   >          <a href="#java源码" class="heading-link"><i class="fas fa-link"></i></a><a href="#java源码" class="headerlink" title="java源码"></a>java源码</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.NinthP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sound.sampled.Line;</span><br><span class="line"><span class="keyword">import</span> javax.xml.crypto.Data;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JVM_FullGC_Program</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CardInfo</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">price</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">0.0</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">brithdate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ScheduledThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScheduledThreadPoolExecutor</span>(<span class="number">50</span>, </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardOldestPolicy());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        executor.setMaximumPoolSize(<span class="number">50</span>);</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            modelFet();</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">modelFet</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;CardInfo&gt; taskList = getAllCardInfo();</span><br><span class="line">        taskList.forEach(info -&gt; &#123;</span><br><span class="line">            executor.scheduleWithFixedDelay(() -&gt; &#123;</span><br><span class="line">                info.m();</span><br><span class="line">            &#125;, <span class="number">2</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;CardInfo&gt; <span class="title function_">getAllCardInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;CardInfo&gt; taskList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="type">CardInfo</span> <span class="variable">ci</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CardInfo</span>();</span><br><span class="line">            taskList.add(ci);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> taskList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="java命令"   >          <a href="#java命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#java命令" class="headerlink" title="java命令"></a>java命令</h2>      <p>介绍一下将要用到的Java命令所带的参数</p><p>可以通过java命令获得   &#x2F;&#x2F;就像@help获得帮助文档一样</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java -Xms&lt;size&gt;    //设置程序最小内存</span><br><span class="line">java -Xmx&lt;size&gt;    //设置程序最大内存</span><br><span class="line">//java -XX:+PrintFlagsFinal -version  打印出-XX的所有指令</span><br><span class="line">java -XX:+PrintGC  //将GC启动时打印出来大概的信息</span><br></pre></td></tr></table></div></figure><p>JDK自带的命令行命令</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jps        //用于获得系统中运行中的java进程</span><br><span class="line">jinfo &lt;pid&gt; //显示指定线程的详情信息</span><br><span class="line">jstat -gc &lt;pid&gt; (ms)//获得JVM各区域详情 参数一:指定进程号 参数二:每xx毫秒刷新输出</span><br><span class="line">jstack &lt;pid&gt;    //跟踪线程中的堆栈信息</span><br><span class="line">jmap -histo &lt;pid&gt; //获得指定线程中实例对象个数和所占字节数</span><br><span class="line">#!!</span><br><span class="line">#jmap命令会导致线程卡死，STW   </span><br></pre></td></tr></table></div></figure>        <h1 id="启动程序"   >          <a href="#启动程序" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -Xms200M -Xmx200M -XX:+PrintGC JVM_FullGC_Program </span><br><span class="line">//将最大和最小内容设置为200M是防止内存抖动对GC测试造成影响  测试实例直接赋予200M而不会进行扩容和缩容</span><br></pre></td></tr></table></div></figure>        <h2 id="现象"   >          <a href="#现象" class="heading-link"><i class="fas fa-link"></i></a><a href="#现象" class="headerlink" title="现象"></a>现象</h2>      <p>运行之后【短时间】</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230428164414700.png" >      </p><p>运行之后【长时间】</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/JVM%E8%B0%83%E4%BC%98%E5%AE%9E%E4%BE%8B/image-20230428164438455.png" >      </p><p>top命令</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top  //liunx命令  类似于windows中的任务管理器 获得现在系统资源</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230428165712461.png"  alt="image-20230428165712461">      </p><p>jps命令</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps   //显示系统中运行中的java进程号</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230428164032591.png"  alt="image-20230428164032591">      </p><p>jinfo命令</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jinfo 120019 </span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# jinfo 120019</span><br><span class="line">Java System Properties:</span><br><span class="line">#Fri Apr 28 16:36:54 CST 2023</span><br><span class="line">awt.toolkit=sun.awt.X11.XToolkit</span><br><span class="line">java.specification.version=11</span><br><span class="line">sun.cpu.isalist=</span><br><span class="line">sun.jnu.encoding=UTF-8</span><br><span class="line">java.class.path=.</span><br><span class="line">java.vm.vendor=Oracle Corporation</span><br><span class="line">sun.arch.data.model=64</span><br><span class="line">java.vendor.url=https\://openjdk.java.net/</span><br><span class="line">user.timezone=</span><br><span class="line">java.vm.specification.version=11</span><br><span class="line">os.name=Linux</span><br><span class="line">sun.java.launcher=SUN_STANDARD</span><br><span class="line">user.country=US</span><br><span class="line">sun.boot.library.path=/export/server/jdk-11.0.18/lib</span><br><span class="line">sun.java.command=jdk.compiler/com.sun.tools.javac.launcher.Main JVM_FullGC_Program.java</span><br><span class="line">jdk.debug=release</span><br><span class="line">sun.cpu.endian=little</span><br><span class="line">user.home=/root</span><br><span class="line">user.language=en</span><br><span class="line">java.specification.vendor=Oracle Corporation</span><br><span class="line">java.version.date=2023-01-17</span><br><span class="line">java.home=/export/server/jdk-11.0.18</span><br><span class="line">file.separator=/</span><br><span class="line">java.vm.compressedOopsMode=32-bit</span><br><span class="line">line.separator=\n</span><br><span class="line">java.vm.specification.vendor=Oracle Corporation</span><br><span class="line">java.specification.name=Java Platform API Specification</span><br><span class="line">java.awt.graphicsenv=sun.awt.X11GraphicsEnvironment</span><br><span class="line">jdk.module.main.class=com.sun.tools.javac.launcher.Main</span><br><span class="line">sun.management.compiler=HotSpot 64-Bit Tiered Compilers</span><br><span class="line">java.runtime.version=11.0.18+9-LTS-195</span><br><span class="line">user.name=root</span><br><span class="line">path.separator=\:</span><br><span class="line">os.version=3.10.0-1160.el7.x86_64</span><br><span class="line">java.runtime.name=Java(TM) SE Runtime Environment</span><br><span class="line">file.encoding=UTF-8</span><br><span class="line">java.vm.name=Java HotSpot(TM) 64-Bit Server VM</span><br><span class="line">java.vendor.version=18.9</span><br><span class="line">java.vendor.url.bug=https\://bugreport.java.com/bugreport/</span><br><span class="line">java.io.tmpdir=/tmp</span><br><span class="line">java.version=11.0.18</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>jstat命令</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gc 120019 500  //每0.5秒输出一次</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230428165346325.png"  alt="image-20230428165346325">      </p><p>jstack命令</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstack 120019</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230428165756532.png"  alt="image-20230428165756532">      </p><p>可以获得线程中</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pool-1-thread-47 //线程ID</span><br><span class="line">#56 //线程编号</span><br><span class="line">prio=0           //线程优先级</span><br><span class="line">os_prio=0        //操作系统中优先级</span><br><span class="line">waiting on condition [0x000037f54723e2300] //线程所等待的锁</span><br><span class="line">WAITING          //线程状态</span><br></pre></td></tr></table></div></figure><p>​    </p><p>jmap命令</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -histo 120019</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230428170854321.png"  alt="image-20230428170854321">      </p>        <h2 id="分析"   >          <a href="#分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#分析" class="headerlink" title="分析"></a>分析</h2>      <p>由运行程序后长时间结果可以得出</p><p>程序再频繁调动GC 但是GC清理内存结果并不理想  同时CPU占用率会居高不下</p><p>查看线程中实例对象可以知道 某几类对象的实例个数和字节数高</p>        <h2 id="Arthas"   >          <a href="#Arthas" class="heading-link"><i class="fas fa-link"></i></a><a href="#Arthas" class="headerlink" title="Arthas"></a>Arthas</h2>      <p>利用阿里开源的Arthas</p><p><span class="exturl"><a class="exturl__link"   href="https://arthas.aliyun.com/" >https://arthas.aliyun.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>在官网下载安装包 然后解压</p><p>进入解压位置  启动arthas</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar arthas-boot.jar    </span><br><span class="line">#提前先开启至少一个java进程</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230428192744362.png"  alt="image-20230428192744362">      </p><p>进入该页面即成功启动arthas</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dashboard //会展示当前进程的信息，按ctrl+c可以中断执行。</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230428192905395.png"  alt="image-20230428192905395">      </p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>canal实现缓存同步</title>
      <link href="/2023/04/25/canal%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E5%90%8C%E6%AD%A5/"/>
      <url>/2023/04/25/canal%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[        <h1 id="使用canal实现Redis与Mysql的缓存同步"   >          <a href="#使用canal实现Redis与Mysql的缓存同步" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用canal实现Redis与Mysql的缓存同步" class="headerlink" title="使用canal实现Redis与Mysql的缓存同步"></a>使用canal实现Redis与Mysql的缓存同步</h1>              <h2 id="在停机的条件下进行数据同步"   >          <a href="#在停机的条件下进行数据同步" class="heading-link"><i class="fas fa-link"></i></a><a href="#在停机的条件下进行数据同步" class="headerlink" title="在停机的条件下进行数据同步"></a>在停机的条件下进行数据同步</h2>      <p>直接单线程更新数据即可  可以达成数据一致性</p>        <h2 id="在不停机的条件下进行数据同步"   >          <a href="#在不停机的条件下进行数据同步" class="heading-link"><i class="fas fa-link"></i></a><a href="#在不停机的条件下进行数据同步" class="headerlink" title="在不停机的条件下进行数据同步"></a>在不停机的条件下进行数据同步</h2>      <p>Redis和Mysql进行数据同步的时候有四种方案</p>        <h3 id="方案1"   >          <a href="#方案1" class="heading-link"><i class="fas fa-link"></i></a><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3>      <p>先更新数据库再更新缓存</p><p>存在问题</p><p>再更新Mysql成功之后更新Redis失败 会导致脏数据的存在</p><p>举例：</p><p>甲的订单库存为100个 更改Mysql之后Mysql变成99个  再更新Redis时失败</p><p>导致结果为 Redis中数据为100  而Mysql中数据为99  存在脏数据</p>        <h4 id="正常情况下"   >          <a href="#正常情况下" class="heading-link"><i class="fas fa-link"></i></a><a href="#正常情况下" class="headerlink" title="正常情况下"></a>正常情况下</h4>      <p>A更新Mysql 为50</p><p>A更新Redis  为50</p><p>B更新Mysql 为30</p><p>B更新Redis 为30</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>最终结果是Mysql：30 Redis：30    数据一致</p>        <h4 id="多线程异常情况下"   >          <a href="#多线程异常情况下" class="heading-link"><i class="fas fa-link"></i></a><a href="#多线程异常情况下" class="headerlink" title="多线程异常情况下"></a>多线程异常情况下</h4>      <p>A更新Mysql为50</p><p>B更新Mysql为30</p><p>B更新Redis为30</p><p>A更新Redis为50</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>最终结果是Mysql:30 Redis:50   </p><p>因此会导致数据的不一致 </p>        <h3 id="方案2"   >          <a href="#方案2" class="heading-link"><i class="fas fa-link"></i></a><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3>      <p>先更新缓存再更新数据库</p><p>同时也存在问题</p>        <h4 id="正常情况下-1"   >          <a href="#正常情况下-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#正常情况下-1" class="headerlink" title="正常情况下"></a>正常情况下</h4>      <p>A更新Redis为50</p><p>A更新Mysql为50</p><p>B更新Redis为30</p><p>B更新Mysql为30</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>最终结果时Mysql:30 Redis:30  数据一致</p>        <h4 id="多线程异常情况下-1"   >          <a href="#多线程异常情况下-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#多线程异常情况下-1" class="headerlink" title="多线程异常情况下"></a>多线程异常情况下</h4>      <p>A更新Redis为50</p><p>B更新Redis为30</p><p>B更新Mysql为30</p><p>A更新Mysql为50</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>最终结果时Mysql:50 Redis:30 数据不一致</p><p>并且数据库作为底单数据，所以不推荐使用此方案</p>        <h3 id="方案3"   >          <a href="#方案3" class="heading-link"><i class="fas fa-link"></i></a><a href="#方案3" class="headerlink" title="方案3"></a>方案3</h3>      <p>先删除缓存再更新数据库</p>        <h4 id="异常情况"   >          <a href="#异常情况" class="heading-link"><i class="fas fa-link"></i></a><a href="#异常情况" class="headerlink" title="异常情况"></a>异常情况</h4>      <p>A线程删除缓存之后更新数据库【此时数据库并未更新完】 </p><p>B线程来获取数据</p><p>B线程发现缓存中没有数据,B就去查数据库</p><p>B查询数据库获得旧数据,并且写回于缓存中</p><p>A更新数据库完成  【Redis此时只有B线程处理后写回的旧数据】</p><p>其他线程获取数据时 发现缓存没有查数据库再把新数据写回缓存</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>最终结果 数据库中为新数据   缓存中存在B线程写回的旧数据 并且无法更改【一直存在脏数据】</p>        <h4 id="改进方法"   >          <a href="#改进方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#改进方法" class="headerlink" title="改进方法"></a>改进方法</h4>              <h5 id="延迟双删"   >          <a href="#延迟双删" class="heading-link"><i class="fas fa-link"></i></a><a href="#延迟双删" class="headerlink" title="延迟双删"></a>延迟双删</h5>      <p>在删除缓存之后数据库更新未完成  其他线程写回的旧数据再进行一次删除</p><p>即删除缓存-&gt;数据库更新-&gt;删除缓存  </p><p>删除两次缓存保证数据的最终一致性</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.先删除旧数据</span></span><br><span class="line">jedis.del(order.getId()+<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//2.更新数据库</span></span><br><span class="line">orderDao.update(order);</span><br><span class="line"><span class="comment">//3.暂停一会等待其他线程获取旧数据</span></span><br><span class="line">thread.sleep(<span class="number">2</span>);<span class="comment">//暂停时间大概是处理业务逻辑时间后再加几百毫秒</span></span><br><span class="line"><span class="comment">//4.再删除旧数据</span></span><br><span class="line">jedis.del(order.getId()+<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>最终保证数据最终的一致性</p><p>但是</p><p>1、无法较为精准地控制休眠时间</p><p>2、这种同步删除的操作会降低吞吐量</p>        <h3 id="方案4"   >          <a href="#方案4" class="heading-link"><i class="fas fa-link"></i></a><a href="#方案4" class="headerlink" title="方案4"></a>方案4</h3>      <p>先更新数据库再删除缓存</p><p>问题是在数据库未更新完时 其他线程获得的数据是缓存旧值</p>        <h5 id="此时用canal监控Mysql并且同步写回到Redis中"   >          <a href="#此时用canal监控Mysql并且同步写回到Redis中" class="heading-link"><i class="fas fa-link"></i></a><a href="#此时用canal监控Mysql并且同步写回到Redis中" class="headerlink" title="此时用canal监控Mysql并且同步写回到Redis中"></a>此时用canal监控Mysql并且同步写回到Redis中</h5>              <h4 id="准备工作"   >          <a href="#准备工作" class="heading-link"><i class="fas fa-link"></i></a><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4>              <h5 id="mysql端"   >          <a href="#mysql端" class="heading-link"><i class="fas fa-link"></i></a><a href="#mysql端" class="headerlink" title="mysql端"></a>mysql端</h5>      <p>打开mysql的安装路径-修改my.ini文件</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin  #开启 binlog</span><br><span class="line">binlog-format=ROW  #选择ROW模式</span><br><span class="line">server_id=1        #配置Mysql replaction需要定义</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>修改文件之后重启mysql服务即可</p>        <h5 id="canal端"   >          <a href="#canal端" class="heading-link"><i class="fas fa-link"></i></a><a href="#canal端" class="headerlink" title="canal端"></a>canal端</h5>      <p>下载canal.depolyer-1.1.6.tar.gz 并解压到对应文件夹</p><p>修改配置文件</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim conf/example/instance.properties</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230425203014303.png"  alt="image-20230425203014303">      </p><p>修改canal.instance.master.address地址   改为要监控的IP地址以及数据库端口号</p><p>通过ipconfig命令获得本机的IP地址为10.66.9.48</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230425203214178.png"  alt="image-20230425203214178">      </p><h5 id=""><a href="#" class="headerlink" title=""></a></h5><p>修改之后</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230425203314812.png"  alt="image-20230425203314812">      </p><p>返回解压文件夹后开启canal服务</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ../..</span><br><span class="line">cd bin</span><br><span class="line">./startup.sh                //如果修改配置之前开启过服务应先暂停 ./stop.sh</span><br></pre></td></tr></table></div></figure><p>查看log日志检查canal开启情况</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ../</span><br><span class="line">cd logs/canal</span><br><span class="line">cat canal.log</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230425204205562.png"  alt="image-20230425204205562">      </p><p>表示成功运行</p>        <h5 id="redis端"   >          <a href="#redis端" class="heading-link"><i class="fas fa-link"></i></a><a href="#redis端" class="headerlink" title="redis端"></a>redis端</h5>      <p>启动服务端口号为6379</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis6379.conf</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> MySql </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探究safeEqual方法</title>
      <link href="/2023/03/09/%E6%8E%A2%E7%A9%B6safeEqual%E6%96%B9%E6%B3%95/"/>
      <url>/2023/03/09/%E6%8E%A2%E7%A9%B6safeEqual%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><strong>对safeEqual判断</strong></p>        <h1 id="代码如下"   >          <a href="#代码如下" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">safeEqual</span><span class="params">(String a,String b)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.length()!=b.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> equal=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">        equal |= a.charAt(i) ^ b.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> equal==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>这几行代码很少，一段段很好看懂</p><p>一开始判断字符串长度,如果字符串长度不相同的话直接返回false;</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a.length()!=b.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>定义了一个equal变量  先赋值为0;</p><p>到下面循环的时候字符串长度已经相同了</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> equal=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">        equal |= a.charAt(i) ^ b.charAt(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>对a字符串循环,取出每一个字符来然后与b中的每一个字符做异或操作，如果有不相同的结果就会为1,再把1与equal变量做或操作。</p><p>只要异或有一次为1则后面equal的值都会为1</p><p>最后返回的值是 比较equal是否为0  如果equal为0则返回true,如果为1则返回false</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> equal==<span class="number">0</span>;</span><br></pre></td></tr></table></div></figure>        <h2 id="第一次思考"   >          <a href="#第一次思考" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次思考" class="headerlink" title="第一次思考"></a>第一次思考</h2>      <p>如果改正一下中间循环的操作是否更简单呢？</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">safeEqual</span><span class="params">(String a,String b)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.length()!=b.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> equal=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">        equal = a.charAt(i) ^ b.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(equal!=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>1.先判断字符串是否长度相同，如果不同直接返回false</p><p>2.再循环获得每一个字符 只要有一个字符不相同的时候就返回false</p><p>3.如果循环结束都没有返回false 那就是字符串相同所以返回true</p>        <h3 id="关键点"   >          <a href="#关键点" class="heading-link"><i class="fas fa-link"></i></a><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3>      <p>但是这个方法的名字是safeEqual,如果是下面的循环直接中断和每一次遍历完字符串有什么区别呢？</p><p>经过提示，我去JDK里面也找到一个有相同思路的方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEqual</span><span class="params">(<span class="type">byte</span>[] digesta, <span class="type">byte</span>[] digestb)</span> &#123;</span><br><span class="line">    <span class="comment">/* All bytes in digesta are examined to determine equality.</span></span><br><span class="line"><span class="comment">     * The calculation time depends only on the length of digesta</span></span><br><span class="line"><span class="comment">     * It does not depend on the length of digestb or the contents</span></span><br><span class="line"><span class="comment">     * of digesta and digestb.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (digesta == digestb) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (digesta == <span class="literal">null</span> || digestb == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">lenA</span> <span class="operator">=</span> digesta.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lenB</span> <span class="operator">=</span> digestb.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lenB == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> lenA == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    result |= lenA - lenB;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// time-constant comparison</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; lenA; i++) &#123;</span><br><span class="line">        <span class="comment">// If i &gt;= lenB, indexB is 0; otherwise, i.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">indexB</span> <span class="operator">=</span> ((i - lenB) &gt;&gt;&gt; <span class="number">31</span>) * i;</span><br><span class="line">        result |= digesta[i] ^ digestb[indexB];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="重点"   >          <a href="#重点" class="heading-link"><i class="fas fa-link"></i></a><a href="#重点" class="headerlink" title="重点"></a>重点</h3>      <p>在JDK里面这个方法中有一个注释 不太一样</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// time-constant comparison</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; lenA; i++) &#123;</span><br><span class="line">        <span class="comment">// If i &gt;= lenB, indexB is 0; otherwise, i.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">indexB</span> <span class="operator">=</span> ((i - lenB) &gt;&gt;&gt; <span class="number">31</span>) * i;</span><br><span class="line">        result |= digesta[i] ^ digestb[indexB];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result == <span class="number">0</span>;</span><br></pre></td></tr></table></div></figure><p>time-constant comparison</p><p>经过找资料之后发现这个一个黑客技术：计时攻击</p><p>开始理解这个遍历完字符串的原因</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设A字符串为aaaaaaaaaa b字符串为bbbbbbbbbb</span></span><br><span class="line">那么</span><br><span class="line">    如果用改过之后的方法,当遍历到第一个字符的时候就已经返回了。</span><br><span class="line">    这样返回数据的速度很快, 如果利用这一个运行时间 就可能可以猜出第一个字母就不是a</span><br><span class="line"></span><br><span class="line">同理 </span><br><span class="line">    如果<span class="string">&quot;bxxxxxxxxxxx&quot;</span>的时间运行时间较长于其他的字符</span><br><span class="line">    那么就可以猜测第一个字符就是b开头的</span><br><span class="line"></span><br><span class="line">找到可能的第一个字符，再用第一个字符固定的字符串</span><br><span class="line">    如<span class="string">&quot;baaaaaaaaaa&quot;</span> 和b字符串做比较  </span><br><span class="line">    不断遍历就很大可能可以获得到b字符串所有的数据</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>这种方法有可能用来撞库获得用户密码数据，所以safeEqual的关键点于每一次比较之后都是遍历完字符串，对返回时间都大概是相近的，所以对计时攻击有抵抗作用</p>        <h2 id="第二次思考"   >          <a href="#第二次思考" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次思考" class="headerlink" title="第二次思考"></a>第二次思考</h2>              <h3 id="关键点-1"   >          <a href="#关键点-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#关键点-1" class="headerlink" title="关键点"></a>关键点</h3>      <p>没有对数据做校验，可能会传来空字符串</p><p>safeEqual还有代码的不完全，对接受的数据字符串a和字符串b没有做非空判断，所以代码是不安全的</p><p>直接对a和b的长度进行判断可能程序会出异常</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private boolean safeEqual(String a,String b)&#123;</span><br><span class="line">    if(a.length()!=b.length())&#123;</span><br><span class="line">        return false;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>而在jdk中的代码对a和b是否为空做了判断</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEqual</span><span class="params">(<span class="type">byte</span>[] digesta, <span class="type">byte</span>[] digestb)</span> &#123;</span><br><span class="line">    <span class="comment">/* All bytes in digesta are examined to determine equality.</span></span><br><span class="line"><span class="comment">     * The calculation time depends only on the length of digesta</span></span><br><span class="line"><span class="comment">     * It does not depend on the length of digestb or the contents</span></span><br><span class="line"><span class="comment">     * of digesta and digestb.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (digesta == digestb) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (digesta == <span class="literal">null</span> || digestb == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>对传来的数据digesta和digestb做了非空判断，如果其中有一个为空就直接返回false</p>        <h2 id="第三次思考"   >          <a href="#第三次思考" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次思考" class="headerlink" title="第三次思考"></a>第三次思考</h2>              <h3 id="关键点-2"   >          <a href="#关键点-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#关键点-2" class="headerlink" title="关键点"></a>关键点</h3>      <p>safeEqual和IsEqual方法都是为了可能因为避免结束时间不同而导致的数据泄露，那能不能不用遍历完来改进代码呢？如果每次都是遍历完的话字符串太长会浪费资源</p><p>所以我觉得可以调用sleep来解决这个问题</p>        <h3 id="改进之后"   >          <a href="#改进之后" class="heading-link"><i class="fas fa-link"></i></a><a href="#改进之后" class="headerlink" title="改进之后"></a>改进之后</h3>      <p>1.先对字符串做非空判断</p><p>2.对字符串长度做判断</p><p>3.使进程睡眠一个随机时间</p><p>4.对字符串遍历 当发现有一个不同的时候就返回false</p><p>代码如下</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">safeEqual</span><span class="params">(String a,String b)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="literal">null</span>||b==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a.length()!=b.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> r.nextInt(<span class="number">1000</span>)+<span class="number">100</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">          t.sleep(l);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="type">int</span> equal=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">        equal = a.charAt(i) ^ b.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(equal!=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="新的问题"   >          <a href="#新的问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#新的问题" class="headerlink" title="新的问题"></a>新的问题</h3>      <p>1.因中断引起的资源损失会不会导致得不偿失？</p><p>2.大数据统计的时间ms值是否一样能造成Time Attack的效果？</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现带权重的算法错解与改正</title>
      <link href="/2023/03/06/%E5%AE%9E%E7%8E%B0%E5%B8%A6%E6%9D%83%E9%87%8D%E7%9A%84%E7%AE%97%E6%B3%95%E9%94%99%E8%A7%A3%E4%B8%8E%E6%94%B9%E6%AD%A3/"/>
      <url>/2023/03/06/%E5%AE%9E%E7%8E%B0%E5%B8%A6%E6%9D%83%E9%87%8D%E7%9A%84%E7%AE%97%E6%B3%95%E9%94%99%E8%A7%A3%E4%B8%8E%E6%94%B9%E6%AD%A3/</url>
      
        <content type="html"><![CDATA[        <h1 id="学习带权重的算法"   >          <a href="#学习带权重的算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#学习带权重的算法" class="headerlink" title="学习带权重的算法"></a>学习带权重的算法</h1>      <p>在学习IO流中用权重的算法生成点名器  要求是每次点名之后被点到的人之后的概率为之前概率的一半</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">例如 某名单有80名学生,那么点名的时候假如都是A同学</span><br><span class="line"></span><br><span class="line">​第一次每人概率：1.25%。</span><br><span class="line"></span><br><span class="line">​第二次小A概率：0.625%。  其他学生概率：1.2579%  </span><br><span class="line"></span><br><span class="line">​第三次小A概率：0.3125%。  其他学生概率：1.261867%  </span><br><span class="line"></span><br><span class="line">​第四次小A概率：0.15625%。  其他学生概率：1.2638449%  </span><br><span class="line"></span><br><span class="line">​第五次小A概率：0.078125%。  其他学生概率：1.26483386%  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></div></figure>        <h2 id="思路"   >          <a href="#思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#思路" class="headerlink" title="思路"></a>思路</h2>              <h3 id="前期准备的工作以及实现的代码"   >          <a href="#前期准备的工作以及实现的代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#前期准备的工作以及实现的代码" class="headerlink" title="前期准备的工作以及实现的代码"></a>前期准备的工作以及实现的代码</h3>      <p>1.第一个本地文件用来存储学生信息 学生信息由姓名-性别-年龄组成</p><p>数据由hutool生成 </p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   爬取姓的网址     https://hanyu.baidu.com/shici/detailfrom=kg1&amp;highlight=&amp;pid=0b2f26d4c0ddb3ee693fdb1137ee1b0d&amp;srcid=51369</span></span><br><span class="line"><span class="comment">//   爬取男生名字的网址 http://www.haoming8.cn/baobao/10881.html</span></span><br><span class="line"><span class="comment">//   爬取女生名字的网址 http://www.haoming8.cn/baobao/7641.html</span></span><br></pre></td></tr></table></div></figure><p>爬取到数据之后做数据筛选再做处理之后存储到本地文件中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用HttpUtil.get方法链接网址 爬取网址的所有数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">familyStr</span> <span class="operator">=</span> HttpUtil.get(<span class="string">&quot;https://hanyu.baidu.com/shici/detailfrom=kg1&amp;highlight=&amp;pid=0b2f26d4c0ddb3ee693fdb1137ee1b0d&amp;srcid=51369&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">boyStr</span> <span class="operator">=</span> HttpUtil.get(<span class="string">&quot;http://www.haoming8.cn/baobao/10881.html&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">girlStr</span> <span class="operator">=</span> HttpUtil.get(<span class="string">&quot;http://www.haoming8.cn/baobao/7641.html&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//筛选数据   用ReUtil.findAll方法将所有的数据经过正则表达式获得一个临时的集合存放未被处理过的数据</span></span><br><span class="line">ArrayList&lt;String&gt; FamilyTempList = (ArrayList&lt;String&gt;) ReUtil.findAll(<span class="string">&quot;(.&#123;4&#125;)(，|。)&quot;</span>, familyStr, <span class="number">1</span>);</span><br><span class="line">ArrayList&lt;String&gt; BoyTempList = (ArrayList&lt;String&gt;) ReUtil.findAll(<span class="string">&quot;([\\u4E00-\\u9FA5]&#123;2&#125;)、&quot;</span>, boyStr, <span class="number">1</span>);</span><br><span class="line">ArrayList&lt;String&gt; GirlTempList = (ArrayList&lt;String&gt;) ReUtil.findAll(<span class="string">&quot;(.. )&#123;4&#125;..&quot;</span>, girlStr, <span class="number">0</span>);</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//再修改数据</span></span><br><span class="line"><span class="comment">//FamilyTempList中要将四个汉字分割开 一个个存入集合中</span></span><br><span class="line">        ArrayList&lt;String&gt; FamilyList= changeData(FamilyTempList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把BoyTempList中的数据去重</span></span><br><span class="line">        ArrayList&lt;String&gt; BoyList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : BoyTempList) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!BoyList.contains(s))&#123;</span><br><span class="line">                <span class="comment">//不在BoyList中的数据则添加到集合中</span></span><br><span class="line">                BoyList.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把GirlTempList中的数据按照空格切割添加到新的集合中</span></span><br><span class="line">        ArrayList&lt;String&gt; girlList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : GirlTempList) &#123;</span><br><span class="line">            String[] arr = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            Collections.addAll(girlList,arr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将男生的信息和女生的信息生成  以张三-男-23 的形式</span></span><br><span class="line">        ArrayList&lt;String&gt; list =getFinallyList(FamilyList,BoyList,girlList,<span class="number">40</span>,<span class="number">40</span>);</span><br><span class="line">        <span class="comment">//打乱集合顺序</span></span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用FileUtils.writeLines方法将数据存储再本地的names.txt文件中国</span></span><br><span class="line">        FileUtils.writeLines(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d2-code\\names.txt&quot;</span>),list);</span><br></pre></td></tr></table></div></figure><p>切割FamilyTempList的时候所调用的changeData方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;String&gt; <span class="title function_">changeData</span><span class="params">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; newList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            <span class="type">char</span>[] arr = s.toCharArray();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : arr) &#123;</span><br><span class="line">                newList.add(c+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newList;</span><br></pre></td></tr></table></div></figure><p>生成最后的数据 以姓名-性别-年龄的形式所调用的getFinallyList方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;String&gt; <span class="title function_">getFinallyList</span><span class="params">(ArrayList&lt;String&gt; familyList, ArrayList&lt;String&gt; boyList, ArrayList&lt;String&gt; girlList, <span class="type">int</span> boyCount, <span class="type">int</span> girlCount)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 形参一 姓的集合</span></span><br><span class="line"><span class="comment">     * 形参二 男生名字集合</span></span><br><span class="line"><span class="comment">     * 形参三 女生名字集合</span></span><br><span class="line"><span class="comment">     * 形参四 男生数量</span></span><br><span class="line"><span class="comment">     * 形参五 女生数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    HashSet&lt;String&gt; boyst=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();<span class="comment">//用set集合保证不重复</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">//生成男生信息</span></span><br><span class="line">        <span class="keyword">if</span>(boyst.size()==boyCount)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> r.nextInt(<span class="number">16</span>)+<span class="number">20</span>;<span class="comment">//生成的男生年龄在20-35岁</span></span><br><span class="line">        Collections.shuffle(familyList);</span><br><span class="line">        Collections.shuffle(boyList);</span><br><span class="line">        boyst.add(familyList.get(<span class="number">0</span>)+boyList.get(<span class="number">0</span>)+<span class="string">&quot;-男-&quot;</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成女生信息</span></span><br><span class="line">    HashSet&lt;String&gt; girlst=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();<span class="comment">//用set集合保证不重复</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">//生成女生信息</span></span><br><span class="line">        <span class="keyword">if</span>(girlst.size()==girlCount)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> r.nextInt(<span class="number">10</span>)+<span class="number">18</span>;<span class="comment">//生成的女生年龄在18-27岁</span></span><br><span class="line">        Collections.shuffle(familyList);</span><br><span class="line">        Collections.shuffle(girlList);</span><br><span class="line">        girlst.add(familyList.get(<span class="number">0</span>)+girlList.get(<span class="number">0</span>)+<span class="string">&quot;-女-&quot;</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    list.addAll(boyst);</span><br><span class="line">    list.addAll(girlst);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>2.准备一个本地文件Count.txt 里面存放一个数据 用来记录现在是第几次点名</p><p>3.准备一个本地hasName.txt 用来存放已经被点名的数据</p>        <h3 id="实现代码的思路"   >          <a href="#实现代码的思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现代码的思路" class="headerlink" title="实现代码的思路"></a>实现代码的思路</h3>      <p>1、将学生信息和权重存放到map集合中，这样能保证学生数据对应一个权重。</p><p>2、将map集合中的所有值取出来生成一个数组，再有随机数的形式获得数组中的数据</p><p>3、判断是第几次点名，</p><p>​  如果是第一次点名就将点名的学生信息写到一个新的文件即hasName.txt中,并且将其以 姓名-性别-年龄-权重 形式</p><p>4、被点名的同学权重将除以2，即将map集合中的键值对中所对应的值除以2</p><p>5、如果不是第一次点名再判断，随机数获得数组中的数据是否为1.0</p><p>6、如果是1.0就将map集合中的不是1.0的数据刨除之后再随机获得一个学生信息，将学生信息写到hasName.txt中</p><p>7、    如果不是1.0就将刨除的学生数据中判断哪个与数值对应，将学生权重除以2再写回文件中</p><p>8、写回点名次数到Count.txt中</p>        <h3 id="数据"   >          <a href="#数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据" class="headerlink" title="数据"></a>数据</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306163737037.png" >      </p><p>【names.txt】</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306163737037.png" >      </p><p>【Count.txt】</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306163842882.png"  alt="image-20230306163842882">      </p><p>【hasName.txt】</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306164322967.png" >      </p>        <h2 id="实现"   >          <a href="#实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现" class="headerlink" title="实现"></a>实现</h2>      <p>1.读取本地文件names.txt中的数据 获得所有的学生信息</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取本地文件</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;d2-code\\names.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个集合用来装学生数据</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">    list.add(line);</span><br><span class="line">&#125;</span><br><span class="line">br.close();</span><br></pre></td></tr></table></div></figure><p>2.生成一个hashmap存储键值对，将学生信息和权重联系起来</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, Double&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">    map.put(s, <span class="number">1.00</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>3.读取本地文件Count.txt中的数据 </p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断现在是第几次点名</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">brCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;d2-code\\Count.txt&quot;</span>));</span><br><span class="line"><span class="comment">//建立数据流与本地文件相连</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> brCount.readLine();</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Integer.parseInt(s1);</span><br></pre></td></tr></table></div></figure><p>4.判断是第几次点名</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得是第几次点名</span></span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//因为第一次点名的时候 概率都是一样的</span></span><br><span class="line">    Collections.shuffle(list);</span><br><span class="line">    <span class="comment">//打乱集合</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//把学生对象添加到已经点过名的文件中</span></span><br><span class="line">    System.out.println(s);</span><br><span class="line">    <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;d2-code\\hasName.txt&quot;</span>));</span><br><span class="line">    bw.write(s + <span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    bw.close();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//后面的点名都要在乎权重</span></span><br><span class="line">    <span class="comment">//先获得已经点名的人</span></span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">br2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;d2-code\\hasName.txt&quot;</span>));</span><br><span class="line">    String line2;</span><br><span class="line">    <span class="comment">//用一个新集合来装已经有的学生对象</span></span><br><span class="line">    ArrayList&lt;String&gt; newList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> ((line2 = br2.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        newList.add(line2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历新的集合 将已经有的学生权重更改</span></span><br><span class="line">    <span class="keyword">for</span> (String s : newList) &#123;</span><br><span class="line">        String[] arr = s.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> arr[<span class="number">0</span>] + <span class="string">&quot;-&quot;</span> + arr[<span class="number">1</span>] + <span class="string">&quot;-&quot;</span> + arr[<span class="number">2</span>];</span><br><span class="line">        map.replace(str,(Double.parseDouble(arr[<span class="number">3</span>]) / <span class="number">2.0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把map集合的值拿出来形成一个数组</span></span><br><span class="line">    Double[] valueArr = <span class="keyword">new</span> <span class="title class_">Double</span>[map.size()];</span><br><span class="line">    Set&lt;Map.Entry&lt;String, Double&gt;&gt; entries = map.entrySet();</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Double&gt; entry : entries) &#123;</span><br><span class="line">        valueArr[i] = entry.getValue();</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//形成随机索引</span></span><br><span class="line">    <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">dataIndex</span> <span class="operator">=</span> r.nextInt(valueArr.length);</span><br><span class="line">    <span class="type">double</span> <span class="variable">temp</span> <span class="operator">=</span> valueArr[dataIndex];</span><br><span class="line">    <span class="comment">//对temp进行判断 如果temp=1则该用户是没有被点过名的</span></span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="number">1.0</span>) &#123;</span><br><span class="line">        ArrayList&lt;String&gt; tempNotWantNumber = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//遍历entrySet 把值不为1的数字去掉 然后随机一个数据</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Double&gt; entry : entries) &#123;</span><br><span class="line">            <span class="type">Double</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (value != temp) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">                tempNotWantNumber.add(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把价值不为1.0的键值对去掉</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; tempNotWantNumber.size(); j++) &#123;</span><br><span class="line">            map.remove(tempNotWantNumber.get(j));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机点名</span></span><br><span class="line">        ArrayList&lt;String&gt; nextList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//给要点名的list添加数据</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, Double&gt;&gt; set = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Double&gt; newEntry : set) &#123;</span><br><span class="line">            nextList.add(newEntry.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加完数据之后打乱数据</span></span><br><span class="line">        Collections.shuffle(nextList);</span><br><span class="line">        <span class="comment">//获得0索引的随机对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">student</span> <span class="operator">=</span> nextList.get(<span class="number">0</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">        <span class="comment">//把新获得的同学添加到已经点名的名单中</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;d2-code\\hasName.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//先把之前存在的数据导进来</span></span><br><span class="line">        <span class="keyword">for</span> (String s : newList) &#123;</span><br><span class="line">            bw2.write(s);</span><br><span class="line">            bw2.newLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//再把新生成的学生对象添加进本地文件中</span></span><br><span class="line">        bw2.write(student+<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        bw2.close();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果不是1,则从已有的数据中获得</span></span><br><span class="line">        <span class="keyword">for</span> (String s : newList) &#123;</span><br><span class="line">            String[] arr = s.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//比较权重 如果相等则输出名字,且将权重修改之后写到本地文件中</span></span><br><span class="line">            <span class="keyword">if</span> (temp == (Double.parseDouble(arr[<span class="number">3</span>]) / <span class="number">2.0</span>)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> arr[<span class="number">0</span>] + <span class="string">&quot;-&quot;</span> + arr[<span class="number">1</span>] + <span class="string">&quot;-&quot;</span> + arr[<span class="number">2</span>];</span><br><span class="line">                System.out.println(str);</span><br><span class="line">                newList.remove(s);</span><br><span class="line">                newList.add(str+<span class="string">&quot;-&quot;</span>+temp);</span><br><span class="line">                <span class="type">BufferedWriter</span> <span class="variable">bw2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;d2-code\\hasName.txt&quot;</span>));</span><br><span class="line">                <span class="keyword">for</span> (String newStr : newList) &#123;</span><br><span class="line">                    bw2.write(newStr);</span><br><span class="line">                    bw2.newLine();</span><br><span class="line">                &#125;</span><br><span class="line">                bw2.close();</span><br><span class="line">                <span class="comment">//找到了点名的对象之后跳出中断，防止报错</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>5.写回点名次数</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将点名次数+1然后写到本地文件中</span></span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;d2-code\\Count.txt&quot;</span>);</span><br><span class="line">index++;</span><br><span class="line">fw.write(index+<span class="string">&quot;&quot;</span>);</span><br><span class="line">fw.close();</span><br></pre></td></tr></table></div></figure>        <h2 id="误区"   >          <a href="#误区" class="heading-link"><i class="fas fa-link"></i></a><a href="#误区" class="headerlink" title="误区"></a>误区</h2>      <p>以为用map集合将键值对存储，一个学生信息就对应一个权重</p><p>但是实际上权重改变之后，并没有变成我想要的权重修改的结果</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例如： 一个学生被抽到之后，他所对应的值修改成0.5,其他学生信息都为1.0</span><br><span class="line">  下一次抽取数组中1.0的数据由79个,0.5的数据只有一个。 那么其他人被抽取到的几率为(79/80)*(1/79) =1/80 =1.25%</span><br><span class="line">  分析：79个1.0 那么抽到0.1的概率为79/80</span><br><span class="line">     1个学生信息 那么每个学生抽到的概率为1/79</span><br><span class="line">     所以总的概率为(79/80)*(1/79)=1.25%</span><br><span class="line">  而本身已经被抽取过的学生 下一次被抽到的概率为1/80=1.25% 因为0.5的数据只有一个</span><br></pre></td></tr></table></div></figure>        <h2 id="修改之后"   >          <a href="#修改之后" class="heading-link"><i class="fas fa-link"></i></a><a href="#修改之后" class="headerlink" title="修改之后"></a>修改之后</h2>      <p>将学生对象的权重由数字变成范围</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">比如 权重<span class="number">1</span>  总权重<span class="number">80</span> 则每个人的权重为<span class="number">0.0125</span></span><br><span class="line">第一个人的权重范围是[<span class="number">0</span>,<span class="number">0.0125</span>)</span><br><span class="line">第二个人的权重范围是[<span class="number">0.0125</span>,<span class="number">0.025</span>)</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">最后一个人的权重范围[<span class="number">0.9875</span><span class="number">.1</span>)</span><br><span class="line">并且将范围与信息对应起来比如[<span class="number">0</span>,<span class="number">0.0125</span>)就是第一个人,如果权重减半之后[<span class="number">0</span>,<span class="number">0.00625</span>)是第一个人，[<span class="number">0.0625</span>,<span class="number">0.025</span>)是第二个人</span><br><span class="line">再生成<span class="number">0</span>~<span class="number">1</span>之间的数字index  </span><br><span class="line">再用二分法找到index在数组中的位置</span><br><span class="line">就能找到所对应的信息</span><br></pre></td></tr></table></div></figure><p>关键点要将权重由数字变成范围,然后对应的信息要固定</p><p>将权重与个人对应存放在本地文件中 不由hashmap记录</p>        <h3 id="数据存储"   >          <a href="#数据存储" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3>      <p>数据以 姓名-性别-年龄-年龄-权重 的形式存储</p><p>【names.txt】</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306164416510.png" >      </p>        <h3 id="代码实现"   >          <a href="#代码实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3>      <p>读取本地文件names.txt中的数据 并用ArrayList接受</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取本地文件 利用BufferedReader链接文件</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;d2-code\\names.txt&quot;</span>));</span><br><span class="line"><span class="comment">//用一个list集合存储数据</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">String line;<span class="comment">//用一个临时变量line</span></span><br><span class="line"><span class="keyword">while</span> ((line=br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">    list.add(line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取完数据之后关流</span></span><br><span class="line">br.close();</span><br></pre></td></tr></table></div></figure><p>将ArrayList中的数据获得出来 算出总权重 以及每个信息所对应的权重范围</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个变量用来记录总权重</span></span><br><span class="line"><span class="type">Double</span> <span class="variable">Count</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">    String[] arr = s.split(<span class="string">&quot;-&quot;</span>);<span class="comment">//利用&quot;-&quot;分割数据 生成数组</span></span><br><span class="line">    Count += Double.parseDouble(arr[<span class="number">3</span>]);<span class="comment">//将权重相加起来</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;总权重为:&quot;</span> + Count);</span><br><span class="line"><span class="comment">//获得总权重之后把每个数据所对应的权重(数字)用数组存起来</span></span><br><span class="line"><span class="comment">//定义一个数组用来存储每个人的权重占比(数字)</span></span><br><span class="line"><span class="type">double</span>[] weightArr = <span class="keyword">new</span> <span class="title class_">double</span>[list.size()];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//i用来表示weightArr的索引</span></span><br><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">    String[] arr = s.split(<span class="string">&quot;-&quot;</span>);<span class="comment">//利用&quot;-&quot;分割数据 生成数组</span></span><br><span class="line">    weightArr[i] = Double.parseDouble(arr[<span class="number">3</span>])/Count;<span class="comment">//将每个人的权重放到权重数组(数字)中</span></span><br><span class="line">    i++;<span class="comment">//放入一个数据之后索引要自增</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将获得的权重数组(数字) 变成权重数组(范围)  a[i]=a[i-1]+a[i];</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; weightArr.length; j++) &#123;</span><br><span class="line">    weightArr[j]=weightArr[j]+weightArr[j-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* 权重数组(范围)公式解释</span><br><span class="line">*例 第一个人的权重是0.0125，则他的权重范围即[0,0.0125)</span><br><span class="line">*那么第二个人的权重是0.0125的情况下 </span><br><span class="line">则第二个人的权重范围就是第一个人的权重范围([0,0.0125))加上他自己的0.0125就是[0.0125,0.025)</span><br><span class="line">如果第二个人的权重是0.00625的情况下</span><br><span class="line">则第二个人的权重范围就是第一个人的权重范围([0,0.0125))加上他自己的0.00625就是[0.0125,0.01875)</span><br><span class="line">*</span><br><span class="line">*/</span><br></pre></td></tr></table></div></figure><p>获得权重数组(范围)之后用Math.random生成一个0~1的随机数 再用二分法找到在数组中的位置 与其对应着文件中的信息</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用Math.randow获得随机数据 0~1之间</span></span><br><span class="line"><span class="type">double</span> <span class="variable">v</span> <span class="operator">=</span> Math.random();</span><br><span class="line"><span class="comment">//用二分法找到随机数在权重数组(范围)中的位置</span></span><br><span class="line"><span class="comment">//Arrays.binarySearch 返回值是 -要求的位置 -1</span></span><br><span class="line"><span class="comment">//即 返回值=-索引 -1  因此可以直到 索引= -返回值 -1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -Arrays.binarySearch(weightArr, v)-<span class="number">1</span>;</span><br><span class="line">System.out.println(index);</span><br><span class="line"></span><br><span class="line"><span class="comment">//由索引可以获得list中的数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> list.get(index);</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></div></figure><p>阶段运行结果</p><p>【控制台输出】</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306183501981.png"  alt="image-20230306183501981">      </p><p>【names.txt中的位置】</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306183537411.png"  alt="image-20230306183537411">      </p><p>输出数据然后将对应的信息中权重改成原来的一半，再写回list集合中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个StringBuilder 将信息输出出去，然后将修改之后的权重拼接回去</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.append(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">System.out.println(sb.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//将权重减半</span></span><br><span class="line"><span class="type">double</span> <span class="variable">newWeight</span> <span class="operator">=</span> Double.parseDouble(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">3</span>]) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">//拼接数据</span></span><br><span class="line">sb.append(<span class="string">&quot;-&quot;</span>+s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>]+<span class="string">&quot;-&quot;</span>+s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">2</span>]+<span class="string">&quot;-&quot;</span>+newWeight);</span><br><span class="line"><span class="type">String</span> <span class="variable">newInf</span> <span class="operator">=</span> sb.toString();</span><br><span class="line"><span class="comment">//修改在list集合中的数据</span></span><br><span class="line">list.set(index,newInf);</span><br></pre></td></tr></table></div></figure><p>将list中的数据写回到本地文件中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将list中的数据写回到本地文件中</span></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;d2-code\\names.txt&quot;</span>));</span><br><span class="line"><span class="keyword">for</span> (String str : list) &#123;</span><br><span class="line">    bw.write(str);</span><br><span class="line">    bw.newLine();</span><br><span class="line">&#125;</span><br><span class="line">bw.close();</span><br></pre></td></tr></table></div></figure>        <h3 id="运行结果"   >          <a href="#运行结果" class="heading-link"><i class="fas fa-link"></i></a><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3>      <p>第一次</p><p>【控制台】        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306185140998.png"  alt="image-20230306185140998">      </p><p>【names.txt】        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306185200682.png"  alt="image-20230306185200682">      </p><p>第二次</p><p>【控制台】        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306185329272.png"  alt="image-20230306185329272">      </p><p>【names.txt】        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306185243449.png"  alt="image-20230306185243449">      </p><p>第三次</p><p>【控制台】        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306185310974.png"  alt="image-20230306185310974">      </p><p>【names.txt】        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306185419248.png"  alt="image-20230306185419248">      </p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流解压缩出错(未解决)</title>
      <link href="/2023/03/02/IO%E6%B5%81%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%87%BA%E9%94%99/"/>
      <url>/2023/03/02/IO%E6%B5%81%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%87%BA%E9%94%99/</url>
      
        <content type="html"><![CDATA[        <h1 id="2023-03-02"   >          <a href="#2023-03-02" class="heading-link"><i class="fas fa-link"></i></a><a href="#2023-03-02" class="headerlink" title="2023&#x2F;03&#x2F;02"></a>2023&#x2F;03&#x2F;02</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d2-code\\aaa.zip&quot;</span>);</span><br><span class="line">        <span class="comment">//创建解压目的地的路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d2-code\\&quot;</span>);</span><br><span class="line">        <span class="comment">//创建解压缩流对象</span></span><br><span class="line">        <span class="type">ZipInputStream</span> <span class="variable">zip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f));</span><br><span class="line">        <span class="comment">//获取zip中的文件夹\文件 每个都是zipEntry对象</span></span><br><span class="line">        ZipEntry entry;</span><br><span class="line">        <span class="keyword">while</span>((entry= zip.getNextEntry())!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//当entry不为空的时候进入循环  entry表示压缩包的每一个文件</span></span><br><span class="line">            System.out.println(entry);</span><br><span class="line">            <span class="comment">//对每一个entry进行判断</span></span><br><span class="line">            <span class="keyword">if</span>(entry.isDirectory())&#123;</span><br><span class="line">                <span class="comment">//如果是文件夹则在目的地创建文件夹</span></span><br><span class="line">                <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dest, entry.toString());</span><br><span class="line">                file.mkdirs();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//如果是文件则直接拷贝</span></span><br><span class="line">                <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(dest, entry.toString()));</span><br><span class="line">                <span class="type">int</span> len;</span><br><span class="line">                <span class="keyword">while</span>((len=zip.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    fos.write(len);</span><br><span class="line">                &#125;</span><br><span class="line">                fos.close();</span><br><span class="line">                zip.closeEntry();<span class="comment">//表示该文件已经操作结束</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//循环结束关闭</span></span><br><span class="line">        zip.close();</span><br></pre></td></tr></table></div></figure><p>运行结果</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230302215208856.png" >      </p>        <h2 id="aaa-zip结构"   >          <a href="#aaa-zip结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#aaa-zip结构" class="headerlink" title="aaa.zip结构"></a>aaa.zip结构</h2>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230302215228027.png"  alt="image-20230302215228027">      </p><p>分析原因为</p><p>aaa.zip下的aaa和bbb文件夹未被读取到Entry对象中</p>        <h1 id="2023-03-03"   >          <a href="#2023-03-03" class="heading-link"><i class="fas fa-link"></i></a><a href="#2023-03-03" class="headerlink" title="2023&#x2F;03&#x2F;03"></a>2023&#x2F;03&#x2F;03</h1>              <h2 id="aaa-zip结构-1"   >          <a href="#aaa-zip结构-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#aaa-zip结构-1" class="headerlink" title="aaa.zip结构"></a>aaa.zip结构</h2>              <h3 id="一级路径"   >          <a href="#一级路径" class="heading-link"><i class="fas fa-link"></i></a><a href="#一级路径" class="headerlink" title="一级路径"></a>一级路径</h3>      <p>​aaa</p>        <h3 id="二级路径"   >          <a href="#二级路径" class="heading-link"><i class="fas fa-link"></i></a><a href="#二级路径" class="headerlink" title="二级路径"></a>二级路径</h3>      <p>​aaa\aaa</p><p>​aaa\bbb</p><p>​aaa\csb.txt</p>        <h3 id="三级路径"   >          <a href="#三级路径" class="heading-link"><i class="fas fa-link"></i></a><a href="#三级路径" class="headerlink" title="三级路径"></a>三级路径</h3>      <p>​aaa\aaa\csb.txt</p>        <h2 id="想要控制台出现的结果"   >          <a href="#想要控制台出现的结果" class="heading-link"><i class="fas fa-link"></i></a><a href="#想要控制台出现的结果" class="headerlink" title="想要控制台出现的结果"></a>想要控制台出现的结果</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aaa/</span><br><span class="line">aaa/aaa</span><br><span class="line">aaa/aaa/csb.txt</span><br><span class="line">aaa/bbb</span><br><span class="line">aaa/csb.txt</span><br></pre></td></tr></table></div></figure>        <h2 id="现在程序出现的结果"   >          <a href="#现在程序出现的结果" class="heading-link"><i class="fas fa-link"></i></a><a href="#现在程序出现的结果" class="headerlink" title="现在程序出现的结果"></a>现在程序出现的结果</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aaa/aaa/</span><br><span class="line">aaa/aaa/csb.txt</span><br><span class="line">aaa/bbb/</span><br><span class="line">aaa/csb.txt</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h1 id="问题"   >          <a href="#问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#问题" class="headerlink" title="问题"></a>问题</h1>      <p>少了一个aaa&#x2F;的zipEntry对象</p>        <h2 id="现象-case1"   >          <a href="#现象-case1" class="heading-link"><i class="fas fa-link"></i></a><a href="#现象-case1" class="headerlink" title="现象  case1"></a>现象  case1</h2>      <p>用debug调试程序 将断点设置在循环控制条件 (entry&#x3D;zip.getNextEntry()) !&#x3D; null  然后单步调试会出现报错</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230303144753331.png" >      </p><p>报错</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230303144849131.png" >      </p>        <h2 id="现象-case2"   >          <a href="#现象-case2" class="heading-link"><i class="fas fa-link"></i></a><a href="#现象-case2" class="headerlink" title="现象 case2"></a>现象 case2</h2>      <p>不用debug调试 直接进行全速运行</p><p>会输出缺少aaa&#x2F;的结果 但是不会报错 同时文件也能被解压成功</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230303145013825.png" >      </p>        <h3 id="判断"   >          <a href="#判断" class="heading-link"><i class="fas fa-link"></i></a><a href="#判断" class="headerlink" title="判断"></a>判断</h3>      <p>程序因为单步调试和全速运行进行的结果不一样</p><p>无法解释为什么全速运行的时候entry对象不会获得到File(“d2-code\aaa”)</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a href="#源码" class="headerlink" title="源码"></a>源码</h1>              <h2 id="ZipInputStream-getNextEntry"   >          <a href="#ZipInputStream-getNextEntry" class="heading-link"><i class="fas fa-link"></i></a><a href="#ZipInputStream-getNextEntry" class="headerlink" title="ZipInputStream.getNextEntry();"></a>ZipInputStream.getNextEntry();</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ZipEntry <span class="title function_">getNextEntry</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        ensureOpen();</span><br><span class="line">        <span class="keyword">if</span> (entry != <span class="literal">null</span>) &#123;</span><br><span class="line">            closeEntry();</span><br><span class="line">        &#125;</span><br><span class="line">        crc.reset();</span><br><span class="line">        inf.reset();</span><br><span class="line">        <span class="keyword">if</span> ((entry = readLOC()) == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (entry.method == STORED) &#123;</span><br><span class="line">            remaining = entry.size;</span><br><span class="line">        &#125;</span><br><span class="line">        entryEOF = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> entry;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">### ensureOpen()</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureOpen</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Stream closed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断如果流被关闭 则直接传递IOexcepetion异常 (&quot;Stream closed&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">### <span class="keyword">if</span> (entry != <span class="literal">null</span>) &#123;</span><br><span class="line">            closeEntry();<span class="comment">//跳转到closeEntry()方法</span></span><br><span class="line">        &#125;</span><br><span class="line"> <span class="comment">/*如果entry不为空则进入closeEntry方法中</span></span><br><span class="line"><span class="comment"> entry为空的条件:</span></span><br><span class="line"><span class="comment"> 该路径下已经没有文件或者文件夹</span></span><br><span class="line"><span class="comment"> */</span>       </span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">closeEntry</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        ensureOpen();<span class="comment">//先跳转到ensureOpen()方法中</span></span><br><span class="line">        <span class="keyword">while</span> (read(tmpbuf, <span class="number">0</span>, tmpbuf.length) != -<span class="number">1</span>) ;</span><br><span class="line">        <span class="comment">/*压缩流调用自己所包装的基础流方法 即InputStream流中的read方法</span></span><br><span class="line"><span class="comment">        参数一 tempuf   一个512字节的字节数组</span></span><br><span class="line"><span class="comment">        参数二 0        读取数据从数组的0索引开始</span></span><br><span class="line"><span class="comment">        参数三 tepbuf.length  一次读取512个字节</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        entryEOF = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//entryEOF表示一个标志  当已经读取完一个entry对象时则entryEOF设置为true;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureOpen</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Stream closed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">   <span class="comment">/*ensureOpen()方法的目的是再次确认流是否被关闭 如果被关闭了则传递IOException异常*/</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">### crc.reset();  <span class="comment">//crc.reset() 把crc的值设置为0 </span></span><br><span class="line">inf.reset();  </span><br><span class="line"></span><br><span class="line"><span class="comment">//inf.reset()</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reset</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (zsRef) &#123;</span><br><span class="line">            ensureOpen();</span><br><span class="line">            reset(zsRef.address());</span><br><span class="line">            buf = defaultBuf;</span><br><span class="line">            finished = <span class="literal">false</span>;</span><br><span class="line">            needDict = <span class="literal">false</span>;</span><br><span class="line">            off = len = <span class="number">0</span>;</span><br><span class="line">            bytesRead = bytesWritten = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*暂未理解*/</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">### <span class="keyword">if</span> ((entry = readLOC()) == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/* 当entry调用readLoc()方法返回值为null的时候 则return null  即entry对象获得失败则返回null*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ZipEntry <span class="title function_">readLOC</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            readFully(tmpbuf, <span class="number">0</span>, LOCHDR);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (EOFException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (get32(tmpbuf, <span class="number">0</span>) != LOCSIG) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// get flag first, we need check EFS.</span></span><br><span class="line">        flag = get16(tmpbuf, LOCFLG);</span><br><span class="line">        <span class="comment">// get the entry name and create the ZipEntry first</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> get16(tmpbuf, LOCNAM);</span><br><span class="line">        <span class="type">int</span> <span class="variable">blen</span> <span class="operator">=</span> b.length;</span><br><span class="line">        <span class="keyword">if</span> (len &gt; blen) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                blen = blen * <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">while</span> (len &gt; blen);</span><br><span class="line">            b = <span class="keyword">new</span> <span class="title class_">byte</span>[blen];</span><br><span class="line">        &#125;</span><br><span class="line">        readFully(b, <span class="number">0</span>, len);</span><br><span class="line">        <span class="comment">// Force to use UTF-8 if the EFS bit is ON, even the cs is NOT UTF-8</span></span><br><span class="line">        <span class="type">ZipEntry</span> <span class="variable">e</span> <span class="operator">=</span> createZipEntry(((flag &amp; EFS) != <span class="number">0</span>)</span><br><span class="line">                                    ? zc.toStringUTF8(b, len)</span><br><span class="line">                                    : zc.toString(b, len));</span><br><span class="line">        <span class="comment">// now get the remaining fields for the entry</span></span><br><span class="line">        <span class="keyword">if</span> ((flag &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ZipException</span>(<span class="string">&quot;encrypted ZIP entry not supported&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        e.method = get16(tmpbuf, LOCHOW);</span><br><span class="line">        e.xdostime = get32(tmpbuf, LOCTIM);</span><br><span class="line">        <span class="keyword">if</span> ((flag &amp; <span class="number">8</span>) == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="comment">/* &quot;Data Descriptor&quot; present */</span></span><br><span class="line">            <span class="keyword">if</span> (e.method != DEFLATED) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ZipException</span>(</span><br><span class="line">                        <span class="string">&quot;only DEFLATED entries can have EXT descriptor&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            e.crc = get32(tmpbuf, LOCCRC);</span><br><span class="line">            e.csize = get32(tmpbuf, LOCSIZ);</span><br><span class="line">            e.size = get32(tmpbuf, LOCLEN);</span><br><span class="line">        &#125;</span><br><span class="line">        len = get16(tmpbuf, LOCEXT);</span><br><span class="line">        <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">byte</span>[] extra = <span class="keyword">new</span> <span class="title class_">byte</span>[len];</span><br><span class="line">            readFully(extra, <span class="number">0</span>, len);</span><br><span class="line">            e.setExtra0(extra,</span><br><span class="line">                        e.csize == ZIP64_MAGICVAL || e.size == ZIP64_MAGICVAL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">### <span class="keyword">if</span> (entry.method == STORED) &#123;   <span class="comment">//zipEntry类中的成员变量 method=-1</span></span><br><span class="line"><span class="comment">//zipEntry类中的静态变量 STORED=0;</span></span><br><span class="line"><span class="comment">/*int method = -1;</span></span><br><span class="line"><span class="comment">  public static final int STORED = 0;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">            remaining = entry.size; <span class="comment">//zipEntry类中的成员变量size=-1</span></span><br><span class="line">            <span class="comment">//ZipInputStream中的成员变量remaining</span></span><br><span class="line">            <span class="comment">/*long size = -1;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        &#125;</span><br><span class="line">  <span class="comment">//调用时如果method==-1 则不会进入语句</span></span><br><span class="line">  <span class="comment">//如果method==0 则会进入语句</span></span><br><span class="line"> <span class="comment">//将remaining设置为entry.size </span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">### entryEOF = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> entry;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将entryEOF设置为false 以便下一次读取一整个entry对象</span></span><br><span class="line"><span class="comment">//return entry  返回entry结果 为ZipInputStream调用方法的返回值</span></span><br></pre></td></tr></table></div></figure>        <h2 id="判断-1"   >          <a href="#判断-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#判断-1" class="headerlink" title="判断"></a>判断</h2>      <p>在getNextEntry方法调用的时候跳过了解压包下第一级路径下的文件夹  但是能进入文件夹获得里面的子文件夹或者子文件</p>        <h1 id="Test"   >          <a href="#Test" class="heading-link"><i class="fas fa-link"></i></a><a href="#Test" class="headerlink" title="Test"></a>Test</h1>              <h2 id="代码"   >          <a href="#代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码" class="headerlink" title="代码"></a>代码</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d2-code\\aaa.zip&quot;</span>);</span><br><span class="line">      <span class="type">ZipInputStream</span> <span class="variable">zip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(src));</span><br><span class="line">      ZipEntry entry;</span><br><span class="line">      entry = zip.getNextEntry();</span><br><span class="line">      System.out.println(entry);</span><br></pre></td></tr></table></div></figure><p>获得aaa.zip路径然后尝试用zipInputStream来读取文件，通过zip调用getNextEntry()方法来获得解压包下第一个文件\文件夹 赋值给ZipEntry对象entry，最后将entry从控制台输出</p>        <h2 id="运行结果"   >          <a href="#运行结果" class="heading-link"><i class="fas fa-link"></i></a><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230303151228442.png" >      </p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某中厂的java实习生面试</title>
      <link href="/2022/07/05/%E6%9F%90%E4%B8%AD%E5%8E%82%E7%9A%84java%E5%AE%9E%E4%B9%A0%E7%94%9F%E9%9D%A2%E8%AF%95/"/>
      <url>/2022/07/05/%E6%9F%90%E4%B8%AD%E5%8E%82%E7%9A%84java%E5%AE%9E%E4%B9%A0%E7%94%9F%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>面试稀碎，所以废话不多说直接进入问题环节吧</p><h2 id=""><a href="#" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>·你能给我做一个简单的自我介绍吗？</p><p>·说一下java里面的内存结构，JVM的这一套内存管理</p><p>·你是怎么理解这个堆和栈的？</p><p>·刚刚说的是内存的堆和栈，那你能从数据结构上面来说说堆和栈吗？</p><p>·你觉得GC怎么判定一个对象可以被回收的</p><p>·java是怎么判定一个对象没有被引用或者路径不可达的情况呢?</p><p>·StringBuffered和StringBuilder一个线程安全和一个线程不安全你是怎么理解的？</p><p>·你平时是怎么使用多线程的？</p><p>·那你怎么看待Runnable接口的？</p><p>·你说一下Mysql的事务机制</p><p>·那你怎么看待事务隔离级别的？</p><p>·什么情况下会导致事务没有被释放？</p><p>·Mysql的索引你平时是怎么使用的？</p><p>·Mysql你接触过哪些分表分库？</p><p>·聊一下Redis吧</p><p>·Java中HashMap在一定数量的情况下会改成红黑树，而数据库又采用索引B+树你是怎么理解的各自的考量呢？</p><p>·Redis为什么用跳表不用B+树呢？</p><p>·如果是简单的二叉树的情况下Mysql为什么不用跳表？</p><p>·那你讲一下你的实习经验或者实习经历吧？</p><p>·你是怎么理解开闭原则和单一职责原则的？</p><p>·你说说你最熟悉的设计模式吧</p><p>·那你说我们什么场景下需要用使用单例</p><p>·我们常在开发中用Object的方法,你说说你认识的Object方法有哪些？</p><p>·你说说wait和sleep方法有什么区别呢？</p><p>·说到wait你能跟我说一下线程的生命周期吗？</p><p>·你最常用到哪些工具呢？</p><p>·B树和B+树的区别有哪些？</p>        <h2 id="-1"   >          <a href="#-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#-1" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2>      <p>感觉被干的稀碎，好好回去学技术再试试吧hh  T T</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用java爬取弹幕</title>
      <link href="/2022/05/09/%E5%88%A9%E7%94%A8java%E7%88%AC%E5%8F%96%E5%BC%B9%E5%B9%95/"/>
      <url>/2022/05/09/%E5%88%A9%E7%94%A8java%E7%88%AC%E5%8F%96%E5%BC%B9%E5%B9%95/</url>
      
        <content type="html"><![CDATA[<p><strong>提示</strong></p><p>从语言特性和开发难度出发,由python做爬虫程序的使用效率和便利性是大于用java开发的爬虫程序的。</p><p>目的是熟悉java爬取的规则最终获得多个页面直播间的直播弹幕</p><p><strong>解析bilibili的弹幕(视频)</strong></p>        <h1 id="解析目前用户还存在的视频弹幕"   >          <a href="#解析目前用户还存在的视频弹幕" class="heading-link"><i class="fas fa-link"></i></a><a href="#解析目前用户还存在的视频弹幕" class="headerlink" title="解析目前用户还存在的视频弹幕"></a>解析目前用户还存在的视频弹幕</h1>      <p>视频源来自弹幕量比较大的 《这一定就是原片吧9》</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.bilibili.com/video/BV1c3411Q7XH/?spm_id_from=333.337.search-card.all.click&amp;vd_source=481a97bdbe9fdb27ab06f7f88300d77b</span><br></pre></td></tr></table></div></figure><p>视频可直接获得的基本信息：BV号: BV1c3411Q7XH        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230309151908372.png"  alt="image-20230309151908372">      </p><p>​   作者uid: 37963636            <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/%E5%88%A9%E7%94%A8java%E7%88%AC%E5%8F%96%E5%BC%B9%E5%B9%95/image-20230309151847039.png"  alt="image-20230309151847039">      </p><p>获取该视频下全部内容，然后分析成分</p><p>用Hutool包链接网络并获得整个网址的html信息 并以字符串的形式存放</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//链接网络</span></span><br><span class="line">        String url=<span class="string">&quot;https://www.bilibili.com/video/BV1c3411Q7XH/?spm_id_from=333.337.search-card.all.click&amp;vd_source=481a97bdbe9fdb27ab06f7f88300d77b&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> HttpUtil.get(url);</span><br><span class="line"><span class="comment">//将数据从控制台先输出</span></span><br><span class="line">        System.out.println(s);</span><br></pre></td></tr></table></div></figure>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230309151018979.png"  alt="image-20230309151018979"  />      <p>获得基本数据：视频播放量40491659、弹幕量31912等。</p><p>用BV号对数据筛选看看能获得什么</p><p>BV号的构成为BV+10个大写\小写\数字的字符串  所以用正则表达式可以表示为”BV\\w{10}”</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>用ReUtil.findAll方法获得所有BV号数据</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ReUtil.findAll(String regex, CharSequence content, int group)</span><br><span class="line">//参数一 所筛选用的正则表达式</span><br><span class="line">//参数二 所筛选数据的数据源</span><br><span class="line">//参数三 group  表示由regex切割出来的组号，由左括号为开始计算  </span><br><span class="line">0 表示获得所有组号</span><br><span class="line">1 表示获得第一个组</span><br><span class="line">2 表示保留第二个组</span><br><span class="line">...</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用Retuil对正则表达式判断,获得所有含有BV号的数据</span></span><br><span class="line">String regex=<span class="string">&quot;BV\\w&#123;10&#125;&quot;</span>;</span><br><span class="line">ArrayList&lt;String&gt; list = (ArrayList&lt;String&gt;) ReUtil.findAll(regex, s, <span class="number">0</span>);</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></div></figure><p>在控制台的输出结果为：        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230309153741744.png"  alt="image-20230309153741744">      </p><p>去除本身视频的BV号 BV1c3411Q7XH  再输出list  看看里面所有的BV号和个数</p><p>用循环判断list.contains(“BV1c3411Q7XH”) 如果为true则表示集合中还有这个BV号</p><p>我们的目的是去除所有的BV号 所以循环条件为false的时候就能保证集合中已经没有本视频的BV号</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//已知视频本身的BV号为BV1c3411Q7XH  所以滤过本身视频的BV号</span></span><br><span class="line"><span class="keyword">while</span>(list.contains(<span class="string">&quot;BV1c3411Q7XH&quot;</span>))&#123;</span><br><span class="line">    list.remove(<span class="string">&quot;BV1c3411Q7XH&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);</span><br><span class="line">System.out.println(list.size());</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230309154949126.png"  alt="image-20230309154949126">      </p><p>数据备份：</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BV1td4y1N7Vw, BV14P4y1177H, BV11d4y1S7SJ, BV1ma411R7UG, BV1D14y1W74e, BV16d4y1X71i, BV1M84y1B7UW, BV1td4y1N7Vw, BV14P4y1177H, BV11d4y1S7SJ, BV1ma411R7UG, BV1D14y1W74e, BV16d4y1X71i, BV1M84y1B7UW, BV1td4y1N7Vw, BV14P4y1177H, BV11d4y1S7SJ, BV1ma411R7UG, BV1D14y1W74e, BV16d4y1X71i, BV1M84y1B7UW, BV1B741177iT, BV1wJ411H71u, BV14Y4y1r7cU, BV1b8411w7zt, BV1464y1a7jD, BV1M84y1B7UW, BV1UU4y1b7tk, BV16d4y1X71i, BV1dJ411j7yA, BV1td4y1N7Vw, BV1t24y1e7K4, BV1NL411u7e7, BV1ED4y1p7FE, BV1kP4y1C734, BV1iR4y1R7oT, BV1c7411h7Tq, BV1wP4y1v7BF, BV17v4y1v7BS, BV1SB4y167Jj, BV1z3411S7ov, BV1sM411q7Er, BV1cv4y1D7LK, BV1xY4y1o7XZ, BV1a64y1F7rF, BV1We4y1a7Qm, BV1si4y1V7Lb, BV1Lv4y1Q7Bd, BV1D14y1W74e, BV1564y1Z7ef, BV1W84y1a7QJ, BV1LY41127iZ, BV1CG4y1k7ag, BV1rT41127dZ, BV14P4y1177H, BV1Ze4y1y7TT, BV1iK4y1a7or, BV1ma411R7UG, BV19S4y1o7hg, BV1i64y117dz, BV1wD4y177XC, BV1B741177iT, BV1B741177iT, BV1wJ411H71u, BV1wJ411H71u, BV14Y4y1r7cU, BV14Y4y1r7cU, BV1b8411w7zt, BV1b8411w7zt, BV1464y1a7jD, BV1464y1a7jD, BV1M84y1B7UW, BV1M84y1B7UW, BV1UU4y1b7tk, BV1UU4y1b7tk, BV16d4y1X71i, BV16d4y1X71i, BV1dJ411j7yA, BV1dJ411j7yA, BV1td4y1N7Vw, BV1td4y1N7Vw, BV1t24y1e7K4, BV1t24y1e7K4, BV1NL411u7e7, BV1NL411u7e7, BV1ED4y1p7FE, BV1ED4y1p7FE, BV1kP4y1C734, BV1kP4y1C734, BV1iR4y1R7oT, BV1iR4y1R7oT, BV1c7411h7Tq, BV1c7411h7Tq, BV1wP4y1v7BF, BV1wP4y1v7BF, BV17v4y1v7BS, BV17v4y1v7BS, BV1SB4y167Jj, BV1SB4y167Jj, BV1z3411S7ov, BV1z3411S7ov</span><br></pre></td></tr></table></div></figure><p>先在页面的总HTML信息中查找本视频的所有出现位置，信息</p><p>第一次:(获得了前四个本视频BV号出现的位置)</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230309155236182.png"  alt="image-20230309155236182">      </p><p>可以知道都是在URL中出现的前几次 并无其他相关信息</p><p>第二次:(获得了第五和第六个本视频BV号出现的位置)</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230309155515650.png"  alt="image-20230309155515650">      </p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;aid&quot;:434581916,&quot;bvid&quot;:&quot;BV1c3411Q7XH&quot;,&quot;p&quot;:1,&quot;episode&quot;:&quot;&quot;,&quot;videoData&quot;:&#123;&quot;bvid&quot;:&quot;BV1c3411Q7XH&quot;,&quot;aid&quot;:434581916,&quot;videos&quot;:1,&quot;tid&quot;:47,&quot;tname&quot;:&quot;短片·手书·配音&quot;,&quot;copyright&quot;:1,&quot;pic&quot;:&quot;http:\u002F\u002Fi1.hdslb.com\u002Fbfs\u002Farchive\u002F4e5c6f04d8d5b1042b2040d2d86e743780aa58ed.jpg&quot;,&quot;title&quot;:&quot;这一定就是原片吧9&quot;,&quot;pubdate&quot;:1672533534,&quot;ctime&quot;:1672533534,&quot;desc&quot;:&quot;视频剧情与人设皆为虚构 不要上升真羊！\n本集设定沸羊羊和美羊羊是男女朋友的关系 本视频是沸美cp向哦\n这个视频是根据之前沸美视频的cp 设定做的，重复也只是吃醋的表现，不是嘲讽&quot;,&quot;desc_v2&quot;:[&#123;&quot;raw_text&quot;:&quot;视频剧情与人设皆为虚构 不要上升真羊！\n本集设定沸羊羊和美羊羊是男女朋友的关系 本视频是沸美cp向哦\n这个视频是根据之前沸美视频的cp 设定做的，重复也只是吃醋的表现，不是嘲讽&quot;,&quot;type&quot;:1,&quot;biz_id&quot;:0&#125;],&quot;state&quot;:0,&quot;duration&quot;:102,&quot;mission_id&quot;:1152893,&quot;rights&quot;:&#123;&quot;bp&quot;:0,&quot;elec&quot;:0,&quot;download&quot;:1,&quot;movie&quot;:0,&quot;pay&quot;:0,&quot;hd5&quot;:1,&quot;no_reprint&quot;:1,&quot;autoplay&quot;:1,&quot;ugc_pay&quot;:0,&quot;is_cooperation&quot;:0,&quot;ugc_pay_preview&quot;:0,&quot;no_background&quot;:0,&quot;clean_mode&quot;:0,&quot;is_stein_gate&quot;:0,&quot;is_360&quot;:0,&quot;no_share&quot;:0,&quot;arc_pay&quot;:0,&quot;free_watch&quot;:0&#125;,&quot;owner&quot;:&#123;&quot;mid&quot;:37963636,&quot;name&quot;:&quot;一只风风o&quot;,&quot;face&quot;:&quot;https:\u002F\u002Fi1.hdslb.com\u002Fbfs\u002Fface\u002F7b51ecbf97f83fd579a71c9b7766f680d08b338c.jpg&quot;&#125;,&quot;stat&quot;:&#123;&quot;aid&quot;:434581916,&quot;view&quot;:40494159,&quot;danmaku&quot;:31912,&quot;reply&quot;:37360,&quot;favorite&quot;:831184,&quot;coin&quot;:1072355,&quot;share&quot;:1301568,&quot;now_rank&quot;:0,&quot;his_rank&quot;:1,&quot;like&quot;:2606795,&quot;dislike&quot;:0,&quot;evaluation&quot;:&quot;&quot;,&quot;argue_msg&quot;:&quot;&quot;,&quot;viewseo&quot;:40494159&#125;,&quot;dynamic&quot;:&quot;&quot;,&quot;cid&quot;:945221244,&quot;dimension&quot;:&#123;&quot;width&quot;:1920,&quot;height&quot;:1080,&quot;rotate&quot;:0&#125;</span><br></pre></td></tr></table></div></figure><p>这里已经有很多关于参数的信息了，先分析目前可以知道或者有用的参数</p><p>#bid:434581916   &#x2F;&#x2F;未知，但因为id一般是唯一的所以先保留看看</p><p>#bvid:BV1c3411Q7XH  &#x2F;&#x2F;本视频的 bv号</p><p>#owner:{ “mid”:37963636  &#x2F;&#x2F;未知 保留原因如上 </p><p>​              “name”: “一只风风o” &#x2F;&#x2F;视频作者用户名}</p><p>#stat:{   “view”:40494159  , “danmaku”:31912 } &#x2F;&#x2F;与上面获取的基本信息对上了  视频播放量40491659、弹幕量31912。</p><p>第三次:(获得了第八次本视频BV号出现的位置)</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230309160501356.png"  alt="image-20230309160501356">      </p><p>“p”:1,”aid”:434581916,”bvid”:”BV1c3411Q7XH”,”cid”:945221244,”vid”:””,”vtype”:”vupload”</p><p>&#x2F;&#x2F;此时bid一样 但是多了一个cid  </p><p>#cid:945221244  &#x2F;&#x2F;未知</p><p>所以要搞明白bid,mid,cid 才能清楚知道弹幕的数据在哪里</p><p>再由up主的uid:37963636可知 uid和mid是同一个</p><p>所以只要弄清楚bid 和 cid的含义</p><p>再用备份数据的BV号 获得所在数据的位置</p><p>第一次:(备用数据第一个)</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230309163724217.png"  alt="image-20230309163724217">      </p><p>{“cid”:796445438,”page”:1,”from”:”vupload”,”part”:”这一定就是原片吧”,”duration”:85,”vid”:””,”weblink”:””,”dimension”:{“width”:576,”height”:1246,”rotate”:0}},”bvid”:”BV1td4y1N7Vw”}</p><p>#cid:796445438 </p><p>#bvid:BV1td4y1N7Vw</p><p>再由part “这一定就是原片吧” 可以推出是推荐视频的bv号</p><p>第二次:(备用数据第二个)</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230309164127463.png"  alt="image-20230309164127463">      </p><p>{“cid”:893220432,”page”:1,”from”:”vupload”,”part”:”这一定就是原片吧2”,”duration”:76,”vid”:””,”weblink”:””,”dimension”:{“width”:886,”height”:1920,”rotate”:0}},”bvid”:”BV14P4y1177H”}</p><p>#cid:893220432</p><p>#bvid:BV14P4y1177H</p><p>再由用户的uid查找位置 看看是否有有用的信息</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230309165051439.png"  alt="image-20230309165051439">      </p><p>这里出现了uname  可能和评论有关</p><p>由此可以推出cid和bvid可能有某种关系，合理可以推出cid可能与弹幕库相连，可能由cid获得弹幕库</p>        <h1 id="解析用户已注销的视频弹幕"   >          <a href="#解析用户已注销的视频弹幕" class="heading-link"><i class="fas fa-link"></i></a><a href="#解析用户已注销的视频弹幕" class="headerlink" title="解析用户已注销的视频弹幕"></a>解析用户已注销的视频弹幕</h1>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈java中创建线程</title>
      <link href="/2022/03/21/%E6%B5%85%E8%B0%88java%E4%B8%AD%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B/"/>
      <url>/2022/03/21/%E6%B5%85%E8%B0%88java%E4%B8%AD%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[        <h1 id="浅谈java中创建线程的方式"   >          <a href="#浅谈java中创建线程的方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#浅谈java中创建线程的方式" class="headerlink" title="浅谈java中创建线程的方式"></a>浅谈java中创建线程的方式</h1>      <p>有三种、四种、五种的说法，也有人说是一种</p><p>所以从底层方面看看</p>        <h2 id="第一种"   >          <a href="#第一种" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2>      <p>设计Thread类的子类,然后重写run()方法</p><p>当调用线程的时候创建子类的对象再调用start()方法</p><p>当直接调用run方法的时候是直接调用子类的run()方法  </p>        <h3 id="Thread的子类"   >          <a href="#Thread的子类" class="heading-link"><i class="fas fa-link"></i></a><a href="#Thread的子类" class="headerlink" title="Thread的子类"></a>Thread的子类</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="调用线程"   >          <a href="#调用线程" class="heading-link"><i class="fas fa-link"></i></a><a href="#调用线程" class="headerlink" title="调用线程"></a>调用线程</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">myThread.start();</span><br></pre></td></tr></table></div></figure>        <h2 id="第二种"   >          <a href="#第二种" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2>      <p>设计Runnable接口的实现类，实现run()方法</p><p>创建线程对象的同时将创建实现类的对象作为形参传入构建方法中</p><p>调用线程的start()方法即可</p>        <h3 id="Runnable接口的实现类"   >          <a href="#Runnable接口的实现类" class="heading-link"><i class="fas fa-link"></i></a><a href="#Runnable接口的实现类" class="headerlink" title="Runnable接口的实现类"></a>Runnable接口的实现类</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="调用线程-1"   >          <a href="#调用线程-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#调用线程-1" class="headerlink" title="调用线程"></a>调用线程</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyRunnable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></div></figure>        <h2 id="第三种"   >          <a href="#第三种" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h2>      <p>当要线程执行的返回结果时,设计Callable的实现类,重写call()方法</p><p>用该方法时得用到FutureTask对象 创建FutureTask对象的时候将Callable的实现类作为形参传入构建方法在中</p><p>创建Thread实例的时候 target的形参即创建的FutureTask类的实例</p><p>线程调用start()方法后  执行的返回结果就从FutureTask实例调用get()方法获得</p>        <h3 id="Callable接口的实现类"   >          <a href="#Callable接口的实现类" class="heading-link"><i class="fas fa-link"></i></a><a href="#Callable接口的实现类" class="headerlink" title="Callable接口的实现类"></a>Callable接口的实现类</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="调用线程-2"   >          <a href="#调用线程-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#调用线程-2" class="headerlink" title="调用线程"></a>调用线程</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyCallable</span> <span class="variable">myCallable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line"></span><br><span class="line">FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(myCallable);</span><br><span class="line"></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task);</span><br><span class="line">t.start();</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> task.get();</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></div></figure>        <h2 id="第四种"   >          <a href="#第四种" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四种" class="headerlink" title="第四种"></a>第四种</h2>      <p>利用线程池创建线程</p><p>用Exectors工厂方法配置ThreadPoolExecutor</p><p>用创建线程的ThreadFactory的实现类对象中newThread()方法</p>        <h2 id="第五种"   >          <a href="#第五种" class="heading-link"><i class="fas fa-link"></i></a><a href="#第五种" class="headerlink" title="第五种"></a>第五种</h2>      <p>利用lambda表达式创建线程</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></div></figure>        <h2 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h2>      <p>从底层来看都是实现Runnable接口</p>        <h3 id="创建Thread子类"   >          <a href="#创建Thread子类" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建Thread子类" class="headerlink" title="创建Thread子类"></a>创建Thread子类</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>自己设计的子类继承了Thread类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></div></figure><p>而Thread类是实现了Runnable接口的类 所以第一种方式底层也是创建Runnable的实现类</p>        <h3 id="Callable的实现类"   >          <a href="#Callable的实现类" class="heading-link"><i class="fas fa-link"></i></a><a href="#Callable的实现类" class="headerlink" title="Callable的实现类"></a>Callable的实现类</h3>      <p>Callable是要借助FutureTask类</p><p>创建Thread的时候FutureTask类作为形参   </p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FutureTask</span>&lt;V&gt; <span class="keyword">implements</span> <span class="title class_">RunnableFuture</span>&lt;V&gt; &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>而FutureTask类是RunnableFuture接口的实现类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RunnableFuture</span>&lt;V&gt; <span class="keyword">extends</span> <span class="title class_">Runnable</span>, Future&lt;V&gt; &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>而RunnableFuture接口继承了Runnable,和Future</p><p>与此同时 </p><p>Thread线程构建的时候将Task作为Runnable实现类 target构建对象</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(Runnable target)</span> &#123;</span><br><span class="line">    init(<span class="literal">null</span>, target, <span class="string">&quot;Thread-&quot;</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="利用线程池创建"   >          <a href="#利用线程池创建" class="heading-link"><i class="fas fa-link"></i></a><a href="#利用线程池创建" class="headerlink" title="利用线程池创建"></a>利用线程池创建</h3>      <p>线程池创建的worker线程 都实现了Runnable接口</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Worker</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Runnable</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>用创建线程的ThreadFactory的实现类对象中newThread()方法传入的参数也是实现Runnbale接口的实现类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ThreadFactory</span> &#123;</span><br><span class="line">    Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="lambda表达式"   >          <a href="#lambda表达式" class="heading-link"><i class="fas fa-link"></i></a><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3>      <p>本质上是匿名内部类，实际上是一个Runnbale接口的实现类</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
