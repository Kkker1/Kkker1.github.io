<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深入剖析并发编程-JUC篇[5-AQS]</title>
      <link href="/2023/09/13/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-JUC%E7%AF%87%5B5-AQS%5D/"/>
      <url>/2023/09/13/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-JUC%E7%AF%87%5B5-AQS%5D/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死之前要做完的算法手册-[7.回溯算法]</title>
      <link href="/2023/09/07/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B7.%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%5D/"/>
      <url>/2023/09/07/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B7.%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%5D/</url>
      
        <content type="html"><![CDATA[        <h1 id="回溯算法理论基础"   >          <a href="#回溯算法理论基础" class="heading-link"><i class="fas fa-link"></i></a><a href="#回溯算法理论基础" class="headerlink" title="回溯算法理论基础"></a>回溯算法理论基础</h1>      <p>回溯法又称回溯搜索法，是一种<strong>暴力搜索法</strong></p><blockquote><p>回溯的本质就是穷举，穷举所有可能，选出想要的结果</p></blockquote><p>回溯法可以抽象成一个N叉树，在集合递归中寻找结果，而<strong>集合长度为树的宽度，递归的深度构成了树的深度</strong></p><p><em>回溯法的模板</em></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(参数)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(终止条件)&#123;</span><br><span class="line">        收获结果集; </span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(集合长度)&#123;</span><br><span class="line">        处理结点;</span><br><span class="line">        递归;</span><br><span class="line">        回溯;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="组合"   >          <a href="#组合" class="heading-link"><i class="fas fa-link"></i></a><a href="#组合" class="headerlink" title="组合"></a>组合</h1>              <h2 id="77-组合"   >          <a href="#77-组合" class="heading-link"><i class="fas fa-link"></i></a><a href="#77-组合" class="headerlink" title="77.组合"></a>77.组合</h2>      <p>给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p><p>你可以按 <strong>任何顺序</strong> 返回答案。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/combinations/" >Leetcode.77题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做"   >          <a href="#第一次做" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;08</p>        <h4 id="第一次代码"   >          <a href="#第一次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            list.add(i);</span><br><span class="line">            backtarcking(list,n,i+<span class="number">1</span>,k-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtarcking</span><span class="params">(List&lt;Integer&gt; list,<span class="type">int</span> n,<span class="type">int</span> index,<span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span> || index&gt;n)&#123;</span><br><span class="line">            result.add(list);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=k;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            list.add(index);</span><br><span class="line">            backtarcking(list,n,index+<span class="number">1</span>,k-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败"   >          <a href="#提交失败" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:输入n&#x3D;4，k&#x3D;2，输出[[1,2,2],[1,2,2],[2,3,3],[2,3,3],[3,4,4],[3,4,4],[4]] ，预期输出[[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]</p>        <h4 id="第二次代码"   >          <a href="#第二次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            list.add(i);</span><br><span class="line">            backtarcking(list,n,i+<span class="number">1</span>,k-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtarcking</span><span class="params">(List&lt;Integer&gt; list,<span class="type">int</span> n,<span class="type">int</span> index,<span class="type">int</span> k)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span> || index&gt;n)&#123;</span><br><span class="line">            result.add(list);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=k;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            list.add(index);</span><br><span class="line">            backtarcking(list,n,index+<span class="number">1</span>,k-<span class="number">1</span>);</span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-1"   >          <a href="#提交失败-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-1" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:输入n&#x3D;4，k&#x3D;2，输出[[1],[1],[2],[2],[3],[3],[4]] ，预期输出[[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]</p><p><em>未能自己做出来</em></p>        <h3 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解" class="headerlink" title="题解"></a>题解</h3>      <p>思路：定义两个全局变量，一个result收集结果集，一个list用于收集单个路径(组合)，当list的长度等于k的时候就收获结果</p><p><em>如果还没能看懂可以看这部分中的图解，改成N叉树之后分析</em></p><p><strong>实现</strong></p><ul><li><p>递归函数的参数和返回值</p><ul><li><p>返回值void:因为整个过程都收获到结果集result中</p></li><li><p>参数n:集合的长度(组合能取值的范围)</p></li><li><p>参数k:组合的个数</p></li><li><p>参数index：每次开始的搜索的索引值，第一次传入1表示从1开始搜索</p></li></ul></li><li><p>递归函数的结束条件</p><p>当list.size&#x3D;&#x3D;k也即组合个数达到要求，可以收获结果集。 <strong>result.add(new ArrayList(list))</strong>;</p><blockquote><p>如果result直接添加list，会后面递归中改变list值导致结果集中的数据也改变</p></blockquote></li><li><p>单层递归的处理逻辑</p><p>从index到n开始搜索，每一次递归前添加当前元素，然后递归结束之后<strong>回溯</strong></p></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; list;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtracking(n,k,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> k, <span class="type">int</span> index)</span>&#123;</span><br><span class="line">    <span class="comment">//收获结果集</span></span><br><span class="line">        <span class="keyword">if</span>(list.size()==k)&#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(list));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;=n;i++)&#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">            backtracking(n,k,i+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//回溯</span></span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="图解"   >          <a href="#图解" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解" class="headerlink" title="图解"></a>图解</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B7.%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%5D/image-20230908122504278.png"  alt="回溯法组合思路(1)">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B7.%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%5D/image-20230908122912662.png"  alt="回溯法思路(2)">      </p><p>也即我们需要收获叶子结点，并且每次搜索都是从当前搜索位置之后开始</p><blockquote><p>第一次搜索为1  所以要搜索234</p><p>第二次搜索为2 所以要搜索34</p><p>..</p></blockquote><p>我们通过index来保证搜索以后的位置</p>        <h3 id="小结"   >          <a href="#小结" class="heading-link"><i class="fas fa-link"></i></a><a href="#小结" class="headerlink" title="小结"></a>小结</h3>      <p>这道题其实我自己做的时候也差一点能写出来，因为没能写在笔记上我做这道题的具体过程，因为很多次的过程都是因为添加数据之后然后修改过list，导致最后的数值多了或者少了，因为list一直是一个地址，所以result通常添加的值就是一个list。</p><p>而经过视频学习之后发现，这个<strong>存入数据的时候可以new ArrayList(list)</strong> ，copy一个新的ArrayList。</p><p>同时这道题有回溯的思想是值得我们学习到的，list添加数据之后单层递归要回溯pop出元素</p>        <h2 id="77-组合-优化"   >          <a href="#77-组合-优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#77-组合-优化" class="headerlink" title="77.组合(优化)"></a>77.组合(优化)</h2>      <p>给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p><p>你可以按 <strong>任何顺序</strong> 返回答案。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/combinations/description/" >Leetcode.77题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="题解-1"   >          <a href="#题解-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3>      <p>在这里我们进行一个剪枝的优化</p><p><strong>假设</strong></p><p>假如n&#x3D;4，k&#x3D;4的时候，我们可以简单知道唯一的答案就是[1,2,3,4]。而我们之前的穷举除了要查找1，还要查找2、3、4，但是这个时候无论如何都不能达到需要的k值，也即我们当集合中剩余的元素不可能达到组合的个数的时候就可以进行剪枝</p><p>也即我们可以求进行组合搜索的时候至多索引的位置</p><p><strong>实现</strong></p><ul><li><p>获取至多索引的长度</p><p>**k-list.size()**为还需要的元素个数</p><p><strong>n-(k-list.size())+1</strong>为至多索引的位置，我们可以假设极端情况来判断这个是否要加1</p><blockquote><p>假设n为4 k为3  list中元素为0  所以4-(3-0)+1 也即最多索引为2</p></blockquote></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; list;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        backtracking(n,k,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> k,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list.size()==k)&#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(list));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//具体剪枝的逻辑就在循环中条件的判断中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;=(n-(k-list.size())+<span class="number">1</span>);i++)&#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">            backtracking(n,k,i+<span class="number">1</span>);</span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="216-组合总合-III"   >          <a href="#216-组合总合-III" class="heading-link"><i class="fas fa-link"></i></a><a href="#216-组合总合-III" class="headerlink" title="216.组合总合 III"></a>216.组合总合 III</h2>      <p>找出所有相加之和为 <code>n</code> 的 <code>k</code> 个数的组合，且满足下列条件：</p><ul><li>只使用数字1到9</li><li>每个数字 <strong>最多使用一次</strong></li></ul><p>返回 <em>所有可能的有效组合的列表</em> 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/combination-sum-iii/" >Leetcode.216(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-1"   >          <a href="#第一次做-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-1" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;09</p>        <h4 id="第一次代码-1"   >          <a href="#第一次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-1" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; list;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtracking(k,n,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> n ,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list.size()==k)&#123;</span><br><span class="line">            <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:list)&#123;</span><br><span class="line">                sum+=i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum==n)&#123;</span><br><span class="line">                result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(list));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">            backtracking(k,n,i);</span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-2"   >          <a href="#提交失败-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-2" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:k&#x3D;3,n&#x3D;7，输出[[1,1,5],[1,2,4],[1,3,3],[2,2,3]]，预期输出[1,2,4]</p><p>递归遍历的时候因为一个元素只能用一次，所以后面将递归下次的索引值改了</p>        <h4 id="第二次代码-1"   >          <a href="#第二次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-1" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; list;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtracking(k,n,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> n ,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list.size()==k)&#123;</span><br><span class="line">            <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:list)&#123;</span><br><span class="line">                sum+=i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum==n)&#123;</span><br><span class="line">                result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(list));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">            backtracking(k,n,i+<span class="number">1</span>);</span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功"   >          <a href="#提交成功" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-2"   >          <a href="#题解-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3>      <p>思路：这道题和之前做的组合题相似，不过是要满足组合数之和要满足n，所以我们在收获结果集的时候改变一下条件，当满足条件的收获即可</p><p><strong>实现</strong></p><ul><li><p>递归函数的参数和返回值</p><ul><li><p>返回值void：无返回值，整个结果集被全局变量result收获</p></li><li><p>参数k：需要的组合元素个数</p></li><li><p>参数n：目标总数</p></li><li><p>参数sum：当前list集合中的元素之和</p></li><li><p>参数index：下次搜索的索引下标</p></li></ul></li><li><p>递归函数的结束条件</p><p>当list.size&#x3D;&#x3D;k，也即达到符合组合数，判断是否组合之和符合条件如果是收获，如果不是则直接结束</p></li><li><p>单层递归的逻辑</p><ul><li>从index到n开始搜索，每一次递归前添加当前元素到list，并且统计集合之和到sum，然后递归结束之后<strong>回溯</strong>，不仅仅回溯集合还回溯sum</li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; list;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtracking(k,n,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> n ,<span class="type">int</span> sum,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list.size()==k)&#123;</span><br><span class="line">           <span class="keyword">if</span>(sum==n)&#123;</span><br><span class="line">               result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(list));</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line"><span class="comment">//元素添加之后总和增加，增加list元素</span></span><br><span class="line">            sum+=i;</span><br><span class="line">            list.add(i);</span><br><span class="line">            backtracking(k,n,sum,i+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//回溯，回溯sum也回溯list</span></span><br><span class="line">            sum-=i;</span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="剪枝"   >          <a href="#剪枝" class="heading-link"><i class="fas fa-link"></i></a><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h3>      <p>在这里我们能进行一个剪枝的操作，为了就是在不可能达到的情况下不会再去搜索</p><ul><li><p>第一部分</p><ul><li><p>当递归的时候sum&gt;n的时候，无论怎么样后面的分支都不会产生目标集，所以直接返回即可</p><blockquote><p>例如此时sum&#x3D;9 n为5，那无论后面怎么加数据都不会导致sum&#x3D;&#x3D;n</p></blockquote></li></ul></li><li><p>第二部分</p><ul><li><p>当剩下的索引位置无法满足k的时候</p><blockquote><p>例如索引为8，K为3，那么怎么样都不会有后面满足条件的组合</p></blockquote></li></ul></li></ul><p><strong>实现</strong></p><ul><li>第一部分剪枝，当递归结束的判断条件，if(sum&gt;n) return;</li><li>第二部分剪枝，循环的判断条件，9-(k-list.size())+1，为<strong>至多满足组合的索引下标</strong></li></ul><p><strong>剪枝代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; list;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtracking(k,n,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> n ,<span class="type">int</span> sum,<span class="type">int</span> index)</span>&#123;</span><br><span class="line"> <span class="comment">//剪枝部分1</span></span><br><span class="line">        <span class="keyword">if</span>(sum&gt;n)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(list.size()==k)&#123;</span><br><span class="line">           <span class="keyword">if</span>(sum==n)&#123;</span><br><span class="line">               result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(list));</span><br><span class="line">           &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//剪枝部分2</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;=<span class="number">9</span>-(k-list.size())+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            sum+=i;</span><br><span class="line">            list.add(i);</span><br><span class="line">            backtracking(k,n,sum,i+<span class="number">1</span>);</span><br><span class="line">            sum-=i;</span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="17-电话号码的字母组合"   >          <a href="#17-电话号码的字母组合" class="heading-link"><i class="fas fa-link"></i></a><a href="#17-电话号码的字母组合" class="headerlink" title="17.电话号码的字母组合"></a>17.电话号码的字母组合</h2>      <p>给定一个仅包含数字 <code>2-9</code> 的字符串，返回所有它能表示的字母组合。答案可以按 <strong>任意顺序</strong> 返回。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/" >Leetcode.17题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-2"   >          <a href="#第一次做-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-2" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;11</p>        <h4 id="第一次代码-2"   >          <a href="#第一次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-2" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] hash=&#123;-<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">14</span>,<span class="number">18</span>,<span class="number">21</span>,<span class="number">25</span>&#125;;</span><br><span class="line">    <span class="type">char</span>[] table;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    List&lt;String&gt; result;</span><br><span class="line">    List&lt;String&gt; path;</span><br><span class="line">    List&lt;Integer&gt; list;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCombinations</span><span class="params">(String digits)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        table=<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123; table[i]=(<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span>+i);&#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] str=<span class="keyword">new</span> <span class="title class_">int</span>[digits.length()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;str.length;i++)&#123;</span><br><span class="line">            str[i]=Integer.parseInt(digits.charAt(i)+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(str);</span><br><span class="line">        index=<span class="number">0</span>;</span><br><span class="line">        backtracking(str,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] str,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list.size()==str.length)&#123;</span><br><span class="line">            result.add(path.toString());</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;str.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(index&lt;hash[str[i]]) index=hash[str[i]];</span><br><span class="line">            list.add(i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=hash[str[i]-<span class="number">1</span>];j&lt;index;j++)&#123;</span><br><span class="line">                StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                sb.append(table[j]);</span><br><span class="line">                path.add(sb.toString());</span><br><span class="line">                </span><br><span class="line">                backtracking(str,i+<span class="number">1</span>);</span><br><span class="line">                path.remove(path.size()-<span class="number">1</span>);    </span><br><span class="line">            &#125;           </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-3"   >          <a href="#提交失败-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-3" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:输入[“23”] 输出[“[a, c]”,”[a, d]”,”[a, e]”,”[b]”,”[c]”,”[d]”,”[e]”]，预期输出[“ad”,”ae”,”af”,”bd”,”be”,”bf”,”cd”,”ce”,”cf”]</p>        <h4 id="第二次代码-2"   >          <a href="#第二次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-2" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] hash=&#123;-<span class="number">1</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">11</span>,<span class="number">14</span>,<span class="number">18</span>,<span class="number">21</span>,<span class="number">25</span>&#125;;</span><br><span class="line">    <span class="type">char</span>[] table;</span><br><span class="line">    <span class="type">int</span> index;</span><br><span class="line">    List&lt;String&gt; result;</span><br><span class="line">    List&lt;String&gt; path;</span><br><span class="line">    List&lt;Integer&gt; list;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCombinations</span><span class="params">(String digits)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        table=<span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123; table[i]=(<span class="type">char</span>)(<span class="string">&#x27;a&#x27;</span>+i);&#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] str=<span class="keyword">new</span> <span class="title class_">int</span>[digits.length()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;str.length;i++)&#123;</span><br><span class="line">            str[i]=Integer.parseInt(digits.charAt(i)+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(str);</span><br><span class="line">        index=<span class="number">0</span>;</span><br><span class="line">        backtracking(str,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] str,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(list.size()==str.length)&#123;</span><br><span class="line">            result.add(path.toString());</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;str.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(index&lt;hash[str[i]]) index=hash[str[i]];</span><br><span class="line">            list.add(i);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=hash[str[i]-<span class="number">1</span>]+<span class="number">1</span>;j&lt;=index;j++)&#123;</span><br><span class="line">                StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                sb.append(table[j]);</span><br><span class="line">                path.add(sb.toString());</span><br><span class="line">                </span><br><span class="line">                backtracking(str,i+<span class="number">1</span>);</span><br><span class="line">                path.remove(path.size()-<span class="number">1</span>);    </span><br><span class="line">            &#125;     </span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);      </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-4"   >          <a href="#提交失败-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-4" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:输入[“23”] 输出[“[a, d]”,”[a, e]”,”[a, f]”,”[b, d]”,”[b, e]”,”[b, f]”,”[c, d]”,”[c, e]”,”[c, f]”,”[d, d]”,”[d, e]”,”[d, f]”,”[e, d]”,”[e, e]”,”[e, f]”,”[f, d]”,”[f, e]”,”[f, f]”]，预期输出[“ad”,”ae”,”af”,”bd”,”be”,”bf”,”cd”,”ce”,”cf”]</p><p>没做出来</p>        <h3 id="题解-3"   >          <a href="#题解-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3>      <p><strong>思路</strong></p><p>我们用一个hashTable做映射表，然后用index指向正在处理的位置，如果index等于digits的最后字符位置，说明已经到收获结果的时候</p><p><strong>实现</strong></p><ul><li><p>初始化，List<String> result用于接收结果集，List<String> path用于接收单层路径，</p><p>hashTable&#x3D;{“”,””,”abc”,”def”,”ghi”,”jkl”,”mno”,”pqrs”,”tuv”,”wxyz”}用于做映射数组</p></li><li><p>递归函数的参数和返回值</p><ul><li><p>返回值void：所有的结果集都接收在result中</p></li><li><p>参数digits：电话字母组合的字符串</p></li><li><p>参数index：表示当前处理的字符位置</p><blockquote><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例如 digits=<span class="string">&quot;23&quot;</span>   index=<span class="number">0</span>  说明当前处理<span class="string">&quot;2&quot;</span>字符</span><br><span class="line">  index=<span class="number">1</span>  说明当前处理<span class="string">&quot;3&quot;</span>字符</span><br><span class="line">  index=<span class="number">2</span>  说明当前字符串已经全部被处理了可以收获结果集</span><br></pre></td></tr></table></div></figure></blockquote></li></ul></li><li><p>递归函数的结束条件</p><p>当index&#x3D;&#x3D;digits.length():也即处理完每个字符，收获结果</p></li><li><p>单层递归的逻辑</p><ul><li>获取当前字符所对应的数字：int num&#x3D;digits[index];</li><li>通过hashTable映射，遍历每个数字对应的数组</li><li>将每个数组中的元素依次添加到path路径中</li><li>递归调用函数，处理下一个位置字符</li><li>回溯</li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;String&gt; result;</span><br><span class="line">    List&lt;String&gt; path;</span><br><span class="line">    String[] hashTable=&#123;<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;def&quot;</span>,<span class="string">&quot;ghi&quot;</span>,<span class="string">&quot;jkl&quot;</span>,<span class="string">&quot;mno&quot;</span>,<span class="string">&quot;pqrs&quot;</span>,<span class="string">&quot;tuv&quot;</span>,<span class="string">&quot;wxyz&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCombinations</span><span class="params">(String digits)</span> &#123;</span><br><span class="line">        <span class="comment">//初始化result和path集合</span></span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果digits为空或者为空串，则直接返回空集合</span></span><br><span class="line">        <span class="keyword">if</span>(digits==<span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(digits)) <span class="keyword">return</span> result;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//digits不为空串则进行回溯搜索</span></span><br><span class="line">        backtarcking(digits,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtarcking</span><span class="params">(String digits,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="comment">//参数index指向的是正在处理的个数，当指向digtis.length()也即指向最后一个字符后面说明可以收获结果</span></span><br><span class="line">        <span class="keyword">if</span>(index==digits.length())&#123;</span><br><span class="line">            StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="comment">//拼接path路径，收获结果到result中</span></span><br><span class="line">            <span class="keyword">for</span>(String s:path)&#123;</span><br><span class="line">                sb.append(s);</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(sb.toString());</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//获取当前index位置下的数，例如”23“ index为 0  则num为2</span></span><br><span class="line">        <span class="comment">//index为 1  则num为3  </span></span><br><span class="line">        <span class="type">int</span> num=digits.charAt(index)-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历hashTable中映射对应的数组，</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;hashTable[num].length();i++)&#123;</span><br><span class="line">            <span class="comment">//添加数组中对应的字符</span></span><br><span class="line">            path.add(hashTable[num].charAt(i)+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">//操作下一个位置字符</span></span><br><span class="line">            backtarcking(digits,index+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//回溯</span></span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="图解-1"   >          <a href="#图解-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解-1" class="headerlink" title="图解"></a>图解</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B7.%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%5D/image-20230911225341797.png"  alt="电话号码的字母组合">      </p>        <h2 id="39-组合总和"   >          <a href="#39-组合总和" class="heading-link"><i class="fas fa-link"></i></a><a href="#39-组合总和" class="headerlink" title="39.组合总和"></a>39.组合总和</h2>      <p>给你一个 <strong>无重复元素</strong> 的整数数组 <code>candidates</code> 和一个目标整数 <code>target</code> ，找出 <code>candidates</code> 中可以使数字和为目标数 <code>target</code> 的 所有 <strong>不同组合</strong> ，并以列表形式返回。你可以按 <strong>任意顺序</strong> 返回这些组合。</p><p><code>candidates</code> 中的 <strong>同一个</strong> 数字可以 <strong>无限制重复被选取</strong> 。如果至少一个数字的被选数量不同，则两种组合是不同的。 </p><p>对于给定的输入，保证和为 <code>target</code> 的不同组合数少于 <code>150</code> 个。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/combination-sum/" >Leetcode.39题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-3"   >          <a href="#第一次做-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-3" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;12</p>        <h4 id="第一次代码-3"   >          <a href="#第一次代码-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-3" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        backtracking(candidates,target);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] candidates,<span class="type">int</span> target)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target==<span class="number">0</span>) result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;candidates.length;i++)&#123;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            backtracking(candidates,target-candidates[i]);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误"   >          <a href="#提交错误" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:candidates &#x3D;[2,3,5] target&#x3D;7,输出[[2,2,2,2],[2,3,3],[3,2,3],[3,3,2],[3,5],[5,3]]，预期输出[[2,2,2,2],[2,3,3],[3,5]]</p>        <h4 id="第二次代码-3"   >          <a href="#第二次代码-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-3" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        backtracking(candidates,target,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] candidates,<span class="type">int</span> target,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target==<span class="number">0</span>) result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;candidates.length;i++)&#123;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            backtracking(candidates,target-candidates[i],i);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-1"   >          <a href="#提交成功-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-1" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>传入一个index参数，可以确定每次开始的位置，如果当前结点并没有完全结束之前可以重复使用，所以递归传入的i为当前位置。为的是index以后位置的结果不会重复</p>        <h3 id="题解-4"   >          <a href="#题解-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3>      <p>思路：利用全局变量result收获结果集，以及全局变量path来获取单层路径，然后当所需的值小于等于0的时候做一个收获结果集的操作。如果等于0则收获，如果小于0就结束。然后这个取完一个元素之后，这个位置的元素可以重复取，所以我们对index传参的过程中可以不断的使用当前位置，而当前位置结束之后就不能再使用，防止组合的重复</p><p><strong>实现</strong></p><ul><li>递归函数的参数和返回值<ul><li>返回值void：所有的结果都在result集合中</li><li>参数candidates：用于遍历的数组</li><li>参数target：<strong>目前所需的值</strong></li><li>参数index：遍历的起始位置</li></ul></li><li>递归函数的结束条件<ul><li>当target&lt;0，说明总和已经超过了，结束递归</li><li>当target&#x3D;&#x3D;0，说明当前组合是需要的，添加到result集合中再结束递归</li></ul></li><li>单层递归的逻辑<ul><li>添加当前结点值到path中</li><li>递归，从当前位置开始，以便可以取相同元素</li><li>回溯</li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        backtracking(candidates,target,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] candidates,<span class="type">int</span> target,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target==<span class="number">0</span>) result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;candidates.length;i++)&#123;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            backtracking(candidates,target-candidates[i],i);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="图解-2"   >          <a href="#图解-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解-2" class="headerlink" title="图解"></a>图解</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B7.%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%5D/image-20230912092618756.png"  alt="组合总和">      </p>        <h3 id="剪枝-1"   >          <a href="#剪枝-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#剪枝-1" class="headerlink" title="剪枝"></a>剪枝</h3>      <p><strong>思想</strong></p><ul><li><p>先对数组进行<strong>排序</strong></p><blockquote><p>不排序的话如果数组为2534，target&#x3D;4，那么就会错过结果集</p></blockquote></li><li><p>再判断当前位置元素是否大于target，如果大于了就可以剪枝不再遍历后面元素</p></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backtracking(candidates,target,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] candidates,<span class="type">int</span> target,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target==<span class="number">0</span>) result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//剪枝逻辑就在for循环的条件中，添加了candidates[i]&lt;=target</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;candidates.length&amp;&amp; candidates[i]&lt;=target;i++)&#123;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            backtracking(candidates,target-candidates[i],i);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="40-组合总和II"   >          <a href="#40-组合总和II" class="heading-link"><i class="fas fa-link"></i></a><a href="#40-组合总和II" class="headerlink" title="40.组合总和II"></a>40.组合总和II</h2>      <p>给定一个候选人编号的集合 <code>candidates</code> 和一个目标数 <code>target</code> ，找出 <code>candidates</code> 中所有可以使数字和为 <code>target</code> 的组合。</p><p><code>candidates</code> 中的每个数字在每个组合中只能使用 <strong>一次</strong> 。</p><p><strong>注意：</strong>解集不能包含重复的组合。 </p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/combination-sum-ii/" >Leetcode.40(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-4"   >          <a href="#第一次做-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-4" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;13</p>        <h4 id="第一次代码-4"   >          <a href="#第一次代码-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-4" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtracking(candidates,target,<span class="number">0</span>);</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] candidates,<span class="type">int</span> target,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;candidates.length;i++)&#123;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            backtracking(candidates,target-candidates[i],i+<span class="number">1</span>);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-5"   >          <a href="#提交失败-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-5" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:candidates &#x3D;[10,1,2,7,6,1,5]，target&#x3D;8，输出[[1,2,5],[1,7],[1,6,1],[2,6],[2,1,5],[7,1]]，预期输出[[1,1,6],[1,2,5],[1,7],[2,6]]</p>        <h4 id="第二次代码-4"   >          <a href="#第二次代码-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-4" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backtracking(candidates,target,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] candidates,<span class="type">int</span> target,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;candidates.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span> &amp;&amp; candidates[i-<span class="number">1</span>]==candidates[i])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            backtracking(candidates,target-candidates[i],i+<span class="number">1</span>);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-6"   >          <a href="#提交失败-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-6" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:candidates &#x3D;[10,1,2,7,6,1,5]，target&#x3D;8，输出[[1,2,5],[1,7],[1,6,1],[2,6],[2,1,5],[7,1]]，预期输出[[1,1,6],[1,2,5],[1,7],[2,6]]</p>        <h4 id="第三次代码"   >          <a href="#第三次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backtracking(candidates,target,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] candidates,<span class="type">int</span> target,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(List&lt;Integer&gt; list:result)&#123;</span><br><span class="line">                <span class="keyword">if</span>(list.size()!=path.size()) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(list.equals(path)) <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;candidates.length;)&#123;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            backtracking(candidates,target-candidates[i],i+<span class="number">1</span>);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-7"   >          <a href="#提交失败-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-7" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:candidates&#x3D;[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],target &#x3D;30 超出时间限制</p>        <h4 id="第四次代码"   >          <a href="#第四次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四次代码" class="headerlink" title="第四次代码"></a>第四次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backtracking(candidates,target,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] candidates,<span class="type">int</span> target,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;candidates.length;)&#123;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            backtracking(candidates,target-candidates[i],i+<span class="number">1</span>);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(i!=candidates.length-<span class="number">1</span>&amp;&amp;candidates[i]==candidates[i+<span class="number">1</span>])&#123;</span><br><span class="line">                i+=<span class="number">2</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> i++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-8"   >          <a href="#提交失败-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-8" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:candidates&#x3D;[2,2,2]，target&#x3D;2，输出[[2],[2]],预期输出[2]</p>        <h4 id="第五次代码"   >          <a href="#第五次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第五次代码" class="headerlink" title="第五次代码"></a>第五次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//给数组排序</span></span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backtracking(candidates,target,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] candidates,<span class="type">int</span> target,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;candidates.length;)&#123;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            backtracking(candidates,target-candidates[i],i+<span class="number">1</span>);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//回溯之后指针移到下一个元素位置，如果下一个元素和当前元素相同，说明下一个组合中以下一个元素开始的组合已经重复了</span></span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">while</span>(i!=<span class="number">0</span>&amp;&amp;i&lt;candidates.length)&#123;</span><br><span class="line">                <span class="keyword">if</span>(candidates[i-<span class="number">1</span>]==candidates[i]) i++;</span><br><span class="line">                <span class="keyword">else</span> &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交通过"   >          <a href="#提交通过" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交通过" class="headerlink" title="提交通过"></a>提交通过</h5>              <h3 id="题解-5"   >          <a href="#题解-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3>      <p>思路：这道题和之前的题目不一样的点在于数组中有相同数值的元素，并且规定组合中元素不能重复取，但是取相同值的元素，</p><p>我们利用一个used数组来对原数组使用元素的情况进行判断，如果used[i]&#x3D;&#x3D;1说明这个位置元素已经取过，如果used[i]&#x3D;&#x3D;0说明这个位置元素还没取过</p><p><strong>实现</strong></p><ul><li><p>全局变量</p><ul><li>List&lt;List<Integer>&gt; result :用于统计结果集</li><li>List<Integer> path :用于记录单个路径</li><li>int[] used :用来标记这个位置元素是否使用</li></ul></li><li><p>初始化并且将candidates数组进行<strong>排序</strong>（使其相同值元素能在一起，方便进行<strong>层次维度</strong>的去重）</p></li><li><p>递归函数的返回值和参数</p><ul><li>返回值void：所有结果集都在result中</li><li>参数candidates：数组</li><li>参数target：目标和</li><li>参数start：搜索的开始索引值</li></ul></li><li><p>递归函数的结束条件</p><ul><li>当target&lt;0，说明当前path中元素和超过了所需，直接结束递归</li><li>当target&#x3D;&#x3D;0，说明path中的元素就是当前需要的组合，result.add(new ArrayList(path))，收获结果</li></ul></li><li><p>单层递归的处理逻辑</p><ul><li><p><strong>去重处理</strong></p></li><li><ul><li><p>判断当(i!&#x3D;0 &amp;&amp; candidates[i-1]&#x3D;&#x3D;candidates[i] &amp;&amp; used[i-1]&#x3D;&#x3D;0时，直接跳过不处理</p></li><li><p>i！&#x3D;0 第一个元素不进行判断</p></li><li><p>candidates[i-1]&#x3D;&#x3D;candidates[i]  说明当前元素和前一个元素值相同，要准备进行去重(如果是层次上的相同则去除，如果是深度上的相同则保留)</p></li><li><p>used[i-1]&#x3D;&#x3D;0，说明前一个元素没有用过，如果 candidates[i-1]&#x3D;&#x3D;candidates[i] &amp;&amp;used[i-1]&#x3D;&#x3D;0 说明当前的组合是前一个位置元素的<strong>子组合</strong></p></li></ul></li><li><p>添加路径到path中，将used[i]置为1</p></li><li><p>递归搜索i+1的位置</p></li><li><p>回溯，回溯path也回溯used[i]，将used[i]置为0，表示这个位置元素没有用过</p></li></ul></li></ul><p><strong>代码</strong>(利用used数组)</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    <span class="type">int</span>[] used;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        used=<span class="keyword">new</span> <span class="title class_">int</span>[candidates.length];</span><br><span class="line">        backtracking(candidates,target,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] candidates,<span class="type">int</span> target,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;candidates.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span> &amp;&amp; candidates[i-<span class="number">1</span>]==candidates[i] &amp;&amp; used[i-<span class="number">1</span>]==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            used[i]=<span class="number">1</span>;</span><br><span class="line">            backtracking(candidates,target-candidates[i],i+<span class="number">1</span>);</span><br><span class="line">            used[i]=<span class="number">0</span>;</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>代码(不用used数组去重)</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//给数组排序</span></span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        backtracking(candidates,target,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] candidates,<span class="type">int</span> target,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target&lt;<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;candidates.length;)&#123;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            backtracking(candidates,target-candidates[i],i+<span class="number">1</span>);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//回溯之后指针移到下一个元素位置，如果下一个元素和当前元素相同，说明下一个组合中以下一个元素开始的组合已经重复了</span></span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">while</span>(i!=<span class="number">0</span>&amp;&amp;i&lt;candidates.length)&#123;</span><br><span class="line">                <span class="keyword">if</span>(candidates[i-<span class="number">1</span>]==candidates[i]) i++;</span><br><span class="line">                <span class="keyword">else</span> &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="图解-3"   >          <a href="#图解-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解-3" class="headerlink" title="图解"></a>图解</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B7.%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%5D/image-20230913122948179.png"  alt="组合总和II">      </p>        <h1 id="分割"   >          <a href="#分割" class="heading-link"><i class="fas fa-link"></i></a><a href="#分割" class="headerlink" title="分割"></a>分割</h1>              <h2 id="131-分割回文串"   >          <a href="#131-分割回文串" class="heading-link"><i class="fas fa-link"></i></a><a href="#131-分割回文串" class="headerlink" title="131.分割回文串"></a>131.分割回文串</h2>      <p>给你一个字符串 <code>s</code>，请你将 <code>s</code> 分割成一些子串，使每个子串都是 <strong>回文串</strong> 。返回 <code>s</code> 所有可能的分割方案。</p><p><strong>回文串</strong> 是正着读和反着读都一样的字符串。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/palindrome-partitioning/" >Leetcode.131题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-5"   >          <a href="#第一次做-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-5" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;10</p>        <h4 id="第一次代码-5"   >          <a href="#第一次代码-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-5" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">solution</span>&#123;</span><br><span class="line">List&lt;List&lt;String&gt;&gt; result;</span><br><span class="line">    List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">partition</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtracking(s,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(String s,<span class="type">int</span> start,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index==s.length())&#123;</span><br><span class="line">            <span class="keyword">for</span>(String str:list)&#123;</span><br><span class="line">                StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                sb.append(str);</span><br><span class="line">                sb.reverse();</span><br><span class="line">                <span class="keyword">if</span>(!sb.toString().equals(str))<span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(list));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;s.length();i++)&#123;</span><br><span class="line"></span><br><span class="line">            StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">if</span>(start!=<span class="number">0</span>)&#123; sb.append(s.substring(<span class="number">0</span>,start));&#125;</span><br><span class="line"></span><br><span class="line">            sb.append(s.substring(i,i+<span class="number">1</span>));</span><br><span class="line">            list.add(sb.toString());</span><br><span class="line">            backtracking(s,i+<span class="number">1</span>,i+<span class="number">1</span>);</span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-9"   >          <a href="#提交失败-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-9" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:s&#x3D;”aab” 输出[[“b”]] 预期结果[[“a”,”a”,”b”],[“aa”,”b”]]</p><p>没能做出来卡了一个多小时</p>        <h3 id="题解-6"   >          <a href="#题解-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3>      <p>思路：这道题的解法是，start指向的是切割位置，切割位置前就为一个子串，然后用substring方法切割，范围是[start，I+1）,因为start是不变的所以就能不断切割出子串，然后是子串的添加到list中</p><p><strong>实现</strong></p><ul><li>递归函数的参数和返回值<ul><li>返回值void，所有的结果都在结果集result中</li><li>参数s：用于切割的回文串</li><li>参数start，标记切割位置</li></ul></li><li>递归函数的结束条件<ul><li>当start&#x3D;&#x3D;s.length() 也即切割点到了回文串的最后一个字符，也就没有切割下的子串了，能收获已经正在result中的数据</li></ul></li><li>单层递归的逻辑<ul><li>每层循环从start，开始start传入0，代表的切割位置</li><li>对切割下的子串进行一个判断（isBackString方法）<ul><li>如果是回文串返回true，<strong>则添加到list结果集中</strong></li><li>如果不是回文串则返回false，则continue</li><li>函数的逻辑是利用StringBuilder进行一个字符串反转，如果反转后相同则是回文串</li></ul></li><li>递归，切割i+1的位置</li><li>回溯，将结果集添加的元素回溯出去</li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; result;</span><br><span class="line">    List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">partition</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtracking(s,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(String s,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start==s.length())&#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(list));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isBackString(s,start,i+<span class="number">1</span>))&#123;</span><br><span class="line">                list.add(s.substring(start,i+<span class="number">1</span>));</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            backtracking(s,i+<span class="number">1</span>);</span><br><span class="line">            list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBackString</span><span class="params">(String s,<span class="type">int</span> start,<span class="type">int</span> i)</span></span><br><span class="line">    &#123;</span><br><span class="line">        String str=s.substring(start,i);</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(str);</span><br><span class="line">        sb.reverse();</span><br><span class="line">        <span class="keyword">return</span> str.equals(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="93-复原IP地址"   >          <a href="#93-复原IP地址" class="heading-link"><i class="fas fa-link"></i></a><a href="#93-复原IP地址" class="headerlink" title="93.复原IP地址"></a>93.复原IP地址</h2>      <p><strong>有效 IP 地址</strong> 正好由四个整数（每个整数位于 <code>0</code> 到 <code>255</code> 之间组成，且不能含有前导 <code>0</code>），整数之间用 <code>&#39;.&#39;</code> 分隔。</p><ul><li>例如：<code>&quot;0.1.2.201&quot;</code> 和<code> &quot;192.168.1.1&quot;</code> 是 <strong>有效</strong> IP 地址，但是 <code>&quot;0.011.255.245&quot;</code>、<code>&quot;192.168.1.312&quot;</code> 和 <code>&quot;192.168@1.1&quot;</code> 是 <strong>无效</strong> IP 地址。</li></ul><p>给定一个只包含数字的字符串 <code>s</code> ，用以表示一个 IP 地址，返回所有可能的<strong>有效 IP 地址</strong>，这些地址可以通过在 <code>s</code> 中插入 <code>&#39;.&#39;</code> 来形成。你 <strong>不能</strong> 重新排序或删除 <code>s</code> 中的任何数字。你可以按 <strong>任何</strong> 顺序返回答案。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/restore-ip-addresses/" >Leetcode.93题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-6"   >          <a href="#第一次做-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-6" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;14</p>        <h4 id="第一次代码-6"   >          <a href="#第一次代码-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-6" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;String&gt; result;</span><br><span class="line">    List&lt;String&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">restoreIpAddresses</span><span class="params">(String s)</span> &#123; </span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(s.length()&lt;<span class="number">4</span>) <span class="keyword">return</span> result;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;9&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtracking(s,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(String s,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index==s.length())&#123;</span><br><span class="line">            <span class="keyword">for</span>(String str:path)&#123;</span><br><span class="line">                <span class="keyword">if</span>(str.length()!=<span class="number">1</span>&amp;&amp;str.charAt(<span class="number">0</span>)==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(Integer.parseInt(str)&gt;<span class="number">255</span>) <span class="keyword">return</span> ;</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;path.size();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==path.size()-<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    sb.append(path.get(i));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(path.get(i)+<span class="string">&quot;.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sb.length()!=<span class="number">0</span>) result.add(sb.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;s.length();i++)&#123;</span><br><span class="line">            path.add(s.substring(index,i+<span class="number">1</span>));</span><br><span class="line">            backtracking(s,i+<span class="number">1</span>);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-10"   >          <a href="#提交失败-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-10" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:java.lang.NumberFormatException: For input string: “5525511135”</p>        <h4 id="第二次代码-5"   >          <a href="#第二次代码-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-5" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;String&gt; result;</span><br><span class="line">    List&lt;String&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">restoreIpAddresses</span><span class="params">(String s)</span> &#123; </span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(s.length()&lt;<span class="number">4</span>) <span class="keyword">return</span> result;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;9&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        backtracking(s,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(String s,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index==s.length())&#123;</span><br><span class="line">            StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;path.size();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==path.size()-<span class="number">1</span>)&#123;</span><br><span class="line">                    sb.append(path.get(i));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                sb.append(path.get(i)+<span class="string">&quot;.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(sb.toString());</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;s.length();i++)&#123;</span><br><span class="line">            path.add(s.substring(index,i+<span class="number">1</span>));</span><br><span class="line">            backtracking(s,i+<span class="number">1</span>);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-11"   >          <a href="#提交失败-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-11" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>没能做出来</p>        <h3 id="题解-7"   >          <a href="#题解-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-7" class="headerlink" title="题解"></a>题解</h3>      <p>思路：用一个sum来统计多少个逗号’.’，index代表分割线，然后分割出来的子串要符合条件的时候才会递归去搜索，然后最后用StringBuilder拼接结果集</p><p><strong>实现</strong></p><ul><li><p>定义全局变量</p><ul><li><p>result：用于收获结果集</p></li><li><p>path:用于统计切割的字符串路径</p></li></ul></li><li><p>初始化，并且对s做一个初步的验证保证s只能有数字</p></li><li><p>递归函数的参数和返回值</p><ul><li>返回值void：所有的结果都收获在结果集中</li><li>参数index：表示切割的字符位置</li><li>参数sum：表示已经切割过后有几个逗号</li></ul></li><li><p>递归函数的结束条件</p><ul><li><p>当sum&#x3D;&#x3D;3说明已经切割了三次：则path中有三个字符串，而从index到s.length()-1为最后一个字符串</p><p>判断最后一个字符串是否符合要求，如果符合要求则需要收获结果集</p></li></ul></li><li><p>单层递归逻辑</p><ul><li><p>判断从index到i切割的字符串是否符合要求</p><ul><li><p>如果不符合要求则不需要继续回溯，继续遍历切割</p></li><li><p>如果符合要求则需要将切割子串添加到path数组中，并将sum+1，表示该位置已经切割出字符串了，然后递归去切割子串</p><p>递归结束之后回溯</p></li></ul></li></ul></li><li><p>验证要求合法性函数(isvalid)</p><ul><li>区间是左闭右闭，切割str&#x3D;s.substring(begin,end+1)</li><li>验证子串str是否为空或者为空串，如果是则不合法返回false</li><li>验证子串str是否长度超过4，如果是则不合法返回false</li><li>验证子串str是否长度不为1并且头字符是0，如果是则不合法，返回false</li><li>验证子串str转换成Integer类型之后数值是否大于255，如果是则不合法，返回false</li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;String&gt; result;</span><br><span class="line">    List&lt;String&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">restoreIpAddresses</span><span class="params">(String s)</span> &#123; </span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(s.length()&lt;<span class="number">4</span>) <span class="keyword">return</span> result;</span><br><span class="line">        <span class="comment">//验证对IP地址是否有其他字符</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; c&lt;=<span class="string">&#x27;9&#x27;</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        backtracking(s,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(String s,<span class="type">int</span> index,<span class="type">int</span> sum)</span>&#123;</span><br><span class="line">        <span class="comment">//当sum==3说明切割了三次</span></span><br><span class="line">       <span class="keyword">if</span>(sum==<span class="number">3</span>)&#123;</span><br><span class="line">           <span class="comment">//验证第三个逗号之后的字符串是否合法，如果合法则收集结果集</span></span><br><span class="line">           <span class="keyword">if</span>(isvalid(s,index,s.length()-<span class="number">1</span>))&#123;</span><br><span class="line">               StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">               <span class="keyword">for</span>(String str:path)&#123;</span><br><span class="line">                   sb.append(str+<span class="string">&quot;.&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               sb.append(s.substring(index,s.length()));</span><br><span class="line">               result.add(sb.toString());</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;s.length();i++)&#123;</span><br><span class="line">          <span class="comment">//判断切割出来的第一个子串是否符合条件，如果是则才能继续递归</span></span><br><span class="line">          <span class="keyword">if</span>(isvalid(s,index,i))&#123;</span><br><span class="line">              path.add(s.substring(index,i+<span class="number">1</span>));</span><br><span class="line">              <span class="comment">//向i之后搜索，将逗号总数+1,递归之后会回溯</span></span><br><span class="line">              backtracking(s,i+<span class="number">1</span>,sum+<span class="number">1</span>);</span><br><span class="line">              path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//验证子串的合法性，方法是左闭右闭的子串区间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isvalid</span><span class="params">(String s,<span class="type">int</span> begin,<span class="type">int</span> end)</span>&#123;</span><br><span class="line"></span><br><span class="line">        String str=s.substring(begin,end+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(str==<span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(str)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(str.length()!=<span class="number">1</span> &amp;&amp; str.charAt(<span class="number">0</span>)==<span class="string">&#x27;0&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(str.length()&gt;=<span class="number">4</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(Integer.parseInt(str)&gt;<span class="number">255</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="子集"   >          <a href="#子集" class="heading-link"><i class="fas fa-link"></i></a><a href="#子集" class="headerlink" title="子集"></a>子集</h1>              <h2 id="78-子集"   >          <a href="#78-子集" class="heading-link"><i class="fas fa-link"></i></a><a href="#78-子集" class="headerlink" title="78.子集"></a>78.子集</h2>      <p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p><p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p><p> <span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/subsets/" >Leetcode.78题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-7"   >          <a href="#第一次做-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-7" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;15</p>        <h4 id="第一次代码-7"   >          <a href="#第一次代码-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-7" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtracking(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;nums.length;i++)&#123;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            backtracking(nums,i);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-12"   >          <a href="#提交失败-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-12" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:超过内存限制</p><p>原因是每次递归之后i还是0，导致死循环</p>        <h4 id="第二次代码-6"   >          <a href="#第二次代码-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-6" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtracking(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;nums.length;i++)&#123;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            backtracking(nums,i+<span class="number">1</span>);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-2"   >          <a href="#提交成功-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-2" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-8"   >          <a href="#题解-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-8" class="headerlink" title="题解"></a>题解</h3>      <p>思想：我们这道题收获结果集和之前的问题不一样，之前的收获结果集都是在<strong>叶子结点</strong>收获，而这道题的结果在每个结点中，也即结果集在<strong>每个结点</strong>收获，具体可以看图解</p><p><strong>实现</strong></p><ul><li>定义全局变量<ul><li>result：用于收获结果集</li><li>path：用于存放单条路径</li></ul></li><li>递归函数的参数和返回值<ul><li>返回值void：所有结果都收获到结果集中</li><li>参数nums：要获取子集的数组</li><li>参数index：当前循环开始的搜索位置索引</li></ul></li><li>递归函数的结束条件<ul><li>当index&gt;&#x3D;nums.length，也即收获到最后的元素就结束条件</li></ul></li><li>递归函数的单层逻辑<ul><li>收获结果(每个结点都是结果)</li><li>递归搜索剩下子集</li><li>回溯</li></ul></li></ul><p><em>这里可以没有递归结束条件，当搜索到最后的时候index&#x3D;nums.length就会结束递归</em></p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtracking(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="comment">//收获结果集</span></span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;nums.length;i++)&#123;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            backtracking(nums,i+<span class="number">1</span>);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="图解-4"   >          <a href="#图解-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解-4" class="headerlink" title="图解"></a>图解</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B7.%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%5D/image-20230915105009585.png"  alt="子集树形结构">      </p>        <h2 id="90-子集II"   >          <a href="#90-子集II" class="heading-link"><i class="fas fa-link"></i></a><a href="#90-子集II" class="headerlink" title="90.子集II"></a>90.子集II</h2>      <p>给你一个整数数组 <code>nums</code> ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。</p><p>解集 <strong>不能</strong> 包含重复的子集。返回的解集中，子集可以按 <strong>任意顺序</strong> 排列。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/subsets-ii/" >Leetcode.90题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-8"   >          <a href="#第一次做-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-8" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;16</p>        <h4 id="第一次代码-8"   >          <a href="#第一次代码-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-8" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsetsWithDup</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtracking(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;start &amp;&amp; nums[i]==nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            backtracking(nums,i+<span class="number">1</span>);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-13"   >          <a href="#提交失败-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-13" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:nums &#x3D;[4,4,4,1,4]，输出[[],[4],[4,4],[4,4,4],[4,4,4,1],[4,4,4,1,4],[4,4,4,4],[4,4,1],[4,4,1,4],[4,4,4],[4,1],[4,1,4],[4,4],[1],[1,4],[4]]，预期输出：[[],[1],[1,4],[1,4,4],[1,4,4,4],[1,4,4,4,4],[4],[4,4],[4,4,4],[4,4,4,4]]</p><p>原因忘记排序，要对数组进行排序，将相同值放在一起，这样才好判断子集是否使用过这个元素</p>        <h4 id="第二次代码-7"   >          <a href="#第二次代码-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-7" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsetsWithDup</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        backtracking(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;start &amp;&amp; nums[i]==nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            backtracking(nums,i+<span class="number">1</span>);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-3"   >          <a href="#提交成功-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-3" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-9"   >          <a href="#题解-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-9" class="headerlink" title="题解"></a>题解</h3>      <p>这道题就是78.子集问题以及40.组合总和II的一个结合，对每一个结点的结果都进行收获，对重复组合的一个去重操作</p><p><strong>实现</strong></p><ul><li>定义全局变量<ul><li>result: 收获结果集的集合</li><li>path：单条结果的路径</li></ul></li><li>递归函数的参数和返回值<ul><li>返回值void：所有结果递归时都收获在结果集中，所以没有返回值</li><li>参数nums:用于求得子集的数组</li><li>参数start：表示当前操作的索引下标</li></ul></li><li>递归函数的结束条件<ul><li>当start&gt;&#x3D;nums.length;也即遍历到最后一个元素那么就该结束递归</li></ul></li><li>单层递归的逻辑<ul><li>收获结果，每一个结点都是一个结果</li><li>递归去获取子集<ul><li>树层方面的去重：当i&gt;start说明已经经过递归回溯之后，并且nums[i]&#x3D;&#x3D;nums[i-1]，也即这是层次方面的重复，所以直接跳过这个层结点</li></ul></li><li>回溯</li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsetsWithDup</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"> <span class="comment">//对数组进行排序</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        backtracking(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="comment">//收获结果</span></span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="comment">//如果当前元素和前一个元素相同并且是层次方面的重合，那么就要跳过</span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;start &amp;&amp; nums[i]==nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            backtracking(nums,i+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//回溯</span></span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="排序"   >          <a href="#排序" class="heading-link"><i class="fas fa-link"></i></a><a href="#排序" class="headerlink" title="排序"></a>排序</h1>              <h2 id="46-全排列"   >          <a href="#46-全排列" class="heading-link"><i class="fas fa-link"></i></a><a href="#46-全排列" class="headerlink" title="46.全排列"></a>46.全排列</h2>      <p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <em>所有可能的全排列</em> 。你可以 <strong>按任意顺序</strong> 返回答案。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/permutations/" >Leetcode.46题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-9"   >          <a href="#第一次做-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-9" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;19</p>        <h4 id="第一次代码-9"   >          <a href="#第一次代码-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-9" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    HashSet&lt;Integer&gt; set;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        backtracking(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.size()==nums.length)&#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;nums.length;i++)&#123;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            set.add(nums[i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(set.contains(nums[j])) <span class="keyword">continue</span>;</span><br><span class="line">                backtracking(nums,j);</span><br><span class="line">                path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">                set.remove(set.size()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-14"   >          <a href="#提交失败-14" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-14" class="headerlink" title="提交失败"></a>提交失败</h5>              <h3 id="题解-10"   >          <a href="#题解-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-10" class="headerlink" title="题解"></a>题解</h3>      <p>思路：这道题和组合问题以及子集问题有所不同，因为排序问题主要讲究的是<strong>顺序</strong>，而不是元素。</p><blockquote><p> 当(1,2)两个元素只有(1,2)这个组合但是排序有(1,2),(2,1)这两个结果</p></blockquote><p>所以排序问题我们对数据的重复操作并不能通过startindex控制，我们可以引入一个set集合</p><p><strong>实现</strong></p><ul><li><p>定义全局变量</p><ul><li>result：收获结果集合</li><li>path：单个结果的路径集合</li><li>set：用于防止重复数据的set集合</li></ul></li><li><p>递归函数的参数和返回值</p><ul><li>返回值void：所有结果都在结果集中，所以没有返回值</li><li>参数nums，用于获取全排列的数组</li></ul></li><li><p>递归函数的结束条件</p><p>当path.size()&#x3D;&#x3D;nums.length，也即叶子结点收获结果</p></li><li><p>单层递归的实现逻辑</p><ul><li>每次递归的循环开始都是从0开始，因为要遍历整个数组</li><li>当set包含当前元素则跳过</li><li>set不包含当前元素则添加到path以及set中，递归</li><li>回溯，回溯path集合也set集合</li></ul><p>循环代码</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="comment">//如果包含则跳过</span></span><br><span class="line">            <span class="keyword">if</span>(set.contains(nums[i])) <span class="keyword">continue</span>;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            set.add(nums[i]);</span><br><span class="line">            backtracking(nums);</span><br><span class="line">            <span class="comment">//回溯</span></span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">            set.remove(nums[i]);            </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关键在于每次从0开始，以便对整个数组的全排列</span></span><br><span class="line"><span class="comment">//每次递归先判断当前元素是否被使用过，如果是则跳过</span></span><br></pre></td></tr></table></div></figure></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    HashSet&lt;Integer&gt; set;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        backtracking(nums);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.size()==nums.length)&#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="comment">//如果包含则跳过</span></span><br><span class="line">            <span class="keyword">if</span>(set.contains(nums[i])) <span class="keyword">continue</span>;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            set.add(nums[i]);</span><br><span class="line">            backtracking(nums);</span><br><span class="line">            <span class="comment">//回溯</span></span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">            set.remove(nums[i]);            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="47-全排列II"   >          <a href="#47-全排列II" class="heading-link"><i class="fas fa-link"></i></a><a href="#47-全排列II" class="headerlink" title="47.全排列II"></a>47.全排列II</h2>              <h3 id="第一次做-10"   >          <a href="#第一次做-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-10" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;20</p>        <h4 id="第一次代码-10"   >          <a href="#第一次代码-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-10" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    HashSet&lt;Integer&gt; hashSet;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permuteUnique</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        hashSet=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        backtracking(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.size()==nums.length)&#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(start&gt;=nums.length) <span class="keyword">return</span>;</span><br><span class="line">        HashSet set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;start &amp;&amp; hashSet.contains(nums[i])) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(path.size()!=<span class="number">0</span> &amp;&amp; nums[i]&lt;path.get(path.size()-<span class="number">1</span>) || set.contains(nums[i]))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            set.add(nums[i]);</span><br><span class="line">            hashSet.add(nums[i]);</span><br><span class="line">            backtracking(nums,i+<span class="number">1</span>);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">            hashSet.remove(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-15"   >          <a href="#提交失败-15" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-15" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:nums[1,1,2],输出[1,1,2]，预期输出[[1,1,2],[1,2,1],[2,1,1]]</p>        <h4 id="第二次代码-8"   >          <a href="#第二次代码-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-8" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    HashSet&lt;Integer&gt; hashSet;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permuteUnique</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        hashSet=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        backtracking(nums);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.size()==nums.length)&#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HashSet&lt;Integer&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set.contains(nums[i])) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(hashSet.contains(i)) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            set.add(nums[i]);</span><br><span class="line">            hashSet.add(i);</span><br><span class="line">            backtracking(nums);</span><br><span class="line">            hashSet.remove(i);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-4"   >          <a href="#提交成功-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-4" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>hashset来判断是否索引下标被用过(类似于Used数组)，set用来判断当前元素是否层次上的重复</p>        <h3 id="题解-11"   >          <a href="#题解-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-11" class="headerlink" title="题解"></a>题解</h3>      <p>这道题和46.全排列相似，不同点在于数组中是有重复的元素的，所以我们要对数组的相同元素进行一个去重的一个操作，将收获结果中没有层次上的重复</p><p>思路：我们用两个set来对数据的一个去重，第一个去重层次方面上的去重，当数组不能相同元素获取，第二个是深度上面的去重</p><p><strong>实现</strong>：</p><ul><li>定义全局变量<ul><li>result：用于收获结果集</li><li>path：用于单层路径上的获取</li><li>hashset：用于深度上的去重，用索引i作为深度上的重复判断</li></ul></li><li>将nums进行排序，相同值的元素可以排在一起，主要用于对层次方面的处理</li><li>递归函数的参数和返回值<ul><li>返回值void：所有的结果都在result结果集中，所以没有额外的返回值</li><li>参数nums：用于需要获取全排列的参数</li></ul></li><li>递归函数的结束条件<ul><li>当path.size()&#x3D;&#x3D;nums.length，也就是获取了一个全排列则需要添加结果到结果集中，然后结束</li></ul></li><li>递归函数的单层逻辑<ul><li>定义一个变量Hashset<Integer> set：用于层次方面上的去重</li><li>循环，获取全排列<ul><li>每次排列从0开始</li><li>判断set中是否有nums[i]，如果包含说明这是经过回溯之后的，然后出现了相同大小元素(层次相同)</li><li>判断hashset中是否包含i，如果包含说明在前面已经用过i索引下标的元素，所以不能重复获取，于是要continue</li><li>path添加nums[i],set添加num[i],hashset添加i</li><li>递归</li><li>回溯，回溯hashset和path</li></ul></li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">   <span class="comment">//用于深度上面的去重</span></span><br><span class="line">    HashSet&lt;Integer&gt; hashSet;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permuteUnique</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        hashSet=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        backtracking(nums);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.size()==nums.length)&#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//set数组是用于层次上的去重</span></span><br><span class="line">        HashSet&lt;Integer&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set.contains(nums[i])) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(hashSet.contains(i)) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            set.add(nums[i]);</span><br><span class="line">            hashSet.add(i);</span><br><span class="line">            backtracking(nums);</span><br><span class="line">            <span class="comment">//hashset回溯</span></span><br><span class="line">            hashSet.remove(i);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="棋盘问题"   >          <a href="#棋盘问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#棋盘问题" class="headerlink" title="棋盘问题"></a>棋盘问题</h1>              <h1 id="其他"   >          <a href="#其他" class="heading-link"><i class="fas fa-link"></i></a><a href="#其他" class="headerlink" title="其他"></a>其他</h1>              <h2 id="491-递增子序列"   >          <a href="#491-递增子序列" class="heading-link"><i class="fas fa-link"></i></a><a href="#491-递增子序列" class="headerlink" title="491.递增子序列"></a>491.递增子序列</h2>      <p>给你一个整数数组 <code>nums</code> ，找出并返回所有该数组中不同的递增子序列，递增子序列中 <strong>至少有两个元素</strong> 。你可以按 <strong>任意顺序</strong> 返回答案。</p><p>数组中可能含有重复元素，如出现两个整数相等，也可以视作递增序列的一种特殊情况。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/non-decreasing-subsequences/" >Leetcode.491(题)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-11"   >          <a href="#第一次做-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-11" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;18</p>        <h4 id="第一次代码-11"   >          <a href="#第一次代码-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-11" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> MIN;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">findSubsequences</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        MIN=Integer.MAX_VALUE+<span class="number">1</span>;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtracking(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.size()&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(start&gt;=nums.length) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==start &amp;&amp; nums[i]&gt;=MIN)&#123;</span><br><span class="line">                MIN=nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&lt;MIN)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                path.add(nums[i]);</span><br><span class="line">                backtracking(nums,i+<span class="number">1</span>);</span><br><span class="line">                path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-16"   >          <a href="#提交失败-16" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-16" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE: nums&#x3D;[4,6,7,7] 输出[[4,6],[4,6,7],[4,6,7,7],[4,6,7],[4,7],[4,7,7],[4,7],[7,7]]，预期输出[[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]</p>        <h4 id="第二次代码-9"   >          <a href="#第二次代码-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-9" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] used;</span><br><span class="line">    <span class="type">int</span> MIN;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">findSubsequences</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        MIN=Integer.MAX_VALUE+<span class="number">1</span>;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        used=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">201</span>];</span><br><span class="line">        backtracking(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.size()&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(start&gt;=nums.length) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==start &amp;&amp; nums[i]&gt;=MIN)&#123;</span><br><span class="line">                MIN=nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&lt;MIN)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;start&amp;&amp;used[<span class="number">100</span>+nums[i]]==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">                path.add(nums[i]);</span><br><span class="line">                used[<span class="number">100</span>+nums[i]]=<span class="number">1</span>;</span><br><span class="line">                backtracking(nums,i+<span class="number">1</span>);</span><br><span class="line">                path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">                MIN=nums[i];</span><br><span class="line">                used[<span class="number">100</span>+nums[i]]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-17"   >          <a href="#提交失败-17" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-17" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE: nums&#x3D;[4,6,7,7] 输出[[4,6],[4,6,7],[4,6,7,7] 预期输出[[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]</p>        <h4 id="第三次代码-1"   >          <a href="#第三次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-1" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    HashMap&lt;Integer,Integer&gt; used;</span><br><span class="line">    <span class="type">int</span> min=Integer.MAX_VALUE+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">findSubsequences</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        used=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        backtracking(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.size()&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;=min)&#123;</span><br><span class="line">                min=nums[i];</span><br><span class="line">                <span class="keyword">if</span>(i&gt;start &amp;&amp; used.containsKey(nums[i]) &amp;&amp;used.get(nums[i])==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                path.add(nums[i]);</span><br><span class="line">                used.put(nums[i],used.getOrDefault(nums[i],<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">                backtracking(nums,i+<span class="number">1</span>);</span><br><span class="line">                path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">                used.put(nums[i],used.getOrDefault(nums[i],<span class="number">0</span>)-<span class="number">1</span>);</span><br><span class="line">                min=nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-18"   >          <a href="#提交失败-18" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-18" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE: nums&#x3D;[4,6,7,7] 输出[[4,6],[4,6,7],[4,6,7,7] 预期输出[[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]</p><p>这道题在去重没能写出来</p>        <h3 id="题解-12"   >          <a href="#题解-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-12" class="headerlink" title="题解"></a>题解</h3>      <p>思想，这道题和组合总和II和子集II有相似之处又有不同之处</p><ul><li>相似：这道题同组合总和II一样，需要对数据去重，也是层次上的去重而非深度上的去重，同子集II一样对收获结果是在满足条件的结点，而不是全在叶子结点上收获，同时函数的结束条件也在循环判断中的结束条件一般</li><li>不同：这道题不能对数组进行排列，不然会对受过结果集造成影响</li></ul><p><strong>实现</strong></p><ul><li><p>定义全局变量</p><ul><li>result:用于收获结果集集合</li><li>path：用于记录单个结果路径</li></ul></li><li><p>递归函数的返回值和参数</p><ul><li>返回值void：所有的结果都保存在result集合中，所以不需要返回值</li><li>参数nums：用于求得子序列的数组</li><li>参数start，表示此时操作的位置索引下标</li></ul></li><li><p>递归函数的结束条件</p><p>当start&gt;&#x3D;nums.length,也即操作到数组的最后位置(最后一个元素之后)，也即完成了本次深度上的搜索</p><p><del>(可以不用写结束条件，因为单层递归的时候的for循环结束条件也就是递归函数的结束条件)</del></p></li><li><p>函数的单层逻辑</p><ul><li><p>声明一个set集合，用于表示已经遍历过的元素，对相同数据的<strong>去重</strong>需要</p></li><li><p>对数据进行判断是否能添加到path路径中</p><ul><li><p>当path.size()!&#x3D;0 &amp;&amp; nums[i]小于path集合中最后一个元素(path集合是一个非递减集合)</p><p>也即当现在元素小于路径中最后一个元素则continue跳过</p></li><li><p>当set.contains(nums[i])&#x3D;&#x3D;true，也即这个元素已经收获过(层次上的重复)，则continue跳过</p><blockquote><p>因为Set是每层中定义的一个去重集合，深度搜索的时候不会对重复元素判断，而只有层次相同的情况下并且已经收获到结果集中的元素才需要跳过</p></blockquote></li></ul></li><li><p>添加到path路径和set去重集合中</p></li><li><p>递归遍历搜索下一个路径</p></li><li><p>回溯(只需要回溯path集合不用回溯set去重集合【set集合是每层new出来的，不需要对其去重】)</p></li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result;</span><br><span class="line">    List&lt;Integer&gt; path;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">findSubsequences</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtracking(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.size()&gt;=<span class="number">2</span>) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path));</span><br><span class="line">        &#125;</span><br><span class="line">        HashSet&lt;Integer&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(path.size()!=<span class="number">0</span>&amp;&amp; nums[i]&lt;path.get(path.size()-<span class="number">1</span>) || set.contains(nums[i])) <span class="keyword">continue</span>;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            set.add(nums[i]);</span><br><span class="line">            backtracking(nums,i+<span class="number">1</span>);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="图解-5"   >          <a href="#图解-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解-5" class="headerlink" title="图解"></a>图解</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B7.%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%5D/image-20230918174610627.png"  alt="递增子序列">      </p>        <h2 id="332-重新安排行程"   >          <a href="#332-重新安排行程" class="heading-link"><i class="fas fa-link"></i></a><a href="#332-重新安排行程" class="headerlink" title="332.重新安排行程"></a>332.重新安排行程</h2>      <p>给你一份航线列表 <code>tickets</code> ，其中 <code>tickets[i] = [fromi, toi]</code> 表示飞机出发和降落的机场地点。请你对该行程进行重新规划排序。</p><p>所有这些机票都属于一个从 <code>JFK</code>（肯尼迪国际机场）出发的先生，所以该行程必须从 <code>JFK</code> 开始。如果存在多种有效的行程，请你按字典排序返回最小的行程组合。</p><ul><li>例如，行程 <code>[&quot;JFK&quot;, &quot;LGA&quot;]</code> 与 <code>[&quot;JFK&quot;, &quot;LGB&quot;]</code> 相比就更小，排序更靠前。</li></ul><p>假定所有机票至少存在一种合理的行程。且所有的机票 必须都用一次 且 只能用一次。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/reconstruct-itinerary/" >Leetcode.332题(hard)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-12"   >          <a href="#第一次做-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-12" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;22</p>        <h4 id="第一次代码-12"   >          <a href="#第一次代码-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-12" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;String&gt; result;</span><br><span class="line">    List&lt;String&gt; path;</span><br><span class="line">    HashSet&lt;List&lt;String&gt;&gt; used;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findItinerary</span><span class="params">(List&lt;List&lt;String&gt;&gt; tickets)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        used=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtracking(tickets);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(List&lt;List&lt;String&gt;&gt; tickets)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(used.size()==tickets.size())&#123;</span><br><span class="line">            result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;tickets.size();i++)&#123;</span><br><span class="line">            List&lt;String&gt; ticket=tickets.get(i);</span><br><span class="line">            <span class="keyword">if</span>(used.contains(ticket)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(path.size()==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!ticket.get(<span class="number">0</span>).equals(<span class="string">&quot;JFK&quot;</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                path.add(ticket.get(<span class="number">0</span>));</span><br><span class="line">                path.add(ticket.get(<span class="number">1</span>));</span><br><span class="line">                used.add(ticket);</span><br><span class="line">                backtracking(tickets);</span><br><span class="line">                path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">                path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">                used.remove(ticket);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!ticket.get(<span class="number">0</span>).equals(path.get(path.size()-<span class="number">1</span>)))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">                path.add(ticket.get(<span class="number">1</span>));</span><br><span class="line">                used.add(ticket);</span><br><span class="line">                backtracking(tickets);</span><br><span class="line">                path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">                used.remove(ticket);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-1"   >          <a href="#提交错误-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-1" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:tickets &#x3D;[[“JFK”,”SFO”],[“JFK”,”ATL”],[“SFO”,”ATL”],[“ATL”,”JFK”],[“ATL”,”SFO”]]，输出[“JFK”,”ATL”,”SFO”,”ATL”,”JFK”,”SFO”]，预期输出[“JFK”,”ATL”,”JFK”,”SFO”,”ATL”,”SFO”]</p><p>这并不是字典拍戏的最短行程</p>        <h4 id="第二次代码-10"   >          <a href="#第二次代码-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-10" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;String&gt; result;</span><br><span class="line">    List&lt;String&gt; path;</span><br><span class="line">    HashSet&lt;List&lt;String&gt;&gt; used;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findItinerary</span><span class="params">(List&lt;List&lt;String&gt;&gt; tickets)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        used=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtracking(tickets);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(List&lt;List&lt;String&gt;&gt; tickets)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(used.size()==tickets.size())&#123;</span><br><span class="line">            <span class="keyword">if</span>(result.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (used.size() == tickets.size()) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;path.size();i++)&#123;</span><br><span class="line">                String oldStr=result.get(i);</span><br><span class="line">                String newStr=path.get(i);</span><br><span class="line">                <span class="keyword">if</span>(oldStr.equals(newStr)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(oldStr.length()-newStr.length()&lt;<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(oldStr.length()-newStr.length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(path);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="type">char</span> oldChar=oldStr.charAt(j);</span><br><span class="line">                        <span class="type">char</span> newChar=newStr.charAt(j);</span><br><span class="line">                        <span class="keyword">if</span>(oldChar-newChar&lt;<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(oldChar-newChar&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                            result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path);</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            j++;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;tickets.size();i++)&#123;</span><br><span class="line">            List&lt;String&gt; ticket=tickets.get(i);</span><br><span class="line">            <span class="keyword">if</span>(used.contains(ticket)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(path.size()==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!ticket.get(<span class="number">0</span>).equals(<span class="string">&quot;JFK&quot;</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                path.add(ticket.get(<span class="number">0</span>));</span><br><span class="line">                path.add(ticket.get(<span class="number">1</span>));</span><br><span class="line">                used.add(ticket);</span><br><span class="line">                backtracking(tickets);</span><br><span class="line">                path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">                path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">                used.remove(ticket);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!ticket.get(<span class="number">0</span>).equals(path.get(path.size()-<span class="number">1</span>)))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">                path.add(ticket.get(<span class="number">1</span>));</span><br><span class="line">                used.add(ticket);</span><br><span class="line">                backtracking(tickets);</span><br><span class="line">                path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">                used.remove(ticket);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-19"   >          <a href="#提交失败-19" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-19" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:tickets&#x3D;[[“EZE”,”AXA”],[“TIA”,”ANU”],[“ANU”,”JFK”],[“JFK”,”ANU”],[“ANU”,”EZE”],[“TIA”,”ANU”],[“AXA”,”TIA”],[“TIA”,”JFK”],[“ANU”,”TIA”],[“JFK”,”TIA”]]，输出[]，预期输出[“JFK”,”ANU”,”EZE”,”AXA”,”TIA”,”ANU”,”JFK”,”TIA”,”ANU”,”TIA”,”JFK”]</p>        <h4 id="第三次代码-2"   >          <a href="#第三次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-2" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;String&gt; result;</span><br><span class="line">    List&lt;String&gt; path;</span><br><span class="line">    HashSet&lt;Integer&gt; hashTable;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findItinerary</span><span class="params">(List&lt;List&lt;String&gt;&gt; tickets)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        hashTable=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        backtracking(tickets);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(List&lt;List&lt;String&gt;&gt; tickets)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.size()==tickets.size()+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(result.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;path.size();i++)&#123;</span><br><span class="line">                String oldStr=result.get(i);</span><br><span class="line">                String newStr=path.get(i);</span><br><span class="line">                <span class="keyword">if</span>(oldStr.equals(newStr)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(oldStr.length()-newStr.length()&lt;<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(oldStr.length()-newStr.length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(path);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="type">char</span> oldChar=oldStr.charAt(j);</span><br><span class="line">                        <span class="type">char</span> newChar=newStr.charAt(j);</span><br><span class="line">                        <span class="keyword">if</span>(oldChar-newChar&lt;<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(oldChar-newChar&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                            result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path);</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            j++;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        HashSet&lt;List&lt;String&gt;&gt; used= <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;tickets.size();i++)&#123;</span><br><span class="line">            List&lt;String&gt; ticket=tickets.get(i);</span><br><span class="line">            <span class="keyword">if</span>(hashTable.contains(i)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(used.contains(ticket)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(path.size()==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!ticket.get(<span class="number">0</span>).equals(<span class="string">&quot;JFK&quot;</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                path.add(ticket.get(<span class="number">0</span>));</span><br><span class="line">                path.add(ticket.get(<span class="number">1</span>));</span><br><span class="line">                used.add(ticket);</span><br><span class="line">                hashTable.add(i);</span><br><span class="line">                backtracking(tickets);</span><br><span class="line">                path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">                path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">                hashTable.remove(i);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!ticket.get(<span class="number">0</span>).equals(path.get(path.size()-<span class="number">1</span>)))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">                path.add(ticket.get(<span class="number">1</span>));</span><br><span class="line">                used.add(ticket);</span><br><span class="line">                hashTable.add(i);</span><br><span class="line">                backtracking(tickets);</span><br><span class="line">                path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">                hashTable.remove(i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-20"   >          <a href="#提交失败-20" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-20" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>超出时间限制</p><p>要对数据进行剪枝</p>        <h4 id="第四次代码-1"   >          <a href="#第四次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四次代码-1" class="headerlink" title="第四次代码"></a>第四次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;String&gt; result;</span><br><span class="line">    List&lt;String&gt; path;</span><br><span class="line">    HashSet&lt;Integer&gt; hashTable;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findItinerary</span><span class="params">(List&lt;List&lt;String&gt;&gt; tickets)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        hashTable=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Collections.sort(tickets,(a,b)-&gt;a.get(<span class="number">1</span>).compareTo(b.get(<span class="number">1</span>)));</span><br><span class="line">        backtracking(tickets);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">backtracking</span><span class="params">(List&lt;List&lt;String&gt;&gt; tickets)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.size()==tickets.size()+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(result.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>(path);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;path.size();i++)&#123;</span><br><span class="line">                String oldStr=result.get(i);</span><br><span class="line">                String newStr=path.get(i);</span><br><span class="line">                <span class="keyword">if</span>(oldStr.equals(newStr)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">                    </span><br><span class="line">                        <span class="type">char</span> oldChar=oldStr.charAt(j);</span><br><span class="line">                        <span class="type">char</span> newChar=newStr.charAt(j);</span><br><span class="line">                        <span class="keyword">if</span>(oldChar-newChar&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span>(oldChar-newChar&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                            result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path);</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            j++;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        HashSet&lt;List&lt;String&gt;&gt; used= <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;tickets.size();i++)&#123;</span><br><span class="line">            List&lt;String&gt; ticket=tickets.get(i);</span><br><span class="line">            <span class="keyword">if</span>(hashTable.contains(i)|| used.contains(ticket)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(path.size()==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!ticket.get(<span class="number">0</span>).equals(<span class="string">&quot;JFK&quot;</span>)) <span class="keyword">continue</span>;</span><br><span class="line">                path.add(ticket.get(<span class="number">0</span>));</span><br><span class="line">                path.add(ticket.get(<span class="number">1</span>));</span><br><span class="line">                used.add(ticket);</span><br><span class="line">                hashTable.add(i);</span><br><span class="line">                <span class="keyword">if</span>(backtracking(tickets)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">                path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">                hashTable.remove(i);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!ticket.get(<span class="number">0</span>).equals(path.get(path.size()-<span class="number">1</span>)))<span class="keyword">continue</span>;</span><br><span class="line">                path.add(ticket.get(<span class="number">1</span>));</span><br><span class="line">                used.add(ticket);</span><br><span class="line">                hashTable.add(i);</span><br><span class="line">                <span class="keyword">if</span>(backtracking(tickets))<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">                hashTable.remove(i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-5"   >          <a href="#提交成功-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-5" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>关键在于对原机票进行排序，然后我们只要获取第一个最小路径的结果就可以结束</p>        <h3 id="题解-13"   >          <a href="#题解-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-13" class="headerlink" title="题解"></a>题解</h3>      <p>思路：这道题是综合性很强的一道题，不仅要对层次方面去重，还要求得排序问题，并且这道题与之前做的题有很大不同的点就在于如何做一个剪枝的操作，这道题可以在递归的时候获取到最小路径之后结束递归做剪枝</p><p><strong>实现</strong></p><ul><li><p>定义全局变量</p><ul><li>result：存放的是路径(最小路径)</li><li>used：存放的是已经使用过的索引下标，用于深度上的排序去重</li></ul></li><li><p>初始化数据</p><ul><li>创建result和used对象</li><li><strong>对tickets进行排序</strong>：这一步相当重要，在提前排序好之后，我们结果集收获到的第一个结果就是最短路径，之后就可以不再收集！</li><li>对result数组添加初始化值:“JFK”，这是机场的起始位置，也可以不初始化只是要在第一张机票的时候添加起飞机场和目的机场两个，在这里只是为了后面添加结果的时候<strong>只需要添加目的机场</strong>即可。</li></ul></li><li><p>递归函数的返回值和参数</p><ul><li>返回值boolean：当找到最短路径为true，当没有找到最短路径为false</li></ul><blockquote><p>返回true之后之后递归可以不用进行了，这一步会在代码体现</p></blockquote><ul><li>参数tickets，总的机票集合</li></ul></li><li><p>递归函数的结束条件</p><ul><li>当result.size()&#x3D;&#x3D;tickets.size()+1,说明收获到一个结果集，此第一个结果集就是<strong>最短路径，返回true为了让所有递归结束</strong></li></ul></li><li><p>递归函数的单层逻辑</p><ul><li><p>定义一个set集合，用于层次上的去重</p></li><li><p>循环每次从0开始</p><ul><li><p>当used包含索引i，说明这个元素在深度上重复选择，continue</p></li><li><p>当set包含ticket，说明层次上这个元素重复，continue</p></li><li><p>也即!used.contains（i）&amp;&amp;!set.contains(ticket) 说明这个机票没被用过</p><ul><li>如果result.size()&#x3D;&#x3D;1，说明是刚起飞，判断当前机票ticket是否起始站为”JFK”，如果不是则continue</li><li>如果result.size()！&#x3D;1，判断当前机票ticket是否起始站和result中最后一个元素相等，如果不相等则continue</li><li>result添加目的站</li><li>used添加索引i，set添加当前机票</li><li>进行递归<ul><li>if(backtracking(tickets)){ return true},如果递归中返回true就不需要继续搜索了</li></ul></li><li>回溯</li></ul></li><li><p>当循环遍历到最后位置则返回false</p></li></ul></li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;String&gt; result; <span class="comment">//结果集</span></span><br><span class="line">    HashSet&lt;Integer&gt; used; <span class="comment">//索引i的深度去重</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">findItinerary</span><span class="params">(List&lt;List&lt;String&gt;&gt; tickets)</span> &#123;</span><br><span class="line">        result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        used=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//对机票排序（由小到大）为的是最短路径</span></span><br><span class="line">        Collections.sort(tickets,(a,b)-&gt;a.get(<span class="number">1</span>).compareTo(b.get(<span class="number">1</span>)));</span><br><span class="line">        <span class="comment">//初始化result集合</span></span><br><span class="line">        result.add(<span class="string">&quot;JFK&quot;</span>);</span><br><span class="line">        backtracking(tickets);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">backtracking</span><span class="params">(List&lt;List&lt;String&gt;&gt; tickets)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(result.size()==tickets.size()+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//set用于层次上的去重</span></span><br><span class="line">        HashSet&lt;List&lt;String&gt;&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;tickets.size();i++)&#123;</span><br><span class="line">            <span class="comment">//获取当前机票</span></span><br><span class="line">            List&lt;String&gt; ticket=tickets.get(i);</span><br><span class="line">           <span class="comment">//如果i包含于used中或者ticket机票包含于set中说明重复</span></span><br><span class="line">            <span class="keyword">if</span>(used.contains(i) || set.contains(ticket)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(result.size()==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//当result.size()==1说明为起飞站，判断当前机票是否起始站是&quot;JFK&quot;，如果不是则continue</span></span><br><span class="line">                <span class="keyword">if</span>(!ticket.get(<span class="number">0</span>).equals(<span class="string">&quot;JFK&quot;</span>)) <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//判断机票的起始站和result的最后一站是否相同，不相同则continue</span></span><br><span class="line">                <span class="keyword">if</span>(!ticket.get(<span class="number">0</span>).equals(result.get(result.size()-<span class="number">1</span>))) <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(ticket.get(<span class="number">1</span>));</span><br><span class="line">            used.add(i);</span><br><span class="line">            set.add(ticket);</span><br><span class="line">            <span class="comment">//递归去获取返回值，如果返回true就说明收获到最短路径，可以不要再搜索了，进行剪枝</span></span><br><span class="line">            <span class="keyword">if</span>(backtracking(tickets))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//回溯</span></span><br><span class="line">            result.remove(result.size()-<span class="number">1</span>);</span><br><span class="line">            used.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有找到</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h1>      ]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死之前要做完的算法手册-[6.二叉树]</title>
      <link href="/2023/08/26/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B6.%E4%BA%8C%E5%8F%89%E6%A0%91%5D/"/>
      <url>/2023/08/26/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B6.%E4%BA%8C%E5%8F%89%E6%A0%91%5D/</url>
      
        <content type="html"><![CDATA[        <h1 id="二叉树的基本理论基础"   >          <a href="#二叉树的基本理论基础" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树的基本理论基础" class="headerlink" title="二叉树的基本理论基础"></a>二叉树的基本理论基础</h1>      <p><strong>二叉树的定义代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">class</span> <span class="title class_">TreeNode</span>&#123;</span><br><span class="line">    <span class="comment">//数据</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line"> <span class="comment">//左右子结点</span></span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">    TreeNode ()&#123;&#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val)&#123;</span><br><span class="line">        <span class="built_in">this</span>.val=val;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode(<span class="type">int</span> val,TreeNode left,TreeNode right)&#123;</span><br><span class="line">        <span class="built_in">this</span>.val=val;</span><br><span class="line">        <span class="built_in">this</span>.left=left;</span><br><span class="line">        <span class="built_in">this</span>.right=right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>平衡二叉树</strong></p><p>平衡二叉树是指左右子树的高度差不超过1，就是平衡二叉树</p><p><strong>满二叉树</strong></p><p>满二叉树是指一个二叉树只有度为0的叶子结点和度为2的非叶子结点，除了叶子结点的每个结点都有左右子树</p><p><strong>完全二叉树</strong></p><p>完全二叉树是指除了最后一层是满二叉树，并且最后一层必须都先填满左边</p><p><em>二叉搜索树</em></p><p>二叉搜索树是指结点有数值，二叉搜索树是一个<strong>有序树</strong></p><p><em>平衡二叉搜索树</em></p><p>平衡二叉搜索树是指结点有数值的平衡二叉树，左右子树高度差不超过1</p>        <h1 id="二叉树的递归遍历"   >          <a href="#二叉树的递归遍历" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树的递归遍历" class="headerlink" title="二叉树的递归遍历"></a>二叉树的递归遍历</h1>      <p>二叉树分为<strong>深度优先搜索</strong>和<strong>广度优先搜索</strong>，我们这里先探究的是深度优先遍历中的利用递归遍历</p><p><em>深度优先搜索，当某一个方向遍历到最后一个结点则结束当前方向，进行下一个方向的遍历</em></p><p><em>广度优先搜索，当遍历完一层之后再遍历下一层，一层一层搜索</em></p><p>二叉树的递归遍历主要分为：<strong>前、中、后序遍历</strong></p><p>前序遍历的遍历方式为:<strong>中</strong>左右</p><p>中序遍历的遍历方式为:左<strong>中</strong>右</p><p>后序遍历的遍历方式为:左右<strong>中</strong></p><p><em>所以我们记前中后序遍历只要知道这是在说明中间结点的位置</em></p><p>例</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230826101301155.png"  alt="前中后序遍历示例">      </p><p>如何用递归来遍历二叉树，主要分三步</p><p>①判断递归需要的参数以及返回值 ：这里参数为存放遍历之后的集合以及当前结点。返回值是Void,因为遍历结果已经存放在参数里面了</p><p>②明确递归的结束条件：深度优先遍历，即当前遍历的元素为空则结束这一深度遍历</p><p>③判断单层递归要做什么：将存放遍历值，遍历左子树以及遍历右子树</p><p>所以我们整个的深度优先遍历的代码如下</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中序遍历</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        midItor(root,list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">midItor</span><span class="params">(TreeNode node,List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line">    <span class="comment">//当某一方向遍历到底则结束当前方向递归</span></span><br><span class="line">        <span class="keyword">if</span>(node==<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        midItor(node.left,list);<span class="comment">//遍历左子树</span></span><br><span class="line">        list.add(node.val);<span class="comment">//存放遍历值</span></span><br><span class="line">        midItor(node.right,list);<span class="comment">//遍历右子树</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//而前序和后序遍历的执行逻辑</span></span><br><span class="line"><span class="comment">//只有存放遍历值的步骤不一样</span></span><br><span class="line"><span class="comment">//也即前序是先存放遍历值再遍历左右子树</span></span><br><span class="line"><span class="comment">//也即后序是先遍历左右子树再存放遍历值</span></span><br></pre></td></tr></table></div></figure>        <h2 id="前序遍历"   >          <a href="#前序遍历" class="heading-link"><i class="fas fa-link"></i></a><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2>      <p>给你二叉树的根节点 <code>root</code> ，返回它节点值的 <strong>前序</strong> 遍历。</p>        <h3 id="144-二叉树的前序遍历"   >          <a href="#144-二叉树的前序遍历" class="heading-link"><i class="fas fa-link"></i></a><a href="#144-二叉树的前序遍历" class="headerlink" title="144.二叉树的前序遍历"></a>144.二叉树的前序遍历</h3>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/binary-tree-preorder-traversal/" >Leetcode.144题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h4 id="第一次做"   >          <a href="#第一次做" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做" class="headerlink" title="第一次做"></a>第一次做</h4>      <p>第一次做于23&#x2F;08&#x2F;26</p>        <h5 id="第一次代码"   >          <a href="#第一次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码" class="headerlink" title="第一次代码"></a>第一次代码</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> prefixIt(root,list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">prefixIt</span><span class="params">(TreeNode root,List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="literal">null</span>)&#123;</span><br><span class="line">            list.add(root.val);</span><br><span class="line">            <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                prefixIt(root.left,list);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                prefixIt(root.right,list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="提交成功"   >          <a href="#提交成功" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功" class="headerlink" title="提交成功"></a>提交成功</h6>              <h3 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解" class="headerlink" title="题解"></a>题解</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        beforeItor(root,list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeItor</span><span class="params">(TreeNode node,List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line">    <span class="comment">//当某一方向遍历到底则结束当前方向递归</span></span><br><span class="line">        <span class="keyword">if</span>(node==<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">list.add(node.val);<span class="comment">//存放遍历值</span></span><br><span class="line">        beforeItor(node.left,list);<span class="comment">//遍历左子树</span></span><br><span class="line">        beforeItor(node.right,list);<span class="comment">//遍历右子树</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="中序遍历"   >          <a href="#中序遍历" class="heading-link"><i class="fas fa-link"></i></a><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2>              <h3 id="94-二叉树的中序遍历"   >          <a href="#94-二叉树的中序遍历" class="heading-link"><i class="fas fa-link"></i></a><a href="#94-二叉树的中序遍历" class="headerlink" title="94.二叉树的中序遍历"></a>94.二叉树的中序遍历</h3>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/binary-tree-inorder-traversal/" >Leetcode.94题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h4 id="第一次做-1"   >          <a href="#第一次做-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-1" class="headerlink" title="第一次做"></a>第一次做</h4>      <p>第一次做于23&#x2F;08&#x2F;26</p>        <h5 id="第一次代码-1"   >          <a href="#第一次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-1" class="headerlink" title="第一次代码"></a>第一次代码</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list= <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> midItor(root,list);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">midItor</span><span class="params">(TreeNode root,List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left!=<span class="literal">null</span>) midItor(root.left,list);</span><br><span class="line">            list.add(root.val);</span><br><span class="line">            <span class="keyword">if</span>(root.right!=<span class="literal">null</span>) midItor(root.right,list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="提交成功-1"   >          <a href="#提交成功-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-1" class="headerlink" title="提交成功"></a>提交成功</h6>              <h3 id="题解-1"   >          <a href="#题解-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        midItor(root,list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">midItor</span><span class="params">(TreeNode node,List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line">    <span class="comment">//当某一方向遍历到底则结束当前方向递归</span></span><br><span class="line">        <span class="keyword">if</span>(node==<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        midItor(node.left,list);<span class="comment">//遍历左子树</span></span><br><span class="line">        list.add(node.val);<span class="comment">//存放遍历值</span></span><br><span class="line">        midItor(node.right,list);<span class="comment">//遍历右子树</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="后序遍历"   >          <a href="#后序遍历" class="heading-link"><i class="fas fa-link"></i></a><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2>              <h3 id="145-二叉树的后序遍历"   >          <a href="#145-二叉树的后序遍历" class="heading-link"><i class="fas fa-link"></i></a><a href="#145-二叉树的后序遍历" class="headerlink" title="145.二叉树的后序遍历"></a>145.二叉树的后序遍历</h3>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/binary-tree-postorder-traversal/" >Leetcode.145题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h4 id="第一次做-2"   >          <a href="#第一次做-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-2" class="headerlink" title="第一次做"></a>第一次做</h4>      <p>第一次做于23&#x2F;08&#x2F;26 </p>        <h5 id="第一次代码-2"   >          <a href="#第一次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-2" class="headerlink" title="第一次代码"></a>第一次代码</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> afterItor(root,list);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">afterItor</span><span class="params">(TreeNode root,List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left!=<span class="literal">null</span>) afterItor(root.left,list);</span><br><span class="line">            <span class="keyword">if</span>(root.right!=<span class="literal">null</span>) afterItor(root.right,list);</span><br><span class="line">            list.add(root.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="提交成功-2"   >          <a href="#提交成功-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-2" class="headerlink" title="提交成功"></a>提交成功</h6>              <h3 id="题解-2"   >          <a href="#题解-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        afterItor(root,list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterItor</span><span class="params">(TreeNode node,List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line">    <span class="comment">//当某一方向遍历到底则结束当前方向递归</span></span><br><span class="line">        <span class="keyword">if</span>(node==<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        afterItor(node.left,list);<span class="comment">//遍历左子树</span></span><br><span class="line">        afterItor(node.right,list);<span class="comment">//遍历右子树</span></span><br><span class="line">        list.add(node.val);<span class="comment">//存放遍历值</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="二叉树的非递归遍历-迭代遍历"   >          <a href="#二叉树的非递归遍历-迭代遍历" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树的非递归遍历-迭代遍历" class="headerlink" title="二叉树的非递归遍历(迭代遍历)"></a>二叉树的非递归遍历(迭代遍历)</h1>      <p>上面我们提到了二叉树的<strong>深度优先搜索</strong>中的递归遍历方法，而递归遍历通常也能用非递归的方法解决</p><p><strong>迭代遍历</strong>：用一个栈来模拟二叉树的遍历过程</p><p>迭代遍历主要的是处理两件事：遍历结点以及处理结点</p><p>我们用前序遍历详细说说这个关系</p>        <h2 id="前序遍历-1"   >          <a href="#前序遍历-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#前序遍历-1" class="headerlink" title="前序遍历"></a>前序遍历</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/binary-tree-preorder-traversal/" >Leetcode.144题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><strong>思路</strong></p><p>我们前序遍历也即是<strong>中左右</strong>的遍历方式，而栈是一个先进后出的一个数据结构</p><p>在这里我们遍历结点和处理结点都是同时的，也即当我们遍历到中结点就要将中结点数据添加list中</p><p>而左右子结点入栈应该是先右子树入栈再是左子树入栈，因为LIFO的特性，先处理左子树那就得后入栈</p><p><strong>实现</strong></p><p>①将根节点添加进栈中</p><p>②将中结点弹出，如果结点非空则添加到结果集合中，并且将结点的右子树和左子树入栈</p><p>（<strong>入栈顺序为中，右，左。处理顺序为中，左，右</strong>）</p><p>③当处理结束将结果集返回</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//将根节点入栈</span></span><br><span class="line">        stack.add(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//将中结点弹出</span></span><br><span class="line">            TreeNode node=stack.pop();</span><br><span class="line">            <span class="comment">//当结点非空添加到结果集，并将右子树，左子树入栈。每个结点都保持中右左的入栈顺序，处理顺序为中左右</span></span><br><span class="line">            <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">               </span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="comment">//右子树入栈</span></span><br><span class="line">                stack.add(node.right);</span><br><span class="line">                <span class="comment">//左子树入栈</span></span><br><span class="line">                stack.add(node.left);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="后序遍历-1"   >          <a href="#后序遍历-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#后序遍历-1" class="headerlink" title="后序遍历"></a>后序遍历</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/binary-tree-postorder-traversal/" >Leetcode.145题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><strong>思路</strong></p><p>后序遍历也即<strong>左右中</strong>的遍历方式 ，我们前序遍历的遍历方式是中左右，然后先入栈右子树再入栈左子树就能达到处理顺序是中左右。而我们将子树的入栈顺序颠倒，也即入栈左子树再入栈右子树就可以得到中右左的结果集，我们最后再将中右左的结果集反转就能得到左右中的遍历结果。</p><p>也即 <strong>左右中</strong> &#x3D;&#x3D;   前序遍历 <strong>中左右</strong> -&gt;将子树入栈顺序颠倒 <strong>中右左</strong> -&gt;  反转结果集 <strong>左右中</strong></p><p><strong>实现</strong></p><p>①将根节点添加进栈中</p><p>②将中结点弹出，如果结点非空则添加到结果集合中，并且将结点的左子树和右子树入栈</p><p>（<strong>入栈顺序为中，左，右。处理顺序为中，右，左</strong>）</p><p>③反转结果集(中，右，左 反转成 左，右，中)</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        stack.add(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            TreeNode node=stack.pop();</span><br><span class="line">            <span class="comment">//当结点非空，则将左子树、右子树入栈。每个结点入栈顺序为中左右 处理顺序为中右左</span></span><br><span class="line">            <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="comment">//左子树入栈</span></span><br><span class="line">                stack.add(node.left);</span><br><span class="line">                <span class="comment">//右子树入栈</span></span><br><span class="line">                stack.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//反转结果集</span></span><br><span class="line">        Collections.reverse(list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="中序遍历-1"   >          <a href="#中序遍历-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#中序遍历-1" class="headerlink" title="中序遍历"></a>中序遍历</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/binary-tree-inorder-traversal/" >Leetcode.94题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><strong>思路</strong></p><p>这里遍历结点和处理结点不是同时进行的，也即当我们遍历到这个结点要先去处理左节点，所以我们引入了一个<strong>用于遍历的指针</strong></p><p>通过指针的不断移动确认当前遍历到的结点，如果当前指针不为空则将结点入栈，再去操作左右子树</p><p>如果当前指针为空 说明上一个结点没有左子树  则返回到上个结点将其出栈，再去判断右子树是否为空</p><p><strong>实现</strong></p><p>①定义一个用于遍历的指针cur，代表着此时遍历到的结点</p><p>②如果当前结点不为空 则入栈，将指针指向当前结点的左子树</p><p>③如果当前结点为空，则说明左子树为空，返回上一个结点将其弹出实现了左中的路线，再将当前结点指向右子树</p><p>④如果当前指针为空并且栈为空说明遍历已经结束 实现了<strong>左中右</strong>的逻辑</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//定义一个用于遍历的指针</span></span><br><span class="line">    TreeNode cur=root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当当前结点不为空或者栈不为空的时候说明没有遍历完</span></span><br><span class="line">       <span class="keyword">while</span>(cur!=<span class="literal">null</span> || stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="comment">//当前结点入栈，指向左子树</span></span><br><span class="line">               stack.add(cur);</span><br><span class="line">               cur=cur.left;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="comment">//cur==null</span></span><br><span class="line">               <span class="comment">//说明这里没有左子树，返回最近的父节点让它出栈，然后指向父节点的右子树</span></span><br><span class="line">               TreeNode node=stack.pop();</span><br><span class="line">               list.add(node.val);</span><br><span class="line">               cur=node.right;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> list;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="统一迭代法"   >          <a href="#统一迭代法" class="heading-link"><i class="fas fa-link"></i></a><a href="#统一迭代法" class="headerlink" title="统一迭代法"></a>统一迭代法</h2>      <p>因为前中后序代码的不一致性，所以我们可以引入一个<strong>空指针</strong>，这样可以使其迭代法的代码可以能像递归法一样只要移动几个代码的位置就能分别实现前中后序</p><p>思想：以<strong>中序遍历</strong>为假设</p><p>当当前结点不为空的时候，将其左右子树和当前结点重新入栈 <del>需要实现左中右的逻辑</del></p><ul><li><p>假如左右子树都不为空 那么实现栈中 <strong>右结点 当前结点 null 左结点</strong></p></li><li><p>假如左子树为空右子树不为空， 那么栈中 <strong>右结点 当前结点 null</strong> </p></li><li><p>假如左子树不为空右子树为空， 那么栈中 <strong>当前结点 null 左结点</strong></p></li><li><p>假如左右子树都为空，那么栈中         <strong>当前结点 null</strong></p></li></ul><p>当遇见null结点的时候只要pop栈就能找到当前结点，也即维护了一个<strong>当前结点后跟着一个空指针标记</strong></p>        <h3 id="中序遍历-2"   >          <a href="#中序遍历-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#中序遍历-2" class="headerlink" title="中序遍历"></a>中序遍历</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//根节点为空就直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//根节点不为空</span></span><br><span class="line">        stack.add(root);</span><br><span class="line">        <span class="keyword">while</span>(stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            TreeNode node=stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//重新入栈顺序为 右中左 </span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//当右子树结点为空不入栈</span></span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) stack.add(node.right);</span><br><span class="line"></span><br><span class="line">                stack.add(node);</span><br><span class="line">                stack.add(<span class="literal">null</span>);</span><br><span class="line">                <span class="comment">//当左子树结点为空不入栈</span></span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) stack.add(node.left);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//node==null</span></span><br><span class="line">                <span class="comment">//那么空节点前一个就是当前结点 直接pop</span></span><br><span class="line">                TreeNode inNode=stack.pop();</span><br><span class="line">                list.add(inNode.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="前序遍历-2"   >          <a href="#前序遍历-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#前序遍历-2" class="headerlink" title="前序遍历"></a>前序遍历</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">preorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        stack.add(root);</span><br><span class="line">        <span class="keyword">while</span>(stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            TreeNode node=stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//重新入栈顺序为 右左中</span></span><br><span class="line">                <span class="comment">//当右子树结点为空不入栈，当左子树结点为空不入栈</span></span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) stack.add(node.right);</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) stack.add(node.left);</span><br><span class="line"></span><br><span class="line">                stack.add(node);</span><br><span class="line">                stack.add(<span class="literal">null</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//node==null</span></span><br><span class="line"><span class="comment">//那么空节点前一个就是当前结点 直接pop</span></span><br><span class="line">                TreeNode inNode=stack.pop();</span><br><span class="line">                list.add(inNode.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="后序遍历-2"   >          <a href="#后序遍历-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#后序遍历-2" class="headerlink" title="后序遍历"></a>后序遍历</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">ublic List&lt;Integer&gt; <span class="title function_">postorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stack.add(root);</span><br><span class="line">        <span class="keyword">while</span>(stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            TreeNode node=stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//重新入栈顺序为 中右左</span></span><br><span class="line">                </span><br><span class="line">                stack.add(node);</span><br><span class="line">                stack.add(<span class="literal">null</span>);</span><br><span class="line">                <span class="comment">//当右子树结点为空不入栈，当左子树结点为空不入栈</span></span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) stack.add(node.right);</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) stack.add(node.left);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//node==null</span></span><br><span class="line">                <span class="comment">//那么空节点前一个就是当前结点 直接pop</span></span><br><span class="line">                TreeNode inNode=stack.pop();</span><br><span class="line">                list.add(inNode.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="小结"   >          <a href="#小结" class="heading-link"><i class="fas fa-link"></i></a><a href="#小结" class="headerlink" title="小结"></a>小结</h3>      <p>这个统一迭代法主要利用了一个<strong>空指针来标记当前结点</strong>的位置，当结点不为空的时候统一将有效结点入栈，当结点为空时找前一个元素即可找到当前结点。这样代码只需要移动少部分顺序即可完成前中后序的遍历</p>        <h1 id="二叉树的层序遍历"   >          <a href="#二叉树的层序遍历" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树的层序遍历" class="headerlink" title="二叉树的层序遍历"></a>二叉树的层序遍历</h1>      <p>二叉树有<strong>深度优先搜索</strong>与<strong>广度优先搜索</strong>，我们这里来学的就是广度优先搜索中的层序遍历</p><p>给你二叉树的根节点 <code>root</code> ，返回其节点值的 <strong>层序遍历</strong> 。 （即逐层地，从左到右访问所有节点）。</p>        <h2 id="102-二叉树的层序遍历"   >          <a href="#102-二叉树的层序遍历" class="heading-link"><i class="fas fa-link"></i></a><a href="#102-二叉树的层序遍历" class="headerlink" title="102.二叉树的层序遍历"></a>102.二叉树的层序遍历</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/binary-tree-level-order-traversal/" >Leetcode.102题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-3"   >          <a href="#第一次做-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-3" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;27</p>        <h4 id="第一次代码-3"   >          <a href="#第一次代码-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-3" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; Fatherqueue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; Sonqueue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        Fatherqueue.add(root);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(Fatherqueue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            TreeNode node=Fatherqueue.poll();</span><br><span class="line">            <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)Sonqueue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)Sonqueue.add(node.right);</span><br><span class="line">                list.add(node.val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(Fatherqueue.size()==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(Sonqueue.size()!=<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Fatherqueue.add(Sonqueue.poll());</span><br><span class="line">                &#125;</span><br><span class="line">                result.add(list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败"   >          <a href="#提交失败" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:root &#x3D;[3,9,20,null,null,15,7]，输出[[3],[20],[7]] 预期输出[[3],[9,20],[15,7]]</p><p>原因出在这个list队列每次循环都会重置，而改进逻辑是在每次父队列为空的时候new一个List出来 然后list指向这个新的List</p>        <h4 id="第二次代码"   >          <a href="#第二次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; Fatherqueue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; Sonqueue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        Fatherqueue.add(root);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(Fatherqueue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">       </span><br><span class="line">            TreeNode node=Fatherqueue.poll();</span><br><span class="line">            <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)Sonqueue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)Sonqueue.add(node.right);</span><br><span class="line">                list.add(node.val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(Fatherqueue.size()==<span class="number">0</span>)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">while</span>(Sonqueue.size()!=<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Fatherqueue.add(Sonqueue.poll());</span><br><span class="line">                &#125;</span><br><span class="line">                result.add(list);</span><br><span class="line">                list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-3"   >          <a href="#提交成功-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-3" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-3"   >          <a href="#题解-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3>      <p><strong>思路</strong></p><p>用一个<strong>size</strong>记录每一层的结点数:获取一下队列中的结点个数记录为size，然后当结点数大于0的时候操作队列。当结点为0说明本层遍历完了 重新获取一下队列中的结点数</p><p>如</p><figure class="highlight c"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第一层size为<span class="number">1</span> 说明本层只需要弹出一个结点即可，操作队列弹出一个元素进入下一层</span><br><span class="line"></span><br><span class="line">第二层size为<span class="number">2</span> 说明本层需要弹出两个结点，队列只需要弹出两次</span><br><span class="line"></span><br><span class="line">第三层size为<span class="number">3</span> 说明第三层只有三个结点</span><br></pre></td></tr></table></div></figure><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//将根节点入队</span></span><br><span class="line">        queue.add(root);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当队列非空说明没有遍历完</span></span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//记录本层结点数  快照size</span></span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            <span class="comment">//每一层的list集合</span></span><br><span class="line">            List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//弹出结点</span></span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="comment">//将当前结点左右结点(非空)入队</span></span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//添加进每层的结果集中</span></span><br><span class="line">            result.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="107-二叉树的层序遍历II"   >          <a href="#107-二叉树的层序遍历II" class="heading-link"><i class="fas fa-link"></i></a><a href="#107-二叉树的层序遍历II" class="headerlink" title="107.二叉树的层序遍历II"></a>107.二叉树的层序遍历II</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/" >Leetcode.107题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>给你二叉树的根节点 <code>root</code> ，返回其节点值 <strong>自底向上的层序遍历</strong> 。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p>        <h3 id="第一次做-4"   >          <a href="#第一次做-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-4" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;28</p>        <h4 id="第一次代码-4"   >          <a href="#第一次代码-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-4" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrderBottom</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">                list.add(node.val);</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(list);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Collections.reverse(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-4"   >          <a href="#提交成功-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-4" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-4"   >          <a href="#题解-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3>      <p>这道题和102题(二叉树的层序遍历)相似，但是要求的是自底向顶的数据输出</p><p>那么可以知道层序遍历是自顶向底的顺序输出，所以我们最后只要将层序遍历结果集反转即可达到要求</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrderBottom</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//统计每一次要操作的数据量</span></span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">                list.add(node.val);</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(list);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//反转自顶向底的结果集</span></span><br><span class="line">        Collections.reverse(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="199-二叉树的右视图"   >          <a href="#199-二叉树的右视图" class="heading-link"><i class="fas fa-link"></i></a><a href="#199-二叉树的右视图" class="headerlink" title="199.二叉树的右视图"></a>199.二叉树的右视图</h2>      <p>给定一个二叉树的 <strong>根节点</strong> <code>root</code>，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/binary-tree-right-side-view/" >Leetcode.199题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-5"   >          <a href="#第一次做-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-5" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;28</p>        <h4 id="第一次代码-5"   >          <a href="#第一次代码-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-5" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">rightSideView</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                <span class="comment">//当size==0 说明该结点是这层的最后一个结点，也即右视图能看到的结点</span></span><br><span class="line">                <span class="keyword">if</span>(size==<span class="number">0</span>)&#123;</span><br><span class="line">                    list.add(node.val);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-5"   >          <a href="#提交成功-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-5" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-5"   >          <a href="#题解-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3>      <p>思路：我们层序遍历然后将每层的最后一个元素添加到结果集中返回即可</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">rightSideView</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                <span class="comment">//当size==0 说明该结点是这层的最后一个结点，也即右视图能看到的结点</span></span><br><span class="line">                <span class="keyword">if</span>(size==<span class="number">0</span>)&#123;</span><br><span class="line">                    list.add(node.val);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="637-二叉树的层平均值"   >          <a href="#637-二叉树的层平均值" class="heading-link"><i class="fas fa-link"></i></a><a href="#637-二叉树的层平均值" class="headerlink" title="637.二叉树的层平均值"></a>637.二叉树的层平均值</h2>      <p>给定一个非空二叉树的根节点 <code>root</code> , 以数组的形式返回每一层节点的平均值。与实际答案相差 <code>10-5</code> 以内的答案可以被接受。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/average-of-levels-in-binary-tree/" >Leetcode.637题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-6"   >          <a href="#第一次做-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-6" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;28</p>        <h4 id="第一次代码-6"   >          <a href="#第一次代码-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-6" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Double&gt; <span class="title function_">averageOfLevels</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Double&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.add(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();            </span><br><span class="line">            <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="type">double</span> num=size;</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">                sum+=node.val;</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(sum/num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-1"   >          <a href="#提交失败-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-1" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE: 输入root&#x3D;[2,147,483,647，2,147,483,647，2,147,483,647] 输出[2,147,483,647.0，-1.0] 预期输出[2,147,483,647.0，2,147,483,647.0]</p><p>原因在于int的上限为2,147,483,647所以我只要把sum的数据类型改成double即可</p>        <h4 id="第二次代码-1"   >          <a href="#第二次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-1" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Double&gt; <span class="title function_">averageOfLevels</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Double&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.add(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();            </span><br><span class="line">            <span class="type">double</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="type">double</span> num=size;</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">                sum+=node.val;</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(sum/num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-6"   >          <a href="#提交成功-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-6" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-6"   >          <a href="#题解-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">ublic List&lt;Double&gt; <span class="title function_">averageOfLevels</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Double&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.add(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//记录每层的结点数</span></span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            <span class="comment">//统计每层总和</span></span><br><span class="line">            <span class="type">double</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">                sum+=node.val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//添加每层平均值</span></span><br><span class="line">            result.add(sum/size);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="429-N叉树的层序遍历"   >          <a href="#429-N叉树的层序遍历" class="heading-link"><i class="fas fa-link"></i></a><a href="#429-N叉树的层序遍历" class="headerlink" title="429.N叉树的层序遍历"></a>429.N叉树的层序遍历</h2>      <p>给定一个 N 叉树，返回其节点值的<em>层序遍历</em>。（即从左到右，逐层遍历）。</p><p>树的序列化输入是用层序遍历，每组子节点都由 null 值分隔（参见示例）。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/n-ary-tree-level-order-traversal/" >Leetcode.429(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-7"   >          <a href="#第一次做-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-7" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;28</p>        <h4 id="第一次代码-7"   >          <a href="#第一次代码-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-7" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;Node&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span>queue.poll();</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.children!=<span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(Node n: node.children)&#123;</span><br><span class="line">                        queue.add(n);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-7"   >          <a href="#提交成功-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-7" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-7"   >          <a href="#题解-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-7" class="headerlink" title="题解"></a>题解</h3>      <p>思路：统计每层个数，然后每个结点获取他的数据入list中并将子结点集合(children)入队</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;Node&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.add(root);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            </span><br><span class="line">            List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span>queue.poll();</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="comment">//当子节点集合不为空</span></span><br><span class="line">                <span class="keyword">if</span>(node.children!=<span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//子结点入队</span></span><br><span class="line">                    <span class="keyword">for</span>(Node n: node.children)&#123;</span><br><span class="line">                        queue.add(n);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="515-在每个树行中找最大值"   >          <a href="#515-在每个树行中找最大值" class="heading-link"><i class="fas fa-link"></i></a><a href="#515-在每个树行中找最大值" class="headerlink" title="515.在每个树行中找最大值"></a>515.在每个树行中找最大值</h2>      <p>给定一棵二叉树的根节点 <code>root</code> ，请找出该二叉树中每一层的最大值。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/find-largest-value-in-each-tree-row/" >Leetcode.515题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-8"   >          <a href="#第一次做-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-8" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;28</p>        <h4 id="第一次代码-8"   >          <a href="#第一次代码-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-8" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">largestValues</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            <span class="type">int</span> MAX=Integer.MAX_VALUE+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.val&gt;=MAX) MAX=node.val;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(MAX);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-8"   >          <a href="#提交成功-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-8" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-8"   >          <a href="#题解-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-8" class="headerlink" title="题解"></a>题解</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">largestValues</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            <span class="comment">//记录每层最大值</span></span><br><span class="line">            <span class="type">int</span> MAX=Integer.MAX_VALUE+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.val&gt;=MAX) MAX=node.val;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(MAX);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="116-填充每个节点的下一个右侧节点指针"   >          <a href="#116-填充每个节点的下一个右侧节点指针" class="heading-link"><i class="fas fa-link"></i></a><a href="#116-填充每个节点的下一个右侧节点指针" class="headerlink" title="116.填充每个节点的下一个右侧节点指针"></a>116.填充每个节点的下一个右侧节点指针</h2>      <p>给定一个 <strong>完美二叉树</strong> ，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">  int val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 <code>NULL</code>。</p><p>初始状态下，所有 next 指针都被设置为 <code>NULL</code>。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/" >Leetcode.116题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-9"   >          <a href="#第一次做-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-9" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;28</p>        <h4 id="第一次代码-9"   >          <a href="#第一次代码-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-9" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node <span class="title function_">connect</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        Queue&lt;Node&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        Node cur;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            cur=queue.peek();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                    queue.poll();</span><br><span class="line">                &#125;</span><br><span class="line">                Node next=queue.poll();</span><br><span class="line">                cur.next=next;</span><br><span class="line">                cur=next;</span><br><span class="line">                <span class="keyword">if</span>(next!=<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(next.left!=<span class="literal">null</span>) queue.add(next.left);</span><br><span class="line">                    <span class="keyword">if</span>(next.right!=<span class="literal">null</span>) queue.add(next.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-2"   >          <a href="#提交失败-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-2" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:输入[1,2,3,4,5,6,7] 输出[1,#,2,#,4,#] 预期输出[1,#,2,3,#,4,5,6,7,#]</p><p>当每层第一个的时候忘记继续操作了</p>        <h4 id="第二次代码-2"   >          <a href="#第二次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-2" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node <span class="title function_">connect</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">       Queue&lt;Node&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">       Node cur;</span><br><span class="line">       <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> root;</span><br><span class="line">       &#125;</span><br><span class="line">       queue.add(root);</span><br><span class="line">       <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="type">int</span> size=queue.size();</span><br><span class="line">           cur=queue.peek();</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                   Node next=queue.poll();</span><br><span class="line">                   <span class="keyword">if</span>(next.left!=<span class="literal">null</span>) queue.add(next.left);</span><br><span class="line">                   <span class="keyword">if</span>(next.right!=<span class="literal">null</span>) queue.add(next.right);</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               Node next=queue.poll();</span><br><span class="line">               cur.next=next;</span><br><span class="line">               cur=next;</span><br><span class="line">               <span class="keyword">if</span>(next!=<span class="literal">null</span>)&#123;</span><br><span class="line">                   <span class="keyword">if</span>(next.left!=<span class="literal">null</span>) queue.add(next.left);</span><br><span class="line">                   <span class="keyword">if</span>(next.right!=<span class="literal">null</span>) queue.add(next.right);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> root;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-9"   >          <a href="#提交成功-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-9" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-9"   >          <a href="#题解-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-9" class="headerlink" title="题解"></a>题解</h3>      <p>思路： 还是层序遍历</p><ul><li><p>size–之后为0说明是这层最后一个结点就不做处理，只将子结点入队</p></li><li><p>size–之后不为0说明这层还有结点，通过peek方法取得当前结点的下一个结点 指向下一个结点即可，然后将当前结点的子结点入队</p></li></ul><p></p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node <span class="title function_">connect</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        Queue&lt;Node&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        Node cur;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//获取当前结点</span></span><br><span class="line">                Node node=queue.poll();</span><br><span class="line">                <span class="comment">//当size!=0 说明没到本层最后一个结点，队里还有本层的下一个结点</span></span><br><span class="line">                <span class="keyword">if</span>(size!=<span class="number">0</span>)&#123;</span><br><span class="line">                    Node next=queue.peek();</span><br><span class="line">                    node.next=next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//子结点入队</span></span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="117-填充每个节点的下一个右侧节点指针-II"   >          <a href="#117-填充每个节点的下一个右侧节点指针-II" class="heading-link"><i class="fas fa-link"></i></a><a href="#117-填充每个节点的下一个右侧节点指针-II" class="headerlink" title="117.填充每个节点的下一个右侧节点指针 II"></a>117.填充每个节点的下一个右侧节点指针 II</h2>      <p>给定一个二叉树：</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct Node &#123;</span><br><span class="line">  int val;</span><br><span class="line">  Node *left;</span><br><span class="line">  Node *right;</span><br><span class="line">  Node *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 <code>NULL</code> 。</p><p>初始状态下，所有 next 指针都被设置为 <code>NULL</code> 。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/" >Leetcode.117题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><em>这题于106题的区别在于 106题二叉树是完美二叉树 这道题是普通二叉树</em></p>        <h3 id="第一次做-10"   >          <a href="#第一次做-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-10" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;28</p>        <h4 id="第一次代码-10"   >          <a href="#第一次代码-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-10" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node <span class="title function_">connect</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        Queue&lt;Node&gt; queue= <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                Node node=queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(size!=<span class="number">0</span>)&#123;</span><br><span class="line">                    Node next=queue.peek();</span><br><span class="line">                    node.next=next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-10"   >          <a href="#提交成功-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-10" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-10"   >          <a href="#题解-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-10" class="headerlink" title="题解"></a>题解</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node <span class="title function_">connect</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        Queue&lt;Node&gt; queue= <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//获取当前结点</span></span><br><span class="line">                Node node=queue.poll();</span><br><span class="line">                <span class="comment">//当size!=0 说明没到本层最后一个结点，队里还有本层的下一个结点</span></span><br><span class="line">                <span class="keyword">if</span>(size!=<span class="number">0</span>)&#123;</span><br><span class="line">                    Node next=queue.peek();</span><br><span class="line">                    node.next=next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//子结点入队</span></span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="104-二叉树的最大深度"   >          <a href="#104-二叉树的最大深度" class="heading-link"><i class="fas fa-link"></i></a><a href="#104-二叉树的最大深度" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h2>      <p>给定一个二叉树 <code>root</code> ，返回其最大深度。</p><p>二叉树的 <strong>最大深度</strong> 是指从根节点到最远叶子节点的最长路径上的节点数。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/" >Leetcode.104题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-11"   >          <a href="#第一次做-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-11" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;28</p>        <h4 id="第一次代码-11"   >          <a href="#第一次代码-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-11" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//用于统计层数</span></span><br><span class="line">        <span class="type">int</span> dept=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> dept;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//层数自增</span></span><br><span class="line">            dept++;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-11"   >          <a href="#提交成功-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-11" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="第二次做"   >          <a href="#第二次做" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次做" class="headerlink" title="第二次做"></a>第二次做</h3>      <p>第二次做于23&#x2F;08&#x2F;30</p>        <h4 id="第一次代码-12"   >          <a href="#第一次代码-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-12" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> dept=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> dept;</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            dept++;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-12"   >          <a href="#提交成功-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-12" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-11"   >          <a href="#题解-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-11" class="headerlink" title="题解"></a>题解</h3>      <p>我们只要用一个count来统计层数即可，当层序遍历的时候count++就能统计做大深度</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">     <span class="comment">//用于统计深度 </span></span><br><span class="line">    <span class="type">int</span> dept=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> dept;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            dept++;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="111-二叉树的最小深度"   >          <a href="#111-二叉树的最小深度" class="heading-link"><i class="fas fa-link"></i></a><a href="#111-二叉树的最小深度" class="headerlink" title="111.二叉树的最小深度"></a>111.二叉树的最小深度</h2>      <p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p><strong>说明：</strong>叶子节点是指没有子节点的节点。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/" >Leetcode.111题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-12"   >          <a href="#第一次做-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-12" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;28</p>        <h4 id="第一次代码-13"   >          <a href="#第一次代码-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-13" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="type">int</span> dept=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> dept;</span><br><span class="line">        </span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            dept++;</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left==<span class="literal">null</span> &amp;&amp; node.right==<span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> dept;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-13"   >          <a href="#提交成功-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-13" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="第二次做-1"   >          <a href="#第二次做-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次做-1" class="headerlink" title="第二次做"></a>第二次做</h3>      <p>第二次做于23&#x2F;08&#x2F;30</p>        <h4 id="第一次代码-14"   >          <a href="#第一次代码-14" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-14" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//层序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> dept=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> dept;</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            dept++;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left==<span class="literal">null</span> &amp;&amp; node.right==<span class="literal">null</span>) <span class="keyword">return</span> dept;</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-14"   >          <a href="#提交成功-14" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-14" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-12"   >          <a href="#题解-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-12" class="headerlink" title="题解"></a>题解</h3>      <p>本题目的就是找到离根节点最近的叶子结点，所以我们层序遍历找到第一个叶子结点就是离根最近的叶子结点</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="type">int</span> dept=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> dept;</span><br><span class="line">        </span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">    <span class="comment">//层序遍历</span></span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            dept++;</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                <span class="comment">//判断当前结点是不是叶子结点(左右子树为空)</span></span><br><span class="line">                <span class="keyword">if</span>(node.left==<span class="literal">null</span> &amp;&amp; node.right==<span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> dept;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="小结-1"   >          <a href="#小结-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2>      <p>我们通过这几道题的训练可以明白和使用层序遍历，总之这些题目是大同小异。我们明白了用<strong>队列</strong>来完成<strong>广度优先搜索</strong></p>        <h1 id="翻转二叉树"   >          <a href="#翻转二叉树" class="heading-link"><i class="fas fa-link"></i></a><a href="#翻转二叉树" class="headerlink" title="翻转二叉树"></a>翻转二叉树</h1>      <p>给你一棵二叉树的根节点 <code>root</code> ，翻转这棵二叉树，并返回其根节点。</p>        <h2 id="226-翻转二叉树"   >          <a href="#226-翻转二叉树" class="heading-link"><i class="fas fa-link"></i></a><a href="#226-翻转二叉树" class="headerlink" title="226.翻转二叉树"></a>226.翻转二叉树</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/invert-binary-tree/" >LeetCode.226(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-13"   >          <a href="#第一次做-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-13" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;29</p>        <h4 id="第一次代码-15"   >          <a href="#第一次代码-15" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-15" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//统一迭代法</span></span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">//用统一迭代法(后序遍历)</span></span><br><span class="line">        Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        stack.add(root);</span><br><span class="line">        <span class="keyword">while</span>(stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            TreeNode node=stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.add(node);</span><br><span class="line">                stack.add(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) stack.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) stack.add(node.right);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                TreeNode temp=stack.pop();</span><br><span class="line">                TreeNode tempRight=temp.right;</span><br><span class="line">                temp.right=temp.left;</span><br><span class="line">                temp.left=tempRight;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-15"   >          <a href="#提交成功-15" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-15" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-13"   >          <a href="#题解-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-13" class="headerlink" title="题解"></a>题解</h3>      <p>这道题用前序和后序的时候可以直接交换中结点的左右子树，然后处理左右子树即可。</p><p>而用中序的时候有一个踩坑的顺序点，因为中序是左中右，所以处理完左子树之后就和右子树做了交换，而下一步是处理右子树就等于是又反转了一遍原先的左子树。所以这里比较绕就不用中序</p><p><strong>递归法</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归法</span></span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        ReverseTree(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ReverseTree</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理左子树、右子树</span></span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>) ReverseTree(root.left);</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>) ReverseTree(root.right);</span><br><span class="line"><span class="comment">//交换左右子树</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">temp</span> <span class="operator">=</span>root.right;</span><br><span class="line">        root.right=root.left;</span><br><span class="line">        root.left=temp;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p><strong>非递归法</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//统一迭代法</span></span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">//用统一迭代法(后序遍历)</span></span><br><span class="line">        Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        stack.add(root);</span><br><span class="line">        <span class="keyword">while</span>(stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            TreeNode node=stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.add(node);</span><br><span class="line">                stack.add(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//添加左右子树结点</span></span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) stack.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) stack.add(node.right);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//node==null</span></span><br><span class="line">                TreeNode temp=stack.pop();</span><br><span class="line">                <span class="comment">//交换左右子树</span></span><br><span class="line">                TreeNode tempRight=temp.right;</span><br><span class="line">                temp.right=temp.left;</span><br><span class="line">                temp.left=tempRight;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="对称二叉树"   >          <a href="#对称二叉树" class="heading-link"><i class="fas fa-link"></i></a><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h1>      <p>给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对称。</p>        <h2 id="101-对称二叉树"   >          <a href="#101-对称二叉树" class="heading-link"><i class="fas fa-link"></i></a><a href="#101-对称二叉树" class="headerlink" title="101.对称二叉树"></a>101.对称二叉树</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/symmetric-tree/" >Leetcode.101题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-14"   >          <a href="#第一次做-14" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-14" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;29</p>        <h4 id="第一次代码-16"   >          <a href="#第一次代码-16" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-16" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack.add(root);</span><br><span class="line">        <span class="type">int</span> arr[]=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1001</span>];</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            TreeNode node=stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.add(node.left);</span><br><span class="line">                stack.add(node.right);</span><br><span class="line">                arr[i]=node.val;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        ReserveTree(root);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> newArr[]=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1001</span>];</span><br><span class="line">        stack.add(root);</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            TreeNode node=stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.add(node.left);</span><br><span class="line">                stack.add(node.right);</span><br><span class="line">                newArr[j]=node.val;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;j;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]!=newArr[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ReserveTree</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        ReserveTree(root.left);</span><br><span class="line">        ReserveTree(root.right);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> root.right;</span><br><span class="line">        root.right=root.left;</span><br><span class="line">        root.left=temp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误"   >          <a href="#提交错误" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE: root[1,0] 输出true 预期输出false</p>        <h4 id="第二次代码-3"   >          <a href="#第二次代码-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-3" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="type">int</span> number=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                number++;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(number!=<span class="number">1</span>&amp;&amp; number%<span class="number">2</span>!=<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        stack.add(root);</span><br><span class="line">        <span class="type">int</span> arr[]=<span class="keyword">new</span> <span class="title class_">int</span>[Integer.MAX_VALUE];</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            TreeNode node=stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.add(node.left);</span><br><span class="line">                stack.add(node.right);</span><br><span class="line">                arr[i++]=node.val;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        ReserveTree(root);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> newArr[]=<span class="keyword">new</span> <span class="title class_">int</span>[Integer.MAX_VALUE];</span><br><span class="line">        stack.add(root);</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            TreeNode node=stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.add(node.left);</span><br><span class="line">                stack.add(node.right);</span><br><span class="line">                newArr[j++]=node.val;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;j;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]!=newArr[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ReserveTree</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        ReserveTree(root.left);</span><br><span class="line">        ReserveTree(root.right);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> root.right;</span><br><span class="line">        root.right=root.left;</span><br><span class="line">        root.left=temp;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-1"   >          <a href="#提交错误-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-1" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:超出内存限制</p>        <h4 id="第三次代码"   >          <a href="#第三次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line"></span><br><span class="line">       Stack&lt;TreeNode&gt; stack=<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       stack.add(root);</span><br><span class="line">       ArrayList&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">while</span>(stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">           TreeNode node=stack.pop();</span><br><span class="line">           <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">               stack.add(node.left);</span><br><span class="line">               stack.add(node.right);</span><br><span class="line">               list.add(node.val);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               list.add(<span class="literal">null</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">       &#125;</span><br><span class="line">       ReserveTree(root);</span><br><span class="line"></span><br><span class="line">       ArrayList&lt;Integer&gt; tempList=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       stack.add(root);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span>(stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">           TreeNode node=stack.pop();</span><br><span class="line">           <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">               stack.add(node.left);</span><br><span class="line">               stack.add(node.right);</span><br><span class="line">               tempList.add(node.val);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               tempList.add(<span class="literal">null</span>);</span><br><span class="line">           &#125;</span><br><span class="line">         </span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(list.get(i)!=<span class="literal">null</span> &amp;&amp; tempList.get(i)!=<span class="literal">null</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span>(!list.get(i).equals(tempList.get(i))) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(list.get(i)==<span class="literal">null</span>&amp;&amp;tempList.get(i)!=<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           <span class="keyword">if</span>(list.get(i)!=<span class="literal">null</span>&amp;&amp;tempList.get(i)==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ReserveTree</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">       ReserveTree(root.left);</span><br><span class="line">       ReserveTree(root.right);</span><br><span class="line">       <span class="type">TreeNode</span> <span class="variable">temp</span> <span class="operator">=</span> root.right;</span><br><span class="line">       root.right=root.left;</span><br><span class="line">       root.left=temp;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-16"   >          <a href="#提交成功-16" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-16" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>做法是先用list存放原来树的元素，然后反转之后再遍历一遍放到tempList 如果这两个集合元素是一样的说明是对称的</p>        <h3 id="题解-14"   >          <a href="#题解-14" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-14" class="headerlink" title="题解"></a>题解</h3>      <p>我们这道题求一棵树是否是对称二叉树，也即只要左右子树能够相互翻转。 也即<strong>左右子树镜像</strong></p><p><strong>思路</strong></p><p>求根结点的左子树和右子树是否镜像</p><ul><li><p>如果左子树为空并且右子树为空  返回true</p></li><li><p>如果左子树不为空 右子树为空 返回false</p></li><li><p>如果左子树为空 右子树不为空 返回false</p></li><li><p>如果左右子树都不为空 但是左结点和右结点值不相等 返回false</p></li><li><p>如果左右子树不为空 且值相等 则进行判断</p><ul><li><p>判断传入的左子树的左孩子 于 传入的右子树的右孩子 是否镜像</p></li><li><p>判断传入的左子树的右孩子 于 传入的右子树的做孩子 是否镜像</p></li></ul></li><li><p>如果左右子树镜像则返回true</p></li></ul><p>利用后序遍历最后处理中结点</p><p>等于是同时<strong>遍历根节点下的左右子树</strong>，左子树的遍历是左右中，而右子树的遍历是右左中</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       <span class="comment">//检查左右子树是否镜像</span></span><br><span class="line">       <span class="keyword">return</span> check(root.left,root.right); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(TreeNode left,TreeNode right)</span>&#123;</span><br><span class="line">    <span class="comment">//如果左右子树为空 </span></span><br><span class="line">        <span class="keyword">if</span>(left==<span class="literal">null</span>&amp;&amp; right==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//如果左子树为空 右子树不为空</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(left==<span class="literal">null</span> &amp;&amp; right!=<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//如果左子树不为空 右子树为空</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(left!=<span class="literal">null</span> &amp;&amp; right==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//如果左右子树不为空但是值不相等</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(left.val!=right.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//运行到这里左右子树不为空 值也相等，判断左子树的左结点和右子树的右孩子是否相等</span></span><br><span class="line">        <span class="type">boolean</span> outCheck=check(left.left,right.right);</span><br><span class="line">        <span class="comment">//判断左子树的右节点和右子树的左结点是否相等</span></span><br><span class="line">        <span class="type">boolean</span> inCheck=check(left.right,right.left);</span><br><span class="line">        <span class="comment">//处理中结点 左右为镜像则返回true</span></span><br><span class="line">        <span class="keyword">return</span> outCheck &amp;&amp; inCheck;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></div></figure>        <h2 id="100-相同的树"   >          <a href="#100-相同的树" class="heading-link"><i class="fas fa-link"></i></a><a href="#100-相同的树" class="headerlink" title="100.相同的树"></a>100.相同的树</h2>      <p>给你两棵二叉树的根节点 <code>p</code> 和 <code>q</code> ，编写一个函数来检验这两棵树是否相同。</p><p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/same-tree/" >Leetcode.100题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-15"   >          <a href="#第一次做-15" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-15" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;29</p>        <h4 id="第一次代码-17"   >          <a href="#第一次代码-17" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-17" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">null</span>&amp;&amp; q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p!=<span class="literal">null</span> &amp;&amp; q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p==<span class="literal">null</span> &amp;&amp; q!=<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p.val!=q.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> leftCheck=isSameTree(p.left,q.left);</span><br><span class="line">        <span class="type">boolean</span> rightCheck=isSameTree(p.right,q.right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> leftCheck&amp;&amp; rightCheck;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-17"   >          <a href="#提交成功-17" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-17" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-15"   >          <a href="#题解-15" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-15" class="headerlink" title="题解"></a>题解</h3>      <p>求左子树和右子树是否相等</p><ul><li><p>如果左子树为空并且右子树为空  返回true</p></li><li><p>如果左子树不为空 右子树为空 返回false</p></li><li><p>如果左子树为空 右子树不为空 返回false</p></li><li><p>如果左右子树都不为空 但是左结点和右结点值不相等 返回false</p></li><li><p>如果左右子树不为空 且值相等 则进行判断</p><ul><li><p>判断传入的左子树的左孩子 于 传入的右子树的左孩子 是否镜像</p></li><li><p>判断传入的左子树的右孩子 于 传入的右子树的右孩子 是否镜像</p></li></ul></li><li><p>如果左右子树镜像则返回true</p></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">null</span>&amp;&amp; q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p!=<span class="literal">null</span> &amp;&amp; q==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p==<span class="literal">null</span> &amp;&amp; q!=<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(p.val!=q.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//运行到这里 左子树和右子树不为空且值相等 ，判断左子树的左孩子和右子树的左孩子是否相等</span></span><br><span class="line">        <span class="type">boolean</span> leftCheck=isSameTree(p.left,q.left);</span><br><span class="line">    <span class="comment">//判断左子树的右孩子和右子树的右孩子是否相等</span></span><br><span class="line">        <span class="type">boolean</span> rightCheck=isSameTree(p.right,q.right);</span><br><span class="line"><span class="comment">//判断中结点</span></span><br><span class="line">        <span class="keyword">return</span> leftCheck&amp;&amp; rightCheck;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>本质上还是同时后序遍历两个子树，都是左右中</p>        <h2 id="572-另一棵树的子树"   >          <a href="#572-另一棵树的子树" class="heading-link"><i class="fas fa-link"></i></a><a href="#572-另一棵树的子树" class="headerlink" title="572.另一棵树的子树"></a>572.另一棵树的子树</h2>      <p>给你两棵二叉树 <code>root</code> 和 <code>subRoot</code> 。检验 <code>root</code> 中是否包含和 <code>subRoot</code> 具有相同结构和节点值的子树。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>二叉树 <code>tree</code> 的一棵子树包括 <code>tree</code> 的某个节点和这个节点的所有后代节点。<code>tree</code> 也可以看做它自身的一棵子树。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/subtree-of-another-tree/" >Leetcode.572题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-16"   >          <a href="#第一次做-16" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-16" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;29</p>        <h4 id="第一次代码-18"   >          <a href="#第一次代码-18" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-18" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubtree</span><span class="params">(TreeNode root, TreeNode subRoot)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> leftContains=Contains(root.left,subRoot);</span><br><span class="line">        <span class="type">boolean</span> rightContains=Contains(root.right,subRoot);</span><br><span class="line">        <span class="keyword">return</span> leftContains || rightContains;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">Contains</span><span class="params">(TreeNode node,TreeNode Root)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="literal">null</span>&amp;&amp; Root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(node!=<span class="literal">null</span> &amp;&amp; Root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(node==<span class="literal">null</span> &amp;&amp; Root!=<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node.val!=Root.val)&#123;</span><br><span class="line">            Contains(node.left,Root);</span><br><span class="line">            Contains(node.right,Root);  </span><br><span class="line">        &#125;</span><br><span class="line">        Boolean left=<span class="literal">false</span>;</span><br><span class="line">        Boolean right=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(node.val==Root.val)&#123;</span><br><span class="line">            left=Contains(node.left,Root.left);</span><br><span class="line">            right=Contains(node.right,Root.right);</span><br><span class="line">              </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left || right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-3"   >          <a href="#提交失败-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-3" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE: 输入root&#x3D;[3,4,5,1,2,null,null,null,null,0] subRoot&#x3D;[4,1,2]  输出true 预期输出false</p>        <h4 id="第二次代码-4"   >          <a href="#第二次代码-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-4" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubtree</span><span class="params">(TreeNode root, TreeNode subRoot)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> contains(root,subRoot);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(TreeNode node,TreeNode Root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="literal">null</span> &amp;&amp; Root ==<span class="literal">null</span> ) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(node!=<span class="literal">null</span>&amp;&amp; Root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(node==<span class="literal">null</span> &amp;&amp; Root !=<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node.val!=Root.val)&#123;</span><br><span class="line">            <span class="type">boolean</span> left=contains(node.left,Root);</span><br><span class="line">            <span class="type">boolean</span> right=contains(node.right,Root);</span><br><span class="line">            <span class="keyword">return</span> left|| right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node.val==Root.val)&#123;</span><br><span class="line">            <span class="type">boolean</span> left=contains(node.left,Root.left);</span><br><span class="line">            <span class="type">boolean</span> right=contains(node.right,Root.right);</span><br><span class="line">            <span class="keyword">return</span> left&amp;&amp;right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;   </span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-4"   >          <a href="#提交失败-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-4" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:输入root&#x3D;[1,1] subRoot&#x3D;[1]  输出false 预期输出true</p><p>没做出来</p>        <h4 id="第三次代码-1"   >          <a href="#第三次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-1" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubtree</span><span class="params">(TreeNode root, TreeNode subRoot)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SearchRoot(root,subRoot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">SearchRoot</span><span class="params">(TreeNode root,TreeNode subRoot)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root.val!=subRoot.val)&#123;</span><br><span class="line">            <span class="type">boolean</span> left=SearchRoot(root.left,subRoot);</span><br><span class="line">            <span class="type">boolean</span> right=SearchRoot(root.right,subRoot);</span><br><span class="line">            <span class="keyword">return</span> left || right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> checkAll(root,subRoot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkAll</span><span class="params">(TreeNode root,TreeNode subRoot)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>&amp;&amp;subRoot==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root==<span class="literal">null</span> &amp;&amp; subRoot!=<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root!=<span class="literal">null</span> &amp;&amp; subRoot==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root.val!=subRoot.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> left=checkAll(root.left,subRoot.left);</span><br><span class="line">        <span class="type">boolean</span> right=checkAll(root.right,subRoot.right);</span><br><span class="line">        <span class="keyword">return</span> left&amp;&amp;right;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-5"   >          <a href="#提交失败-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-5" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:[1,1] subRoot&#x3D;[1] 输出false 预期输出true</p>        <h4 id="第四次代码"   >          <a href="#第四次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四次代码" class="headerlink" title="第四次代码"></a>第四次代码</h4>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public boolean isSubtree(TreeNode root, TreeNode subRoot) &#123;</span><br><span class="line">        return SearchRoot(root,subRoot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean SearchRoot(TreeNode root,TreeNode subRoot)&#123;</span><br><span class="line">        if(root==null) return false;</span><br><span class="line"></span><br><span class="line">        if(root.val!=subRoot.val)&#123;</span><br><span class="line">            boolean left=SearchRoot(root.left,subRoot);</span><br><span class="line">            boolean right=SearchRoot(root.right,subRoot);</span><br><span class="line">            return left || right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return checkAll(root,subRoot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean checkAll(TreeNode root,TreeNode subRoot)&#123;</span><br><span class="line">        if(root==null&amp;&amp;subRoot==null) return true;</span><br><span class="line">        else if(root==null &amp;&amp; subRoot!=null) return false;</span><br><span class="line">        else if(root!=null &amp;&amp; subRoot==null) return false;</span><br><span class="line">        else if(root.val!=subRoot.val) return false;</span><br><span class="line"></span><br><span class="line">        boolean left=checkAll(root.left,subRoot.left);</span><br><span class="line">        boolean right=checkAll(root.right,subRoot.right);</span><br><span class="line">        if(!(left)&amp;&amp;right)&#123;</span><br><span class="line">            if(root.left!=null)&#123;</span><br><span class="line">                return SearchRoot(root.left,subRoot);</span><br><span class="line">            &#125;else if(root.right!=null)&#123;</span><br><span class="line">                return SearchRoot(root.right,subRoot);</span><br><span class="line">            &#125;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return left&amp;&amp;right;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-6"   >          <a href="#提交失败-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-6" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:输入root&#x3D;[1,1,1] subRoot&#x3D;[1] 输出false 预期输出true</p>        <h4 id="第五次代码"   >          <a href="#第五次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第五次代码" class="headerlink" title="第五次代码"></a>第五次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubtree</span><span class="params">(TreeNode root, TreeNode subRoot)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SearchRoot(root,subRoot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">SearchRoot</span><span class="params">(TreeNode root,TreeNode subRoot)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root.val!=subRoot.val)&#123;</span><br><span class="line">            <span class="type">boolean</span> left=SearchRoot(root.left,subRoot);</span><br><span class="line">            <span class="type">boolean</span> right=SearchRoot(root.right,subRoot);</span><br><span class="line">            <span class="keyword">return</span> left || right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> checkAll(root,subRoot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkAll</span><span class="params">(TreeNode root,TreeNode subRoot)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>&amp;&amp;subRoot==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root==<span class="literal">null</span> &amp;&amp; subRoot!=<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root!=<span class="literal">null</span> &amp;&amp; subRoot==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root.val!=subRoot.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> left=checkAll(root.left,subRoot.left);</span><br><span class="line">        <span class="type">boolean</span> right=checkAll(root.right,subRoot.right);</span><br><span class="line">        <span class="keyword">if</span>(!(left&amp;&amp;right))&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> SearchRoot(root.left,subRoot);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> SearchRoot(root.right,subRoot);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left&amp;&amp;right;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-7"   >          <a href="#提交失败-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-7" class="headerlink" title="提交失败"></a>提交失败</h5>              <h4 id="第六次代码"   >          <a href="#第六次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第六次代码" class="headerlink" title="第六次代码"></a>第六次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubtree</span><span class="params">(TreeNode root, TreeNode subRoot)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SearchRoot(root,subRoot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">SearchRoot</span><span class="params">(TreeNode root,TreeNode subRoot)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root.val!=subRoot.val)&#123;</span><br><span class="line">            <span class="type">boolean</span> left=SearchRoot(root.left,subRoot);</span><br><span class="line">            <span class="type">boolean</span> right=SearchRoot(root.right,subRoot);</span><br><span class="line">            <span class="keyword">return</span> left || right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> checkAll(root,subRoot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkAll</span><span class="params">(TreeNode root,TreeNode subRoot)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>&amp;&amp;subRoot==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root==<span class="literal">null</span> &amp;&amp; subRoot!=<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root!=<span class="literal">null</span> &amp;&amp; subRoot==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root.val!=subRoot.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> left=checkAll(root.left,subRoot.left);</span><br><span class="line">        <span class="type">boolean</span> right=checkAll(root.right,subRoot.right);</span><br><span class="line">        <span class="keyword">if</span>(!(left&amp;&amp;right))&#123;</span><br><span class="line">            </span><br><span class="line">                <span class="type">boolean</span> newLeft=SearchRoot(root.left,subRoot);</span><br><span class="line">                <span class="type">boolean</span> newRight=SearchRoot(root.right,subRoot);</span><br><span class="line">         </span><br><span class="line">            <span class="keyword">return</span> newLeft||newRight;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left&amp;&amp;right;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-8"   >          <a href="#提交失败-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-8" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:root &#x3D;[4,1,null,1,null,6,7] subRoot&#x3D;[4,1,null,6,7] 输出true 预期输出false</p>        <h4 id="第七次代码"   >          <a href="#第七次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第七次代码" class="headerlink" title="第七次代码"></a>第七次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubtree</span><span class="params">(TreeNode root, TreeNode subRoot)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SearchRoot(root,subRoot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">SearchRoot</span><span class="params">(TreeNode root,TreeNode subRoot)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root.val!=subRoot.val)&#123;</span><br><span class="line">            <span class="type">boolean</span> left=SearchRoot(root.left,subRoot);</span><br><span class="line">            <span class="type">boolean</span> right=SearchRoot(root.right,subRoot);</span><br><span class="line">            <span class="keyword">return</span> left || right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> result=checkAll(root,subRoot);</span><br><span class="line">        <span class="keyword">if</span>(result)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">boolean</span> left=SearchRoot(root.left,subRoot);</span><br><span class="line">            <span class="type">boolean</span> right=SearchRoot(root.right,subRoot);</span><br><span class="line">            <span class="keyword">return</span> left||right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkAll</span><span class="params">(TreeNode root,TreeNode subRoot)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>&amp;&amp;subRoot==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root==<span class="literal">null</span> &amp;&amp; subRoot!=<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root!=<span class="literal">null</span> &amp;&amp; subRoot==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root.val!=subRoot.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> left=checkAll(root.left,subRoot.left);</span><br><span class="line">        <span class="type">boolean</span> right=checkAll(root.right,subRoot.right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> left&amp;&amp;right;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-18"   >          <a href="#提交成功-18" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-18" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-16"   >          <a href="#题解-16" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-16" class="headerlink" title="题解"></a>题解</h3>      <p>利用双递归，一个方法来判断当前树是否是相同的子树，一个方法来判断值相同的情况下结构是否相同</p><p><strong>思路</strong></p><p>方法isSubtree 判断树是否包含子树</p><ul><li><p>判断当前树是否<strong>是</strong>子树subRoot</p></li><li><p>判断左子树是否<strong>包含</strong>子树subRoot</p></li><li><p>判断右子树是否<strong>包含</strong>子树subRoot</p></li></ul><p>方法isSameTree</p><ul><li>判断当前值是否和子树值相同</li><li>判断左子树是否相同</li><li>判断右子树是否相同</li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubtree</span><span class="params">(TreeNode root, TreeNode subRoot)</span> &#123;</span><br><span class="line">    <span class="comment">//如果root或者subRoot只有一个为空 那么就一定root不包含subroot</span></span><br><span class="line">    <span class="keyword">if</span>(root==<span class="literal">null</span> &amp;&amp; subRoot==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span> || subRoot==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">              isSameTree(root,subRoot) <span class="comment">//判断当前树是否是子树subRoot</span></span><br><span class="line">            ||isSubtree(root.left,subRoot) <span class="comment">//判断左子树是否包含subRoot</span></span><br><span class="line">            ||isSubtree(root.right,subRoot); <span class="comment">//判断右子树是否包含subRoot</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSameTree</span><span class="params">(TreeNode root,TreeNode subRoot)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span> &amp;&amp; subRoot==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root==<span class="literal">null</span>|| subRoot==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//只有值相同且左右子树结构也相同才会返回true</span></span><br><span class="line">        <span class="keyword">return</span> root.val==subRoot.val</span><br><span class="line">                &amp;&amp; isSameTree(root.left,subRoot.left) </span><br><span class="line">                &amp;&amp; isSameTree(root.right,subRoot.right); </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="二叉树的最大深度"   >          <a href="#二叉树的最大深度" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h1>      <p>这道题其实在<strong>层序遍历</strong>的时候接触过了，所以这道求二叉树最大深度的做题过程会放在层序遍历的那块中</p>        <h2 id="104-二叉树的最大深度-1"   >          <a href="#104-二叉树的最大深度-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#104-二叉树的最大深度-1" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h2>      <p>给定一个二叉树 <code>root</code> ，返回其最大深度。</p><p>二叉树的 <strong>最大深度</strong> 是指从根节点到最远叶子节点的最长路径上的节点数。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/" >Leetcode.104题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="题解-17"   >          <a href="#题解-17" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-17" class="headerlink" title="题解"></a>题解</h3>              <h4 id="层序遍历"   >          <a href="#层序遍历" class="heading-link"><i class="fas fa-link"></i></a><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h4>      <p>每遍历到一层，深度计数器++即可，然后最后返回计数器的值</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> dept=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> dept;</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            dept++;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="递归遍历"   >          <a href="#递归遍历" class="heading-link"><i class="fas fa-link"></i></a><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h4>      <p>首先我们先要理解，树的高度和树的深度的意义：</p><ul><li>高度： 某个结点到子叶结点的距离</li><li>深度：某个结点到根节点的距离</li></ul><p>如图所示一颗二叉树的深度和高度的关系</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230830094022228.png"  alt="高度和深度关系">      </p><p>那么本题就能知道其实根节点的高度也是最大深度</p><p>我们通过递归来求树的深度的话，我们选用哪种递归方式比较好求？ 答案是<strong>后序遍历</strong>，因为后序遍历是<strong>左右中</strong>，可以获取到左右子树的高度再+1就能知道本结点的高度。</p><p><strong>实现</strong></p><ul><li><p>明确递归的参数以及返回参数：需传入结点，返回高度</p></li><li><p>明确递归的结束条件： 结束当遍历到NULL结点时，返回高度为0  那么就能保证子叶结点高度为1</p></li><li><p>单层遍历要做的： 遍历获取左子树和右子树的高度，然后取最大值+1 就代表本结点的高度</p></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getHight(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHight</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> leftHight=getHight(root.left);   <span class="comment">//遍历左子树</span></span><br><span class="line">        <span class="type">int</span> rightHight=getHight(root.right); <span class="comment">//遍历右子树</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> rootHight=leftHight&gt;rightHight? leftHight + <span class="number">1</span> : rightHight + <span class="number">1</span>; <span class="comment">//处理中结点</span></span><br><span class="line">        <span class="keyword">return</span> rootHight;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p><strong>精简代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getHight(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHight</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>  Math.max(getHight(root.left),getHight(root.right))+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="559-N叉数的最大深度"   >          <a href="#559-N叉数的最大深度" class="heading-link"><i class="fas fa-link"></i></a><a href="#559-N叉数的最大深度" class="headerlink" title="559.N叉数的最大深度"></a>559.N叉数的最大深度</h2>      <p>给定一个 N 叉树，找到其最大深度。</p><p>最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。</p><p>N 叉树输入按层序遍历序列化表示，每组子节点由空值分隔。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/maximum-depth-of-n-ary-tree/" >Leetcode.559(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-17"   >          <a href="#第一次做-17" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-17" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;30</p>        <h4 id="第一次代码-19"   >          <a href="#第一次代码-19" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-19" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        Queue&lt;Node&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> dept=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> dept;</span><br><span class="line"></span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            dept++;</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                Node node=queue.poll();</span><br><span class="line">                <span class="keyword">for</span>(Node n: node.children)&#123;</span><br><span class="line">                    queue.add(n);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-19"   >          <a href="#提交成功-19" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-19" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-18"   >          <a href="#题解-18" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-18" class="headerlink" title="题解"></a>题解</h3>              <h4 id="层序遍历-1"   >          <a href="#层序遍历-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#层序遍历-1" class="headerlink" title="层序遍历"></a>层序遍历</h4>      <p>思路：统计层数，每层将每个结点下的children集合数据添加到队列中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        Queue&lt;Node&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> dept=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> dept;</span><br><span class="line"></span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            dept++;</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                Node node=queue.poll();</span><br><span class="line">                <span class="comment">//添加子结点入队</span></span><br><span class="line">                <span class="keyword">for</span>(Node n: node.children)&#123;</span><br><span class="line">                    queue.add(n);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="递归遍历-1"   >          <a href="#递归遍历-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#递归遍历-1" class="headerlink" title="递归遍历"></a>递归遍历</h4>      <p>思想：当传入一个结点Root，先获取子结点的最大高度，然后最大高度++返回即是本结点高度</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getHight(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHight</span><span class="params">(Node root)</span>&#123;</span><br><span class="line">        <span class="comment">//空节点高度为0</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//叶子结点高度为1</span></span><br><span class="line">        <span class="keyword">if</span>(root.children.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> high=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//统计本结点下的子结点最大高度</span></span><br><span class="line">        <span class="keyword">for</span>(Node n:root.children)&#123;</span><br><span class="line">           high=Math.max(getHight(n),high);</span><br><span class="line">        &#125;</span><br><span class="line">        high++;</span><br><span class="line">        <span class="keyword">return</span> high;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="二叉树的最小深度"   >          <a href="#二叉树的最小深度" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树的最小深度" class="headerlink" title="二叉树的最小深度"></a>二叉树的最小深度</h1>      <p>这道题其实也在<strong>层序遍历</strong>的时候接触过了，所以这道题的做题过程也会放在层序遍历的那块中</p>        <h2 id="111-二叉树的最小深度-1"   >          <a href="#111-二叉树的最小深度-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#111-二叉树的最小深度-1" class="headerlink" title="111.二叉树的最小深度"></a>111.二叉树的最小深度</h2>      <p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p><strong>说明：</strong>叶子节点是指没有子节点的节点。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/" >Leetcode.111题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="题解-19"   >          <a href="#题解-19" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-19" class="headerlink" title="题解"></a>题解</h3>              <h4 id="层序遍历-2"   >          <a href="#层序遍历-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#层序遍历-2" class="headerlink" title="层序遍历"></a>层序遍历</h4>      <p>思路：层序遍历，当找到第一个叶子结点，返回此时层数也就是最小深度</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> dept=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> dept;</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            dept++;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left==<span class="literal">null</span> &amp;&amp; node.right==<span class="literal">null</span>) <span class="keyword">return</span> dept;</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dept;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="递归遍历-2"   >          <a href="#递归遍历-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#递归遍历-2" class="headerlink" title="递归遍历"></a>递归遍历</h4>      <p>思路：我们用后序遍历，求得左右子树的最小高度，然后+1就是每个结点的最小高度</p><p><strong>实现</strong></p><ul><li><p>递归的传入参数以及返回值：传入TreeNode结点，返回值为结点的最小高度</p></li><li><p>递归的结束条件：当root&#x3D;&#x3D;null 说明上一个结点是叶子结点，返回高度0</p></li><li><p>单层递归逻辑：获取左右子树的最小高度，然后最小高度+1就是本结点的最小高度</p><ul><li><p>当左子树为空右子树不为空，那么最小高度应该是右子树的高度+1</p></li><li><p>当左子树不为空右子树为空，那么最小高度应该是左子树的高度+1</p></li><li><p>当左右子树都不为空，那么最小高度是左右子树的最小高度+1</p></li></ul></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHight</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> leftHight=getHight(root.left);</span><br><span class="line">        <span class="type">int</span> rightHight=getHight(root.right);</span><br><span class="line">        ...</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></div></figure><p>获取左子树和右子树的高度，然后进行左右子树的判断 如下图分析本结点的最小高度</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230830111621147.png"  alt="二叉树的最小深度">      </p><p>因此完整代码应该如下</p><p><strong>完整代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> getHight(root);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHight</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> leftHight=getHight(root.left);</span><br><span class="line">       <span class="type">int</span> rightHight=getHight(root.right);</span><br><span class="line">    <span class="comment">//左子树为空 那么本结点最小高度应该是右子树高度+1</span></span><br><span class="line">       <span class="keyword">if</span>(root.left==<span class="literal">null</span>) <span class="keyword">return</span> rightHight+<span class="number">1</span>;</span><br><span class="line">       <span class="comment">//右子树为空 本结点最小高度是左子树高度+1</span></span><br><span class="line">       <span class="keyword">if</span>(root.right==<span class="literal">null</span>) <span class="keyword">return</span> leftHight+<span class="number">1</span>;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//左右子树不为空</span></span><br><span class="line">       <span class="keyword">return</span> leftHight&lt;rightHight? leftHight+<span class="number">1</span>: rightHight+<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure><p><strong>精简代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> getHight(root);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHight</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span>(root.left==<span class="literal">null</span>) <span class="keyword">return</span> getHight(root.right)+<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span>(root.right==<span class="literal">null</span> ) <span class="keyword">return</span> getHight(root.left)+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> Math.min(getHight(root.left),getHight(root.right))+<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="完全二叉树的节点个数"   >          <a href="#完全二叉树的节点个数" class="heading-link"><i class="fas fa-link"></i></a><a href="#完全二叉树的节点个数" class="headerlink" title="完全二叉树的节点个数"></a>完全二叉树的节点个数</h1>      <p>给你一棵 <strong>完全二叉树</strong> 的根节点 <code>root</code> ，求出该树的节点个数。</p><p><span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/7773232?fr=aladdin" >完全二叉树</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 <code>h</code> 层，则该层包含 <code>1~ 2h</code> 个节点。</p>        <h2 id="222-完全二叉树的节点个数"   >          <a href="#222-完全二叉树的节点个数" class="heading-link"><i class="fas fa-link"></i></a><a href="#222-完全二叉树的节点个数" class="headerlink" title="222.完全二叉树的节点个数"></a>222.完全二叉树的节点个数</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/count-complete-tree-nodes/" >Leetcode.222题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-18"   >          <a href="#第一次做-18" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-18" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;31</p>        <h4 id="第一次代码-20"   >          <a href="#第一次代码-20" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-20" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="type">int</span> number=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> number;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                number++;</span><br><span class="line">                TreeNode node= queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-20"   >          <a href="#提交成功-20" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-20" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-20"   >          <a href="#题解-20" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-20" class="headerlink" title="题解"></a>题解</h3>      <p><strong>层序遍历</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="type">int</span> number=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> number;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//结点数++</span></span><br><span class="line">                number++;</span><br><span class="line">                TreeNode node= queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p><strong>递归遍历</strong></p><p><em>普通二叉树统计结点个数利用前中后序都可以(这里代码是后序)</em></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> countTree(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countTree</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> leftCount=countTree(root.left);</span><br><span class="line">        <span class="type">int</span> rightCount=countTree(root.right);</span><br><span class="line">        <span class="keyword">return</span> leftCount+rightCount+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p><em>利用完全二叉树的特性</em></p><p>思路</p><ul><li>因为完全二叉树除了最后一层其他都是满二叉树，所以如果一个二叉树是满二叉树的话 那它的结点个数为2^n -1 个，n为左右子树的深度，而获取左右子树的深度则只需要遍历左子树外侧和右子树外侧</li><li>如果一个树不是满二叉树的话，那么统计左右两边子树的个数</li></ul><p><strong>实现</strong></p><ul><li><p>递归遍历的返回值和参数：返回值是结点数，参数是传入的根节点</p></li><li><p>递归遍历的结束条件：</p><ul><li><p>如果root&#x3D;&#x3D;null 说明是空节点，上一个结点是叶子结点，返回0</p></li><li><p>如果左子树深度和右子树深度一致，说明是满二叉树，返回2^n-1个结点数(利用位运算 2&lt;&lt;n -1)</p><ul><li><p>如何获取左右子树深度</p></li><li><p>左子树深度，定义一个left指向左子树，然后一直往左子树指，当非空深度+1</p></li><li><p>右子树深度，定义一个right指向右子树，然后一直往右子树指，当非空深度+1</p></li></ul></li></ul></li><li><p>单层递归的逻辑：</p><p>说明这棵完全二叉树不是满二叉树，那么统计左右子树的节点个数，最后返回左右子树结点数之和+1</p></li></ul><blockquote><p>这里获取左右子树深度只搜索子树外侧，不搜索内侧</p></blockquote><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230831100628439.png"  alt="统计完全二叉树结点个数">      </p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getNumber(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumber</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="comment">//空结点</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//指向左子树，指向右子树</span></span><br><span class="line">        TreeNode left=root.left;</span><br><span class="line">        TreeNode right=root.right;</span><br><span class="line">        <span class="comment">//统计深度，左指针一直往左子树的外侧指</span></span><br><span class="line">        <span class="type">int</span> leftDept=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> rightDept=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left!=<span class="literal">null</span>) &#123;</span><br><span class="line">            left=left.left;</span><br><span class="line">            leftDept++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//右指针一直往右子树的外侧指</span></span><br><span class="line">        <span class="keyword">while</span>(right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            right=right.right;</span><br><span class="line">            rightDept++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果左右子树深度相同，说明是满二叉树</span></span><br><span class="line">        <span class="keyword">if</span>(leftDept==rightDept) <span class="keyword">return</span> (<span class="number">2</span>&lt;&lt;leftDept)-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不是满二叉树统计左右子树结点数之和+1</span></span><br><span class="line">        <span class="type">int</span> leftNumber=getNumber(root.left);</span><br><span class="line">        <span class="type">int</span> rightNumber=getNumber(root.right);</span><br><span class="line">        <span class="keyword">return</span> leftNumber+rightNumber+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="平衡二叉树"   >          <a href="#平衡二叉树" class="heading-link"><i class="fas fa-link"></i></a><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h1>      <p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>本题中，一棵高度平衡二叉树定义为：</p><blockquote><p>一个二叉树<em>每个节点</em> 的左右两个子树的高度差的绝对值不超过 1 。</p></blockquote>        <h2 id="110-平衡二叉树"   >          <a href="#110-平衡二叉树" class="heading-link"><i class="fas fa-link"></i></a><a href="#110-平衡二叉树" class="headerlink" title="110.平衡二叉树"></a>110.平衡二叉树</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/balanced-binary-tree/" >Leetcode.110题(平衡二叉树)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-19"   >          <a href="#第一次做-19" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-19" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;31</p>        <h4 id="第一次代码-21"   >          <a href="#第一次代码-21" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-21" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> rootBalanced=getHight(root);</span><br><span class="line">        Boolean leftBalanced=isBalanced(root.left);</span><br><span class="line">        Boolean rightBalanced=isBalanced(root.right);</span><br><span class="line">        <span class="keyword">return</span> rootBalanced&lt;=<span class="number">1</span> &amp;&amp; leftBalanced &amp;&amp; rightBalanced;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHight</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> leftHight=getHight(root.left);</span><br><span class="line">        <span class="type">int</span> rightHight=getHight(root.right);</span><br><span class="line">        <span class="type">int</span> absoluteHight=leftHight-rightHight;</span><br><span class="line">        <span class="keyword">return</span> absoluteHight&gt; <span class="number">0</span> ? absoluteHight : -<span class="number">1</span> * absoluteHight;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-9"   >          <a href="#提交失败-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-9" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>无论什么测试案例都会一直返回true，通过debug查找到原来是getHight这个方法有问题，左右子树的深度会一直是0，因为单层逻辑没有对数据进行一个加减，所以获取高度绝对值不能放到getHight方法中，getHight就只做一个获取高度的逻辑就行</p>        <h4 id="第二次代码-5"   >          <a href="#第二次代码-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-5" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> leftHight=getHight(root.left);</span><br><span class="line">        <span class="type">int</span> rightHight=getHight(root.right);</span><br><span class="line">        <span class="type">int</span> rootBalanced=leftHight&gt;rightHight ? </span><br><span class="line">            leftHight-rightHight : rightHight-leftHight;</span><br><span class="line">        Boolean leftBalanced=isBalanced(root.left);</span><br><span class="line">        Boolean rightBalanced=isBalanced(root.right);</span><br><span class="line">        <span class="keyword">return</span> rootBalanced&lt;=<span class="number">1</span> &amp;&amp; leftBalanced &amp;&amp; rightBalanced;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHight</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> leftHight=getHight(root.left);</span><br><span class="line">        <span class="type">int</span> rightHight=getHight(root.right);</span><br><span class="line">        <span class="keyword">return</span> leftHight&gt;rightHight ? leftHight+<span class="number">1</span>:rightHight+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-21"   >          <a href="#提交成功-21" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-21" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-21"   >          <a href="#题解-21" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-21" class="headerlink" title="题解"></a>题解</h3>      <p>思路：我们可以在求高度的时候定义一个值-1，来代表左右子树其中之一不是平衡二叉树，那么整棵树就不会是平衡二叉树，于是-1就一直往根节点传，如果是平衡二叉树就求出当前结点高度，然后传给父节点由父节点进行比较左右子树结点高度是否绝对值是否超过1</p><p><strong>实现</strong></p><ul><li><p>递归遍历的参数和返回值：返回值为高度，传入参数为根节点</p><ul><li>高度如果为-1 那么说明不是平衡二叉树</li><li>高度如果不为-1 那么就说是平衡二叉树</li></ul></li><li><p>递归遍历的结束条件</p><ul><li>如果root&#x3D;&#x3D;null 返回高度0</li><li>如果左&#x2F;右子树高度为-1 则返回-1一直到根节点 代表不是平衡二叉树</li><li>如果左右子树高度差超过1 则返回-1到根节点</li></ul></li><li><p>递归遍历的单层逻辑</p><p>获取左右子树高度，如果左右子树高度不超过1，那么则返回左右子树最大高度+1</p></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">   <span class="comment">//如果传递上来的高度是-1 说明不是平衡二叉树，其他高度都是平衡二叉树</span></span><br><span class="line">       <span class="keyword">return</span> getHight(root)!=-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getHight</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取左子树高度，如果左子树为-1说明左子树不是平衡二叉树往上传递-1 下同</span></span><br><span class="line">        <span class="type">int</span> leftHight=getHight(root.left);</span><br><span class="line">        <span class="keyword">if</span>(leftHight==-<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> rightHight=getHight(root.right);</span><br><span class="line">        <span class="keyword">if</span>(rightHight==-<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">absoluteHight</span></span><br><span class="line">            <span class="operator">=</span>leftHight&gt;rightHight ? leftHight-rightHight: rightHight-leftHight;</span><br><span class="line">        <span class="comment">//如果高度差超过-1 那么就不是平衡二叉树</span></span><br><span class="line">        <span class="keyword">if</span>(absoluteHight&gt;<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//是平衡二叉树往上传高度</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(leftHight,rightHight)+<span class="number">1</span>; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="二叉树的所有路径"   >          <a href="#二叉树的所有路径" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树的所有路径" class="headerlink" title="二叉树的所有路径"></a>二叉树的所有路径</h1>      <p>给你一个二叉树的根节点 <code>root</code> ，按 <strong>任意顺序</strong> ，返回所有从根节点到叶子节点的路径。</p><p><strong>叶子节点</strong> 是指没有子节点的节点。</p>        <h2 id="257-二叉树的所有路径"   >          <a href="#257-二叉树的所有路径" class="heading-link"><i class="fas fa-link"></i></a><a href="#257-二叉树的所有路径" class="headerlink" title="257.二叉树的所有路径"></a>257.二叉树的所有路径</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/binary-tree-paths/" >Leetcode.257题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-20"   >          <a href="#第一次做-20" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-20" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;01</p>        <h4 id="第一次代码-22"   >          <a href="#第一次代码-22" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-22" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">binaryTreePaths</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getSearch(root);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getSearch</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        List&lt;String&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">        </span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(root.val); <span class="comment">//中</span></span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; leftSearch=getSearch(root.left);</span><br><span class="line">        List&lt;String&gt; rightSearch=getSearch(root.right);</span><br><span class="line">        <span class="keyword">if</span>(leftSearch!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(String s:leftSearch)&#123;</span><br><span class="line">                result.add(sb.toString()+<span class="string">&quot;-&gt;&quot;</span>+s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="keyword">if</span>(rightSearch!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(String s:rightSearch)&#123;</span><br><span class="line">                result.add(sb.toString()+<span class="string">&quot;-&gt;&quot;</span>+s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-10"   >          <a href="#提交失败-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-10" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE: 返回值一直是[] ，一直是空集合返回</p>        <h4 id="第二次代码-6"   >          <a href="#第二次代码-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-6" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">binaryTreePaths</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getSearch(root);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getSearch</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        List&lt;String&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> result;</span><br><span class="line">        </span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(root.val); <span class="comment">//中</span></span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; leftSearch=getSearch(root.left);</span><br><span class="line">        List&lt;String&gt; rightSearch=getSearch(root.right);</span><br><span class="line">        <span class="comment">//当左右子树路径有一个不为空则要添加到result中</span></span><br><span class="line">        <span class="keyword">if</span>(leftSearch.size()!=<span class="number">0</span>||rightSearch.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(String s:leftSearch)</span><br><span class="line">            result.add(sb.toString()+<span class="string">&quot;-&gt;&quot;</span>+s);</span><br><span class="line">            <span class="keyword">for</span>(String s:rightSearch)&#123;</span><br><span class="line">            result.add(sb.toString()+<span class="string">&quot;-&gt;&quot;</span>+s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//添加result当前数据</span></span><br><span class="line">            result.add(sb.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-22"   >          <a href="#提交成功-22" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-22" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-22"   >          <a href="#题解-22" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-22" class="headerlink" title="题解"></a>题解</h3>      <p>思路：遍历方式选用前序遍历(中左右)，因为父节点要指向子结点所以采用前序遍历，同时递归的时候要进行一个<strong>回溯</strong>操作。</p><p><strong>实现</strong></p><ul><li><p>选用前序遍历，定义一个result用于装结果集，定义一个path用于表示单层路径</p></li><li><p>pathGet方法用递归</p><ul><li>递归的参数和返回类型：递归参数path：单层路径，result：结果集，root：结点</li><li>递归的结束条件：当root是叶子结点即可以收获结果集，添加路径到result中。也即叶子结点是left&#x3D;&#x3D;null&amp;&amp;right&#x3D;&#x3D;null</li><li>递归的单层逻辑：非叶子结点<ul><li>如果左子树不为空则向左收集路径，递归结束调用remove删除最后一个元素进行回溯</li><li>如果右子树不为空则向右收集路径，递归结束后调用remove删除最后一个元素进行回溯</li></ul></li></ul></li><li><p>注意点</p><ul><li>path要在判断是否为叶子结点之前收集root的数据，因为调用方法时root为叶子结点就结束了，不可能传入空结点所以不用判空。</li><li>当向左向右递归结束之后都要回溯数据：删除path路径的最后一个数据，也即左右子树数据</li><li>path中的数据是存放的数据，如1-&gt;3-&gt;5存放到path中是135，所以要进行一个拼接再添加到结果集中</li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">binaryTreePaths</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="comment">//用于接收结果集</span></span><br><span class="line">        List&lt;String&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//用于表示单层路径</span></span><br><span class="line">    List&lt;String&gt; path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        pathGet(root,path,result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pathGet</span><span class="params">(TreeNode root,List&lt;String&gt; path,List&lt;String&gt; result)</span>&#123;</span><br><span class="line"></span><br><span class="line">        path.add(root.val+<span class="string">&quot;&quot;</span>);<span class="comment">//中</span></span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//如果是叶子结点，所以收获结果集。拼接path中的路径  </span></span><br><span class="line">            StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="comment">//遍历到倒数第二个元素，都用元素+“-&gt;”拼接，最后一个元素最后直接拼接</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;path.size()-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                sb.append(path.get(i)+<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(root.val);</span><br><span class="line">            <span class="comment">//添加到结果集中</span></span><br><span class="line">            result.add(sb.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果左子树不为空，向左收获结果，然后回溯pop掉左子树数据</span></span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            pathGet(root.left,path,result);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//下同 向右子树收集结果结束递归后回溯</span></span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            pathGet(root.right,path,result);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="左叶子之和"   >          <a href="#左叶子之和" class="heading-link"><i class="fas fa-link"></i></a><a href="#左叶子之和" class="headerlink" title="左叶子之和"></a>左叶子之和</h1>      <p>给定二叉树的根节点 <code>root</code> ，返回所有左叶子之和。</p>        <h2 id="404-左叶子之和"   >          <a href="#404-左叶子之和" class="heading-link"><i class="fas fa-link"></i></a><a href="#404-左叶子之和" class="headerlink" title="404.左叶子之和"></a>404.左叶子之和</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/sum-of-left-leaves/" >Leetcode.404题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-21"   >          <a href="#第一次做-21" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-21" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;01</p>        <h4 id="第一次代码-23"   >          <a href="#第一次代码-23" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-23" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">return</span> getSum(root,sum);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(TreeNode root,<span class="type">int</span> sum)</span>&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)</span><br><span class="line">       <span class="keyword">return</span> sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> left=getSum(root.left,sum);</span><br><span class="line">       <span class="type">int</span> right=getSum(root.right,sum);</span><br><span class="line"></span><br><span class="line">       sum+=left+right+ root.left.val;</span><br><span class="line">       <span class="keyword">return</span> sum;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-2"   >          <a href="#提交错误-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-2" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>空指针异常，没有root.left</p>        <h4 id="第二次代码-7"   >          <a href="#第二次代码-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-7" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> getSum(root,sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(TreeNode root,<span class="type">int</span> sum)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">        left=getSum(root.left,sum);</span><br><span class="line">        sum+=root.left.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)</span><br><span class="line">        right=getSum(root.right,sum);</span><br><span class="line"></span><br><span class="line">        sum+=left+right;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-3"   >          <a href="#提交错误-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-3" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>输入[3,9,20,null,null,15,7]，输出33 预期输出24</p>        <h4 id="第三次代码-2"   >          <a href="#第三次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-2" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> getSum(root,sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(TreeNode root,<span class="type">int</span> sum)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">        left=getSum(root.left,sum);</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)</span><br><span class="line">        right=getSum(root.right,sum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            sum+=left+right+root.left.val;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             sum+=left+right;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-4"   >          <a href="#提交错误-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-4" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:root&#x3D;[1,2,3,4,5] ,输出6,预期输出4</p><p>原因是我将非叶子结点的左数据也输出了</p>        <h4 id="第四次代码-1"   >          <a href="#第四次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四次代码-1" class="headerlink" title="第四次代码"></a>第四次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> getSum(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span> &amp;&amp; root.left.left==<span class="literal">null</span> &amp;&amp; root.left.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> sum+=root.left.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)</span><br><span class="line">        left=getSum(root.left);</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)</span><br><span class="line">        right=getSum(root.right);</span><br><span class="line">        <span class="keyword">return</span> sum+=left+right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-5"   >          <a href="#提交错误-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-5" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>原因是在判断root左结点是叶子结点就直接结束了循环，而没有对左右子树做判断</p>        <h4 id="第五次代码-1"   >          <a href="#第五次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第五次代码-1" class="headerlink" title="第五次代码"></a>第五次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> getSum(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span> &amp;&amp; root.left.left==<span class="literal">null</span> &amp;&amp; root.left.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            sum+=root.left.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)</span><br><span class="line">        left=getSum(root.left);</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)</span><br><span class="line">        right=getSum(root.right);</span><br><span class="line">        <span class="keyword">return</span> sum+=left+right;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-23"   >          <a href="#提交成功-23" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-23" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-23"   >          <a href="#题解-23" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-23" class="headerlink" title="题解"></a>题解</h3>      <p><strong>思路</strong>：我们用<strong>后序遍历</strong>可以实现这道题的代码过程，具体的处理结点应该是左叶子结点的父结点</p><blockquote><p>左叶子：为叶子结点，并且是父节点的左孩子。</p></blockquote><p>因为是要统计左叶子之和，所以我们要在父节点处理左叶子之和</p><p><strong>实现</strong>：</p><ul><li>递归条件的参数和返回值：参数root结点，返回值为当前root结点下的左叶子之和</li><li>递归的结束条件<ul><li>如果root为空 则返回0</li><li>如果root是叶子结点则返回0 <em>(root.left&#x3D;&#x3D;null &amp;&amp; root.right&#x3D;&#x3D;null)</em></li></ul></li><li>单层递归的逻辑：<ul><li>统计左孩子的左叶子之和，如果左孩子是左叶子，那么左孩子的左叶子之和就为左孩子的值</li><li>统计右孩子的左叶子之和</li><li>当前结点的左叶子之和为左右结点的左叶子之和的和</li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> getSum(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="comment">//如果是空节点则返回0  如果是叶子结点则返回0</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span>&amp;&amp; root.right==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历左子树统计左叶子之和</span></span><br><span class="line">        <span class="type">int</span> leftNum=getSum(root.left);</span><br><span class="line">        <span class="comment">//如果当前结点的左孩子是叶子结点 则当前结点的左叶子之和就是左孩子的数值</span></span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span> &amp;&amp; root.left.left==<span class="literal">null</span> &amp;&amp; root.left.right==<span class="literal">null</span>) </span><br><span class="line">            leftNum=root.left.val;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//统计右子树的左叶子之和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rightNum</span> <span class="operator">=</span>getSum(root.right);</span><br><span class="line">        <span class="comment">//返回左右子树的左叶子之和的和 作为当前根节点左叶子之和</span></span><br><span class="line">        <span class="keyword">return</span> leftNum+rightNum;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="找树左下角的值"   >          <a href="#找树左下角的值" class="heading-link"><i class="fas fa-link"></i></a><a href="#找树左下角的值" class="headerlink" title="找树左下角的值"></a>找树左下角的值</h1>      <p>给定一个二叉树的 <strong>根节点</strong> <code>root</code>，请找出该二叉树的 <strong>最底层 最左边</strong> 节点的值。</p><p>假设二叉树中至少有一个节点。</p>        <h2 id="513-找树左下角的值"   >          <a href="#513-找树左下角的值" class="heading-link"><i class="fas fa-link"></i></a><a href="#513-找树左下角的值" class="headerlink" title="513.找树左下角的值"></a>513.找树左下角的值</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/find-bottom-left-tree-value/" >Leetcode.513(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-22"   >          <a href="#第一次做-22" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-22" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;02</p>        <h4 id="第一次代码-24"   >          <a href="#第一次代码-24" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-24" class="headerlink" title="第一次代码"></a>第一次代码</h4>              <h5 id="层序遍历-3"   >          <a href="#层序遍历-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#层序遍历-3" class="headerlink" title="层序遍历"></a>层序遍历</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">//层序遍历，当最后一层时第一个结点就是树最左下角的值</span></span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            ArrayList&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(queue.size()==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//最后一层</span></span><br><span class="line">                <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root.val;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="提交成功-24"   >          <a href="#提交成功-24" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-24" class="headerlink" title="提交成功"></a>提交成功</h6>              <h5 id="递归遍历-3"   >          <a href="#递归遍历-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#递归遍历-3" class="headerlink" title="递归遍历"></a>递归遍历</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>) <span class="keyword">return</span> root.val;</span><br><span class="line">        List&lt;String&gt; path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        getLeftLeaves(root,path,result);</span><br><span class="line">        <span class="keyword">if</span>(result.size()==<span class="number">0</span>) <span class="keyword">return</span> root.val;</span><br><span class="line">        <span class="type">int</span> max=result.get(<span class="number">0</span>).charAt(result.get(<span class="number">0</span>).length()-<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;result.size();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(result.get(i).charAt(result.get(i).length()-<span class="number">1</span>)&gt;max) index=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result.get(index).charAt(result.get(index).length()-<span class="number">1</span>) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getLeftLeaves</span><span class="params">(TreeNode root,List&lt;String&gt; path,List&lt;String&gt; result)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        path.add(root.val+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span> &amp;&amp; root.left.left==<span class="literal">null</span> &amp;&amp; root.left.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span>(String s: path)&#123;</span><br><span class="line">                sb.append(s+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(root.left.val+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            result.add(sb.toString());</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        getLeftLeaves(root.left,path,result);</span><br><span class="line">        getLeftLeaves(root.right,path,result);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="提交失败-11"   >          <a href="#提交失败-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-11" class="headerlink" title="提交失败"></a>提交失败</h6>      <p>CASE:root&#x3D;[0,-1] 输出1 预期输出-1</p><p>原因是符号也占了一个字符，所以我输出的是最后的字符只有1</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        getLeftLeaves(root,path,result);</span><br><span class="line">        <span class="keyword">if</span>(result.size()==<span class="number">0</span>) <span class="keyword">return</span> root.val;</span><br><span class="line">        <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;result.size();i++)&#123;</span><br><span class="line">            String s=result.get(i);</span><br><span class="line">            String[] arr=s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(arr.length&gt;len)&#123;</span><br><span class="line">                index=i;</span><br><span class="line">                len=arr.length;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String s=result.get(index);</span><br><span class="line">        String[] arr=s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(arr[arr.length-<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getLeftLeaves</span><span class="params">(TreeNode root,List&lt;String&gt; path,List&lt;String&gt; result)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        path.add(root.val+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span> &amp;&amp; root.left.left==<span class="literal">null</span> &amp;&amp; root.left.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span>(String s: path)&#123;</span><br><span class="line">                sb.append(s+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(root.left.val);</span><br><span class="line">            result.add(sb.toString());</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        getLeftLeaves(root.left,path,result);</span><br><span class="line">        getLeftLeaves(root.right,path,result);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="提交失败-12"   >          <a href="#提交失败-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-12" class="headerlink" title="提交失败"></a>提交失败</h6>      <p>CASE:root&#x3D;[1,null,-1] 输出1，预期输出-1</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; path=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; result=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        getLeftLeaves(root,path,result);</span><br><span class="line">        <span class="keyword">if</span>(result.size()==<span class="number">0</span>) <span class="keyword">return</span> root.val;</span><br><span class="line">        <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;result.size();i++)&#123;</span><br><span class="line">            String s=result.get(i);</span><br><span class="line">            String[] arr=s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(arr.length&gt;len)&#123;</span><br><span class="line">                index=i;</span><br><span class="line">                len=arr.length;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String s=result.get(index);</span><br><span class="line">        String[] arr=s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(arr[arr.length-<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getLeftLeaves</span><span class="params">(TreeNode root,List&lt;String&gt; path,List&lt;String&gt; result)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">        path.add(root.val+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span> &amp;&amp; root.left.left==<span class="literal">null</span> &amp;&amp; root.left.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span>(String s: path)&#123;</span><br><span class="line">                sb.append(s+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(root.left.val);</span><br><span class="line">            result.add(sb.toString());</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            getLeftLeaves(root.left,path,result);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">              getLeftLeaves(root.right,path,result);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="提交失败-13"   >          <a href="#提交失败-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-13" class="headerlink" title="提交失败"></a>提交失败</h6>              <h3 id="题解-24"   >          <a href="#题解-24" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-24" class="headerlink" title="题解"></a>题解</h3>      <p>找到树最左下角的值</p><blockquote><p>树最左下角的值，最底层最靠左的结点数值</p></blockquote><p>树最左下角的结点不一定是左孩子 ，例如</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230902092036708.png"  alt="树最左下角的结点">      </p><p>这道题用层序遍历就能秒了。</p>        <h4 id="层序遍历-4"   >          <a href="#层序遍历-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#层序遍历-4" class="headerlink" title="层序遍历"></a>层序遍历</h4>      <p>思路： 利用queue做层序遍历，定义一个list用于接收每一层的结点，如果队列为空就说明这是最后一层。返回list第一个数值</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">//层序遍历，当最后一层时第一个结点就是树最左下角的结点</span></span><br><span class="line">        Queue&lt;TreeNode&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> size=queue.size();</span><br><span class="line">            ArrayList&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">while</span>(size--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode node=queue.poll();</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="keyword">if</span>(node.left!=<span class="literal">null</span>) queue.add(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right!=<span class="literal">null</span>) queue.add(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(queue.size()==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//最后一层，list中第一个元素就是最左下角的结点</span></span><br><span class="line">                <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root.val;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="递归遍历-4"   >          <a href="#递归遍历-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#递归遍历-4" class="headerlink" title="递归遍历"></a>递归遍历</h4>      <p>思路：我们用一个全局变量depth记录深度。当达到新的深度的时候就记录一下结点的数据。最后返回result就是最深深度时第一个记录的结点数值</p><p><strong>实现</strong></p><ul><li><p>定义一个max 用于统计深度，定义一个result用于记录最深深度结点的值</p><ul><li><p>例如树有三层</p><blockquote><p>​             5</p><p>​↙    ↘</p><p>​1               2</p><p>​                   ↙    ↘       </p><p>​  3              4</p></blockquote></li><li><p>我们用前中后序遍历都可以，只要<strong>左结点先于右节点遍历到</strong></p></li><li><p>当遍历到结点1的时候 记录此时最大深度为1 记录结点的值为1 。因此遍历到2的时候不会更新result数值</p></li><li><p>当遍历到结点3的时候 记录此时最大深度为2  记录结点的值为3。 </p></li><li><p><del>也即当新的一层只会统计最左(第一个遍历到的结点)结点数值</del></p></li><li><p>只要保证左结点优于右节点遍历</p></li></ul></li><li><p>递归函数的返回值和参数：</p><ul><li><p>返回值为void，结点数据都保存到全局变量result和max中。</p></li><li><p>参数root：此时遍历的结点</p></li><li><p>参数depth：当前结点深度</p></li></ul></li><li><p>递归函数的结束条件：</p><p>当遍历到叶子结点则统计深度，更新数值</p></li><li><p>单层递归逻辑：</p><ul><li>如果左结点非空，向左递归遍历。传入++当前深度，结束递归后，<strong>回溯</strong>当前深度也即depth–</li><li>如果右节点非空，向右遍历递归。传入++当前深度，结束递归后，<strong>回溯</strong>当前深度也即depth–</li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">//全局变量max，最深深度。 全局变量result 用于记录最深深度的结点的值</span></span><br><span class="line">    <span class="type">int</span> max=Integer.MAX_VALUE+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findBottomLeftValue</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        treeBottomLeft(root,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">treeBottomLeft</span><span class="params">(TreeNode node,<span class="type">int</span> depth)</span>&#123;</span><br><span class="line">        <span class="comment">//当遍历到叶子结点</span></span><br><span class="line">        <span class="keyword">if</span>(node.left==<span class="literal">null</span> &amp;&amp;node.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//判断深度，如果深度大于最深深度则更新数据</span></span><br><span class="line">            <span class="keyword">if</span>(depth&gt;max)&#123;</span><br><span class="line">                max=depth;</span><br><span class="line">                result=node.val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果左子树非空，向左遍历。结束遍历回溯当前深度</span></span><br><span class="line">        <span class="keyword">if</span>(node.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            depth++;</span><br><span class="line">            treeBottomLeft(node.left,depth);</span><br><span class="line">            depth--;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果右子树非空，向右遍历。结束遍历回溯当前深度</span></span><br><span class="line">        <span class="keyword">if</span>(node.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            depth++;</span><br><span class="line">            treeBottomLeft(node.right,depth);</span><br><span class="line">            depth--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="路径总和"   >          <a href="#路径总和" class="heading-link"><i class="fas fa-link"></i></a><a href="#路径总和" class="headerlink" title="路径总和"></a>路径总和</h1>      <p>给你二叉树的根节点 <code>root</code> 和一个表示目标和的整数 <code>targetSum</code> 。判断该树中是否存在 <strong>根节点到叶子节点</strong> 的路径，这条路径上所有节点值相加等于目标和 <code>targetSum</code> 。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>        <h2 id="112-路径总和"   >          <a href="#112-路径总和" class="heading-link"><i class="fas fa-link"></i></a><a href="#112-路径总和" class="headerlink" title="112.路径总和"></a>112.路径总和</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/path-sum/" >Leetcode.112题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-23"   >          <a href="#第一次做-23" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-23" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;02</p>        <h4 id="第一次代码-25"   >          <a href="#第一次代码-25" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-25" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> SearchTreeSon(root,targetSum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">SearchTreeSon</span><span class="params">(TreeNode root,<span class="type">int</span> targetSum)</span>&#123;</span><br><span class="line">        sum+=root.val;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum==targetSum)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> left=<span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> right=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            sum+=root.left.val;</span><br><span class="line">            left=SearchTreeSon(root.left,targetSum);</span><br><span class="line">            sum-=root.left.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            sum+=root.right.val;</span><br><span class="line">            right=SearchTreeSon(root.right,targetSum);</span><br><span class="line">            sum-=root.right.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left || right;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-14"   >          <a href="#提交失败-14" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-14" class="headerlink" title="提交失败"></a>提交失败</h5>              <h4 id="第二次提交"   >          <a href="#第二次提交" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次提交" class="headerlink" title="第二次提交"></a>第二次提交</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> SearchTreeSon(root,targetSum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">SearchTreeSon</span><span class="params">(TreeNode root,<span class="type">int</span> targetSum)</span>&#123;</span><br><span class="line">        sum+=root.val;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum==targetSum)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> left=<span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> right=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            left=SearchTreeSon(root.left,targetSum);</span><br><span class="line">            sum-=root.left.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            right=SearchTreeSon(root.right,targetSum);</span><br><span class="line">            sum-=root.right.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left || right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-25"   >          <a href="#提交成功-25" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-25" class="headerlink" title="提交成功"></a>提交成功</h5>              <h4 id="题解-25"   >          <a href="#题解-25" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-25" class="headerlink" title="题解"></a>题解</h4>      <p>思路：这道题用递归做，遍历顺序可以是前中后序，这里我的题解是用的后序的方法，用一个全局变量sum统计当前结点的路径之和</p><p><strong>实现</strong></p><ul><li><p>定义一个sum统计当前路径之和</p></li><li><p>递归的参数和返回值：</p><ul><li>参数root：遍历的结点</li><li>参数targetSum：传入的目标路径总和</li><li>返回值：布尔类型，返回是否找到路径之和相等的叶子结点</li></ul></li><li><p>递归的结束条件：</p><p>当遍历到叶子结点的时候判断路径是否相等，如果相等返回true表示找到结点，如果不相等则返回false</p></li><li><p>单层递归的逻辑：(左右中)</p><ul><li>当左结点不为空，向左搜寻结点，当左孩子遍历结束要<strong>回溯</strong>当前结点路径 (左)</li><li>当右孩子不为空，向右搜寻结点，当右孩子遍历结束要回溯当前结点路径 (右)</li><li>当左孩子或者右孩子遍历中有一个返回true则返回true        (中)</li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"> <span class="comment">//全局变量sum用于记录当前结点的路径之和</span></span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> SearchTreeSon(root,targetSum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">SearchTreeSon</span><span class="params">(TreeNode root,<span class="type">int</span> targetSum)</span>&#123;</span><br><span class="line">        <span class="comment">//添加当前结点路径</span></span><br><span class="line">        sum+=root.val;</span><br><span class="line"><span class="comment">//如果当前结点是叶子结点，判断路径和目标路径是否相等，如果相等返回true，反之返回false</span></span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum==targetSum)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> left=<span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> right=<span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//当左孩子不为空</span></span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;  <span class="comment">//左</span></span><br><span class="line">            left=SearchTreeSon(root.left,targetSum);</span><br><span class="line">            <span class="comment">//回溯到当前结点路径</span></span><br><span class="line">            <span class="comment">//因为向左孩子遍历的时候递归中sum+=root.val        (遍历中是root是当前结点的左孩子)</span></span><br><span class="line">            <span class="comment">//所以结束递归sum-=root.left.val  (遍历结束后root是当前结点)</span></span><br><span class="line">            sum-=root.left.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//下同 当右孩子不为空</span></span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123; <span class="comment">//右</span></span><br><span class="line">            right=SearchTreeSon(root.right,targetSum);</span><br><span class="line">            sum-=root.right.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left || right; <span class="comment">//中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="从中序与后序遍历序列构造二叉树"   >          <a href="#从中序与后序遍历序列构造二叉树" class="heading-link"><i class="fas fa-link"></i></a><a href="#从中序与后序遍历序列构造二叉树" class="headerlink" title="从中序与后序遍历序列构造二叉树"></a>从中序与后序遍历序列构造二叉树</h1>      <p>给定两个整数数组 <code>inorder</code> 和 <code>postorder</code> ，其中 <code>inorder</code> 是二叉树的中序遍历， <code>postorder</code> 是同一棵树的后序遍历，请你构造并返回这颗 <em>二叉树</em> 。</p>        <h2 id="106-从中序与后序遍历序列构造二叉树"   >          <a href="#106-从中序与后序遍历序列构造二叉树" class="heading-link"><i class="fas fa-link"></i></a><a href="#106-从中序与后序遍历序列构造二叉树" class="headerlink" title="106.从中序与后序遍历序列构造二叉树"></a>106.从中序与后序遍历序列构造二叉树</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/" >Leetcode.106题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-24"   >          <a href="#第一次做-24" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-24" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;03</p>        <h4 id="第一次代码-26"   >          <a href="#第一次代码-26" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-26" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] inorder, <span class="type">int</span>[] postorder)</span> &#123;</span><br><span class="line">        <span class="type">int</span> root=postorder[postorder.length-<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> rootIndex=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;inorder.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root==inorder[i])</span><br><span class="line">            &#123;</span><br><span class="line">                rootIndex=i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rootIndex==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//没有左子树</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] leftInorder=<span class="keyword">new</span> <span class="title class_">int</span>[rootIndex];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;rootIndex;i++)&#123;</span><br><span class="line">            leftInorder[i]=inorder[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> postNumber=inorder.length-rootIndex-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(postNumber==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//没有右子树</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] rightPostorder=<span class="keyword">new</span> <span class="title class_">int</span>[postNumber];</span><br><span class="line">        <span class="type">int</span> j=postorder.length-<span class="number">1</span>;</span><br><span class="line">        j--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=postNumber-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            rightPostorder[i]=postorder[j--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] rightInorder=<span class="keyword">new</span> <span class="title class_">int</span>[postNumber];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;postNumber;i++)&#123;</span><br><span class="line">            rightInorder[i]=inorder[++rootIndex];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] leftPostorder=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(postorder.length-<span class="number">1</span>-postNumber&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            leftPostorder=<span class="keyword">new</span> <span class="title class_">int</span>[postorder.length-<span class="number">1</span>-postNumber];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;leftPostorder.length;i++)&#123;</span><br><span class="line">            leftPostorder[i]=postorder[i];</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(leftInorder.length==<span class="number">0</span> &amp;&amp;rightInorder.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(root,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(leftInorder.length==<span class="number">0</span>||leftPostorder.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(root,<span class="literal">null</span>,buildTree(rightInorder,rightPostorder));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rightInorder.length==<span class="number">0</span>||rightPostorder.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(root,buildTree(leftInorder,leftPostorder),<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(root,buildTree(leftInorder,leftPostorder),buildTree(rightInorder,rightPostorder));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-6"   >          <a href="#提交错误-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-6" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:inorder&#x3D;[2,1] postorder&#x3D;[2,1] 输出[1,null,2] 预期输出[1,2]</p><p>原因：确定根节点索引位置的时候没有遍历inorder数组的最后一个元素</p>        <h4 id="第二次代码-8"   >          <a href="#第二次代码-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-8" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] inorder, <span class="type">int</span>[] postorder)</span> &#123;</span><br><span class="line">        <span class="type">int</span> root=postorder[postorder.length-<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> rootIndex=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//找到根节点索引位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;inorder.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root==inorder[i])</span><br><span class="line">            &#123;</span><br><span class="line">                rootIndex=i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rootIndex==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//没有左子树</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//左结点中序遍历数组</span></span><br><span class="line">        <span class="type">int</span>[] leftInorder=<span class="keyword">new</span> <span class="title class_">int</span>[rootIndex];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;rootIndex;i++)&#123;</span><br><span class="line">            leftInorder[i]=inorder[i];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//右子树个数</span></span><br><span class="line">        <span class="type">int</span> postNumber=inorder.length-rootIndex-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(postNumber==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//没有右子树</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//右子树后序遍历数组</span></span><br><span class="line">        <span class="type">int</span>[] rightPostorder=<span class="keyword">new</span> <span class="title class_">int</span>[postNumber];</span><br><span class="line">        <span class="type">int</span> j=postorder.length-<span class="number">1</span>;</span><br><span class="line">        j--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=postNumber-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            rightPostorder[i]=postorder[j--];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//右子树中序遍历数组</span></span><br><span class="line">        <span class="type">int</span>[] rightInorder=<span class="keyword">new</span> <span class="title class_">int</span>[postNumber];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;postNumber;i++)&#123;</span><br><span class="line">            rightInorder[i]=inorder[++rootIndex];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//左子树后序遍历数组</span></span><br><span class="line">        <span class="type">int</span>[] leftPostorder=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(postorder.length-<span class="number">1</span>-postNumber&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            leftPostorder=<span class="keyword">new</span> <span class="title class_">int</span>[postorder.length-<span class="number">1</span>-postNumber];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;leftPostorder.length;i++)&#123;</span><br><span class="line">            leftPostorder[i]=postorder[i];</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//左子树和右子树为空 是叶子结点</span></span><br><span class="line">        <span class="keyword">if</span>(leftInorder.length==<span class="number">0</span> &amp;&amp;rightInorder.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(root,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//左子树为空</span></span><br><span class="line">        <span class="keyword">if</span>(leftInorder.length==<span class="number">0</span>||leftPostorder.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(root,<span class="literal">null</span>,buildTree(rightInorder,rightPostorder));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//右子树为空</span></span><br><span class="line">        <span class="keyword">if</span>(rightInorder.length==<span class="number">0</span>||rightPostorder.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(root,buildTree(leftInorder,leftPostorder),<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//左右子树都不为空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(root,buildTree(leftInorder,leftPostorder),buildTree(rightInorder,rightPostorder));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-26"   >          <a href="#提交成功-26" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-26" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-26"   >          <a href="#题解-26" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-26" class="headerlink" title="题解"></a>题解</h3>      <p>思路：因为中序是左中右，而后序是左右中。所以我们可以通过中结点的位置来切割左右区间，左右区间获得了就能知道左右子树的中序和后序，然后递归调用即可创建树</p><p><strong>实现</strong></p><ul><li><p>先确定中结点位置，因为后序是<strong>左右中</strong>，所以后序数组的最后一个结点就一定是根结点</p></li><li><p>通过根结点的数值可以去遍历中序数组找到根节点位置，中序数组根结点前的就是左子树结果，根结点后的是右子树中序结果</p></li><li><p>通过左子树区间长度可以去切割后序数组，后序数组前面左子树区间个数就是左子树的后序结果，然后剩下就是右子树区间以及根节点</p></li><li><p>递归条件的参数和返回值</p><ul><li>参数inorder数组：中序数组</li><li>参数postorder数组：后序数组</li><li>返回值TreeNode：构建的树</li></ul></li><li><p>递归的结束条件</p><p>当postorder数组或者inorder数组长度为0 说明是空结点返回null</p></li><li><p>单层递归的逻辑</p></li><li><ul><li>找到根结点位置</li><li>切割中序数组，获取左子树和右子树区间</li><li>切割后序数组，通过左子树区间长度可以找到后序数组中左区间个数，获取左右区间</li><li>返回结点</li></ul></li></ul><blockquote><p>注意点</p></blockquote><p><em>1.数组都是合法的，也即中序和后序遍历的长度一致</em></p><p><em>2.当后序数组长度为1，那么说明是根节点也是叶子结点 可以直接返回root没有左右子树</em></p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] inorder, <span class="type">int</span>[] postorder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> inAndPostbuild(inorder,postorder);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">inAndPostbuild</span><span class="params">(<span class="type">int</span>[] inorder,<span class="type">int</span>[] postorder)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(postorder.length==<span class="number">0</span>||inorder.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//后序确定根节点</span></span><br><span class="line">        <span class="type">int</span> rootVal=postorder[postorder.length-<span class="number">1</span>];</span><br><span class="line">        TreeNode root=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootVal);</span><br><span class="line">        <span class="comment">//根节点是叶子结点 则直接返回根节点(没有左右子树)</span></span><br><span class="line">        <span class="keyword">if</span>(inorder.length==<span class="number">1</span>||postorder.length==<span class="number">1</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;index&lt;inorder.length;index++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(inorder[index]==rootVal) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//运行到这里说明有左子树或者右子树或者左右子树</span></span><br><span class="line">        <span class="comment">//左孩子的中序和后序</span></span><br><span class="line">        <span class="type">int</span>[] leftIn=<span class="keyword">new</span> <span class="title class_">int</span>[index];</span><br><span class="line">        <span class="type">int</span>[] leftPost=<span class="keyword">new</span> <span class="title class_">int</span>[leftIn.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;index;j++)&#123;</span><br><span class="line">            leftIn[j]=inorder[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;j&lt;leftPost.length;j++)&#123;</span><br><span class="line">            leftPost[j]=postorder[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//右孩子的中序和后序</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] rightIn=<span class="keyword">new</span> <span class="title class_">int</span>[inorder.length-<span class="number">1</span>-index];</span><br><span class="line">        <span class="type">int</span>[] rightPost=<span class="keyword">new</span> <span class="title class_">int</span>[rightIn.length];</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;rightIn.length;i++,index++)&#123;</span><br><span class="line">            rightIn[i]=inorder[index+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;rightPost.length;i++)&#123;</span><br><span class="line">            rightPost[i]=postorder[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        root.left=inAndPostbuild(leftIn,leftPost);</span><br><span class="line">        root.right=inAndPostbuild(rightIn,rightPost);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h3>      <p>我自己在做这道题目的时候，在切割中序的左孩子右孩子以及切割后序的左区间和右区间的思维较为混乱，切割后序的左区间可以通过中序切出来的左子树区间大小来切割。</p><p>并且在递归的结束条件我写的比较混乱，但总体来说是思维没错的。</p><p>总体来说可以通过根节点的位置来切割左右区间，而切割中序的时候是用根节点位置，切割后序的时候是通过左孩子区间的大小切割</p><p>递归结束为:当后序数组为空或者中序数组为空则代表空节点直接返回null </p>        <h2 id="105-从前序与中序遍历序列构造二叉树"   >          <a href="#105-从前序与中序遍历序列构造二叉树" class="heading-link"><i class="fas fa-link"></i></a><a href="#105-从前序与中序遍历序列构造二叉树" class="headerlink" title="105.从前序与中序遍历序列构造二叉树"></a>105.从前序与中序遍历序列构造二叉树</h2>      <p>给定两个整数数组 <code>preorder</code> 和 <code>inorder</code> ，其中 <code>preorder</code> 是二叉树的<strong>先序遍历</strong>， <code>inorder</code> 是同一棵树的<strong>中序遍历</strong>，请构造二叉树并返回其根节点。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/" >Leetcode.105题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-25"   >          <a href="#第一次做-25" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-25" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;03</p>        <h4 id="第一次代码-27"   >          <a href="#第一次代码-27" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-27" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> prexAndinBuild(preorder,inorder);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">prexAndinBuild</span><span class="params">(<span class="type">int</span>[] preorder,<span class="type">int</span>[] inorder)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preorder.length==<span class="number">0</span> ||inorder.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> rootVal=preorder[<span class="number">0</span>];</span><br><span class="line">        TreeNode root=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootVal);</span><br><span class="line">        <span class="keyword">if</span>(preorder.length==<span class="number">1</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">//运行到这里说明起码有左子树或者右子树或者左右子树</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;index&lt;inorder.length;index++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(inorder[index]==rootVal) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] leftIn=<span class="keyword">new</span> <span class="title class_">int</span>[index];</span><br><span class="line">        <span class="type">int</span>[] leftPrex=<span class="keyword">new</span> <span class="title class_">int</span>[leftIn.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;index;i++)&#123;</span><br><span class="line">            leftIn[i]=inorder[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>,i=<span class="number">0</span>;i&lt;leftPrex.length;i++,j++)&#123;</span><br><span class="line">            leftPrex[i]=preorder[j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] rightIn=<span class="keyword">new</span> <span class="title class_">int</span>[inorder.length-index-<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span>[] rightPrex=<span class="keyword">new</span> <span class="title class_">int</span>[rightIn.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;rightIn.length;i++,index++)&#123;</span><br><span class="line">            rightIn[i]=inorder[index+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=leftIn.length+<span class="number">1</span>,i=<span class="number">0</span>;j&lt;rightPrex.length;i++,j++)&#123;</span><br><span class="line">            rightPrex[i]=preorder[j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root.left=prexAndinBuild(leftPrex,leftIn);</span><br><span class="line">        root.right=prexAndinBuild(rightPrex,rightIn);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-15"   >          <a href="#提交失败-15" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-15" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:preorder&#x3D;[3,9,20,15,7] inorder&#x3D;[9,3,15,20,7] 输出[3,9,20,null,null,0,0] 预期输出[3,9,20,null,null,15,7]</p><p>原因是右子树的前序的时候循环条件写错了，应该是i&lt;rightPrex.length 改了就好了</p>        <h4 id="第二次代码-9"   >          <a href="#第二次代码-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-9" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> prexAndinBuild(preorder,inorder);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">prexAndinBuild</span><span class="params">(<span class="type">int</span>[] preorder,<span class="type">int</span>[] inorder)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preorder.length==<span class="number">0</span> ||inorder.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> rootVal=preorder[<span class="number">0</span>];</span><br><span class="line">        TreeNode root=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootVal);</span><br><span class="line">        <span class="keyword">if</span>(preorder.length==<span class="number">1</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">//运行到这里说明起码有左子树或者右子树或者左右子树</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;index&lt;inorder.length;index++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(inorder[index]==rootVal) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] leftIn=<span class="keyword">new</span> <span class="title class_">int</span>[index];</span><br><span class="line">        <span class="type">int</span>[] leftPrex=<span class="keyword">new</span> <span class="title class_">int</span>[leftIn.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;index;i++)&#123;</span><br><span class="line">            leftIn[i]=inorder[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>,i=<span class="number">0</span>;i&lt;leftPrex.length;i++,j++)&#123;</span><br><span class="line">            leftPrex[i]=preorder[j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] rightIn=<span class="keyword">new</span> <span class="title class_">int</span>[inorder.length-index-<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span>[] rightPrex=<span class="keyword">new</span> <span class="title class_">int</span>[rightIn.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;rightIn.length;i++,index++)&#123;</span><br><span class="line">            rightIn[i]=inorder[index+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=leftIn.length+<span class="number">1</span>,i=<span class="number">0</span>;i&lt;rightPrex.length;i++,j++)&#123;</span><br><span class="line">            rightPrex[i]=preorder[j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root.left=prexAndinBuild(leftPrex,leftIn);</span><br><span class="line">        root.right=prexAndinBuild(rightPrex,rightIn);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-27"   >          <a href="#提交成功-27" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-27" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-27"   >          <a href="#题解-27" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-27" class="headerlink" title="题解"></a>题解</h3>      <p>思路：这道题和上面中序后序确认二叉树一样，主要是找到中结点的位置，然后切割前序和中序数组，分别获取左区间和右区间</p><p><strong>实现</strong></p><ul><li><p>先确定中结点位置，因为前序是<strong>中左右</strong>，所以前序数组的第一个结点就一定是根结点</p></li><li><p>通过根结点的数值可以去遍历中序数组找到根节点位置，中序数组根结点前的就是左子树结果，根结点后的是右子树中序结果</p></li><li><p>通过左子树区间长度可以去切割前序数组，前序数组从索引1开始<del>(因为索引0是根节点)</del>前面左子树区间个数就是左子树的前序结果，然后剩下就是右子树区间</p></li><li><p>递归条件的参数和返回值</p><ul><li>参数inorder数组：中序数组</li><li>参数preorder数组：前序数组</li><li>返回值TreeNode：构建的树</li></ul></li><li><p>递归的结束条件</p><p>当preorder数组或者inorder数组长度为0 说明是空结点返回null</p></li><li><p>单层递归的逻辑</p></li><li><ul><li>找到根结点位置</li><li>切割中序数组，获取左子树和右子树区间</li><li>切割前序数组，通过左子树区间长度可以找到前序数组中左区间个数，获取左右区间</li><li>返回结点</li></ul></li></ul><blockquote><p>注意点</p></blockquote><p><em>1.数组都是合法的，也即前序和中序遍历的长度一致</em></p><p><em>2.当前序数组长度为1，那么说明是根节点也是叶子结点 可以直接返回root没有左右子树</em></p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> prexAndinBuild(preorder,inorder);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">prexAndinBuild</span><span class="params">(<span class="type">int</span>[] preorder,<span class="type">int</span>[] inorder)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preorder.length==<span class="number">0</span> ||inorder.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> rootVal=preorder[<span class="number">0</span>];</span><br><span class="line">        TreeNode root=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootVal);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果前序数组长度只有1说明根节点是叶子结点</span></span><br><span class="line">        <span class="keyword">if</span>(preorder.length==<span class="number">1</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">//运行到这里说明起码有左子树或者右子树或者左右子树</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;index&lt;inorder.length;index++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(inorder[index]==rootVal) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取左子树的前序和中序数组</span></span><br><span class="line">        <span class="type">int</span>[] leftIn=<span class="keyword">new</span> <span class="title class_">int</span>[index];</span><br><span class="line">        <span class="type">int</span>[] leftPrex=<span class="keyword">new</span> <span class="title class_">int</span>[leftIn.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;index;i++)&#123;</span><br><span class="line">            leftIn[i]=inorder[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>,i=<span class="number">0</span>;i&lt;leftPrex.length;i++,j++)&#123;</span><br><span class="line">            leftPrex[i]=preorder[j];</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//获取右子树的前序和中序数组</span></span><br><span class="line">        <span class="type">int</span>[] rightIn=<span class="keyword">new</span> <span class="title class_">int</span>[inorder.length-index-<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span>[] rightPrex=<span class="keyword">new</span> <span class="title class_">int</span>[rightIn.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;rightIn.length;i++,index++)&#123;</span><br><span class="line">            rightIn[i]=inorder[index+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=leftIn.length+<span class="number">1</span>,i=<span class="number">0</span>;i&lt;rightPrex.length;i++,j++)&#123;</span><br><span class="line">            rightPrex[i]=preorder[j];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root.left=prexAndinBuild(leftPrex,leftIn);</span><br><span class="line">        root.right=prexAndinBuild(rightPrex,rightIn);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="最大二叉树"   >          <a href="#最大二叉树" class="heading-link"><i class="fas fa-link"></i></a><a href="#最大二叉树" class="headerlink" title="最大二叉树"></a>最大二叉树</h1>      <p>给定一个不重复的整数数组 <code>nums</code> 。 <strong>最大二叉树</strong> 可以用下面的算法从 <code>nums</code> 递归地构建:</p><ol><li>创建一个根节点，其值为 <code>nums</code> 中的最大值。</li><li>递归地在最大值 <strong>左边</strong> 的 <strong>子数组前缀上</strong> 构建左子树。</li><li>递归地在最大值 <strong>右边</strong> 的 <strong>子数组后缀上</strong> 构建右子树。</li></ol><p>返回 <em><code>nums</code> 构建的</em> <em><strong>最大二叉树</strong></em> 。</p>        <h2 id="654-最大二叉树"   >          <a href="#654-最大二叉树" class="heading-link"><i class="fas fa-link"></i></a><a href="#654-最大二叉树" class="headerlink" title="654.最大二叉树"></a>654.最大二叉树</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/maximum-binary-tree/description/" >Leetcode.654(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-26"   >          <a href="#第一次做-26" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-26" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;03</p>        <h4 id="第一次代码-28"   >          <a href="#第一次代码-28" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-28" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">constructMaximumBinaryTree</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> findMax(nums);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">findMax</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> max=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//找到最大值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;max)&#123;</span><br><span class="line">                max=nums[i];</span><br><span class="line">                index=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode root=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(max);</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] leftNums=<span class="keyword">new</span> <span class="title class_">int</span>[index];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;index;i++)&#123;</span><br><span class="line">            leftNums[i]=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] rightNums=<span class="keyword">new</span> <span class="title class_">int</span>[nums.length-<span class="number">1</span>-index];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;rightNums.length;i++,index++)&#123;</span><br><span class="line">            rightNums[i]=nums[index+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root.left=findMax(leftNums);</span><br><span class="line">        root.right=findMax(rightNums);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-28"   >          <a href="#提交成功-28" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-28" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-28"   >          <a href="#题解-28" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-28" class="headerlink" title="题解"></a>题解</h3>      <p>思路：前序递归(中左右)构造最大二叉树，先构造中结点，再构造左子树然后构造右子树</p><p><strong>实现</strong></p><ul><li><p>递归函数的参数和返回值</p><ul><li>参数nums：整数数组</li><li>返回值TreeNode：构造出来的最大二叉树</li></ul></li><li><p>递归的终止条件</p><ul><li>当nums.length&#x3D;&#x3D;0 说明空数组是空结点，所以返回null</li><li>当nums.length&#x3D;&#x3D;1 说明是叶子结点,构造TreeNode(nums[0])返回</li></ul></li><li><p>单层递归的逻辑</p><ul><li>定义一个max和index 用于标记数组中最大值的值和位置<ul><li>遍历nums获取max和index</li><li>max标记数组中最大值</li><li>index标记数组中最大值的索引下标</li></ul></li><li>获取左子树的nums，递归调用函数构造左子树 <em>左子树nums为数组中index左边部分</em></li><li>获取右子树的nums，递归调用函数构造右子树 <em>右子树nums为数组中index右边部分</em></li><li>返回构建出的TreeNode结点</li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">constructMaximumBinaryTree</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> findMax(nums);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">findMax</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> max=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//找到最大值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;max)&#123;</span><br><span class="line">                max=nums[i];</span><br><span class="line">                index=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        TreeNode root=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(max);</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//运行到这里是非叶子结点</span></span><br><span class="line">        <span class="type">int</span>[] leftNums=<span class="keyword">new</span> <span class="title class_">int</span>[index];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;index;i++)&#123;</span><br><span class="line">            leftNums[i]=nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] rightNums=<span class="keyword">new</span> <span class="title class_">int</span>[nums.length-<span class="number">1</span>-index];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;rightNums.length;i++,index++)&#123;</span><br><span class="line">            rightNums[i]=nums[index+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root.left=findMax(leftNums);</span><br><span class="line">        root.right=findMax(rightNums);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="合并二叉树"   >          <a href="#合并二叉树" class="heading-link"><i class="fas fa-link"></i></a><a href="#合并二叉树" class="headerlink" title="合并二叉树"></a>合并二叉树</h1>      <p>给你两棵二叉树： <code>root1</code> 和 <code>root2</code> 。</p><p>想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，<strong>不为</strong> null 的节点将直接作为新二叉树的节点。</p><p>返回合并后的二叉树。</p><p><strong>注意:</strong> 合并过程必须从两个树的根节点开始。</p>        <h2 id="617-合并二叉树"   >          <a href="#617-合并二叉树" class="heading-link"><i class="fas fa-link"></i></a><a href="#617-合并二叉树" class="headerlink" title="617.合并二叉树"></a>617.合并二叉树</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/merge-two-binary-trees/" >Leetcode.617题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-27"   >          <a href="#第一次做-27" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-27" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;03 (因为04号上午因部分原因没能完成当日任务，所以于03号晚上提前完成)</p>        <h4 id="第一次代码-29"   >          <a href="#第一次代码-29" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-29" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">mergeTrees</span><span class="params">(TreeNode root1, TreeNode root2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mergeBuild(root1,root2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">mergeBuild</span><span class="params">(TreeNode root1,TreeNode root2)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root1==<span class="literal">null</span> &amp;&amp; root2 != <span class="literal">null</span>) <span class="keyword">return</span> root2;</span><br><span class="line">        <span class="keyword">if</span>(root1!=<span class="literal">null</span> &amp;&amp; root2 == <span class="literal">null</span>) <span class="keyword">return</span> root1;</span><br><span class="line">        <span class="keyword">if</span>(root1==<span class="literal">null</span> &amp;&amp; root2==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> rootVal=root1.val+root2.val;</span><br><span class="line">        TreeNode root=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootVal);</span><br><span class="line"></span><br><span class="line">        root.left=mergeBuild(root1.left,root2.left);</span><br><span class="line">        root.right=mergeBuild(root1.right,root2.right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-29"   >          <a href="#提交成功-29" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-29" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-29"   >          <a href="#题解-29" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-29" class="headerlink" title="题解"></a>题解</h3>      <p>思路：用前序遍历同步地遍历两个二叉树，将二叉树的根节点的数值相加，然后左右子树进行合并</p><p><strong>实现</strong></p><ul><li>递归的参数和返回值<ul><li>参数root1:第一颗二叉树</li><li>参数root2:第二颗二叉树</li><li>返回值TreeNode:二叉树的根节点</li></ul></li><li>递归的结束条件<ul><li>当root1为空root2不为空，则合并后的二叉树为root2，直接返回root2</li><li>当root1不为空root2为空，则合并后的二叉树为root1，直接返回root1</li><li>当root1为空且root2为空，则合并后的二叉树就是空结点，返回null</li></ul></li><li>单层递归的执行逻辑<ul><li>获取当前遍历的两个结点的值，相加成为新结点的数值</li><li>构造左子树，向左遍历root1和root2</li><li>构造右子树，向右遍历root1和root2</li><li>返回新的二叉树root</li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">mergeTrees</span><span class="params">(TreeNode root1, TreeNode root2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mergeBuild(root1,root2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">mergeBuild</span><span class="params">(TreeNode root1,TreeNode root2)</span>&#123;</span><br><span class="line"><span class="comment">//如果root1为空root2不为空则传回root2</span></span><br><span class="line">        <span class="comment">//如果root1不为空root2为空则传回root1</span></span><br><span class="line">        <span class="comment">//如果roo1和root2都为空 则返回null;</span></span><br><span class="line">        <span class="keyword">if</span>(root1==<span class="literal">null</span> &amp;&amp; root2 != <span class="literal">null</span>) <span class="keyword">return</span> root2;</span><br><span class="line">        <span class="keyword">if</span>(root1!=<span class="literal">null</span> &amp;&amp; root2 == <span class="literal">null</span>) <span class="keyword">return</span> root1;</span><br><span class="line">        <span class="keyword">if</span>(root1==<span class="literal">null</span> &amp;&amp; root2==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> rootVal=root1.val+root2.val;</span><br><span class="line">        <span class="comment">//定义一个新的二叉树</span></span><br><span class="line">        TreeNode root=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootVal);</span><br><span class="line"><span class="comment">//向左遍历构造左子树</span></span><br><span class="line">        root.left=mergeBuild(root1.left,root2.left);</span><br><span class="line">        <span class="comment">//向右遍历构造右子树</span></span><br><span class="line">        root.right=mergeBuild(root1.right,root2.right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="二叉搜索树中的搜索"   >          <a href="#二叉搜索树中的搜索" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉搜索树中的搜索" class="headerlink" title="二叉搜索树中的搜索"></a>二叉搜索树中的搜索</h1>      <p>给定二叉搜索树（BST）的根节点 <code>root</code> 和一个整数值 <code>val</code>。</p><p>你需要在 BST 中找到节点值等于 <code>val</code> 的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 <code>null</code> 。</p>        <h2 id="700-二叉搜索树中的搜索"   >          <a href="#700-二叉搜索树中的搜索" class="heading-link"><i class="fas fa-link"></i></a><a href="#700-二叉搜索树中的搜索" class="headerlink" title="700.二叉搜索树中的搜索"></a>700.二叉搜索树中的搜索</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/search-in-a-binary-search-tree/" >Leetcode.700题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-28"   >          <a href="#第一次做-28" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-28" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;03(上同，因为04号无法完成日常任务)</p>        <h4 id="第一次代码-30"   >          <a href="#第一次代码-30" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-30" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">searchBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> searchTree(root,val);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> TreeNode <span class="title function_">searchTree</span><span class="params">(TreeNode root,<span class="type">int</span> val)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">if</span>(root.val==val)&#123;</span><br><span class="line">           <span class="keyword">return</span> root;</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&gt;val)&#123;</span><br><span class="line">           <span class="keyword">return</span> searchTree(root.left,val);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> searchTree(root.right,val);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-30"   >          <a href="#提交成功-30" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-30" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-30"   >          <a href="#题解-30" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-30" class="headerlink" title="题解"></a>题解</h3>              <h4 id="递归法"   >          <a href="#递归法" class="heading-link"><i class="fas fa-link"></i></a><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h4>      <p>思路：因为二叉搜索树的特性，所以我们可以确认搜索的方向，所以这里不用在乎是前中后序</p><p><strong>实现</strong></p><ul><li><p>递归的返回值和参数</p><ul><li>参数root：二叉搜索树</li><li>参数val：搜索的目标值</li><li>返回值TreeNode：目标结点，如果没有找到则为null</li></ul></li><li><p>递归的结束条件：</p><ul><li>当root为空，则为空结点直接返回null</li><li>当root不为空<ul><li>root.val&#x3D;&#x3D;val：说明当前root是我们要搜索的目标结点，返回root</li><li>root.val&gt;val：说明当前结点值比目标结点值大，需要向左子树搜索</li><li>root.val&lt;val：说明当前结点值比目标结点小，需要向右子树搜索</li></ul></li></ul></li><li><p>单层递归的逻辑：</p><p>判断当前值和目标值的大小，确认搜索方向搜索</p></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">searchBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> searchTree(root,val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">searchTree</span><span class="params">(TreeNode root,<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.val==val)&#123;</span><br><span class="line">            <span class="comment">//找到搜索结点</span></span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&gt;val)&#123;</span><br><span class="line">            <span class="comment">//传入的数比根节点数小，向左子树搜索</span></span><br><span class="line">            <span class="keyword">return</span> searchTree(root.left,val);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//传入的数比根结点大，向右子树搜索</span></span><br><span class="line">            <span class="keyword">return</span> searchTree(root.right,val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="迭代法"   >          <a href="#迭代法" class="heading-link"><i class="fas fa-link"></i></a><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h4>      <p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">searchBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="comment">//循环的条件为root不为空，说明二叉树还没有搜索完</span></span><br><span class="line">        <span class="keyword">while</span>(root!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//当目标值和当前值相等，说明找到了结点，直接返回</span></span><br><span class="line">            <span class="keyword">if</span>(root.val==val) <span class="keyword">return</span> root;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root.val&gt;val)&#123;</span><br><span class="line">                <span class="comment">//当根节点比目标值大，向左子树搜索</span></span><br><span class="line">                root=root.left;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&lt;val)&#123;</span><br><span class="line">                <span class="comment">//当根节点数比目标值小，向右子树搜索</span></span><br><span class="line">                root=root.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//root==null 说明二叉树中没有这个结点返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="验证二叉搜索树"   >          <a href="#验证二叉搜索树" class="heading-link"><i class="fas fa-link"></i></a><a href="#验证二叉搜索树" class="headerlink" title="验证二叉搜索树"></a>验证二叉搜索树</h1>      <p>给你一个二叉树的根节点 <code>root</code> ，判断其是否是一个有效的二叉搜索树。</p><p><strong>有效</strong> 二叉搜索树定义如下：</p><ul><li>节点的左子树只包含 <strong>小于</strong> 当前节点的数。</li><li>节点的右子树只包含 <strong>大于</strong> 当前节点的数。</li><li>所有左子树和右子树自身必须也是二叉搜索树。</li></ul>        <h2 id="98-验证二叉搜索树"   >          <a href="#98-验证二叉搜索树" class="heading-link"><i class="fas fa-link"></i></a><a href="#98-验证二叉搜索树" class="headerlink" title="98.验证二叉搜索树"></a>98.验证二叉搜索树</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/validate-binary-search-tree/" >Leetcode.98题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-29"   >          <a href="#第一次做-29" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-29" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;04</p>        <h4 id="第一次代码-31"   >          <a href="#第一次代码-31" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-31" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> checkTree(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkTree</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> leftTree=checkTree(root.left);</span><br><span class="line">        <span class="keyword">if</span>(!leftTree) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> rightTree=checkTree(root.right);</span><br><span class="line">        <span class="keyword">if</span>(!rightTree) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left.val&gt;root.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span> &amp;&amp; root.right.val&lt;root.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-16"   >          <a href="#提交失败-16" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-16" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE: root&#x3D;[2,2,2] 输出true 预期输出false</p><p>原因是左右子树的值应该小于和大于根节点的值，我判断中结点条件的时候没有将“等于”算在内</p>        <h4 id="第二次代码-10"   >          <a href="#第二次代码-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-10" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> checkTree(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkTree</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> leftTree=checkTree(root.left);</span><br><span class="line">        <span class="keyword">if</span>(!leftTree) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> rightTree=checkTree(root.right);</span><br><span class="line">        <span class="keyword">if</span>(!rightTree) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left.val&gt;=root.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span> &amp;&amp; root.right.val&lt;=root.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-17"   >          <a href="#提交失败-17" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-17" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:[5,4,6,null,null,3,7] 输出true，预期输出false</p><p>原因是右子树的3超过了根节点的值 ，我判断了根节点和左右子树是否分别是搜索二叉树</p>        <h4 id="第三次代码-3"   >          <a href="#第三次代码-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-3" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> checkTree(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkTree</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> leftTree=checkTree(root.left);</span><br><span class="line">        <span class="keyword">if</span>(!leftTree) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> rightTree=checkTree(root.right);</span><br><span class="line">        <span class="keyword">if</span>(!rightTree) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当左子树不为空搜索左子树中的最大值(向左子树的右子树的外侧搜索)，如果最大值都大于等于根结点则不是搜索二叉树</span></span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> max=root.left.val;</span><br><span class="line">            TreeNode left=root.left;</span><br><span class="line">            <span class="keyword">while</span>(left.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                max=left.right.val;</span><br><span class="line">                left=left.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(max&gt;=root.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当右子树不为空搜索右子树中的最小值(向右子树的左子树的外侧搜索)，如果最小值都小于等于根结点值则根结点不是搜索二叉树</span></span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> min=root.right.val;</span><br><span class="line">            TreeNode right=root.right;</span><br><span class="line">            <span class="keyword">while</span>(right.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                min=right.left.val;</span><br><span class="line">                right=right.left;              </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(min&lt;=root.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-31"   >          <a href="#提交成功-31" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-31" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-31"   >          <a href="#题解-31" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-31" class="headerlink" title="题解"></a>题解</h3>              <h4 id="后序遍历-3"   >          <a href="#后序遍历-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#后序遍历-3" class="headerlink" title="后序遍历"></a>后序遍历</h4>      <p>思路：利用后序遍历(左右中)验证左右子树是否是二叉搜索树再验证根节点是否是二叉搜索树。在验证根节点的时候利用二叉搜索树的特性找到左子树的最大值和右子树的最小值与根节点数值进行比较。</p><p><strong>实现</strong></p><ul><li>递归遍历的参数和返回值<ul><li>参数root:要验证是否是二叉搜索树的根节点</li><li>返回值：true表示是二叉搜索树，false表示不是二叉搜索树</li></ul></li><li>递归的结束条件<ul><li>如果root&#x3D;&#x3D;null，说明是空结点则返回true</li><li>如果root.left&#x3D;&#x3D;null &amp;&amp; root.right&#x3D;&#x3D;null结点则返回true</li><li>如果左右子树有一个不是二叉搜索树，那么整个树都不会是二叉搜索树，返回false</li></ul></li><li>单层递归的逻辑<ul><li>验证左子树是否是二叉搜索树，如果左子树不是二叉搜索树返回false</li><li>验证右子树是否是二叉搜索树，如果右子树不是二叉搜索树返回false</li><li>验证根节点是否是二叉搜索树<ul><li>如果左子树不为空搜索左子树的最大值，利用二叉搜索树的特性，搜索左子树的右子树外侧的值，最右边的值就是最大值</li><li>如果右子树不为空搜索右子树的最小值，利用二叉搜索树的特性，搜索右子树的左子树外侧的值，最左边的值就是最小值</li><li>判断最大值是否都小于根结点的值，判断最小值是否都大于根结点的值</li><li>如果符合二叉搜索树返回true</li></ul></li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> checkTree(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkTree</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="comment">//空结点和叶子结点是二叉搜索树，返回true</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//验证左子树是否是二叉搜索树，下同验证右子树</span></span><br><span class="line">        <span class="type">boolean</span> leftTree=checkTree(root.left);</span><br><span class="line">        <span class="keyword">if</span>(!leftTree) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> rightTree=checkTree(root.right);</span><br><span class="line">        <span class="keyword">if</span>(!rightTree) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当左子树不为空搜索左子树中的最大值(向左子树的右子树的外侧搜索)，如果最大值都大于等于根结点则不是搜索二叉树</span></span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> max=root.left.val;</span><br><span class="line">            TreeNode left=root.left;</span><br><span class="line">            <span class="keyword">while</span>(left.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                max=left.right.val;</span><br><span class="line">                left=left.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(max&gt;=root.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当右子树不为空搜索右子树中的最小值(向右子树的左子树的外侧搜索)，如果最小值都小于等于根结点值则根结点不是搜索二叉树</span></span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> min=root.right.val;</span><br><span class="line">            TreeNode right=root.right;</span><br><span class="line">            <span class="keyword">while</span>(right.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                min=right.left.val;</span><br><span class="line">                right=right.left;              </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(min&lt;=root.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="中序遍历-3"   >          <a href="#中序遍历-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#中序遍历-3" class="headerlink" title="中序遍历"></a>中序遍历</h4>      <p>利用二叉搜索树的特性，利用中序遍历(左中右)就可以获得二叉树搜索的结点序列，如果序列是单调递增的那么就是二叉搜索树</p><blockquote><p>二叉搜索树的中序遍历会将所有结点单调升序输出，这是二叉搜索树有序性的体现之一</p></blockquote><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230904091829189.png"  alt="二叉搜索树的中序遍历">      </p><p><strong>实现</strong></p><ul><li><p>递归函数的参数和返回值</p><ul><li>参数root:判断是否是搜索二叉树的根节点</li><li>返回值：如果是搜索二叉树返回true，反之返回false</li></ul></li><li><p>递归函数的结束条件</p><ul><li>当root&#x3D;&#x3D;null 也即root为空结点返回true，是二叉搜索树</li><li>当前一个结点的值大于等于当前结点的值，说明不是单调递增，返回false，不是二叉搜索树</li><li>当左右搜索结果有一个不是二叉搜索树返回false</li></ul></li><li><p>单层递归逻辑</p><ul><li>判断左子树是否是二叉搜索树</li><li>判断当前结点和前一个结点的值，如果当前结点的值小于等于前一个结点的值则不适合搜索二叉树<ul><li>当pre&#x3D;&#x3D;null，说明没有前一个结点，当前结点是第一个叶子结点不会进入判断，而是将pre设为当前结点返回true</li><li>当pre!&#x3D;null，则判断root和pre的val数值，如果root.val&lt;&#x3D;pre.val 返回false</li></ul></li><li>将pre指向当前结点，为了准备遍历右子树</li><li>判断右子树是否是二叉搜索树</li></ul><blockquote><p>因为中序遍历的时候符合二叉搜索树的单调递增，所以前一个结点pre就指向当前结点的升序序列的前一个结点</p></blockquote></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line">TreeNode pre;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        pre=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> checkTree(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkTree</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="comment">//如果是空结点则是搜索二叉树</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向左子树判断是否是搜索二叉树</span></span><br><span class="line">        <span class="type">boolean</span> left=checkTree(root.left);</span><br><span class="line">        <span class="comment">//当前结点值大于等于当前结点值 则不是搜索二叉树</span></span><br><span class="line">        <span class="keyword">if</span>(pre!=<span class="literal">null</span> &amp;&amp; pre.val&gt;=root.val) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        pre=root;</span><br><span class="line"><span class="comment">//向右子树判断是否是搜索二叉树</span></span><br><span class="line">        <span class="type">boolean</span> right=checkTree(root.right);</span><br><span class="line">        <span class="comment">//如果左子树或者右子树有一个不是搜索二叉树则整棵树不是搜索二叉树</span></span><br><span class="line">        <span class="keyword">if</span>(!left || !right) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="二叉搜索树的最小绝对差"   >          <a href="#二叉搜索树的最小绝对差" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉搜索树的最小绝对差" class="headerlink" title="二叉搜索树的最小绝对差"></a>二叉搜索树的最小绝对差</h1>      <p>给你一个二叉搜索树的根节点 <code>root</code> ，返回 <strong>树中任意两不同节点值之间的最小差值</strong> 。</p><p>差值是一个正数，其数值等于两值之差的绝对值。</p>        <h2 id="530-二叉搜索树的最小绝对差"   >          <a href="#530-二叉搜索树的最小绝对差" class="heading-link"><i class="fas fa-link"></i></a><a href="#530-二叉搜索树的最小绝对差" class="headerlink" title="530.二叉搜索树的最小绝对差"></a>530.二叉搜索树的最小绝对差</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/minimum-absolute-difference-in-bst/description/" >Leetcode.530题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-30"   >          <a href="#第一次做-30" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-30" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;04</p>        <h4 id="第一次代码-32"   >          <a href="#第一次代码-32" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-32" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinimumDifference</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       getMinDistinct(root);</span><br><span class="line">       <span class="keyword">return</span> min;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMinDistinct</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">       getMinDistinct(root.left);</span><br><span class="line">       <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="type">int</span> distinct=root.val-root.left.val &lt;<span class="number">0</span>? root.left.val-root.val : root.val-root.left.val;</span><br><span class="line">           <span class="keyword">if</span>(distinct&lt;=min) min=distinct;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="type">int</span> distinct=root.val-root.right.val &lt;<span class="number">0</span> ? root.right.val-root.val: root.val-root.right.val;</span><br><span class="line">           <span class="keyword">if</span>(distinct&lt;=min) min=distinct;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       getMinDistinct(root.right);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-18"   >          <a href="#提交失败-18" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-18" class="headerlink" title="提交失败"></a>提交失败</h5>              <h4 id="第二次代码-11"   >          <a href="#第二次代码-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-11" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    TreeNode pre;</span><br><span class="line">    <span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinimumDifference</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        pre=<span class="literal">null</span>;</span><br><span class="line">        getMinDistinct(root);</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">getMinDistinct</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        getMinDistinct(root.left);</span><br><span class="line">        <span class="keyword">if</span>(pre!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> distinct=root.val-pre.val&gt;<span class="number">0</span>?root.val-pre.val :pre.val-root.val;</span><br><span class="line">            <span class="keyword">if</span>(distinct&lt;min) min=distinct;</span><br><span class="line">        &#125;</span><br><span class="line">        pre=root;</span><br><span class="line">        getMinDistinct(root.right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-32"   >          <a href="#提交成功-32" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-32" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-32"   >          <a href="#题解-32" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-32" class="headerlink" title="题解"></a>题解</h3>      <p><strong>思路</strong>：我们中序遍历，然后用双指针，以及一个全局变量最小值以此获取最小绝对值</p><blockquote><p>搜索二叉树的中序遍历可以将全部结点以升序的方式输出</p></blockquote><p><strong>实现</strong></p><ul><li>定义一个pre，用于指向当前遍历的前一个结点</li><li>定义一个min，用于表示整个遍历过程的最小绝对差。初始化为Intger.MAX_VALUE，最大值</li><li>递归函数的参数和返回值<ul><li>参数root：要获取距离差最小值的二叉树根节点</li><li>返回值：void</li></ul></li><li>递归的结束条件<ul><li>当root&#x3D;&#x3D;null：为空节点直接结束</li><li>当左右子树遍历完即可结束</li></ul></li><li>单层递归实现逻辑<ul><li>遍历左子树，获取左子树的最小绝对差</li><li>判断前一个结点和当前结点的绝对差<ul><li>如果pre为空，说明这是二叉树的第一个结点，将pre指向当前结点然后结束即可</li><li>如果pre不为空，获取pre的值和root的值差值，如果差值小于min。则将min更新成当前差值</li></ul></li><li>将pre指向当前结点，为了准备遍历右子树</li><li>遍历右子树</li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    TreeNode pre;</span><br><span class="line">    <span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinimumDifference</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        pre=<span class="literal">null</span>;</span><br><span class="line">        getMinDistinct(root);</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMinDistinct</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        getMinDistinct(root.left);</span><br><span class="line">        <span class="keyword">if</span>(pre!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> distinct=root.val-pre.val&gt;<span class="number">0</span>?root.val-pre.val :pre.val-root.val;</span><br><span class="line">            <span class="keyword">if</span>(distinct&lt;min) min=distinct;</span><br><span class="line">        &#125;</span><br><span class="line">        pre=root;</span><br><span class="line">        getMinDistinct(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="二叉搜索树中的众数"   >          <a href="#二叉搜索树中的众数" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉搜索树中的众数" class="headerlink" title="二叉搜索树中的众数"></a>二叉搜索树中的众数</h1>      <p>给你一个含重复值的二叉搜索树（BST）的根节点 <code>root</code> ，找出并返回 BST 中的所有 <span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E4%BC%97%E6%95%B0/44796" >众数</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>（即，出现频率最高的元素）。</p><p>如果树中有不止一个众数，可以按 <strong>任意顺序</strong> 返回。</p><p>假定 BST 满足如下定义：</p><ul><li>结点左子树中所含节点的值 <strong>小于等于</strong> 当前节点的值</li><li>结点右子树中所含节点的值 <strong>大于等于</strong> 当前节点的值</li><li>左子树和右子树都是二叉搜索树</li></ul>        <h2 id="501-二叉搜索树中的众数"   >          <a href="#501-二叉搜索树中的众数" class="heading-link"><i class="fas fa-link"></i></a><a href="#501-二叉搜索树中的众数" class="headerlink" title="501.二叉搜索树中的众数"></a>501.二叉搜索树中的众数</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/find-mode-in-binary-search-tree/" >Leetcode.501题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-31"   >          <a href="#第一次做-31" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-31" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;05</p>        <h4 id="第一次代码-33"   >          <a href="#第一次代码-33" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-33" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    HashMap&lt;Integer,Integer&gt; map;</span><br><span class="line">    <span class="type">int</span> max=Integer.MAX_VALUE+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findMode(TreeNode root) &#123;</span><br><span class="line">        map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        findMaxValue(root);</span><br><span class="line">        <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[map.size()];</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">        ArrayList&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet())&#123;</span><br><span class="line">            <span class="type">int</span> key=entry.getKey();</span><br><span class="line">            <span class="type">int</span> value=entry.getValue();</span><br><span class="line">            arr[i++]=value;</span><br><span class="line">            <span class="keyword">if</span>(value&gt;max)&#123;</span><br><span class="line">                num=<span class="number">1</span>;</span><br><span class="line">                list.clear();</span><br><span class="line">                list.add(key);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(value==max)&#123;</span><br><span class="line">                num++;</span><br><span class="line">                list.add(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] result=<span class="keyword">new</span> <span class="title class_">int</span>[num];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;num;j++)&#123;</span><br><span class="line">            result[j]=list.get(j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findMaxValue</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        findMaxValue(root.left);</span><br><span class="line">        map.put(root.val,map.getOrDefault(root.val,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        findMaxValue(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-19"   >          <a href="#提交失败-19" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-19" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:root&#x3D;[1,null,2] 输出[2] 预期输出[1,2]</p>        <h4 id="第二次代码-12"   >          <a href="#第二次代码-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-12" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    HashMap&lt;Integer,Integer&gt; map;</span><br><span class="line">    <span class="type">int</span> max=Integer.MAX_VALUE+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findMode(TreeNode root) &#123;</span><br><span class="line">        map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        findMaxValue(root);</span><br><span class="line">        <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[map.size()];</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">        ArrayList&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet())&#123;</span><br><span class="line">            <span class="type">int</span> key=entry.getKey();</span><br><span class="line">            <span class="type">int</span> value=entry.getValue();</span><br><span class="line">            arr[i++]=value;</span><br><span class="line">            <span class="keyword">if</span>(value&gt;max)&#123;</span><br><span class="line">                num=<span class="number">1</span>;</span><br><span class="line">                max=value;</span><br><span class="line">                list.clear();</span><br><span class="line">                list.add(key);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(value==max)&#123;</span><br><span class="line">                num++;</span><br><span class="line">                list.add(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] result=<span class="keyword">new</span> <span class="title class_">int</span>[num];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;num;j++)&#123;</span><br><span class="line">            result[j]=list.get(j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findMaxValue</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        findMaxValue(root.left);</span><br><span class="line">        map.put(root.val,map.getOrDefault(root.val,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        findMaxValue(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-33"   >          <a href="#提交成功-33" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-33" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-33"   >          <a href="#题解-33" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-33" class="headerlink" title="题解"></a>题解</h3>      <p><strong>双指针</strong></p><p>BF解法思路是：遍历一遍二叉搜索树，得到元素出现的最高频率，然后再遍历一遍二叉搜索树，将频率相等的元素放进结果集中</p><p><strong>双指针</strong>的思路：只需遍历一遍二叉树，动态更新结果集合最高频率</p><p><strong>实现</strong></p><ul><li><p>我们这里要用中序遍历，因为二叉搜索树的中序遍历有序性，所有结点会以单调不减的序列输出</p></li><li><p>定义全局变量</p><ul><li>pre:用于指向前一个结点，双指针中前面的指针</li><li>count:用于统计两个指针之间元素出现的个数</li><li>maxCount:用于统计整个二叉搜索树的最大出现次数</li><li>list:用于收获结果集，存放最大次数的结点值</li></ul></li><li><p>递归函数的返回值和参数</p><ul><li>返回值：void</li><li>参数cur：根节点root，双指针中后面的指针</li></ul></li><li><p>递归函数的结束条件</p><p>当cur&#x3D;&#x3D;null，说明当前结点遍历到空结点也即二叉树最右下角的结点，遍历结束直接return</p></li><li><p>递归函数的单层逻辑</p><ul><li><p>遍历左子树。统计左子树中的众数</p></li><li><p>处理中结点逻辑</p><ul><li>判断前一个结点和当前结点的状态<ul><li>pre&#x3D;&#x3D;null，说明cur是第一个结点。count&#x3D;1(出现一次)</li><li>pre!&#x3D;null并且pre.val&#x3D;&#x3D;cur.val，说明前后结点值相同。count++</li><li>pre!&#x3D;null并且pre.val !&#x3D; cur.val，说明前后结点值不同，重新计数，count&#x3D;1</li></ul></li><li>pre指向当前结点cur</li><li>判断count和maxCount的值<ul><li>如果count&#x3D;&#x3D;maxCount，说明当前结点也是众数，list.add(cur.val)</li><li>如果count&gt;maxCount，说明当前结点才是众数，要清空原来的list(list.clear())，将当前结点值加入集合list.add(cur.val)</li></ul></li></ul></li><li><p>遍历右子树。统计右子树中的众数</p></li></ul></li><li><p>将list集合转换成数组</p></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">//指向前一个结点</span></span><br><span class="line">    TreeNode pre=<span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> maxCount=<span class="number">0</span>;</span><br><span class="line">    List&lt;Integer&gt; list;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] findMode(TreeNode root) &#123;</span><br><span class="line">        list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        terversal(root);</span><br><span class="line">        <span class="comment">//集合转化成数组</span></span><br><span class="line">        <span class="type">int</span>[] result=<span class="keyword">new</span> <span class="title class_">int</span>[list.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">            result[i]=list.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">terversal</span><span class="params">(TreeNode cur)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="literal">null</span>) <span class="keyword">return</span> ;</span><br><span class="line">        <span class="comment">//左</span></span><br><span class="line">        terversal(cur.left);</span><br><span class="line">        <span class="comment">//统计频率</span></span><br><span class="line">        <span class="keyword">if</span>(pre==<span class="literal">null</span>) count=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pre!=<span class="literal">null</span> &amp;&amp; cur.val==pre.val)&#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cur.val!=pre.val) count=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//移动指针</span></span><br><span class="line">        pre=cur;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//收获结果集</span></span><br><span class="line">        <span class="keyword">if</span>(count==maxCount)&#123;</span><br><span class="line">            list.add(cur.val);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(count&gt;maxCount)&#123;</span><br><span class="line">            maxCount=count;</span><br><span class="line">            list.clear();</span><br><span class="line">            list.add(cur.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//右</span></span><br><span class="line">        terversal(cur.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="二叉树的最近公共祖先"   >          <a href="#二叉树的最近公共祖先" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉树的最近公共祖先" class="headerlink" title="二叉树的最近公共祖先"></a>二叉树的最近公共祖先</h1>      <p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p><span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin" >百度百科</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。“</p>        <h2 id="236-二叉树的最近公共祖先"   >          <a href="#236-二叉树的最近公共祖先" class="heading-link"><i class="fas fa-link"></i></a><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236.二叉树的最近公共祖先"></a>236.二叉树的最近公共祖先</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/" >Leetcode.236题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-32"   >          <a href="#第一次做-32" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-32" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;05</p>        <h4 id="第一次代码-34"   >          <a href="#第一次代码-34" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-34" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> findDepthFather(root,p,q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">findDepthFather</span><span class="params">(TreeNode root,TreeNode p,TreeNode q)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==p || root==q) <span class="keyword">return</span> root;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(findNode(root.left,p)&amp;&amp;findNode(root.left,q))&#123;</span><br><span class="line">                <span class="keyword">return</span> findDepthFather(root.left,p,q);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((findNode(root.right,p)&amp;&amp; findNode(root.right,q)))&#123;</span><br><span class="line">                <span class="keyword">return</span> findDepthFather(root.right,p,q);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findNode</span><span class="params">(TreeNode root,TreeNode target)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root==target) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> left=<span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> right=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            left=findNode(root.left,target);</span><br><span class="line">            <span class="keyword">if</span>(left) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            right=findNode(root.right,target);</span><br><span class="line">            <span class="keyword">if</span>(right) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-20"   >          <a href="#提交失败-20" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-20" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>root&#x3D;[3,5,1,6,2,0,8,null,null,7,4]，p&#x3D;5，q&#x3D;4 输出 3 预期输出5</p><p>找结点的时候忘了处理中结点逻辑</p>        <h4 id="第二次代码-13"   >          <a href="#第二次代码-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-13" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> findDepthFather(root,p,q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">findDepthFather</span><span class="params">(TreeNode root,TreeNode p,TreeNode q)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.val==p.val || root.val==q.val) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="comment">//当左子树非空向左找最深的共同祖先</span></span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(findNode(root.left,p)&amp;&amp;findNode(root.left,q))&#123;</span><br><span class="line">                <span class="keyword">return</span> findDepthFather(root.left,p,q);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当右子树非空向右找最深的共同祖先</span></span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((findNode(root.right,p)&amp;&amp; findNode(root.right,q)))&#123;</span><br><span class="line">                <span class="keyword">return</span> findDepthFather(root.right,p,q);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左右都没找到就当前节点是最深共同祖先</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findNode</span><span class="params">(TreeNode root,TreeNode target)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.val==target.val) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> left=<span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> right=<span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//当左结点非空判断左子树是否含有target</span></span><br><span class="line">        <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">            left=findNode(root.left,target);</span><br><span class="line">            <span class="keyword">if</span>(left) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当右结点非空判断右子树是否含有target</span></span><br><span class="line">        <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">            right=findNode(root.right,target);</span><br><span class="line">            <span class="keyword">if</span>(right) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//中结点值和target相等则返回true</span></span><br><span class="line">        <span class="keyword">if</span>(root.val==target.val) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-34"   >          <a href="#提交成功-34" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-34" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-34"   >          <a href="#题解-34" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-34" class="headerlink" title="题解"></a>题解</h3>      <p><strong>思路</strong>：利用后序遍历来判断最近公共祖先，通过左右子树的最近公共祖先结果来一层层地向根节点返回，虽然是从上往下遍历，但是处理过程是从下往上，这个部分需要用到回溯的思想</p><p><strong>实现</strong></p><ul><li><p>递归函数的返回值和参数</p><ul><li>返回值：TreeNode，共同祖先，如果为空则没有找到。</li><li>参数root：树的根节点</li><li>参数p：要搜索的结点之一</li><li>参数q：要搜索的结点之一</li></ul></li><li><p>递归函数的结束条件</p><ul><li>当root&#x3D;&#x3D;null，即遇到空节点返回空，没有公共祖先</li><li>当root&#x3D;&#x3D;p或者root&#x3D;&#x3D;q，说明公共祖先就是root，或者遍历中找到了p或者q</li></ul></li><li><p>单层递归的处理逻辑</p><ul><li><p>向左搜索结点，记录为left</p></li><li><p>向右搜索结点，记录为right</p></li><li><p>处理中结点的逻辑</p><ul><li>当left为空且right为空，说明没有找到公共祖先，返回null</li><li>当left不为空且right不为空，说明left包含q和p之一，right也包含p和q之一【题目说明不会重复，所以left和right包含的结点不会是同一个结点】</li><li>当left为空且right不为空说明左子树中找到了结点，所以返回left</li><li>当left不为空且right为空说明右子树中找打了结点，所以返回right</li></ul></li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> findDepthFather(root,p,q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">findDepthFather</span><span class="params">(TreeNode root,TreeNode p,TreeNode q)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//如果当前结点是p或者q即根节点就是最近祖先 返回root</span></span><br><span class="line">        <span class="keyword">if</span>(root==p || root== q) <span class="keyword">return</span> root;</span><br><span class="line"><span class="comment">//向左搜索左结点</span></span><br><span class="line">        TreeNode left= findDepthFather(root.left,p,q);</span><br><span class="line">        <span class="comment">//向右搜索右结点</span></span><br><span class="line">        TreeNode right=findDepthFather(root.right,p,q);</span><br><span class="line"><span class="comment">//左右不为空找到祖先为root，左不为空右为空向上返回左结点，左为空右不为空向上返回右结点，左右都为空则返回空</span></span><br><span class="line">        <span class="keyword">if</span>(left!=<span class="literal">null</span> &amp;&amp;right!=<span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(left!=<span class="literal">null</span> &amp;&amp;right==<span class="literal">null</span>) <span class="keyword">return</span> left;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(left==<span class="literal">null</span> &amp;&amp; right!=<span class="literal">null</span>) <span class="keyword">return</span> right;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;  </span><br></pre></td></tr></table></div></figure>        <h1 id="二叉搜索树的最近公共祖先"   >          <a href="#二叉搜索树的最近公共祖先" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉搜索树的最近公共祖先" class="headerlink" title="二叉搜索树的最近公共祖先"></a>二叉搜索树的最近公共祖先</h1>      <p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p><p><span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin" >百度百科</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p><p>例如，给定如下二叉搜索树: root &#x3D; [6,2,8,0,4,7,9,null,null,3,5]</p>        <h2 id="235-二叉搜索树的最近公共祖先"   >          <a href="#235-二叉搜索树的最近公共祖先" class="heading-link"><i class="fas fa-link"></i></a><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235.二叉搜索树的最近公共祖先"></a>235.二叉搜索树的最近公共祖先</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/" >Leetcode.235题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-33"   >          <a href="#第一次做-33" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-33" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;06</p>        <h4 id="第一次代码-35"   >          <a href="#第一次代码-35" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-35" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> tervalse(root,p,q);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> TreeNode <span class="title function_">tervalse</span><span class="params">(TreeNode root,TreeNode p, TreeNode q)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">if</span>(root==p  || root==q) <span class="keyword">return</span> root;</span><br><span class="line">       <span class="keyword">if</span>(root.val&gt;=p.val &amp;&amp; root.val&gt;=q.val)&#123;</span><br><span class="line">           <span class="keyword">return</span> tervalse(root.left,p,q);</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&lt;=p.val &amp;&amp; root.val&lt;=q.val)&#123;</span><br><span class="line">           <span class="keyword">return</span> tervalse(root.right,p,q);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           TreeNode left=tervalse(root.left,p,q);</span><br><span class="line">           TreeNode right=tervalse(root.right,p,q);</span><br><span class="line">           <span class="keyword">if</span>(left==<span class="literal">null</span> &amp;&amp; right ==<span class="literal">null</span> ) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span>(left!=<span class="literal">null</span> &amp;&amp; right==<span class="literal">null</span>) <span class="keyword">return</span> left;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span>(left==<span class="literal">null</span> &amp;&amp; right!=<span class="literal">null</span>) <span class="keyword">return</span> right;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span>(left!=<span class="literal">null</span> &amp;&amp; right!=<span class="literal">null</span>) <span class="keyword">return</span> root; </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-35"   >          <a href="#提交成功-35" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-35" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-35"   >          <a href="#题解-35" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-35" class="headerlink" title="题解"></a>题解</h3>              <h4 id="递归法-1"   >          <a href="#递归法-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#递归法-1" class="headerlink" title="递归法"></a>递归法</h4>      <p>思想：因为二叉搜索树的特性，我们可以判断pq的值与root的值确定搜索方向，当root在pq中间的时候，说明root就是最近公共祖先</p><p><strong>实现</strong></p><ul><li>递归函数的参数和返回值<ul><li>参数root：用于搜索的结点</li><li>参数p：要搜索的两个结点之一</li><li>参数q：要搜索的两个结点之一</li></ul></li><li>递归参数的结束条件<ul><li>当root为空，说明空结点返回为空</li><li>当root&#x3D;&#x3D;p或者root&#x3D;&#x3D;q，说明找到两个结点之一，或者这个结点就是这两个结点的公共祖先，返回root</li></ul></li><li>单层递归的处理逻辑<ul><li>如果root.val&gt;&#x3D;p.val &amp;&amp; root.val&gt;&#x3D;q.val 也即<strong>中间结点值比两个结点都大</strong>，所以pq一定在root的左子树中，递归向左子树搜索最近公共祖先</li><li>如果root.val&lt;&#x3D;p.val &amp;&amp; root.val&lt;&#x3D;q.val 也即<strong>中间结点值比两个结点都小</strong>，所以pq一定在root的右子树中，递归向右子树搜索最近公共祖先</li><li>如果不符合上面两个条件，说明p和q分别在root左右，也即<strong>中间结点值处于两个结点之间</strong>，所以最近公共祖先也即root</li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tervalse(root,p,q);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">tervalse</span><span class="params">(TreeNode root,TreeNode p, TreeNode q)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(root==p  || root==q) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span>(root.val&gt;=p.val &amp;&amp; root.val&gt;=q.val)&#123;</span><br><span class="line">            <span class="comment">//根节点值比两个结点都大，所以最近公共祖先在根结点的左子树中，也即pq都在root左子树</span></span><br><span class="line">            <span class="keyword">return</span> tervalse(root.left,p,q);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&lt;=p.val &amp;&amp; root.val&lt;=q.val)&#123;</span><br><span class="line">           <span class="comment">//根节点值比两个结点都小，所以最近公共祖先在根结点的右子树中，也即pq都在root右子树</span></span><br><span class="line">            <span class="keyword">return</span> tervalse(root.right,p,q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//root在pq中间，所以root也即最近公共祖先</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="迭代法-1"   >          <a href="#迭代法-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#迭代法-1" class="headerlink" title="迭代法"></a>迭代法</h4>      <p>思路：因为二叉搜索树的特性，所以搜索方向能够确定，迭代法的题解就变得比较简单</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">       <span class="keyword">while</span>(root!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="comment">//如果根结点值比两个结点都大(不能等于)，向左子树搜索  </span></span><br><span class="line">           <span class="keyword">if</span>(root.val&gt;p.val &amp;&amp; root.val&gt;q.val) &#123;</span><br><span class="line">               root=root.left;</span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&lt;p.val &amp;&amp; root.val&lt;q.val)&#123;</span><br><span class="line">               <span class="comment">//如果根结点值比两个结点都小(不能等于)，向右子树搜索</span></span><br><span class="line">               root=root.right;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="comment">//反之root一定在pq之间，或者root是pq之一</span></span><br><span class="line">               <span class="keyword">return</span> root;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="二叉搜索树中的插入操作"   >          <a href="#二叉搜索树中的插入操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#二叉搜索树中的插入操作" class="headerlink" title="二叉搜索树中的插入操作"></a>二叉搜索树中的插入操作</h1>      <p>给定二叉搜索树（BST）的根节点 <code>root</code> 和要插入树中的值 <code>value</code> ，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 <strong>保证</strong> ，新值和原始二叉搜索树中的任意节点值都不同。</p><p><strong>注意</strong>，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 <strong>任意有效的结果</strong> 。</p>        <h2 id="701-二叉搜索树中的插入操作"   >          <a href="#701-二叉搜索树中的插入操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#701-二叉搜索树中的插入操作" class="headerlink" title="701.二叉搜索树中的插入操作"></a>701.二叉搜索树中的插入操作</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/insert-into-a-binary-search-tree/" >Leetcode.701题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-34"   >          <a href="#第一次做-34" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-34" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;06</p>        <h4 id="第一次代码-36"   >          <a href="#第一次代码-36" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-36" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">insertIntoBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tervalse(root,val);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">tervalse</span><span class="params">(TreeNode root,<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root.val&gt;val)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> root.left=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> tervalse(root.left,val);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//root.val&lt;val</span></span><br><span class="line">            <span class="keyword">if</span>(root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> root.right=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> tervalse(root.right,val);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-21"   >          <a href="#提交失败-21" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-21" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:root&#x3D;[4,2,7,1,3],val&#x3D;5,返回[5]，预期返回[4,2,7,1,3,5] </p><p>我只返回了新结点，而没有把整棵树返回回来，所以对左右子树判断返回的数据</p>        <h4 id="第二次代码-14"   >          <a href="#第二次代码-14" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-14" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">insertIntoBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tervalse(root,val);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">tervalse</span><span class="params">(TreeNode root,<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root.val&gt;val)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> root.left=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                tervalse(root.left,val);</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//root.val&lt;val</span></span><br><span class="line">            <span class="keyword">if</span>(root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> root.right=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                tervalse(root.right,val);</span><br><span class="line">                <span class="keyword">return</span> root;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-22"   >          <a href="#提交失败-22" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-22" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE：root &#x3D;[5,null,14,10,77,null,null,null,95,null,null]，val&#x3D;4，输出[4]，预期输出[5,4,14,null,null,10,77,null,null,null,95]</p><p>原因：当左右子树为空的时候应该插入新数据进入左右子树，然后返回整棵树，我只返回了这个结点</p>        <h4 id="第三次代码-4"   >          <a href="#第三次代码-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-4" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">insertIntoBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tervalse(root,val);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">tervalse</span><span class="params">(TreeNode root,<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root.val&gt;val)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left==<span class="literal">null</span>)&#123;</span><br><span class="line">                root.left=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                tervalse(root.left,val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//root.val&lt;val</span></span><br><span class="line">            <span class="keyword">if</span>(root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">                root.right=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                tervalse(root.right,val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-36"   >          <a href="#提交成功-36" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-36" class="headerlink" title="提交成功"></a>提交成功</h5>              <h4 id="迭代法-2"   >          <a href="#迭代法-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#迭代法-2" class="headerlink" title="迭代法"></a>迭代法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">insertIntoBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">        TreeNode cur=root;</span><br><span class="line">       <span class="keyword">while</span>(root!=<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(root.val&gt;val)&#123;</span><br><span class="line">               <span class="keyword">if</span>(root.left==<span class="literal">null</span>)&#123;</span><br><span class="line">                   root.left=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">                   <span class="keyword">return</span> cur;</span><br><span class="line">               &#125;<span class="keyword">else</span> root=root.left;</span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&lt;val)&#123;</span><br><span class="line">               <span class="keyword">if</span>(root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">                   root.right=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">                   <span class="keyword">return</span> cur;</span><br><span class="line">               &#125;<span class="keyword">else</span> root=root.right;</span><br><span class="line">           &#125; </span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-37"   >          <a href="#提交成功-37" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-37" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-36"   >          <a href="#题解-36" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-36" class="headerlink" title="题解"></a>题解</h3>              <h4 id="递归法-2"   >          <a href="#递归法-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#递归法-2" class="headerlink" title="递归法"></a>递归法</h4>      <p>思路：我们在叶子结点进行插入，不对整棵树的原始结构进行改变</p><p><strong>实现</strong></p><ul><li><p>递归函数的参数和返回值</p><ul><li>返回值：二叉树的根节点</li><li>参数root：用于搜索的二叉树结点</li><li>参数val：要插入的结点大小</li></ul></li><li><p>递归函数的结束条件</p><ul><li>当root&#x3D;&#x3D;null，也即用于搜索的二叉树为空，则返回新结点作为树的根节点</li></ul></li><li><p>单层递归的逻辑</p><ul><li><p>当root.val&gt;val，也即当前结点值比要插入的结点大，应该插入左子树中</p><ul><li>如果左子树为空，则插入新结点作为当前结点左子树</li><li>如果左子树不为空，那么向左子树继续搜索要插入位置</li></ul></li><li><p>当root.val&lt;val，也即当前结点值要比插入的结点小，应该插入右子树中</p><ul><li>如果右子树为空，则插入新结点作为当前结点右子树</li><li>如果右子树不为空，那么向右子树继续搜索要插入的位置</li></ul></li><li><p>返回root，用于搜索的二叉树（也即插入之后的新的二叉树根节点）</p></li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">insertIntoBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tervalse(root,val);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">tervalse</span><span class="params">(TreeNode root,<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root.val&gt;val)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left==<span class="literal">null</span>)&#123;</span><br><span class="line">              <span class="comment">//如果左子树为空插入新结点于左子树中</span></span><br><span class="line">                root.left=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//不为空则向左搜索</span></span><br><span class="line">                tervalse(root.left,val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//root.val&lt;val</span></span><br><span class="line">            <span class="keyword">if</span>(root.right==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//如果右子树为空插入新结点于右子树中</span></span><br><span class="line">                root.right=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//不为空则向右搜索</span></span><br><span class="line">                tervalse(root.right,val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="迭代法-3"   >          <a href="#迭代法-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#迭代法-3" class="headerlink" title="迭代法"></a>迭代法</h4>      <p>思路：利用二叉树的特性搜索左右子树，然后在叶子结点插入新结点</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">insertIntoBST</span><span class="params">(TreeNode root, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">        <span class="comment">//定义cur来移动结点</span></span><br><span class="line">    TreeNode cur=root;</span><br><span class="line">       <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(cur.val&gt;val)&#123;</span><br><span class="line">               <span class="comment">//如果左子树为空则直接插入新结点</span></span><br><span class="line">               <span class="keyword">if</span>(cur.left==<span class="literal">null</span>)&#123;</span><br><span class="line">                   cur.left=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">                   <span class="comment">//插入完返回树的根节点</span></span><br><span class="line">                   <span class="keyword">return</span> root;</span><br><span class="line">               &#125;<span class="keyword">else</span> cur=cur.left; <span class="comment">//反之左子树不为空向左搜索</span></span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cur.val&lt;val)&#123;</span><br><span class="line">               <span class="comment">//如果右子树为空则直接插入新结点</span></span><br><span class="line">               <span class="keyword">if</span>(cur.right==<span class="literal">null</span>)&#123;</span><br><span class="line">                   cur.right=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(val);</span><br><span class="line">                   <span class="comment">//插入完返回树的根节点</span></span><br><span class="line">                   <span class="keyword">return</span> root;</span><br><span class="line">               &#125;<span class="keyword">else</span> cur=cur.right; <span class="comment">//反之右子树不为空向右搜索</span></span><br><span class="line">           &#125; </span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="删除二叉搜索树中的节点"   >          <a href="#删除二叉搜索树中的节点" class="heading-link"><i class="fas fa-link"></i></a><a href="#删除二叉搜索树中的节点" class="headerlink" title="删除二叉搜索树中的节点"></a>删除二叉搜索树中的节点</h1>      <p>给定一个二叉搜索树的根节点 <strong>root</strong> 和一个值 <strong>key</strong>，删除二叉搜索树中的 <strong>key</strong> 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p><p>一般来说，删除节点可分为两个步骤：</p><ol><li>首先找到需要删除的节点；</li><li>如果找到了，删除它。</li></ol>        <h2 id="450-删除二叉搜索树中的节点"   >          <a href="#450-删除二叉搜索树中的节点" class="heading-link"><i class="fas fa-link"></i></a><a href="#450-删除二叉搜索树中的节点" class="headerlink" title="450.删除二叉搜索树中的节点"></a>450.删除二叉搜索树中的节点</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/delete-node-in-a-bst/" >Leetcode.450题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-35"   >          <a href="#第一次做-35" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-35" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;06</p>        <h4 id="第一次代码-37"   >          <a href="#第一次代码-37" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-37" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">deleteNode</span><span class="params">(TreeNode root, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tervalse(root,key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">tervalse</span><span class="params">(TreeNode root,<span class="type">int</span> key)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span>(root.val&gt;key)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                root.left=tervalse(root.left,key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&lt;key)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                tervalse(root.right,key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val==key)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root.left!=<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>) <span class="keyword">return</span> root.left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right!=<span class="literal">null</span>) <span class="keyword">return</span> root.right;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root.left!=<span class="literal">null</span> &amp;&amp; root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                root.right.left=root.left;</span><br><span class="line">                <span class="keyword">return</span> root.right;</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-23"   >          <a href="#提交失败-23" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-23" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:root&#x3D;[5,3,6,2,4,null,7] key&#x3D;7，输出[5,3,6,2,4,null,7] 预期输出[5,3,6,2,4]</p><p>原因是未对右子树做删除处理</p>        <h4 id="第二次代码-15"   >          <a href="#第二次代码-15" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-15" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">deleteNode</span><span class="params">(TreeNode root, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tervalse(root,key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">tervalse</span><span class="params">(TreeNode root,<span class="type">int</span> key)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span>(root.val&gt;key)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                root.left=tervalse(root.left,key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&lt;key)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                root.right=tervalse(root.right,key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val==key)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root.left!=<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>) <span class="keyword">return</span> root.left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right!=<span class="literal">null</span>) <span class="keyword">return</span> root.right;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root.left!=<span class="literal">null</span> &amp;&amp; root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                root.right.left=root.left;</span><br><span class="line">                <span class="keyword">return</span> root.right;</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-24"   >          <a href="#提交失败-24" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-24" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:root &#x3D;[50,30,70,null,40,60,80]，key&#x3D;50，输出[70,30,80,null,40]，预期输出[60,30,70,null,40,null,80]</p><p>原因：当左右子树非空的时候我直接将左子树接到右子树的左子树，造成了数据丢失。</p>        <h4 id="第三次代码-5"   >          <a href="#第三次代码-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-5" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">deleteNode</span><span class="params">(TreeNode root, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tervalse(root,key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">tervalse</span><span class="params">(TreeNode root,<span class="type">int</span> key)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span>(root.val&gt;key)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                root.left=tervalse(root.left,key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&lt;key)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                root.right=tervalse(root.right,key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val==key)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root.left!=<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>) <span class="keyword">return</span> root.left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right!=<span class="literal">null</span>) <span class="keyword">return</span> root.right;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root.left!=<span class="literal">null</span> &amp;&amp; root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                TreeNode cur=root.right;</span><br><span class="line">                <span class="keyword">if</span>(cur.left==<span class="literal">null</span>)&#123;</span><br><span class="line">                    root.left=root.left;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">while</span>(cur.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                        cur=cur.left;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                cur.left=root.left;</span><br><span class="line">                <span class="keyword">return</span> root.right;</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-38"   >          <a href="#提交成功-38" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-38" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-37"   >          <a href="#题解-37" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-37" class="headerlink" title="题解"></a>题解</h3>      <p>思路：利用二叉搜索树的特性来搜索要删除的结点位置确认方向，如果没能找到要删除的结点则不作处理，如果找到了要删除的结点则要对左右子树做一个处理，维持删除之后搜索二叉树的特性</p><p><strong>实现</strong></p><ul><li>递归参数的返回值和参数<ul><li>参数root：根结点</li><li>参数key：要删除的结点值大小</li></ul></li><li>递归函数的结束条件<ul><li>当root&#x3D;&#x3D;null，说明没有找到结点，返回null</li><li>当找到要删除的结点，将其删除结点就可以结束递归了。而要删除结点时有四种情况要考虑，而返回值会在单层递归中将其接住<ul><li>左为空右不为空（是叶子结点），直接返回null即可</li><li>左不为空右为空，返回左子树</li><li>左为空右不为空，返回右子树</li><li>左不为空且右为空，将左右子树做拼接处理<ul><li>找到右子树的<strong>最左下角结点</strong>，因为最左下角值是最接近左子树最大值的结点，所以将左子树接在最左下角结点的左子树</li><li>返回根节点的右子树</li></ul></li></ul></li></ul></li><li>单层递归的处理逻辑<ul><li>当根节点值小于目标值，搜索右子树，且将根节点的右子树设置为删除之后新的右子树（如果没找到会返回原来一样的右子树）</li><li>当根节点值大于目标值，搜索左子树，且将根节点的左子树设置为删除之后新的左子树（如果没找到会返回原来一样的左子树）</li><li>当根节点值等于目标值，说明找到了要删除的结点，走判断删除结点逻辑。</li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">deleteNode</span><span class="params">(TreeNode root, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tervalse(root,key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">tervalse</span><span class="params">(TreeNode root,<span class="type">int</span> key)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="keyword">if</span>(root.val&gt;key)&#123;</span><br><span class="line">            <span class="comment">//当根节点比key大，说明在左子树中搜索左子树</span></span><br><span class="line">            <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//将当前根节点的左子树设置为删除之后新的左子树</span></span><br><span class="line">                root.left=tervalse(root.left,key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&lt;key)&#123;</span><br><span class="line">            <span class="comment">//当根节点值比key小，说明在右子树中搜索右子树</span></span><br><span class="line">            <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//将当前根节点的右子树设置为删除之后新的右子树</span></span><br><span class="line">                root.right=tervalse(root.right,key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val==key)&#123;</span><br><span class="line">            <span class="comment">//找到要删除的结点，有四种场景</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//①如果是叶子结点则返回空结点</span></span><br><span class="line">            <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root.left!=<span class="literal">null</span> &amp;&amp; root.right==<span class="literal">null</span>) <span class="keyword">return</span> root.left;<span class="comment">//②左不空右为空 </span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root.left==<span class="literal">null</span> &amp;&amp; root.right!=<span class="literal">null</span>) <span class="keyword">return</span> root.right;<span class="comment">//③左为空右不为空</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root.left!=<span class="literal">null</span> &amp;&amp; root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//④左不为空右为空</span></span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                TreeNode cur=root.right;</span><br><span class="line">                <span class="comment">//当cur指向右子树的最左下角结点 也即cur.left==null</span></span><br><span class="line">                <span class="keyword">while</span>(cur.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                   cur=cur.left;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//将root左子树接在cur的左子树中</span></span><br><span class="line">                cur.left=root.left;</span><br><span class="line">                <span class="keyword">return</span> root.right;</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="修剪二叉搜索树"   >          <a href="#修剪二叉搜索树" class="heading-link"><i class="fas fa-link"></i></a><a href="#修剪二叉搜索树" class="headerlink" title="修剪二叉搜索树"></a>修剪二叉搜索树</h1>      <p>给你二叉搜索树的根节点 <code>root</code> ，同时给定最小边界<code>low</code> 和最大边界 <code>high</code>。通过修剪二叉搜索树，使得所有节点的值在<code>[low, high]</code>中。修剪树 <strong>不应该</strong> 改变保留在树中的元素的相对结构 (即，如果没有被移除，原有的父代子代关系都应当保留)。 可以证明，存在 <strong>唯一的答案</strong> 。</p><p>所以结果应当返回修剪好的二叉搜索树的新的根节点。注意，根节点可能会根据给定的边界发生改变。</p>        <h2 id="669-修剪二叉搜索树"   >          <a href="#669-修剪二叉搜索树" class="heading-link"><i class="fas fa-link"></i></a><a href="#669-修剪二叉搜索树" class="headerlink" title="669.修剪二叉搜索树"></a>669.修剪二叉搜索树</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/trim-a-binary-search-tree/" >Leetcode.669题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-36"   >          <a href="#第一次做-36" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-36" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;07</p>        <h4 id="第一次代码-38"   >          <a href="#第一次代码-38" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-38" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">trimBST</span><span class="params">(TreeNode root, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> changeTree(root,low,high);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//    [low,high]</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">changeTree</span><span class="params">(TreeNode root,<span class="type">int</span> low, <span class="type">int</span> high)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root.val&lt;low)&#123;</span><br><span class="line">            <span class="keyword">return</span> changeTree(root.right,low,high);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&gt;high)&#123;</span><br><span class="line">            <span class="keyword">return</span> changeTree(root.left,low,high);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&gt;=low &amp;&amp; root.val&lt;=high)&#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">                root.left=changeTree(root.left,low,high);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">                root.right=changeTree(root.right,low,high);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-39"   >          <a href="#提交成功-39" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-39" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-38"   >          <a href="#题解-38" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-38" class="headerlink" title="题解"></a>题解</h3>      <p>思路：这道题和前面删除结点不同，需要改变树的结构。不能直接将左右子树拼接上去，而需要将符合条件的子树修剪之后更新</p><p><strong>实现</strong></p><ul><li><p>递归函数的返回值和参数</p><ul><li>参数root：需要修剪的根节点</li><li>参数low：左区间</li><li>参数high：右区间</li><li>返回值TreeNode：修建之后的根节点</li></ul></li><li><p>递归的结束条件</p><ul><li>root&#x3D;&#x3D;null：说明是空节点，返回空间点</li><li>判断root.val和low与high的值<ul><li>root.val&lt;low :说明根节点是需要删除的结点，向右子树遍历修剪右子树，然后返回修剪后的右子树（返回值在单层递归中接住）</li><li>root.val&gt;high:说明根节点是需要删除的结点，向左子树遍历修剪左子树，然后返回修剪后的左子树（返回值在单层递归中接住）</li></ul></li></ul></li><li><p>单层递归的处理逻辑</p><p><em>low&lt;&#x3D;root.val&lt;&#x3D;high</em></p><ul><li>判断是否有左子树，如果有左子树则更新根节点的左子树(root.left)，在这里接住递归之后的返回值</li><li>判断是否有右子树，如果有右子树则更新根节点的右子树(root.right)，在这里接住递归之后的返回值</li></ul></li><li><p>返回修枝之后的根节点</p></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">trimBST</span><span class="params">(TreeNode root, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> changeTree(root,low,high);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//    [low,high]</span></span><br><span class="line">   <span class="keyword">public</span> TreeNode <span class="title function_">changeTree</span><span class="params">(TreeNode root,<span class="type">int</span> low, <span class="type">int</span> high)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//如果当前结点值比左区间小，删除本结点</span></span><br><span class="line">       <span class="keyword">if</span>(root.val&lt;low)&#123;</span><br><span class="line">           <span class="comment">//向本结点的右子树修剪，返回修剪后的右子树</span></span><br><span class="line">           <span class="keyword">return</span> changeTree(root.right,low,high);</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&gt;high)&#123;</span><br><span class="line">           <span class="comment">//如果当前值比右区间大，删除本结点</span></span><br><span class="line">           <span class="comment">//向本结点的左子树修剪，返回修剪后的左子树</span></span><br><span class="line">           <span class="keyword">return</span> changeTree(root.left,low,high);</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(root.val&gt;=low &amp;&amp; root.val&lt;=high)&#123;</span><br><span class="line">           <span class="comment">//如果有左子树，修剪左子树</span></span><br><span class="line">           <span class="keyword">if</span>(root.left!=<span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="comment">//单层递归中接住返回值，更新左子树</span></span><br><span class="line">               root.left=changeTree(root.left,low,high);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//如果有右子树，修剪右子树</span></span><br><span class="line">           <span class="keyword">if</span>(root.right!=<span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="comment">//单层递归中接住右子树，更新右子树</span></span><br><span class="line">               root.right=changeTree(root.right,low,high);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//返回修剪后的根节点</span></span><br><span class="line">       <span class="keyword">return</span> root;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="将有序数组转换为二叉搜索树"   >          <a href="#将有序数组转换为二叉搜索树" class="heading-link"><i class="fas fa-link"></i></a><a href="#将有序数组转换为二叉搜索树" class="headerlink" title="将有序数组转换为二叉搜索树"></a>将有序数组转换为二叉搜索树</h1>      <p>给你一个整数数组 <code>nums</code> ，其中元素已经按 <strong>升序</strong> 排列，请你将其转换为一棵 <strong>高度平衡</strong> 二叉搜索树。</p><p><strong>高度平衡</strong> 二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过 1 」的二叉树。</p>        <h2 id="108-将有序数组转换为二叉搜索树"   >          <a href="#108-将有序数组转换为二叉搜索树" class="heading-link"><i class="fas fa-link"></i></a><a href="#108-将有序数组转换为二叉搜索树" class="headerlink" title="108.将有序数组转换为二叉搜索树"></a>108.将有序数组转换为二叉搜索树</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/" >Leetcode.108题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-37"   >          <a href="#第一次做-37" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-37" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;07</p>        <h4 id="第一次代码-39"   >          <a href="#第一次代码-39" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-39" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">sortedArrayToBST</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        TreeNode root=<span class="keyword">new</span> <span class="title class_">TreeNode</span>();</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> num=nums.length/<span class="number">2</span>;</span><br><span class="line">        root.val=nums[num];</span><br><span class="line"></span><br><span class="line">        root.left=addTree(nums,<span class="number">0</span>,num);</span><br><span class="line">        <span class="keyword">if</span>(num&lt;nums.length-<span class="number">1</span>)&#123;</span><br><span class="line">        root.right=addTree(nums,num+<span class="number">1</span>,nums.length);&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">addTree</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start,<span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start==end) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        TreeNode node=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[start]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=start;i&lt;end;i++)&#123;</span><br><span class="line">            node.left=addTree(nums,start+<span class="number">1</span>,end);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-7"   >          <a href="#提交错误-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-7" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:nums&#x3D;[-10,-3,0,5,9]，输出[0,-10,5,-3,null,9]  预期输出[0,-3,9,-10,null,5]</p>        <h4 id="第二次代码-16"   >          <a href="#第二次代码-16" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-16" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">sortedArrayToBST</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        TreeNode root=<span class="keyword">new</span> <span class="title class_">TreeNode</span>();</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> num=nums.length/<span class="number">2</span>;</span><br><span class="line">        root.val=nums[num];</span><br><span class="line"></span><br><span class="line">        root.left=addTree(nums,<span class="number">0</span>,num);</span><br><span class="line">        <span class="keyword">if</span>(num&lt;nums.length-<span class="number">1</span>)&#123;</span><br><span class="line">        root.right=addTree(nums,num+<span class="number">1</span>,nums.length);&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">addTree</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start,<span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start==end) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        TreeNode node=<span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[end-<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=end-<span class="number">1</span>;i&gt;=start;i--)&#123;</span><br><span class="line">            node.left=addTree(nums,start,end-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-8"   >          <a href="#提交错误-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-8" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:root&#x3D;[0,1,2,3,4,5] ，输出[3,2,5,1,null,4,null,0]，预期输出[3,1,5,0,2,4]</p><p>原因：这样保证了根节点的左右子树高度差不超过1，可以其他结点的子树左右子树高度差超过了1，空子树也算高度0，不能单方向的一直接</p>        <h4 id="第三次代码-6"   >          <a href="#第三次代码-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-6" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">sortedArrayToBST</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> addTree(nums,<span class="number">0</span>,nums.length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">addTree</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start,<span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start==end) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(end==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        TreeNode root=<span class="keyword">new</span> <span class="title class_">TreeNode</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> num=(start+end)/<span class="number">2</span>;</span><br><span class="line">        root.val=nums[num];</span><br><span class="line"></span><br><span class="line">        root.left=addTree(nums,<span class="number">0</span>,num);</span><br><span class="line">        <span class="keyword">if</span>(num&lt;end-<span class="number">1</span>)&#123;</span><br><span class="line">        root.right=addTree(nums,num+<span class="number">1</span>,end);&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-9"   >          <a href="#提交错误-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-9" class="headerlink" title="提交错误"></a>提交错误</h5>              <h4 id="第四次代码-2"   >          <a href="#第四次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四次代码-2" class="headerlink" title="第四次代码"></a>第四次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">sortedArrayToBST</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> addTree(nums,<span class="number">0</span>,nums.length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">addTree</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start,<span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start==end) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(end==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        TreeNode root=<span class="keyword">new</span> <span class="title class_">TreeNode</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> num=(start+end)/<span class="number">2</span>;</span><br><span class="line">        root.val=nums[num];</span><br><span class="line">        </span><br><span class="line">        root.left=addTree(nums,start,num);</span><br><span class="line">        <span class="keyword">if</span>(num&lt;end-<span class="number">1</span>)&#123;</span><br><span class="line">        root.right=addTree(nums,num+<span class="number">1</span>,end);&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-40"   >          <a href="#提交成功-40" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-40" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-39"   >          <a href="#题解-39" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-39" class="headerlink" title="题解"></a>题解</h3>      <p>思路:构造平衡搜索二叉树，先构造根节点，然后根据关系切割数组构造左子树，切割数组构造右子树</p><p><strong>实现</strong></p><ul><li>递归函数的参数和返回值<ul><li>返回值TreeNode：构造出的二叉搜索树根节点</li><li>参数nums：升序数组</li><li>参数start：左区间</li><li>参数end：右区间</li></ul></li><li>递归函数的结束条件<ul><li>当start和end合法，也即start&lt;&#x3D;end；当start&#x3D;&#x3D;end时返回null</li></ul></li><li>单层递归的逻辑<ul><li>取得升序数组区间中的中间元素：mid&#x3D;(start+end)&#x2F;2</li><li>构造左子树：区间为[start，mid) 左闭右开构建</li><li>构造右子树：区间为[mid+1,end)左闭右开构建</li></ul></li><li>返回构建出的二叉树root</li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">sortedArrayToBST</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">   <span class="comment">//左闭右开，所以传入0和nums.length</span></span><br><span class="line">       <span class="keyword">return</span> addTree(nums,<span class="number">0</span>,nums.length);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> TreeNode <span class="title function_">addTree</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span> start,<span class="type">int</span> end)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(start==end) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">if</span>(end==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">       TreeNode root=<span class="keyword">new</span> <span class="title class_">TreeNode</span>();</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> mid=(start+end)/<span class="number">2</span>;</span><br><span class="line">       </span><br><span class="line">       root.val=nums[mid];</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//构造左子树，区间在[start,mid)</span></span><br><span class="line">       root.left=addTree(nums,start,mid);</span><br><span class="line">    <span class="comment">//构造右子树，区间在[mid+1,end)</span></span><br><span class="line">       <span class="keyword">if</span>(mid&lt;end-<span class="number">1</span>)&#123;</span><br><span class="line">       root.right=addTree(nums,mid+<span class="number">1</span>,end);&#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> root;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="把二叉搜索树转换为累加树"   >          <a href="#把二叉搜索树转换为累加树" class="heading-link"><i class="fas fa-link"></i></a><a href="#把二叉搜索树转换为累加树" class="headerlink" title="把二叉搜索树转换为累加树"></a>把二叉搜索树转换为累加树</h1>      <p>给出二叉 <strong>搜索</strong> 树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），使每个节点 <code>node</code> 的新值等于原树中大于或等于 <code>node.val</code> 的值之和。</p><p>提醒一下，二叉搜索树满足下列约束条件：</p><ul><li>节点的左子树仅包含键 <strong>小于</strong> 节点键的节点。</li><li>节点的右子树仅包含键 <strong>大于</strong> 节点键的节点。</li><li>左右子树也必须是二叉搜索树。</li></ul><p><strong>注意：</strong>本题和 1038: <span class="exturl"><a class="exturl__link"   href="https://leetcode-cn.com/problems/binary-search-tree-to-greater-sum-tree/" >https://leetcode-cn.com/problems/binary-search-tree-to-greater-sum-tree/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 相同</p><blockquote><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/binary-search-tree-to-greater-sum-tree/" >1038. 从二叉搜索树到更大和树</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p></blockquote>        <h2 id="538-把二叉搜索树转换为累加树"   >          <a href="#538-把二叉搜索树转换为累加树" class="heading-link"><i class="fas fa-link"></i></a><a href="#538-把二叉搜索树转换为累加树" class="headerlink" title="538.把二叉搜索树转换为累加树"></a>538.把二叉搜索树转换为累加树</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/convert-bst-to-greater-tree/" >Leetcode.538题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-38"   >          <a href="#第一次做-38" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-38" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;09&#x2F;07</p>        <h4 id="第一次代码-40"   >          <a href="#第一次代码-40" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-40" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    TreeNode pre;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">convertBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        pre=<span class="literal">null</span>;</span><br><span class="line">        changeBST(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeBST</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        changeBST(root.left);</span><br><span class="line">        <span class="keyword">if</span>(pre!=<span class="literal">null</span>)&#123;</span><br><span class="line">            root.val=root.val+pre.val;</span><br><span class="line">        &#125;</span><br><span class="line">        pre=root;</span><br><span class="line">        changeBST(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-25"   >          <a href="#提交失败-25" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-25" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:root&#x3D;[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]，输出[10,1,21,0,3,15,28,null,null,null,6,null,null,null,36]，预期输出[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]</p>        <h4 id="第二次代码-17"   >          <a href="#第二次代码-17" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-17" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    TreeNode pre;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">convertBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        pre=<span class="literal">null</span>;</span><br><span class="line">        changeBST(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeBST</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//先遍历右子树</span></span><br><span class="line">        changeBST(root.right);</span><br><span class="line">        <span class="keyword">if</span>(pre!=<span class="literal">null</span>)&#123;</span><br><span class="line">            root.val=root.val+pre.val;</span><br><span class="line">        &#125;</span><br><span class="line">        pre=root;</span><br><span class="line">        <span class="comment">//再遍历左子树</span></span><br><span class="line">        changeBST(root.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-41"   >          <a href="#提交成功-41" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-41" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-40"   >          <a href="#题解-40" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-40" class="headerlink" title="题解"></a>题解</h3>      <p>思路：通过分析这道题的示例，我们知道这个累加数换成数组就是从后遍历然后记录和的最大值。</p><p>也即我们可以通过<strong>右中左的遍历顺序</strong>，来改变每个结点的数值，我们这里用<strong>双指针</strong>来实现这道题会是比较简单的</p><p><strong>实现</strong></p><blockquote><p>二叉搜索树是中序(左中右)是升序数组，所以我们用(右中左)就是降序数组</p></blockquote><ul><li><p>递归函数的参数和返回值</p><ul><li>无返回值，整个递归过程处理完逻辑</li><li>参数root：要用于转换的二叉树根节点</li></ul></li><li><p>递归函数的结束条件</p><p>当root为空，说明遍历到最后一个结点下的空结点，结束递归</p></li><li><p>递归函数的单层逻辑</p><ul><li>先遍历右子树</li><li>pre不为空的时候，root.val&#x3D;&#x3D;root.val+pre.val（当前结点数值为当前节点值+上一结点值）</li><li>pre&#x3D;root：移动pre指针使其保证一直在root前一个结点</li><li>再遍历左子树</li></ul></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    TreeNode pre;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">convertBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">       <span class="comment">//初始化pre</span></span><br><span class="line">        pre=<span class="literal">null</span>;</span><br><span class="line">        changeBST(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeBST</span><span class="params">(TreeNode root)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//先遍历右子树</span></span><br><span class="line">        changeBST(root.right);</span><br><span class="line">        <span class="comment">//pre为空说明root是第一个结点</span></span><br><span class="line">        <span class="keyword">if</span>(pre!=<span class="literal">null</span>)&#123;</span><br><span class="line">            root.val=root.val+pre.val;</span><br><span class="line">        &#125;</span><br><span class="line">        pre=root;</span><br><span class="line">        <span class="comment">//再遍历左子树</span></span><br><span class="line">        changeBST(root.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="总结-1"   >          <a href="#总结-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1>      <p>到这里二叉树也算这部分结束了，从这篇中我们可以学习到</p><ul><li><p>二叉树的种类如<strong>二叉搜索树、完全二叉树、满二叉树、平衡二叉树</strong></p></li><li><p>二叉树的搜索方式如<strong>深度优先搜索、广度优先搜索</strong></p><ul><li>深度优先搜索<ul><li>递归遍历：<strong>前序遍历、中序遍历、后序遍历</strong></li><li>非递归遍历：<strong>迭代法</strong>遍历（统一迭代法）</li></ul></li><li>广度 优先搜索<ul><li>层序遍历</li></ul></li></ul></li><li><p>二叉树的特性</p><ul><li>二叉搜索树的<strong>中序遍历</strong>输出是一个有序数组</li><li>平衡二叉树的每一个结点高度差不能超过1</li><li>树的深度是从根节点往叶子结点数</li><li>树的高度是从叶子结点向根节点数</li></ul></li></ul><p>我们也能从中学习到<strong>回溯</strong>的思想，从搜索二叉树中学习到<strong>双指针</strong>的思路</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入剖析并发编程-JUC篇[4-Atomic]</title>
      <link href="/2023/08/23/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-JUC%E7%AF%87%5B4-Atomic%5D/"/>
      <url>/2023/08/23/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-JUC%E7%AF%87%5B4-Atomic%5D/</url>
      
        <content type="html"><![CDATA[<p><strong>Atomic原子包</strong></p><hr><ul><li>第一篇是JUC并发编程基础</li><li>第二篇是JMM、Volatile关键字、synchronize锁详解</li><li>第三篇是CAS机制原理、Unsafe魔法类、LockSupport工具类、ThreadLocal线程变量</li><li>第四篇是Atomic原子包源码详解</li><li>第五篇是AQS源码以及机制详解</li></ul><hr>        <h1 id="Atomic原子包"   >          <a href="#Atomic原子包" class="heading-link"><i class="fas fa-link"></i></a><a href="#Atomic原子包" class="headerlink" title="Atomic原子包"></a>Atomic原子包</h1>      <p>我们可以看到Atomic包下所有的类，在这里先做总的目录，然后再细分说各个类</p><blockquote><p>AtomicBoolean<br>AtomicInteger<br>AtomicIntegerArray<br>AtomicIntegerFieldUpdater<br>AtomicLong<br>AtomicLongArray<br>AtomicLongFieldUpdater<br>AtomicMarkableReference<br>AtomicReference<br>AtomicReferenceArray<br>AtomicReferenceFieldUpdater<br>AtomicStampedReference<br>DoubleAccumulator<br>DoubleAdder<br>LongAccumulator<br>LongAdder<br>Striped64</p></blockquote><p>我们这里分成五类原子操作类</p><p><strong>1</strong>.基本原子操作类(基本数据类型和引用数据类型)</p><p><strong>2</strong>.数组类型原子操作类</p><p><strong>3</strong>.属性更新原子操作类</p><p><strong>4</strong>.特殊标记原子操作类</p><p><strong>5</strong>.基于分治思想新增的原子操作类</p>        <h2 id="基本原子操作类"   >          <a href="#基本原子操作类" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本原子操作类" class="headerlink" title="基本原子操作类"></a>基本原子操作类</h2>      <p>我们先从Integer类型下的源码开始看起</p>        <h3 id="AtomicInteger"   >          <a href="#AtomicInteger" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h3>      <p><strong>源码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicInteger</span> <span class="keyword">extends</span> <span class="title class_">Number</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6214790243416807050L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> valueOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicInteger.class.getDeclaredField(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AtomicInteger</span><span class="params">(<span class="type">int</span> initialValue)</span> &#123;</span><br><span class="line">        value = initialValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AtomicInteger</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> newValue)</span> &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lazySet</span><span class="params">(<span class="type">int</span> newValue)</span> &#123;</span><br><span class="line">        unsafe.putOrderedInt(<span class="built_in">this</span>, valueOffset, newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndSet</span><span class="params">(<span class="type">int</span> newValue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndSetInt(<span class="built_in">this</span>, valueOffset, newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSet</span><span class="params">(<span class="type">int</span> expect, <span class="type">int</span> update)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="built_in">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">weakCompareAndSet</span><span class="params">(<span class="type">int</span> expect, <span class="type">int</span> update)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="built_in">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndIncrement</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="built_in">this</span>, valueOffset, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndDecrement</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="built_in">this</span>, valueOffset, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAdd</span><span class="params">(<span class="type">int</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="built_in">this</span>, valueOffset, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">incrementAndGet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="built_in">this</span>, valueOffset, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">decrementAndGet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="built_in">this</span>, valueOffset, -<span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">addAndGet</span><span class="params">(<span class="type">int</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="built_in">this</span>, valueOffset, delta) + delta;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndUpdate</span><span class="params">(IntUnaryOperator updateFunction)</span> &#123;</span><br><span class="line">        <span class="type">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = updateFunction.applyAsInt(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">updateAndGet</span><span class="params">(IntUnaryOperator updateFunction)</span> &#123;</span><br><span class="line">        <span class="type">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = updateFunction.applyAsInt(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAccumulate</span><span class="params">(<span class="type">int</span> x,</span></span><br><span class="line"><span class="params">                                      IntBinaryOperator accumulatorFunction)</span> &#123;</span><br><span class="line">        <span class="type">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = accumulatorFunction.applyAsInt(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">accumulateAndGet</span><span class="params">(<span class="type">int</span> x,</span></span><br><span class="line"><span class="params">                                      IntBinaryOperator accumulatorFunction)</span> &#123;</span><br><span class="line">        <span class="type">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = accumulatorFunction.applyAsInt(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.toString(get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">intValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">longValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">long</span>)get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">floatValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">float</span>)get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">doubleValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>)get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="AtomicBoolean"   >          <a href="#AtomicBoolean" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicBoolean" class="headerlink" title="AtomicBoolean"></a>AtomicBoolean</h3>      <p><strong>源码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicBoolean</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">4654671469794556979L</span>;</span><br><span class="line">    <span class="comment">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> valueOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicBoolean.class.getDeclaredField(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AtomicBoolean</span><span class="params">(<span class="type">boolean</span> initialValue)</span> &#123;</span><br><span class="line">        value = initialValue ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AtomicBoolean</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSet</span><span class="params">(<span class="type">boolean</span> expect, <span class="type">boolean</span> update)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> expect ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> update ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="built_in">this</span>, valueOffset, e, u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">weakCompareAndSet</span><span class="params">(<span class="type">boolean</span> expect, <span class="type">boolean</span> update)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> expect ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> update ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="built_in">this</span>, valueOffset, e, u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">boolean</span> newValue)</span> &#123;</span><br><span class="line">        value = newValue ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lazySet</span><span class="params">(<span class="type">boolean</span> newValue)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> newValue ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        unsafe.putOrderedInt(<span class="built_in">this</span>, valueOffset, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">getAndSet</span><span class="params">(<span class="type">boolean</span> newValue)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> prev;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, newValue));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Boolean.toString(get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="AtomicLong"   >          <a href="#AtomicLong" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicLong" class="headerlink" title="AtomicLong"></a>AtomicLong</h3>      <p><strong>源码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicLong</span> <span class="keyword">extends</span> <span class="title class_">Number</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1927816293512124184L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup to use Unsafe.compareAndSwapLong for updates</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> valueOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">VM_SUPPORTS_LONG_CAS</span> <span class="operator">=</span> VMSupportsCS8();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">VMSupportsCS8</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicLong.class.getDeclaredField(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">long</span> value;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AtomicLong</span><span class="params">(<span class="type">long</span> initialValue)</span> &#123;</span><br><span class="line">        value = initialValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AtomicLong</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">long</span> newValue)</span> &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lazySet</span><span class="params">(<span class="type">long</span> newValue)</span> &#123;</span><br><span class="line">        unsafe.putOrderedLong(<span class="built_in">this</span>, valueOffset, newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">getAndSet</span><span class="params">(<span class="type">long</span> newValue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndSetLong(<span class="built_in">this</span>, valueOffset, newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSet</span><span class="params">(<span class="type">long</span> expect, <span class="type">long</span> update)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapLong(<span class="built_in">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">weakCompareAndSet</span><span class="params">(<span class="type">long</span> expect, <span class="type">long</span> update)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapLong(<span class="built_in">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">getAndIncrement</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddLong(<span class="built_in">this</span>, valueOffset, <span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">getAndDecrement</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddLong(<span class="built_in">this</span>, valueOffset, -<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">getAndAdd</span><span class="params">(<span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddLong(<span class="built_in">this</span>, valueOffset, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">incrementAndGet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddLong(<span class="built_in">this</span>, valueOffset, <span class="number">1L</span>) + <span class="number">1L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">decrementAndGet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddLong(<span class="built_in">this</span>, valueOffset, -<span class="number">1L</span>) - <span class="number">1L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">addAndGet</span><span class="params">(<span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddLong(<span class="built_in">this</span>, valueOffset, delta) + delta;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">getAndUpdate</span><span class="params">(LongUnaryOperator updateFunction)</span> &#123;</span><br><span class="line">        <span class="type">long</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = updateFunction.applyAsLong(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">updateAndGet</span><span class="params">(LongUnaryOperator updateFunction)</span> &#123;</span><br><span class="line">        <span class="type">long</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = updateFunction.applyAsLong(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">getAndAccumulate</span><span class="params">(<span class="type">long</span> x,</span></span><br><span class="line"><span class="params">                                       LongBinaryOperator accumulatorFunction)</span> &#123;</span><br><span class="line">        <span class="type">long</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = accumulatorFunction.applyAsLong(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">accumulateAndGet</span><span class="params">(<span class="type">long</span> x,</span></span><br><span class="line"><span class="params">                                       LongBinaryOperator accumulatorFunction)</span> &#123;</span><br><span class="line">        <span class="type">long</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = accumulatorFunction.applyAsLong(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Long.toString(get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">intValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">longValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">floatValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">float</span>)get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">doubleValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>)get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="AtomicReference"   >          <a href="#AtomicReference" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicReference" class="headerlink" title="AtomicReference"></a>AtomicReference</h3>      <p><strong>源码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicReference</span>&lt;V&gt; <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">1848883965231344442L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> valueOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicReference.class.getDeclaredField(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> V value;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AtomicReference</span><span class="params">(V initialValue)</span> &#123;</span><br><span class="line">        value = initialValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AtomicReference</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(V newValue)</span> &#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lazySet</span><span class="params">(V newValue)</span> &#123;</span><br><span class="line">        unsafe.putOrderedObject(<span class="built_in">this</span>, valueOffset, newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSet</span><span class="params">(V expect, V update)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapObject(<span class="built_in">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">weakCompareAndSet</span><span class="params">(V expect, V update)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapObject(<span class="built_in">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">getAndSet</span><span class="params">(V newValue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (V)unsafe.getAndSetObject(<span class="built_in">this</span>, valueOffset, newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">getAndUpdate</span><span class="params">(UnaryOperator&lt;V&gt; updateFunction)</span> &#123;</span><br><span class="line">        V prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = updateFunction.apply(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">updateAndGet</span><span class="params">(UnaryOperator&lt;V&gt; updateFunction)</span> &#123;</span><br><span class="line">        V prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = updateFunction.apply(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">getAndAccumulate</span><span class="params">(V x,</span></span><br><span class="line"><span class="params">                                    BinaryOperator&lt;V&gt; accumulatorFunction)</span> &#123;</span><br><span class="line">        V prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = accumulatorFunction.apply(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">accumulateAndGet</span><span class="params">(V x,</span></span><br><span class="line"><span class="params">                                    BinaryOperator&lt;V&gt; accumulatorFunction)</span> &#123;</span><br><span class="line">        V prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get();</span><br><span class="line">            next = accumulatorFunction.apply(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="数组类型原子操作类"   >          <a href="#数组类型原子操作类" class="heading-link"><i class="fas fa-link"></i></a><a href="#数组类型原子操作类" class="headerlink" title="数组类型原子操作类"></a>数组类型原子操作类</h2>              <h3 id="AtomicIntegerArray"   >          <a href="#AtomicIntegerArray" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicIntegerArray" class="headerlink" title="AtomicIntegerArray"></a>AtomicIntegerArray</h3>      <p><strong>源码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicIntegerArray</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">2862133569453604235L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">base</span> <span class="operator">=</span> unsafe.arrayBaseOffset(<span class="type">int</span>[].class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> shift;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span>[] array;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">scale</span> <span class="operator">=</span> unsafe.arrayIndexScale(<span class="type">int</span>[].class);</span><br><span class="line">        <span class="keyword">if</span> ((scale &amp; (scale - <span class="number">1</span>)) != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;data type scale not a power of two&quot;</span>);</span><br><span class="line">        shift = <span class="number">31</span> - Integer.numberOfLeadingZeros(scale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">checkedByteOffset</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= array.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;index &quot;</span> + i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> byteOffset(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">byteOffset</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ((<span class="type">long</span>) i &lt;&lt; shift) + base;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AtomicIntegerArray</span><span class="params">(<span class="type">int</span> length)</span> &#123;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AtomicIntegerArray</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">        <span class="comment">// Visibility guaranteed by final field guarantees</span></span><br><span class="line">        <span class="built_in">this</span>.array = array.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> array.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getRaw(checkedByteOffset(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getRaw</span><span class="params">(<span class="type">long</span> offset)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getIntVolatile(array, offset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> newValue)</span> &#123;</span><br><span class="line">        unsafe.putIntVolatile(array, checkedByteOffset(i), newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lazySet</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> newValue)</span> &#123;</span><br><span class="line">        unsafe.putOrderedInt(array, checkedByteOffset(i), newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndSet</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> newValue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndSetInt(array, checkedByteOffset(i), newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSet</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> expect, <span class="type">int</span> update)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> compareAndSetRaw(checkedByteOffset(i), expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">compareAndSetRaw</span><span class="params">(<span class="type">long</span> offset, <span class="type">int</span> expect, <span class="type">int</span> update)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapInt(array, offset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">weakCompareAndSet</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> expect, <span class="type">int</span> update)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> compareAndSet(i, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndIncrement</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getAndAdd(i, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndDecrement</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getAndAdd(i, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAdd</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(array, checkedByteOffset(i), delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">incrementAndGet</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getAndAdd(i, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">decrementAndGet</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getAndAdd(i, -<span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">addAndGet</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getAndAdd(i, delta) + delta;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndUpdate</span><span class="params">(<span class="type">int</span> i, IntUnaryOperator updateFunction)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> checkedByteOffset(i);</span><br><span class="line">        <span class="type">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = getRaw(offset);</span><br><span class="line">            next = updateFunction.applyAsInt(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSetRaw(offset, prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">updateAndGet</span><span class="params">(<span class="type">int</span> i, IntUnaryOperator updateFunction)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> checkedByteOffset(i);</span><br><span class="line">        <span class="type">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = getRaw(offset);</span><br><span class="line">            next = updateFunction.applyAsInt(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSetRaw(offset, prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAccumulate</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> x,</span></span><br><span class="line"><span class="params">                                      IntBinaryOperator accumulatorFunction)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> checkedByteOffset(i);</span><br><span class="line">        <span class="type">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = getRaw(offset);</span><br><span class="line">            next = accumulatorFunction.applyAsInt(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSetRaw(offset, prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">accumulateAndGet</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> x,</span></span><br><span class="line"><span class="params">                                      IntBinaryOperator accumulatorFunction)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> checkedByteOffset(i);</span><br><span class="line">        <span class="type">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = getRaw(offset);</span><br><span class="line">            next = accumulatorFunction.applyAsInt(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSetRaw(offset, prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">iMax</span> <span class="operator">=</span> array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (iMax == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        b.append(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; ; i++) &#123;</span><br><span class="line">            b.append(getRaw(byteOffset(i)));</span><br><span class="line">            <span class="keyword">if</span> (i == iMax)</span><br><span class="line">                <span class="keyword">return</span> b.append(<span class="string">&#x27;]&#x27;</span>).toString();</span><br><span class="line">            b.append(<span class="string">&#x27;,&#x27;</span>).append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="AtomicLongArray"   >          <a href="#AtomicLongArray" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicLongArray" class="headerlink" title="AtomicLongArray"></a>AtomicLongArray</h3>      <p><strong>源码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicReferenceArray</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">6209656149925076980L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> base;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> shift;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> arrayFieldOffset;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] array; <span class="comment">// must have exact type Object[]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            unsafe = Unsafe.getUnsafe();</span><br><span class="line">            arrayFieldOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicReferenceArray.class.getDeclaredField(<span class="string">&quot;array&quot;</span>));</span><br><span class="line">            base = unsafe.arrayBaseOffset(Object[].class);</span><br><span class="line">            <span class="type">int</span> <span class="variable">scale</span> <span class="operator">=</span> unsafe.arrayIndexScale(Object[].class);</span><br><span class="line">            <span class="keyword">if</span> ((scale &amp; (scale - <span class="number">1</span>)) != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;data type scale not a power of two&quot;</span>);</span><br><span class="line">            shift = <span class="number">31</span> - Integer.numberOfLeadingZeros(scale);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">checkedByteOffset</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= array.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;index &quot;</span> + i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> byteOffset(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">byteOffset</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ((<span class="type">long</span>) i &lt;&lt; shift) + base;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AtomicReferenceArray</span><span class="params">(<span class="type">int</span> length)</span> &#123;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="title class_">Object</span>[length];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AtomicReferenceArray</span><span class="params">(E[] array)</span> &#123;</span><br><span class="line">        <span class="comment">// Visibility guaranteed by final field guarantees</span></span><br><span class="line">        <span class="built_in">this</span>.array = Arrays.copyOf(array, array.length, Object[].class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> array.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getRaw(checkedByteOffset(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> E <span class="title function_">getRaw</span><span class="params">(<span class="type">long</span> offset)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (E) unsafe.getObjectVolatile(array, offset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> i, E newValue)</span> &#123;</span><br><span class="line">        unsafe.putObjectVolatile(array, checkedByteOffset(i), newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lazySet</span><span class="params">(<span class="type">int</span> i, E newValue)</span> &#123;</span><br><span class="line">        unsafe.putOrderedObject(array, checkedByteOffset(i), newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> E <span class="title function_">getAndSet</span><span class="params">(<span class="type">int</span> i, E newValue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (E)unsafe.getAndSetObject(array, checkedByteOffset(i), newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSet</span><span class="params">(<span class="type">int</span> i, E expect, E update)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> compareAndSetRaw(checkedByteOffset(i), expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">compareAndSetRaw</span><span class="params">(<span class="type">long</span> offset, E expect, E update)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapObject(array, offset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">weakCompareAndSet</span><span class="params">(<span class="type">int</span> i, E expect, E update)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> compareAndSet(i, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> E <span class="title function_">getAndUpdate</span><span class="params">(<span class="type">int</span> i, UnaryOperator&lt;E&gt; updateFunction)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> checkedByteOffset(i);</span><br><span class="line">        E prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = getRaw(offset);</span><br><span class="line">            next = updateFunction.apply(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSetRaw(offset, prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> E <span class="title function_">updateAndGet</span><span class="params">(<span class="type">int</span> i, UnaryOperator&lt;E&gt; updateFunction)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> checkedByteOffset(i);</span><br><span class="line">        E prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = getRaw(offset);</span><br><span class="line">            next = updateFunction.apply(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSetRaw(offset, prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> E <span class="title function_">getAndAccumulate</span><span class="params">(<span class="type">int</span> i, E x,</span></span><br><span class="line"><span class="params">                                    BinaryOperator&lt;E&gt; accumulatorFunction)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> checkedByteOffset(i);</span><br><span class="line">        E prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = getRaw(offset);</span><br><span class="line">            next = accumulatorFunction.apply(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSetRaw(offset, prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> E <span class="title function_">accumulateAndGet</span><span class="params">(<span class="type">int</span> i, E x,</span></span><br><span class="line"><span class="params">                                    BinaryOperator&lt;E&gt; accumulatorFunction)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> checkedByteOffset(i);</span><br><span class="line">        E prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = getRaw(offset);</span><br><span class="line">            next = accumulatorFunction.apply(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSetRaw(offset, prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">iMax</span> <span class="operator">=</span> array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (iMax == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        b.append(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; ; i++) &#123;</span><br><span class="line">            b.append(getRaw(byteOffset(i)));</span><br><span class="line">            <span class="keyword">if</span> (i == iMax)</span><br><span class="line">                <span class="keyword">return</span> b.append(<span class="string">&#x27;]&#x27;</span>).toString();</span><br><span class="line">            b.append(<span class="string">&#x27;,&#x27;</span>).append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException,</span><br><span class="line">        java.io.InvalidObjectException &#123;</span><br><span class="line">        <span class="comment">// Note: This must be changed if any additional fields are defined</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">a</span> <span class="operator">=</span> s.readFields().get(<span class="string">&quot;array&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="literal">null</span> || !a.getClass().isArray())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Not array type&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (a.getClass() != Object[].class)</span><br><span class="line">            a = Arrays.copyOf((Object[])a, Array.getLength(a), Object[].class);</span><br><span class="line">        unsafe.putObjectVolatile(<span class="built_in">this</span>, arrayFieldOffset, a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="AtomicReferenceArray"   >          <a href="#AtomicReferenceArray" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicReferenceArray" class="headerlink" title="AtomicReferenceArray"></a>AtomicReferenceArray</h3>      <p><strong>源码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicReferenceArray</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">6209656149925076980L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> base;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> shift;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> arrayFieldOffset;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object[] array; <span class="comment">// must have exact type Object[]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            unsafe = Unsafe.getUnsafe();</span><br><span class="line">            arrayFieldOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicReferenceArray.class.getDeclaredField(<span class="string">&quot;array&quot;</span>));</span><br><span class="line">            base = unsafe.arrayBaseOffset(Object[].class);</span><br><span class="line">            <span class="type">int</span> <span class="variable">scale</span> <span class="operator">=</span> unsafe.arrayIndexScale(Object[].class);</span><br><span class="line">            <span class="keyword">if</span> ((scale &amp; (scale - <span class="number">1</span>)) != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;data type scale not a power of two&quot;</span>);</span><br><span class="line">            shift = <span class="number">31</span> - Integer.numberOfLeadingZeros(scale);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="title function_">checkedByteOffset</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= array.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;index &quot;</span> + i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> byteOffset(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">byteOffset</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ((<span class="type">long</span>) i &lt;&lt; shift) + base;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AtomicReferenceArray</span><span class="params">(<span class="type">int</span> length)</span> &#123;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="title class_">Object</span>[length];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AtomicReferenceArray</span><span class="params">(E[] array)</span> &#123;</span><br><span class="line">        <span class="comment">// Visibility guaranteed by final field guarantees</span></span><br><span class="line">        <span class="built_in">this</span>.array = Arrays.copyOf(array, array.length, Object[].class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> array.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getRaw(checkedByteOffset(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> E <span class="title function_">getRaw</span><span class="params">(<span class="type">long</span> offset)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (E) unsafe.getObjectVolatile(array, offset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> i, E newValue)</span> &#123;</span><br><span class="line">        unsafe.putObjectVolatile(array, checkedByteOffset(i), newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lazySet</span><span class="params">(<span class="type">int</span> i, E newValue)</span> &#123;</span><br><span class="line">        unsafe.putOrderedObject(array, checkedByteOffset(i), newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> E <span class="title function_">getAndSet</span><span class="params">(<span class="type">int</span> i, E newValue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (E)unsafe.getAndSetObject(array, checkedByteOffset(i), newValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSet</span><span class="params">(<span class="type">int</span> i, E expect, E update)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> compareAndSetRaw(checkedByteOffset(i), expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">compareAndSetRaw</span><span class="params">(<span class="type">long</span> offset, E expect, E update)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapObject(array, offset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">weakCompareAndSet</span><span class="params">(<span class="type">int</span> i, E expect, E update)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> compareAndSet(i, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> E <span class="title function_">getAndUpdate</span><span class="params">(<span class="type">int</span> i, UnaryOperator&lt;E&gt; updateFunction)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> checkedByteOffset(i);</span><br><span class="line">        E prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = getRaw(offset);</span><br><span class="line">            next = updateFunction.apply(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSetRaw(offset, prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> E <span class="title function_">updateAndGet</span><span class="params">(<span class="type">int</span> i, UnaryOperator&lt;E&gt; updateFunction)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> checkedByteOffset(i);</span><br><span class="line">        E prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = getRaw(offset);</span><br><span class="line">            next = updateFunction.apply(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSetRaw(offset, prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> E <span class="title function_">getAndAccumulate</span><span class="params">(<span class="type">int</span> i, E x,</span></span><br><span class="line"><span class="params">                                    BinaryOperator&lt;E&gt; accumulatorFunction)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> checkedByteOffset(i);</span><br><span class="line">        E prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = getRaw(offset);</span><br><span class="line">            next = accumulatorFunction.apply(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSetRaw(offset, prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> E <span class="title function_">accumulateAndGet</span><span class="params">(<span class="type">int</span> i, E x,</span></span><br><span class="line"><span class="params">                                    BinaryOperator&lt;E&gt; accumulatorFunction)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> checkedByteOffset(i);</span><br><span class="line">        E prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = getRaw(offset);</span><br><span class="line">            next = accumulatorFunction.apply(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSetRaw(offset, prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">iMax</span> <span class="operator">=</span> array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (iMax == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        b.append(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; ; i++) &#123;</span><br><span class="line">            b.append(getRaw(byteOffset(i)));</span><br><span class="line">            <span class="keyword">if</span> (i == iMax)</span><br><span class="line">                <span class="keyword">return</span> b.append(<span class="string">&#x27;]&#x27;</span>).toString();</span><br><span class="line">            b.append(<span class="string">&#x27;,&#x27;</span>).append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException,</span><br><span class="line">        java.io.InvalidObjectException &#123;</span><br><span class="line">        <span class="comment">// Note: This must be changed if any additional fields are defined</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">a</span> <span class="operator">=</span> s.readFields().get(<span class="string">&quot;array&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="literal">null</span> || !a.getClass().isArray())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Not array type&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (a.getClass() != Object[].class)</span><br><span class="line">            a = Arrays.copyOf((Object[])a, Array.getLength(a), Object[].class);</span><br><span class="line">        unsafe.putObjectVolatile(<span class="built_in">this</span>, arrayFieldOffset, a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="属性更新原子操作类"   >          <a href="#属性更新原子操作类" class="heading-link"><i class="fas fa-link"></i></a><a href="#属性更新原子操作类" class="headerlink" title="属性更新原子操作类"></a>属性更新原子操作类</h2>              <h3 id="AtomicIntegerFieldUpdater"   >          <a href="#AtomicIntegerFieldUpdater" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicIntegerFieldUpdater" class="headerlink" title="AtomicIntegerFieldUpdater"></a>AtomicIntegerFieldUpdater</h3>      <p><strong>源码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AtomicIntegerFieldUpdater</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; AtomicIntegerFieldUpdater&lt;U&gt; <span class="title function_">newUpdater</span><span class="params">(Class&lt;U&gt; tclass,</span></span><br><span class="line"><span class="params">                                                              String fieldName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AtomicIntegerFieldUpdaterImpl</span>&lt;U&gt;</span><br><span class="line">            (tclass, fieldName, Reflection.getCallerClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AtomicIntegerFieldUpdater</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">compareAndSet</span><span class="params">(T obj, <span class="type">int</span> expect, <span class="type">int</span> update)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">weakCompareAndSet</span><span class="params">(T obj, <span class="type">int</span> expect, <span class="type">int</span> update)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T obj, <span class="type">int</span> newValue)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">lazySet</span><span class="params">(T obj, <span class="type">int</span> newValue)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(T obj)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAndSet</span><span class="params">(T obj, <span class="type">int</span> newValue)</span> &#123;</span><br><span class="line">        <span class="type">int</span> prev;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, newValue));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAndIncrement</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">        <span class="type">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = prev + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAndDecrement</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">        <span class="type">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = prev - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAndAdd</span><span class="params">(T obj, <span class="type">int</span> delta)</span> &#123;</span><br><span class="line">        <span class="type">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = prev + delta;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">incrementAndGet</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">        <span class="type">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = prev + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">decrementAndGet</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">        <span class="type">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = prev - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addAndGet</span><span class="params">(T obj, <span class="type">int</span> delta)</span> &#123;</span><br><span class="line">        <span class="type">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = prev + delta;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndUpdate</span><span class="params">(T obj, IntUnaryOperator updateFunction)</span> &#123;</span><br><span class="line">        <span class="type">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = updateFunction.applyAsInt(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">updateAndGet</span><span class="params">(T obj, IntUnaryOperator updateFunction)</span> &#123;</span><br><span class="line">        <span class="type">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = updateFunction.applyAsInt(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAccumulate</span><span class="params">(T obj, <span class="type">int</span> x,</span></span><br><span class="line"><span class="params">                                      IntBinaryOperator accumulatorFunction)</span> &#123;</span><br><span class="line">        <span class="type">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = accumulatorFunction.applyAsInt(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">accumulateAndGet</span><span class="params">(T obj, <span class="type">int</span> x,</span></span><br><span class="line"><span class="params">                                      IntBinaryOperator accumulatorFunction)</span> &#123;</span><br><span class="line">        <span class="type">int</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = accumulatorFunction.applyAsInt(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">AtomicIntegerFieldUpdaterImpl</span>&lt;T&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">AtomicIntegerFieldUpdater</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.<span class="type">Unsafe</span> <span class="variable">U</span> <span class="operator">=</span> sun.misc.Unsafe.getUnsafe();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> offset;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * if field is protected, the subclass constructing updater, else</span></span><br><span class="line"><span class="comment">         * the same as tclass</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; cclass;</span><br><span class="line">        <span class="comment">/** class holding the field */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; tclass;</span><br><span class="line"></span><br><span class="line">        AtomicIntegerFieldUpdaterImpl(<span class="keyword">final</span> Class&lt;T&gt; tclass,</span><br><span class="line">                                      <span class="keyword">final</span> String fieldName,</span><br><span class="line">                                      <span class="keyword">final</span> Class&lt;?&gt; caller) &#123;</span><br><span class="line">            <span class="keyword">final</span> Field field;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> modifiers;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                field = AccessController.doPrivileged(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">PrivilegedExceptionAction</span>&lt;Field&gt;() &#123;</span><br><span class="line">                        <span class="keyword">public</span> Field <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line">                            <span class="keyword">return</span> tclass.getDeclaredField(fieldName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                modifiers = field.getModifiers();</span><br><span class="line">                sun.reflect.misc.ReflectUtil.ensureMemberAccess(</span><br><span class="line">                    caller, tclass, <span class="literal">null</span>, modifiers);</span><br><span class="line">                <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> tclass.getClassLoader();</span><br><span class="line">                <span class="type">ClassLoader</span> <span class="variable">ccl</span> <span class="operator">=</span> caller.getClassLoader();</span><br><span class="line">                <span class="keyword">if</span> ((ccl != <span class="literal">null</span>) &amp;&amp; (ccl != cl) &amp;&amp;</span><br><span class="line">                    ((cl == <span class="literal">null</span>) || !isAncestor(cl, ccl))) &#123;</span><br><span class="line">                    sun.reflect.misc.ReflectUtil.checkPackageAccess(tclass);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(pae.getException());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (field.getType() != <span class="type">int</span>.class)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Must be integer type&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isVolatile(modifiers))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Must be volatile type&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Access to protected field members is restricted to receivers only</span></span><br><span class="line">            <span class="comment">// of the accessing class, or one of its subclasses, and the</span></span><br><span class="line">            <span class="comment">// accessing class must in turn be a subclass (or package sibling)</span></span><br><span class="line">            <span class="comment">// of the protected member&#x27;s defining class.</span></span><br><span class="line">            <span class="comment">// If the updater refers to a protected field of a declaring class</span></span><br><span class="line">            <span class="comment">// outside the current package, the receiver argument will be</span></span><br><span class="line">            <span class="comment">// narrowed to the type of the accessing class.</span></span><br><span class="line">            <span class="built_in">this</span>.cclass = (Modifier.isProtected(modifiers) &amp;&amp;</span><br><span class="line">                           tclass.isAssignableFrom(caller) &amp;&amp;</span><br><span class="line">                           !isSamePackage(tclass, caller))</span><br><span class="line">                          ? caller : tclass;</span><br><span class="line">            <span class="built_in">this</span>.tclass = tclass;</span><br><span class="line">            <span class="built_in">this</span>.offset = U.objectFieldOffset(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isAncestor</span><span class="params">(ClassLoader first, ClassLoader second)</span> &#123;</span><br><span class="line">            <span class="type">ClassLoader</span> <span class="variable">acl</span> <span class="operator">=</span> first;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                acl = acl.getParent();</span><br><span class="line">                <span class="keyword">if</span> (second == acl) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (acl != <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isSamePackage</span><span class="params">(Class&lt;?&gt; class1, Class&lt;?&gt; class2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> class1.getClassLoader() == class2.getClassLoader()</span><br><span class="line">                   &amp;&amp; Objects.equals(getPackageName(class1), getPackageName(class2));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getPackageName</span><span class="params">(Class&lt;?&gt; cls)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cn</span> <span class="operator">=</span> cls.getName();</span><br><span class="line">            <span class="type">int</span> <span class="variable">dot</span> <span class="operator">=</span> cn.lastIndexOf(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> (dot != -<span class="number">1</span>) ? cn.substring(<span class="number">0</span>, dot) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">accessCheck</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!cclass.isInstance(obj))</span><br><span class="line">                throwAccessCheckException(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">throwAccessCheckException</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (cclass == tclass)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassCastException</span>();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">IllegalAccessException</span>(</span><br><span class="line">                        <span class="string">&quot;Class &quot;</span> +</span><br><span class="line">                        cclass.getName() +</span><br><span class="line">                        <span class="string">&quot; can not access a protected member of class &quot;</span> +</span><br><span class="line">                        tclass.getName() +</span><br><span class="line">                        <span class="string">&quot; using an instance of &quot;</span> +</span><br><span class="line">                        obj.getClass().getName()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSet</span><span class="params">(T obj, <span class="type">int</span> expect, <span class="type">int</span> update)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            <span class="keyword">return</span> U.compareAndSwapInt(obj, offset, expect, update);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">weakCompareAndSet</span><span class="params">(T obj, <span class="type">int</span> expect, <span class="type">int</span> update)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            <span class="keyword">return</span> U.compareAndSwapInt(obj, offset, expect, update);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T obj, <span class="type">int</span> newValue)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            U.putIntVolatile(obj, offset, newValue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lazySet</span><span class="params">(T obj, <span class="type">int</span> newValue)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            U.putOrderedInt(obj, offset, newValue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            <span class="keyword">return</span> U.getIntVolatile(obj, offset);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndSet</span><span class="params">(T obj, <span class="type">int</span> newValue)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            <span class="keyword">return</span> U.getAndSetInt(obj, offset, newValue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndAdd</span><span class="params">(T obj, <span class="type">int</span> delta)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            <span class="keyword">return</span> U.getAndAddInt(obj, offset, delta);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndIncrement</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getAndAdd(obj, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getAndDecrement</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getAndAdd(obj, -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">incrementAndGet</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getAndAdd(obj, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">decrementAndGet</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getAndAdd(obj, -<span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">addAndGet</span><span class="params">(T obj, <span class="type">int</span> delta)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getAndAdd(obj, delta) + delta;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="AtomicLongFieldUpdater"   >          <a href="#AtomicLongFieldUpdater" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicLongFieldUpdater" class="headerlink" title="AtomicLongFieldUpdater"></a>AtomicLongFieldUpdater</h3>      <p><strong>源码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AtomicLongFieldUpdater</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; AtomicLongFieldUpdater&lt;U&gt; <span class="title function_">newUpdater</span><span class="params">(Class&lt;U&gt; tclass,</span></span><br><span class="line"><span class="params">                                                           String fieldName)</span> &#123;</span><br><span class="line">        Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">        <span class="keyword">if</span> (AtomicLong.VM_SUPPORTS_LONG_CAS)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CASUpdater</span>&lt;U&gt;(tclass, fieldName, caller);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LockedUpdater</span>&lt;U&gt;(tclass, fieldName, caller);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AtomicLongFieldUpdater</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">compareAndSet</span><span class="params">(T obj, <span class="type">long</span> expect, <span class="type">long</span> update)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">weakCompareAndSet</span><span class="params">(T obj, <span class="type">long</span> expect, <span class="type">long</span> update)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T obj, <span class="type">long</span> newValue)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">lazySet</span><span class="params">(T obj, <span class="type">long</span> newValue)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">long</span> <span class="title function_">get</span><span class="params">(T obj)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getAndSet</span><span class="params">(T obj, <span class="type">long</span> newValue)</span> &#123;</span><br><span class="line">        <span class="type">long</span> prev;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, newValue));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getAndIncrement</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">        <span class="type">long</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = prev + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getAndDecrement</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">        <span class="type">long</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = prev - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getAndAdd</span><span class="params">(T obj, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="type">long</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = prev + delta;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">incrementAndGet</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">        <span class="type">long</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = prev + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">decrementAndGet</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">        <span class="type">long</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = prev - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">addAndGet</span><span class="params">(T obj, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="type">long</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = prev + delta;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">getAndUpdate</span><span class="params">(T obj, LongUnaryOperator updateFunction)</span> &#123;</span><br><span class="line">        <span class="type">long</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = updateFunction.applyAsLong(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">updateAndGet</span><span class="params">(T obj, LongUnaryOperator updateFunction)</span> &#123;</span><br><span class="line">        <span class="type">long</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = updateFunction.applyAsLong(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">getAndAccumulate</span><span class="params">(T obj, <span class="type">long</span> x,</span></span><br><span class="line"><span class="params">                                       LongBinaryOperator accumulatorFunction)</span> &#123;</span><br><span class="line">        <span class="type">long</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = accumulatorFunction.applyAsLong(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">accumulateAndGet</span><span class="params">(T obj, <span class="type">long</span> x,</span></span><br><span class="line"><span class="params">                                       LongBinaryOperator accumulatorFunction)</span> &#123;</span><br><span class="line">        <span class="type">long</span> prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = accumulatorFunction.applyAsLong(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CASUpdater</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">AtomicLongFieldUpdater</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.<span class="type">Unsafe</span> <span class="variable">U</span> <span class="operator">=</span> sun.misc.Unsafe.getUnsafe();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> offset;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; cclass;</span><br><span class="line">        <span class="comment">/** class holding the field */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; tclass;</span><br><span class="line"></span><br><span class="line">        CASUpdater(<span class="keyword">final</span> Class&lt;T&gt; tclass, <span class="keyword">final</span> String fieldName,</span><br><span class="line">                   <span class="keyword">final</span> Class&lt;?&gt; caller) &#123;</span><br><span class="line">            <span class="keyword">final</span> Field field;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> modifiers;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                field = AccessController.doPrivileged(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">PrivilegedExceptionAction</span>&lt;Field&gt;() &#123;</span><br><span class="line">                        <span class="keyword">public</span> Field <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line">                            <span class="keyword">return</span> tclass.getDeclaredField(fieldName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                modifiers = field.getModifiers();</span><br><span class="line">                sun.reflect.misc.ReflectUtil.ensureMemberAccess(</span><br><span class="line">                    caller, tclass, <span class="literal">null</span>, modifiers);</span><br><span class="line">                <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> tclass.getClassLoader();</span><br><span class="line">                <span class="type">ClassLoader</span> <span class="variable">ccl</span> <span class="operator">=</span> caller.getClassLoader();</span><br><span class="line">                <span class="keyword">if</span> ((ccl != <span class="literal">null</span>) &amp;&amp; (ccl != cl) &amp;&amp;</span><br><span class="line">                    ((cl == <span class="literal">null</span>) || !isAncestor(cl, ccl))) &#123;</span><br><span class="line">                    sun.reflect.misc.ReflectUtil.checkPackageAccess(tclass);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(pae.getException());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (field.getType() != <span class="type">long</span>.class)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Must be long type&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isVolatile(modifiers))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Must be volatile type&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Access to protected field members is restricted to receivers only</span></span><br><span class="line">            <span class="comment">// of the accessing class, or one of its subclasses, and the</span></span><br><span class="line">            <span class="comment">// accessing class must in turn be a subclass (or package sibling)</span></span><br><span class="line">            <span class="comment">// of the protected member&#x27;s defining class.</span></span><br><span class="line">            <span class="comment">// If the updater refers to a protected field of a declaring class</span></span><br><span class="line">            <span class="comment">// outside the current package, the receiver argument will be</span></span><br><span class="line">            <span class="comment">// narrowed to the type of the accessing class.</span></span><br><span class="line">            <span class="built_in">this</span>.cclass = (Modifier.isProtected(modifiers) &amp;&amp;</span><br><span class="line">                           tclass.isAssignableFrom(caller) &amp;&amp;</span><br><span class="line">                           !isSamePackage(tclass, caller))</span><br><span class="line">                          ? caller : tclass;</span><br><span class="line">            <span class="built_in">this</span>.tclass = tclass;</span><br><span class="line">            <span class="built_in">this</span>.offset = U.objectFieldOffset(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Checks that target argument is instance of cclass.  On</span></span><br><span class="line"><span class="comment">         * failure, throws cause.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">accessCheck</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!cclass.isInstance(obj))</span><br><span class="line">                throwAccessCheckException(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">throwAccessCheckException</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (cclass == tclass)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassCastException</span>();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">IllegalAccessException</span>(</span><br><span class="line">                        <span class="string">&quot;Class &quot;</span> +</span><br><span class="line">                        cclass.getName() +</span><br><span class="line">                        <span class="string">&quot; can not access a protected member of class &quot;</span> +</span><br><span class="line">                        tclass.getName() +</span><br><span class="line">                        <span class="string">&quot; using an instance of &quot;</span> +</span><br><span class="line">                        obj.getClass().getName()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSet</span><span class="params">(T obj, <span class="type">long</span> expect, <span class="type">long</span> update)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            <span class="keyword">return</span> U.compareAndSwapLong(obj, offset, expect, update);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">weakCompareAndSet</span><span class="params">(T obj, <span class="type">long</span> expect, <span class="type">long</span> update)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            <span class="keyword">return</span> U.compareAndSwapLong(obj, offset, expect, update);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T obj, <span class="type">long</span> newValue)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            U.putLongVolatile(obj, offset, newValue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lazySet</span><span class="params">(T obj, <span class="type">long</span> newValue)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            U.putOrderedLong(obj, offset, newValue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">get</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            <span class="keyword">return</span> U.getLongVolatile(obj, offset);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">getAndSet</span><span class="params">(T obj, <span class="type">long</span> newValue)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            <span class="keyword">return</span> U.getAndSetLong(obj, offset, newValue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">getAndAdd</span><span class="params">(T obj, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            <span class="keyword">return</span> U.getAndAddLong(obj, offset, delta);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">getAndIncrement</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getAndAdd(obj, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">getAndDecrement</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getAndAdd(obj, -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">incrementAndGet</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getAndAdd(obj, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">decrementAndGet</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getAndAdd(obj, -<span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">addAndGet</span><span class="params">(T obj, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getAndAdd(obj, delta) + delta;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">LockedUpdater</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">AtomicLongFieldUpdater</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.<span class="type">Unsafe</span> <span class="variable">U</span> <span class="operator">=</span> sun.misc.Unsafe.getUnsafe();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> offset;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; cclass;</span><br><span class="line">        <span class="comment">/** class holding the field */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; tclass;</span><br><span class="line"></span><br><span class="line">        LockedUpdater(<span class="keyword">final</span> Class&lt;T&gt; tclass, <span class="keyword">final</span> String fieldName,</span><br><span class="line">                      <span class="keyword">final</span> Class&lt;?&gt; caller) &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                field = AccessController.doPrivileged(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">PrivilegedExceptionAction</span>&lt;Field&gt;() &#123;</span><br><span class="line">                        <span class="keyword">public</span> Field <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line">                            <span class="keyword">return</span> tclass.getDeclaredField(fieldName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                modifiers = field.getModifiers();</span><br><span class="line">                sun.reflect.misc.ReflectUtil.ensureMemberAccess(</span><br><span class="line">                    caller, tclass, <span class="literal">null</span>, modifiers);</span><br><span class="line">                <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> tclass.getClassLoader();</span><br><span class="line">                <span class="type">ClassLoader</span> <span class="variable">ccl</span> <span class="operator">=</span> caller.getClassLoader();</span><br><span class="line">                <span class="keyword">if</span> ((ccl != <span class="literal">null</span>) &amp;&amp; (ccl != cl) &amp;&amp;</span><br><span class="line">                    ((cl == <span class="literal">null</span>) || !isAncestor(cl, ccl))) &#123;</span><br><span class="line">                    sun.reflect.misc.ReflectUtil.checkPackageAccess(tclass);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(pae.getException());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (field.getType() != <span class="type">long</span>.class)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Must be long type&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isVolatile(modifiers))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Must be volatile type&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Access to protected field members is restricted to receivers only</span></span><br><span class="line">            <span class="comment">// of the accessing class, or one of its subclasses, and the</span></span><br><span class="line">            <span class="comment">// accessing class must in turn be a subclass (or package sibling)</span></span><br><span class="line">            <span class="comment">// of the protected member&#x27;s defining class.</span></span><br><span class="line">            <span class="comment">// If the updater refers to a protected field of a declaring class</span></span><br><span class="line">            <span class="comment">// outside the current package, the receiver argument will be</span></span><br><span class="line">            <span class="comment">// narrowed to the type of the accessing class.</span></span><br><span class="line">            <span class="built_in">this</span>.cclass = (Modifier.isProtected(modifiers) &amp;&amp;</span><br><span class="line">                           tclass.isAssignableFrom(caller) &amp;&amp;</span><br><span class="line">                           !isSamePackage(tclass, caller))</span><br><span class="line">                          ? caller : tclass;</span><br><span class="line">            <span class="built_in">this</span>.tclass = tclass;</span><br><span class="line">            <span class="built_in">this</span>.offset = U.objectFieldOffset(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">accessCheck</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!cclass.isInstance(obj))</span><br><span class="line">                <span class="keyword">throw</span> accessCheckException(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> RuntimeException <span class="title function_">accessCheckException</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (cclass == tclass)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ClassCastException</span>();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">IllegalAccessException</span>(</span><br><span class="line">                        <span class="string">&quot;Class &quot;</span> +</span><br><span class="line">                        cclass.getName() +</span><br><span class="line">                        <span class="string">&quot; can not access a protected member of class &quot;</span> +</span><br><span class="line">                        tclass.getName() +</span><br><span class="line">                        <span class="string">&quot; using an instance of &quot;</span> +</span><br><span class="line">                        obj.getClass().getName()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSet</span><span class="params">(T obj, <span class="type">long</span> expect, <span class="type">long</span> update)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">v</span> <span class="operator">=</span> U.getLong(obj, offset);</span><br><span class="line">                <span class="keyword">if</span> (v != expect)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                U.putLong(obj, offset, update);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">weakCompareAndSet</span><span class="params">(T obj, <span class="type">long</span> expect, <span class="type">long</span> update)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> compareAndSet(obj, expect, update);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T obj, <span class="type">long</span> newValue)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                U.putLong(obj, offset, newValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lazySet</span><span class="params">(T obj, <span class="type">long</span> newValue)</span> &#123;</span><br><span class="line">            set(obj, newValue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">long</span> <span class="title function_">get</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> U.getLong(obj, offset);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isAncestor</span><span class="params">(ClassLoader first, ClassLoader second)</span> &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">acl</span> <span class="operator">=</span> first;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            acl = acl.getParent();</span><br><span class="line">            <span class="keyword">if</span> (second == acl) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (acl != <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isSamePackage</span><span class="params">(Class&lt;?&gt; class1, Class&lt;?&gt; class2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> class1.getClassLoader() == class2.getClassLoader()</span><br><span class="line">               &amp;&amp; Objects.equals(getPackageName(class1), getPackageName(class2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getPackageName</span><span class="params">(Class&lt;?&gt; cls)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cn</span> <span class="operator">=</span> cls.getName();</span><br><span class="line">        <span class="type">int</span> <span class="variable">dot</span> <span class="operator">=</span> cn.lastIndexOf(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> (dot != -<span class="number">1</span>) ? cn.substring(<span class="number">0</span>, dot) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="AtomicReferenceFieldUpdater"   >          <a href="#AtomicReferenceFieldUpdater" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicReferenceFieldUpdater" class="headerlink" title="AtomicReferenceFieldUpdater"></a>AtomicReferenceFieldUpdater</h3>      <p><strong>源码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AtomicReferenceFieldUpdater</span>&lt;T,V&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;U,W&gt; AtomicReferenceFieldUpdater&lt;U,W&gt; <span class="title function_">newUpdater</span><span class="params">(Class&lt;U&gt; tclass,</span></span><br><span class="line"><span class="params">                                                                    Class&lt;W&gt; vclass,</span></span><br><span class="line"><span class="params">                                                                    String fieldName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AtomicReferenceFieldUpdaterImpl</span>&lt;U,W&gt;</span><br><span class="line">            (tclass, vclass, fieldName, Reflection.getCallerClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AtomicReferenceFieldUpdater</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">compareAndSet</span><span class="params">(T obj, V expect, V update)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">weakCompareAndSet</span><span class="params">(T obj, V expect, V update)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T obj, V newValue)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">lazySet</span><span class="params">(T obj, V newValue)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> V <span class="title function_">get</span><span class="params">(T obj)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">getAndSet</span><span class="params">(T obj, V newValue)</span> &#123;</span><br><span class="line">        V prev;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, newValue));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">getAndUpdate</span><span class="params">(T obj, UnaryOperator&lt;V&gt; updateFunction)</span> &#123;</span><br><span class="line">        V prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = updateFunction.apply(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">updateAndGet</span><span class="params">(T obj, UnaryOperator&lt;V&gt; updateFunction)</span> &#123;</span><br><span class="line">        V prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = updateFunction.apply(prev);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">getAndAccumulate</span><span class="params">(T obj, V x,</span></span><br><span class="line"><span class="params">                                    BinaryOperator&lt;V&gt; accumulatorFunction)</span> &#123;</span><br><span class="line">        V prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = accumulatorFunction.apply(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">accumulateAndGet</span><span class="params">(T obj, V x,</span></span><br><span class="line"><span class="params">                                    BinaryOperator&lt;V&gt; accumulatorFunction)</span> &#123;</span><br><span class="line">        V prev, next;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">            next = accumulatorFunction.apply(prev, x);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, next));</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">AtomicReferenceFieldUpdaterImpl</span>&lt;T,V&gt;</span><br><span class="line">        <span class="keyword">extends</span> <span class="title class_">AtomicReferenceFieldUpdater</span>&lt;T,V&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.<span class="type">Unsafe</span> <span class="variable">U</span> <span class="operator">=</span> sun.misc.Unsafe.getUnsafe();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> offset;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; cclass;</span><br><span class="line">        <span class="comment">/** class holding the field */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; tclass;</span><br><span class="line">        <span class="comment">/** field value type */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;V&gt; vclass;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        AtomicReferenceFieldUpdaterImpl(<span class="keyword">final</span> Class&lt;T&gt; tclass,</span><br><span class="line">                                        <span class="keyword">final</span> Class&lt;V&gt; vclass,</span><br><span class="line">                                        <span class="keyword">final</span> String fieldName,</span><br><span class="line">                                        <span class="keyword">final</span> Class&lt;?&gt; caller) &#123;</span><br><span class="line">            <span class="keyword">final</span> Field field;</span><br><span class="line">            <span class="keyword">final</span> Class&lt;?&gt; fieldClass;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> modifiers;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                field = AccessController.doPrivileged(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">PrivilegedExceptionAction</span>&lt;Field&gt;() &#123;</span><br><span class="line">                        <span class="keyword">public</span> Field <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException &#123;</span><br><span class="line">                            <span class="keyword">return</span> tclass.getDeclaredField(fieldName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                modifiers = field.getModifiers();</span><br><span class="line">                sun.reflect.misc.ReflectUtil.ensureMemberAccess(</span><br><span class="line">                    caller, tclass, <span class="literal">null</span>, modifiers);</span><br><span class="line">                <span class="type">ClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> tclass.getClassLoader();</span><br><span class="line">                <span class="type">ClassLoader</span> <span class="variable">ccl</span> <span class="operator">=</span> caller.getClassLoader();</span><br><span class="line">                <span class="keyword">if</span> ((ccl != <span class="literal">null</span>) &amp;&amp; (ccl != cl) &amp;&amp;</span><br><span class="line">                    ((cl == <span class="literal">null</span>) || !isAncestor(cl, ccl))) &#123;</span><br><span class="line">                    sun.reflect.misc.ReflectUtil.checkPackageAccess(tclass);</span><br><span class="line">                &#125;</span><br><span class="line">                fieldClass = field.getType();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(pae.getException());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (vclass != fieldClass)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassCastException</span>();</span><br><span class="line">            <span class="keyword">if</span> (vclass.isPrimitive())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Must be reference type&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isVolatile(modifiers))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Must be volatile type&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Access to protected field members is restricted to receivers only</span></span><br><span class="line">            <span class="comment">// of the accessing class, or one of its subclasses, and the</span></span><br><span class="line">            <span class="comment">// accessing class must in turn be a subclass (or package sibling)</span></span><br><span class="line">            <span class="comment">// of the protected member&#x27;s defining class.</span></span><br><span class="line">            <span class="comment">// If the updater refers to a protected field of a declaring class</span></span><br><span class="line">            <span class="comment">// outside the current package, the receiver argument will be</span></span><br><span class="line">            <span class="comment">// narrowed to the type of the accessing class.</span></span><br><span class="line">            <span class="built_in">this</span>.cclass = (Modifier.isProtected(modifiers) &amp;&amp;</span><br><span class="line">                           tclass.isAssignableFrom(caller) &amp;&amp;</span><br><span class="line">                           !isSamePackage(tclass, caller))</span><br><span class="line">                          ? caller : tclass;</span><br><span class="line">            <span class="built_in">this</span>.tclass = tclass;</span><br><span class="line">            <span class="built_in">this</span>.vclass = vclass;</span><br><span class="line">            <span class="built_in">this</span>.offset = U.objectFieldOffset(field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isAncestor</span><span class="params">(ClassLoader first, ClassLoader second)</span> &#123;</span><br><span class="line">            <span class="type">ClassLoader</span> <span class="variable">acl</span> <span class="operator">=</span> first;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                acl = acl.getParent();</span><br><span class="line">                <span class="keyword">if</span> (second == acl) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span> (acl != <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isSamePackage</span><span class="params">(Class&lt;?&gt; class1, Class&lt;?&gt; class2)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> class1.getClassLoader() == class2.getClassLoader()</span><br><span class="line">                   &amp;&amp; Objects.equals(getPackageName(class1), getPackageName(class2));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getPackageName</span><span class="params">(Class&lt;?&gt; cls)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cn</span> <span class="operator">=</span> cls.getName();</span><br><span class="line">            <span class="type">int</span> <span class="variable">dot</span> <span class="operator">=</span> cn.lastIndexOf(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> (dot != -<span class="number">1</span>) ? cn.substring(<span class="number">0</span>, dot) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">accessCheck</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!cclass.isInstance(obj))</span><br><span class="line">                throwAccessCheckException(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">throwAccessCheckException</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (cclass == tclass)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassCastException</span>();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">IllegalAccessException</span>(</span><br><span class="line">                        <span class="string">&quot;Class &quot;</span> +</span><br><span class="line">                        cclass.getName() +</span><br><span class="line">                        <span class="string">&quot; can not access a protected member of class &quot;</span> +</span><br><span class="line">                        tclass.getName() +</span><br><span class="line">                        <span class="string">&quot; using an instance of &quot;</span> +</span><br><span class="line">                        obj.getClass().getName()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">valueCheck</span><span class="params">(V v)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (v != <span class="literal">null</span> &amp;&amp; !(vclass.isInstance(v)))</span><br><span class="line">                throwCCE();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">throwCCE</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassCastException</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSet</span><span class="params">(T obj, V expect, V update)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            valueCheck(update);</span><br><span class="line">            <span class="keyword">return</span> U.compareAndSwapObject(obj, offset, expect, update);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">weakCompareAndSet</span><span class="params">(T obj, V expect, V update)</span> &#123;</span><br><span class="line">            <span class="comment">// same implementation as strong form for now</span></span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            valueCheck(update);</span><br><span class="line">            <span class="keyword">return</span> U.compareAndSwapObject(obj, offset, expect, update);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T obj, V newValue)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            valueCheck(newValue);</span><br><span class="line">            U.putObjectVolatile(obj, offset, newValue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lazySet</span><span class="params">(T obj, V newValue)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            valueCheck(newValue);</span><br><span class="line">            U.putOrderedObject(obj, offset, newValue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">get</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            <span class="keyword">return</span> (V)U.getObjectVolatile(obj, offset);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">getAndSet</span><span class="params">(T obj, V newValue)</span> &#123;</span><br><span class="line">            accessCheck(obj);</span><br><span class="line">            valueCheck(newValue);</span><br><span class="line">            <span class="keyword">return</span> (V)U.getAndSetObject(obj, offset, newValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="特殊标记原子操作类"   >          <a href="#特殊标记原子操作类" class="heading-link"><i class="fas fa-link"></i></a><a href="#特殊标记原子操作类" class="headerlink" title="特殊标记原子操作类"></a>特殊标记原子操作类</h2>              <h3 id="AtomicMarkableReference"   >          <a href="#AtomicMarkableReference" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicMarkableReference" class="headerlink" title="AtomicMarkableReference"></a>AtomicMarkableReference</h3>      <p><strong>源码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicMarkableReference</span>&lt;V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Pair</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> T reference;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> mark;</span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">Pair</span><span class="params">(T reference, <span class="type">boolean</span> mark)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.reference = reference;</span><br><span class="line">            <span class="built_in">this</span>.mark = mark;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> &lt;T&gt; Pair&lt;T&gt; <span class="title function_">of</span><span class="params">(T reference, <span class="type">boolean</span> mark)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;T&gt;(reference, mark);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Pair&lt;V&gt; pair;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AtomicMarkableReference</span><span class="params">(V initialRef, <span class="type">boolean</span> initialMark)</span> &#123;</span><br><span class="line">        pair = Pair.of(initialRef, initialMark);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">getReference</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pair.reference;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMarked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pair.mark;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(<span class="type">boolean</span>[] markHolder)</span> &#123;</span><br><span class="line">        Pair&lt;V&gt; pair = <span class="built_in">this</span>.pair;</span><br><span class="line">        markHolder[<span class="number">0</span>] = pair.mark;</span><br><span class="line">        <span class="keyword">return</span> pair.reference;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">weakCompareAndSet</span><span class="params">(V       expectedReference,</span></span><br><span class="line"><span class="params">                                     V       newReference,</span></span><br><span class="line"><span class="params">                                     <span class="type">boolean</span> expectedMark,</span></span><br><span class="line"><span class="params">                                     <span class="type">boolean</span> newMark)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> compareAndSet(expectedReference, newReference,</span><br><span class="line">                             expectedMark, newMark);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">compareAndSet</span><span class="params">(V       expectedReference,</span></span><br><span class="line"><span class="params">                                 V       newReference,</span></span><br><span class="line"><span class="params">                                 <span class="type">boolean</span> expectedMark,</span></span><br><span class="line"><span class="params">                                 <span class="type">boolean</span> newMark)</span> &#123;</span><br><span class="line">        Pair&lt;V&gt; current = pair;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">            expectedReference == current.reference &amp;&amp;</span><br><span class="line">            expectedMark == current.mark &amp;&amp;</span><br><span class="line">            ((newReference == current.reference &amp;&amp;</span><br><span class="line">              newMark == current.mark) ||</span><br><span class="line">             casPair(current, Pair.of(newReference, newMark)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(V newReference, <span class="type">boolean</span> newMark)</span> &#123;</span><br><span class="line">        Pair&lt;V&gt; current = pair;</span><br><span class="line">        <span class="keyword">if</span> (newReference != current.reference || newMark != current.mark)</span><br><span class="line">            <span class="built_in">this</span>.pair = Pair.of(newReference, newMark);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">attemptMark</span><span class="params">(V expectedReference, <span class="type">boolean</span> newMark)</span> &#123;</span><br><span class="line">        Pair&lt;V&gt; current = pair;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">            expectedReference == current.reference &amp;&amp;</span><br><span class="line">            (newMark == current.mark ||</span><br><span class="line">             casPair(current, Pair.of(expectedReference, newMark)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Unsafe mechanics</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.<span class="type">Unsafe</span> <span class="variable">UNSAFE</span> <span class="operator">=</span> sun.misc.Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">pairOffset</span> <span class="operator">=</span></span><br><span class="line">        objectFieldOffset(UNSAFE, <span class="string">&quot;pair&quot;</span>, AtomicMarkableReference.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">casPair</span><span class="params">(Pair&lt;V&gt; cmp, Pair&lt;V&gt; val)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> UNSAFE.compareAndSwapObject(<span class="built_in">this</span>, pairOffset, cmp, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">objectFieldOffset</span><span class="params">(sun.misc.Unsafe UNSAFE,</span></span><br><span class="line"><span class="params">                                  String field, Class&lt;?&gt; klazz)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> UNSAFE.objectFieldOffset(klazz.getDeclaredField(field));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            <span class="comment">// Convert Exception to corresponding Error</span></span><br><span class="line">            <span class="type">NoSuchFieldError</span> <span class="variable">error</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NoSuchFieldError</span>(field);</span><br><span class="line">            error.initCause(e);</span><br><span class="line">            <span class="keyword">throw</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="AtomicStampedReference"   >          <a href="#AtomicStampedReference" class="heading-link"><i class="fas fa-link"></i></a><a href="#AtomicStampedReference" class="headerlink" title="AtomicStampedReference"></a>AtomicStampedReference</h3>      <p><strong>源码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicStampedReference</span>&lt;V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Pair</span>&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> T reference;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> stamp;</span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">Pair</span><span class="params">(T reference, <span class="type">int</span> stamp)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.reference = reference;</span><br><span class="line">            <span class="built_in">this</span>.stamp = stamp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">static</span> &lt;T&gt; Pair&lt;T&gt; <span class="title function_">of</span><span class="params">(T reference, <span class="type">int</span> stamp)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;T&gt;(reference, stamp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Pair&lt;V&gt; pair;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AtomicStampedReference</span><span class="params">(V initialRef, <span class="type">int</span> initialStamp)</span> &#123;</span><br><span class="line">        pair = Pair.of(initialRef, initialStamp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">getReference</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pair.reference;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStamp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pair.stamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(<span class="type">int</span>[] stampHolder)</span> &#123;</span><br><span class="line">        Pair&lt;V&gt; pair = <span class="built_in">this</span>.pair;</span><br><span class="line">        stampHolder[<span class="number">0</span>] = pair.stamp;</span><br><span class="line">        <span class="keyword">return</span> pair.reference;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">weakCompareAndSet</span><span class="params">(V   expectedReference,</span></span><br><span class="line"><span class="params">                                     V   newReference,</span></span><br><span class="line"><span class="params">                                     <span class="type">int</span> expectedStamp,</span></span><br><span class="line"><span class="params">                                     <span class="type">int</span> newStamp)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> compareAndSet(expectedReference, newReference,</span><br><span class="line">                             expectedStamp, newStamp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">compareAndSet</span><span class="params">(V   expectedReference,</span></span><br><span class="line"><span class="params">                                 V   newReference,</span></span><br><span class="line"><span class="params">                                 <span class="type">int</span> expectedStamp,</span></span><br><span class="line"><span class="params">                                 <span class="type">int</span> newStamp)</span> &#123;</span><br><span class="line">        Pair&lt;V&gt; current = pair;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">            expectedReference == current.reference &amp;&amp;</span><br><span class="line">            expectedStamp == current.stamp &amp;&amp;</span><br><span class="line">            ((newReference == current.reference &amp;&amp;</span><br><span class="line">              newStamp == current.stamp) ||</span><br><span class="line">             casPair(current, Pair.of(newReference, newStamp)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(V newReference, <span class="type">int</span> newStamp)</span> &#123;</span><br><span class="line">        Pair&lt;V&gt; current = pair;</span><br><span class="line">        <span class="keyword">if</span> (newReference != current.reference || newStamp != current.stamp)</span><br><span class="line">            <span class="built_in">this</span>.pair = Pair.of(newReference, newStamp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">attemptStamp</span><span class="params">(V expectedReference, <span class="type">int</span> newStamp)</span> &#123;</span><br><span class="line">        Pair&lt;V&gt; current = pair;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">            expectedReference == current.reference &amp;&amp;</span><br><span class="line">            (newStamp == current.stamp ||</span><br><span class="line">             casPair(current, Pair.of(expectedReference, newStamp)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Unsafe mechanics</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.<span class="type">Unsafe</span> <span class="variable">UNSAFE</span> <span class="operator">=</span> sun.misc.Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">pairOffset</span> <span class="operator">=</span></span><br><span class="line">        objectFieldOffset(UNSAFE, <span class="string">&quot;pair&quot;</span>, AtomicStampedReference.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">casPair</span><span class="params">(Pair&lt;V&gt; cmp, Pair&lt;V&gt; val)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> UNSAFE.compareAndSwapObject(<span class="built_in">this</span>, pairOffset, cmp, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">objectFieldOffset</span><span class="params">(sun.misc.Unsafe UNSAFE,</span></span><br><span class="line"><span class="params">                                  String field, Class&lt;?&gt; klazz)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> UNSAFE.objectFieldOffset(klazz.getDeclaredField(field));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            <span class="comment">// Convert Exception to corresponding Error</span></span><br><span class="line">            <span class="type">NoSuchFieldError</span> <span class="variable">error</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NoSuchFieldError</span>(field);</span><br><span class="line">            error.initCause(e);</span><br><span class="line">            <span class="keyword">throw</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="基于分治思想新增的原子操作类"   >          <a href="#基于分治思想新增的原子操作类" class="heading-link"><i class="fas fa-link"></i></a><a href="#基于分治思想新增的原子操作类" class="headerlink" title="基于分治思想新增的原子操作类"></a>基于分治思想新增的原子操作类</h2>              <h3 id="Striped64"   >          <a href="#Striped64" class="heading-link"><i class="fas fa-link"></i></a><a href="#Striped64" class="headerlink" title="Striped64"></a>Striped64</h3>      <p><strong>源码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Striped64</span> <span class="keyword">extends</span> <span class="title class_">Number</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@sun</span>.misc.Contended <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Cell</span> &#123;</span><br><span class="line">        <span class="keyword">volatile</span> <span class="type">long</span> value;</span><br><span class="line">        Cell(<span class="type">long</span> x) &#123; value = x; &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">cas</span><span class="params">(<span class="type">long</span> cmp, <span class="type">long</span> val)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> UNSAFE.compareAndSwapLong(<span class="built_in">this</span>, valueOffset, cmp, val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Unsafe mechanics</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> valueOffset;</span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">                Class&lt;?&gt; ak = Cell.class;</span><br><span class="line">                valueOffset = UNSAFE.objectFieldOffset</span><br><span class="line">                    (ak.getDeclaredField(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NCPU</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> Cell[] cells;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">long</span> base;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">int</span> cellsBusy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Striped64() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">casBase</span><span class="params">(<span class="type">long</span> cmp, <span class="type">long</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> UNSAFE.compareAndSwapLong(<span class="built_in">this</span>, BASE, cmp, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">casCellsBusy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> UNSAFE.compareAndSwapInt(<span class="built_in">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getProbe</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> UNSAFE.getInt(Thread.currentThread(), PROBE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">advanceProbe</span><span class="params">(<span class="type">int</span> probe)</span> &#123;</span><br><span class="line">        probe ^= probe &lt;&lt; <span class="number">13</span>;   <span class="comment">// xorshift</span></span><br><span class="line">        probe ^= probe &gt;&gt;&gt; <span class="number">17</span>;</span><br><span class="line">        probe ^= probe &lt;&lt; <span class="number">5</span>;</span><br><span class="line">        UNSAFE.putInt(Thread.currentThread(), PROBE, probe);</span><br><span class="line">        <span class="keyword">return</span> probe;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">longAccumulate</span><span class="params">(<span class="type">long</span> x, LongBinaryOperator fn,</span></span><br><span class="line"><span class="params">                              <span class="type">boolean</span> wasUncontended)</span> &#123;</span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">        <span class="keyword">if</span> ((h = getProbe()) == <span class="number">0</span>) &#123;</span><br><span class="line">            ThreadLocalRandom.current(); <span class="comment">// force initialization</span></span><br><span class="line">            h = getProbe();</span><br><span class="line">            wasUncontended = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">collide</span> <span class="operator">=</span> <span class="literal">false</span>;                <span class="comment">// True if last slot nonempty</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            Cell[] as; Cell a; <span class="type">int</span> n; <span class="type">long</span> v;</span><br><span class="line">            <span class="keyword">if</span> ((as = cells) != <span class="literal">null</span> &amp;&amp; (n = as.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[(n - <span class="number">1</span>) &amp; h]) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cellsBusy == <span class="number">0</span>) &#123;       <span class="comment">// Try to attach new Cell</span></span><br><span class="line">                        <span class="type">Cell</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cell</span>(x);   <span class="comment">// Optimistically create</span></span><br><span class="line">                        <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; casCellsBusy()) &#123;</span><br><span class="line">                            <span class="type">boolean</span> <span class="variable">created</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">try</span> &#123;               <span class="comment">// Recheck under lock</span></span><br><span class="line">                                Cell[] rs; <span class="type">int</span> m, j;</span><br><span class="line">                                <span class="keyword">if</span> ((rs = cells) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                                    (m = rs.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                                    rs[j = (m - <span class="number">1</span>) &amp; h] == <span class="literal">null</span>) &#123;</span><br><span class="line">                                    rs[j] = r;</span><br><span class="line">                                    created = <span class="literal">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                cellsBusy = <span class="number">0</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (created)</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">continue</span>;           <span class="comment">// Slot is now non-empty</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    collide = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!wasUncontended)       <span class="comment">// CAS already known to fail</span></span><br><span class="line">                    wasUncontended = <span class="literal">true</span>;      <span class="comment">// Continue after rehash</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (a.cas(v = a.value, ((fn == <span class="literal">null</span>) ? v + x :</span><br><span class="line">                                             fn.applyAsLong(v, x))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (n &gt;= NCPU || cells != as)</span><br><span class="line">                    collide = <span class="literal">false</span>;            <span class="comment">// At max size or stale</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!collide)</span><br><span class="line">                    collide = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; casCellsBusy()) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (cells == as) &#123;      <span class="comment">// Expand table unless stale</span></span><br><span class="line">                            Cell[] rs = <span class="keyword">new</span> <span class="title class_">Cell</span>[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">                                rs[i] = as[i];</span><br><span class="line">                            cells = rs;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        cellsBusy = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    collide = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;                   <span class="comment">// Retry with expanded table</span></span><br><span class="line">                &#125;</span><br><span class="line">                h = advanceProbe(h);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; cells == as &amp;&amp; casCellsBusy()) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">init</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;                           <span class="comment">// Initialize table</span></span><br><span class="line">                    <span class="keyword">if</span> (cells == as) &#123;</span><br><span class="line">                        Cell[] rs = <span class="keyword">new</span> <span class="title class_">Cell</span>[<span class="number">2</span>];</span><br><span class="line">                        rs[h &amp; <span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Cell</span>(x);</span><br><span class="line">                        cells = rs;</span><br><span class="line">                        init = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    cellsBusy = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (init)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (casBase(v = base, ((fn == <span class="literal">null</span>) ? v + x :</span><br><span class="line">                                        fn.applyAsLong(v, x))))</span><br><span class="line">                <span class="keyword">break</span>;                          <span class="comment">// Fall back on using base</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">doubleAccumulate</span><span class="params">(<span class="type">double</span> x, DoubleBinaryOperator fn,</span></span><br><span class="line"><span class="params">                                <span class="type">boolean</span> wasUncontended)</span> &#123;</span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">        <span class="keyword">if</span> ((h = getProbe()) == <span class="number">0</span>) &#123;</span><br><span class="line">            ThreadLocalRandom.current(); <span class="comment">// force initialization</span></span><br><span class="line">            h = getProbe();</span><br><span class="line">            wasUncontended = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">collide</span> <span class="operator">=</span> <span class="literal">false</span>;                <span class="comment">// True if last slot nonempty</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            Cell[] as; Cell a; <span class="type">int</span> n; <span class="type">long</span> v;</span><br><span class="line">            <span class="keyword">if</span> ((as = cells) != <span class="literal">null</span> &amp;&amp; (n = as.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[(n - <span class="number">1</span>) &amp; h]) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cellsBusy == <span class="number">0</span>) &#123;       <span class="comment">// Try to attach new Cell</span></span><br><span class="line">                        <span class="type">Cell</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cell</span>(Double.doubleToRawLongBits(x));</span><br><span class="line">                        <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; casCellsBusy()) &#123;</span><br><span class="line">                            <span class="type">boolean</span> <span class="variable">created</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">try</span> &#123;               <span class="comment">// Recheck under lock</span></span><br><span class="line">                                Cell[] rs; <span class="type">int</span> m, j;</span><br><span class="line">                                <span class="keyword">if</span> ((rs = cells) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                                    (m = rs.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                                    rs[j = (m - <span class="number">1</span>) &amp; h] == <span class="literal">null</span>) &#123;</span><br><span class="line">                                    rs[j] = r;</span><br><span class="line">                                    created = <span class="literal">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                                cellsBusy = <span class="number">0</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (created)</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            <span class="keyword">continue</span>;           <span class="comment">// Slot is now non-empty</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    collide = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!wasUncontended)       <span class="comment">// CAS already known to fail</span></span><br><span class="line">                    wasUncontended = <span class="literal">true</span>;      <span class="comment">// Continue after rehash</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (a.cas(v = a.value,</span><br><span class="line">                               ((fn == <span class="literal">null</span>) ?</span><br><span class="line">                                Double.doubleToRawLongBits</span><br><span class="line">                                (Double.longBitsToDouble(v) + x) :</span><br><span class="line">                                Double.doubleToRawLongBits</span><br><span class="line">                                (fn.applyAsDouble</span><br><span class="line">                                 (Double.longBitsToDouble(v), x)))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (n &gt;= NCPU || cells != as)</span><br><span class="line">                    collide = <span class="literal">false</span>;            <span class="comment">// At max size or stale</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!collide)</span><br><span class="line">                    collide = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; casCellsBusy()) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (cells == as) &#123;      <span class="comment">// Expand table unless stale</span></span><br><span class="line">                            Cell[] rs = <span class="keyword">new</span> <span class="title class_">Cell</span>[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">                                rs[i] = as[i];</span><br><span class="line">                            cells = rs;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        cellsBusy = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    collide = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;                   <span class="comment">// Retry with expanded table</span></span><br><span class="line">                &#125;</span><br><span class="line">                h = advanceProbe(h);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; cells == as &amp;&amp; casCellsBusy()) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">init</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;                           <span class="comment">// Initialize table</span></span><br><span class="line">                    <span class="keyword">if</span> (cells == as) &#123;</span><br><span class="line">                        Cell[] rs = <span class="keyword">new</span> <span class="title class_">Cell</span>[<span class="number">2</span>];</span><br><span class="line">                        rs[h &amp; <span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Cell</span>(Double.doubleToRawLongBits(x));</span><br><span class="line">                        cells = rs;</span><br><span class="line">                        init = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    cellsBusy = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (init)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (casBase(v = base,</span><br><span class="line">                             ((fn == <span class="literal">null</span>) ?</span><br><span class="line">                              Double.doubleToRawLongBits</span><br><span class="line">                              (Double.longBitsToDouble(v) + x) :</span><br><span class="line">                              Double.doubleToRawLongBits</span><br><span class="line">                              (fn.applyAsDouble</span><br><span class="line">                               (Double.longBitsToDouble(v), x)))))</span><br><span class="line">                <span class="keyword">break</span>;                          <span class="comment">// Fall back on using base</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Unsafe mechanics</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> BASE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> CELLSBUSY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> PROBE;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">            Class&lt;?&gt; sk = Striped64.class;</span><br><span class="line">            BASE = UNSAFE.objectFieldOffset</span><br><span class="line">                (sk.getDeclaredField(<span class="string">&quot;base&quot;</span>));</span><br><span class="line">            CELLSBUSY = UNSAFE.objectFieldOffset</span><br><span class="line">                (sk.getDeclaredField(<span class="string">&quot;cellsBusy&quot;</span>));</span><br><span class="line">            Class&lt;?&gt; tk = Thread.class;</span><br><span class="line">            PROBE = UNSAFE.objectFieldOffset</span><br><span class="line">                (tk.getDeclaredField(<span class="string">&quot;threadLocalRandomProbe&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="DoubleAccumulator"   >          <a href="#DoubleAccumulator" class="heading-link"><i class="fas fa-link"></i></a><a href="#DoubleAccumulator" class="headerlink" title="DoubleAccumulator"></a>DoubleAccumulator</h3>      <p><strong>源码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleAccumulator</span> <span class="keyword">extends</span> <span class="title class_">Striped64</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7249069246863182397L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DoubleBinaryOperator function;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> identity; <span class="comment">// use long representation</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DoubleAccumulator</span><span class="params">(DoubleBinaryOperator accumulatorFunction,</span></span><br><span class="line"><span class="params">                             <span class="type">double</span> identity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.function = accumulatorFunction;</span><br><span class="line">        base = <span class="built_in">this</span>.identity = Double.doubleToRawLongBits(identity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accumulate</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">        Cell[] as; <span class="type">long</span> b, v, r; <span class="type">int</span> m; Cell a;</span><br><span class="line">        <span class="keyword">if</span> ((as = cells) != <span class="literal">null</span> ||</span><br><span class="line">            (r = Double.doubleToRawLongBits</span><br><span class="line">             (function.applyAsDouble</span><br><span class="line">              (Double.longBitsToDouble(b = base), x))) != b  &amp;&amp; !casBase(b, r)) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">uncontended</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (as == <span class="literal">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> ||</span><br><span class="line">                (a = as[getProbe() &amp; m]) == <span class="literal">null</span> ||</span><br><span class="line">                !(uncontended =</span><br><span class="line">                  (r = Double.doubleToRawLongBits</span><br><span class="line">                   (function.applyAsDouble</span><br><span class="line">                    (Double.longBitsToDouble(v = a.value), x))) == v ||</span><br><span class="line">                  a.cas(v, r)))</span><br><span class="line">                doubleAccumulate(x, function, uncontended);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        Cell[] as = cells; Cell a;</span><br><span class="line">        <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> Double.longBitsToDouble(base);</span><br><span class="line">        <span class="keyword">if</span> (as != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[i]) != <span class="literal">null</span>)</span><br><span class="line">                    result = function.applyAsDouble</span><br><span class="line">                        (result, Double.longBitsToDouble(a.value));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reset</span><span class="params">()</span> &#123;</span><br><span class="line">        Cell[] as = cells; Cell a;</span><br><span class="line">        base = identity;</span><br><span class="line">        <span class="keyword">if</span> (as != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[i]) != <span class="literal">null</span>)</span><br><span class="line">                    a.value = identity;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getThenReset</span><span class="params">()</span> &#123;</span><br><span class="line">        Cell[] as = cells; Cell a;</span><br><span class="line">        <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> Double.longBitsToDouble(base);</span><br><span class="line">        base = identity;</span><br><span class="line">        <span class="keyword">if</span> (as != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[i]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">double</span> <span class="variable">v</span> <span class="operator">=</span> Double.longBitsToDouble(a.value);</span><br><span class="line">                    a.value = identity;</span><br><span class="line">                    result = function.applyAsDouble(result, v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Double.toString(get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">doubleValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">longValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">long</span>)get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">intValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">floatValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">float</span>)get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SerializationProxy</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7249069246863182397L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> DoubleBinaryOperator function;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> identity;</span><br><span class="line"></span><br><span class="line">        SerializationProxy(DoubleAccumulator a) &#123;</span><br><span class="line">            function = a.function;</span><br><span class="line">            identity = a.identity;</span><br><span class="line">            value = a.get();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> Double.longBitsToDouble(identity);</span><br><span class="line">            <span class="type">DoubleAccumulator</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoubleAccumulator</span>(function, d);</span><br><span class="line">            a.base = Double.doubleToRawLongBits(value);</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">writeReplace</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SerializationProxy</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.InvalidObjectException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Proxy required&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="DoubleAdder"   >          <a href="#DoubleAdder" class="heading-link"><i class="fas fa-link"></i></a><a href="#DoubleAdder" class="headerlink" title="DoubleAdder"></a>DoubleAdder</h3>      <p><strong>源码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleAdder</span> <span class="keyword">extends</span> <span class="title class_">Striped64</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7249069246863182397L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DoubleAdder</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">        Cell[] as; <span class="type">long</span> b, v; <span class="type">int</span> m; Cell a;</span><br><span class="line">        <span class="keyword">if</span> ((as = cells) != <span class="literal">null</span> ||</span><br><span class="line">            !casBase(b = base,</span><br><span class="line">                     Double.doubleToRawLongBits</span><br><span class="line">                     (Double.longBitsToDouble(b) + x))) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">uncontended</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (as == <span class="literal">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> ||</span><br><span class="line">                (a = as[getProbe() &amp; m]) == <span class="literal">null</span> ||</span><br><span class="line">                !(uncontended = a.cas(v = a.value,</span><br><span class="line">                                      Double.doubleToRawLongBits</span><br><span class="line">                                      (Double.longBitsToDouble(v) + x))))</span><br><span class="line">                doubleAccumulate(x, <span class="literal">null</span>, uncontended);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line">        Cell[] as = cells; Cell a;</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> Double.longBitsToDouble(base);</span><br><span class="line">        <span class="keyword">if</span> (as != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[i]) != <span class="literal">null</span>)</span><br><span class="line">                    sum += Double.longBitsToDouble(a.value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reset</span><span class="params">()</span> &#123;</span><br><span class="line">        Cell[] as = cells; Cell a;</span><br><span class="line">        base = <span class="number">0L</span>; <span class="comment">// relies on fact that double 0 must have same rep as long</span></span><br><span class="line">        <span class="keyword">if</span> (as != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[i]) != <span class="literal">null</span>)</span><br><span class="line">                    a.value = <span class="number">0L</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">sumThenReset</span><span class="params">()</span> &#123;</span><br><span class="line">        Cell[] as = cells; Cell a;</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> Double.longBitsToDouble(base);</span><br><span class="line">        base = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">if</span> (as != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[i]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">long</span> <span class="variable">v</span> <span class="operator">=</span> a.value;</span><br><span class="line">                    a.value = <span class="number">0L</span>;</span><br><span class="line">                    sum += Double.longBitsToDouble(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Double.toString(sum());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">doubleValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">longValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">long</span>)sum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">intValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)sum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">floatValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">float</span>)sum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SerializationProxy</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7249069246863182397L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">double</span> value;</span><br><span class="line"></span><br><span class="line">        SerializationProxy(DoubleAdder a) &#123;</span><br><span class="line">            value = a.sum();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">DoubleAdder</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoubleAdder</span>();</span><br><span class="line">            a.base = Double.doubleToRawLongBits(value);</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">writeReplace</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SerializationProxy</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.InvalidObjectException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Proxy required&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="LongAccumulator"   >          <a href="#LongAccumulator" class="heading-link"><i class="fas fa-link"></i></a><a href="#LongAccumulator" class="headerlink" title="LongAccumulator"></a>LongAccumulator</h3>      <p><strong>源码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LongAccumulator</span> <span class="keyword">extends</span> <span class="title class_">Striped64</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7249069246863182397L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LongBinaryOperator function;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> identity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LongAccumulator</span><span class="params">(LongBinaryOperator accumulatorFunction,</span></span><br><span class="line"><span class="params">                           <span class="type">long</span> identity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.function = accumulatorFunction;</span><br><span class="line">        base = <span class="built_in">this</span>.identity = identity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accumulate</span><span class="params">(<span class="type">long</span> x)</span> &#123;</span><br><span class="line">        Cell[] as; <span class="type">long</span> b, v, r; <span class="type">int</span> m; Cell a;</span><br><span class="line">        <span class="keyword">if</span> ((as = cells) != <span class="literal">null</span> ||</span><br><span class="line">            (r = function.applyAsLong(b = base, x)) != b &amp;&amp; !casBase(b, r)) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">uncontended</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (as == <span class="literal">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> ||</span><br><span class="line">                (a = as[getProbe() &amp; m]) == <span class="literal">null</span> ||</span><br><span class="line">                !(uncontended =</span><br><span class="line">                  (r = function.applyAsLong(v = a.value, x)) == v ||</span><br><span class="line">                  a.cas(v, r)))</span><br><span class="line">                longAccumulate(x, function, uncontended);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        Cell[] as = cells; Cell a;</span><br><span class="line">        <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> base;</span><br><span class="line">        <span class="keyword">if</span> (as != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[i]) != <span class="literal">null</span>)</span><br><span class="line">                    result = function.applyAsLong(result, a.value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reset</span><span class="params">()</span> &#123;</span><br><span class="line">        Cell[] as = cells; Cell a;</span><br><span class="line">        base = identity;</span><br><span class="line">        <span class="keyword">if</span> (as != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[i]) != <span class="literal">null</span>)</span><br><span class="line">                    a.value = identity;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getThenReset</span><span class="params">()</span> &#123;</span><br><span class="line">        Cell[] as = cells; Cell a;</span><br><span class="line">        <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> base;</span><br><span class="line">        base = identity;</span><br><span class="line">        <span class="keyword">if</span> (as != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[i]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">long</span> <span class="variable">v</span> <span class="operator">=</span> a.value;</span><br><span class="line">                    a.value = identity;</span><br><span class="line">                    result = function.applyAsLong(result, v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Long.toString(get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">longValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">intValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">floatValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">float</span>)get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">doubleValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>)get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SerializationProxy</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7249069246863182397L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> LongBinaryOperator function;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> identity;</span><br><span class="line"></span><br><span class="line">        SerializationProxy(LongAccumulator a) &#123;</span><br><span class="line">            function = a.function;</span><br><span class="line">            identity = a.identity;</span><br><span class="line">            value = a.get();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">LongAccumulator</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LongAccumulator</span>(function, identity);</span><br><span class="line">            a.base = value;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">writeReplace</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SerializationProxy</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.InvalidObjectException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Proxy required&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="LongAdder"   >          <a href="#LongAdder" class="heading-link"><i class="fas fa-link"></i></a><a href="#LongAdder" class="headerlink" title="LongAdder"></a>LongAdder</h3>      <p><strong>源码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LongAdder</span> <span class="keyword">extends</span> <span class="title class_">Striped64</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7249069246863182397L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LongAdder</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">long</span> x)</span> &#123;</span><br><span class="line">        Cell[] as; <span class="type">long</span> b, v; <span class="type">int</span> m; Cell a;</span><br><span class="line">        <span class="keyword">if</span> ((as = cells) != <span class="literal">null</span> || !casBase(b = base, b + x)) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">uncontended</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (as == <span class="literal">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> ||</span><br><span class="line">                (a = as[getProbe() &amp; m]) == <span class="literal">null</span> ||</span><br><span class="line">                !(uncontended = a.cas(v = a.value, v + x)))</span><br><span class="line">                longAccumulate(x, <span class="literal">null</span>, uncontended);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        add(<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> &#123;</span><br><span class="line">        add(-<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line">        Cell[] as = cells; Cell a;</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> base;</span><br><span class="line">        <span class="keyword">if</span> (as != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[i]) != <span class="literal">null</span>)</span><br><span class="line">                    sum += a.value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reset</span><span class="params">()</span> &#123;</span><br><span class="line">        Cell[] as = cells; Cell a;</span><br><span class="line">        base = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">if</span> (as != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[i]) != <span class="literal">null</span>)</span><br><span class="line">                    a.value = <span class="number">0L</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sumThenReset</span><span class="params">()</span> &#123;</span><br><span class="line">        Cell[] as = cells; Cell a;</span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> base;</span><br><span class="line">        base = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">if</span> (as != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[i]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    sum += a.value;</span><br><span class="line">                    a.value = <span class="number">0L</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Long.toString(sum());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">longValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">intValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)sum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">floatValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">float</span>)sum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">doubleValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>)sum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SerializationProxy</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7249069246863182397L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> value;</span><br><span class="line"></span><br><span class="line">        SerializationProxy(LongAdder a) &#123;</span><br><span class="line">            value = a.sum();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">        <span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">LongAdder</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LongAdder</span>();</span><br><span class="line">            a.base = value;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">writeReplace</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SerializationProxy</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.InvalidObjectException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Proxy required&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死之前要做完的算法手册-[5.栈和队列]</title>
      <link href="/2023/08/20/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B5.%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%5D/"/>
      <url>/2023/08/20/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B5.%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%5D/</url>
      
        <content type="html"><![CDATA[<p><strong>栈和队列基础知识</strong></p><p>栈：栈是一个先进后出的数据结构也即最后一个进来的数据第一个出去(LIFO)</p><p>如下图所示</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230821082237006.png"  alt="栈">      </p><p>队列：队列是一个先进先出的数据结构也即第一个进来的数据第一个出去(FIFO)</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230821082527464.png"  alt="队列">      </p><p>我们可以用你可以使用 list 或者 deque（双端队列）来模拟一个栈或者队列</p>        <h1 id="用栈实现队列"   >          <a href="#用栈实现队列" class="heading-link"><i class="fas fa-link"></i></a><a href="#用栈实现队列" class="headerlink" title="用栈实现队列"></a>用栈实现队列</h1>      <p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）：</p><p>实现 <code>MyQueue</code> 类：</p><ul><li><code>void push(int x)</code> 将元素 x 推到队列的末尾</li><li><code>int pop()</code> 从队列的开头移除并返回元素</li><li><code>int peek()</code> 返回队列开头的元素</li><li><code>boolean empty()</code> 如果队列为空，返回 <code>true</code> ；否则，返回 <code>false</code></li></ul>        <h2 id="232-用栈实现队列"   >          <a href="#232-用栈实现队列" class="heading-link"><i class="fas fa-link"></i></a><a href="#232-用栈实现队列" class="headerlink" title="232.用栈实现队列"></a>232.用栈实现队列</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/implement-queue-using-stacks/" >Leetcode.232题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做"   >          <a href="#第一次做" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;21</p>        <h4 id="第一次代码"   >          <a href="#第一次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line">    <span class="comment">//栈</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; stack;</span><br><span class="line">    <span class="comment">//第二个栈用于模拟出队的转移数据的使用</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; removeStack;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        stack=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        removeStack=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        stack.add(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=stack.size()-<span class="number">1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">            removeStack.add(stack.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> result=stack.get(<span class="number">0</span>);</span><br><span class="line">        stack.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=removeStack.size()-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            stack.add(removeStack.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        removeStack.clear();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取队首元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stack.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检验队列是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stack.size()==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功"   >          <a href="#提交成功" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解" class="headerlink" title="题解"></a>题解</h3>      <p>在模拟出队的时候，对双栈的操作不一样会导致其他方法的不一样</p><p><strong>辅助栈(只在出队的时候使用)</strong></p><p>思路：一个栈stack就认为是队列，当入队、获取队首、以及判断队列是否为空只要直接操作stack即可，而当要出队的时候，将除队首的元素以此出栈到辅助栈helpStack中，然后获取队首元素并清空stack，再将helpStack的元素以此再出栈到stack中，最后清空辅助栈helpStack</p><p>代码：</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line">    <span class="comment">//栈</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; stack;</span><br><span class="line">    <span class="comment">//辅助栈(只在出队有用)</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; helpStack;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        stack=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        helpStack=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">//入队</span></span><br><span class="line">        stack.add(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//将除队首元素以此出栈再入辅助栈中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=stack.size()-<span class="number">1</span>;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">           helpStack.add(stack.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取队首元素</span></span><br><span class="line">        <span class="type">int</span> result=stack.get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//清空栈</span></span><br><span class="line">        stack.clear();</span><br><span class="line">        <span class="comment">//依次将辅助栈的元素入到stack栈中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=helpStack.size()-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            stack.add(helpStack.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//清空辅助栈</span></span><br><span class="line">        helpStack.clear();</span><br><span class="line">        <span class="comment">//返回队首元素</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//返回队首元素</span></span><br><span class="line">        <span class="keyword">return</span> stack.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//判断队列是否为空</span></span><br><span class="line">        <span class="keyword">return</span> stack.size()==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230821091110421.png"  alt="辅助栈图解">      </p><p><strong>in栈和out栈(双栈分别控制入栈和出栈)</strong></p><p>思路：入栈数据正常入in栈，出栈出out栈数据，获取队首元素也从out栈中获取，判断队列是否为空即in栈和out栈都为空</p><p>代码:</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;</span><br><span class="line">    <span class="comment">//in栈</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; inStack;</span><br><span class="line">    <span class="comment">//out栈</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; outStack;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        inStack=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        outStack=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="comment">//入in栈</span></span><br><span class="line">        inStack.add(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//如果out栈为空 那么将in栈中的数据全部放到out栈中，并且清空in栈</span></span><br><span class="line">        <span class="comment">//如果out栈不为空，那么直接从out栈获取数据不需要in栈操作</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//out栈为空</span></span><br><span class="line">        <span class="keyword">if</span>(outStack.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=inStack.size()-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                outStack.add(inStack.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            inStack.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取最后一个数据 也就是栈顶的位置</span></span><br><span class="line">        <span class="type">int</span> result=outStack.get(outStack.size()-<span class="number">1</span>);</span><br><span class="line"> <span class="comment">//将out栈的栈顶元素弹出</span></span><br><span class="line">        outStack.remove(outStack.size()-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取栈顶元素 因为pop会出栈，所以需要将result压回outStack栈中</span></span><br><span class="line">        <span class="type">int</span> result=<span class="built_in">this</span>.pop();</span><br><span class="line">        outStack.add(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//当in栈为空且out栈为空说明队列为空</span></span><br><span class="line">        <span class="keyword">return</span> inStack.size()==<span class="number">0</span>&amp;&amp; outStack.size()==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B5.%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%5D/image-20230821093459437.png"  alt="in栈和out栈">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B5.%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%5D/image-20230821093715611.png"  alt="in栈和out栈(2)">      </p>        <h1 id="用队列实现栈"   >          <a href="#用队列实现栈" class="heading-link"><i class="fas fa-link"></i></a><a href="#用队列实现栈" class="headerlink" title="用队列实现栈"></a>用队列实现栈</h1>      <p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（<code>push</code>、<code>top</code>、<code>pop</code> 和 <code>empty</code>）。</p><p>实现 <code>MyStack</code> 类：</p><ul><li><code>void push(int x)</code> 将元素 x 压入栈顶。</li><li><code>int pop()</code> 移除并返回栈顶元素。</li><li><code>int top()</code> 返回栈顶元素。</li><li><code>boolean empty()</code> 如果栈是空的，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li></ul>        <h2 id="225-用队列实现栈"   >          <a href="#225-用队列实现栈" class="heading-link"><i class="fas fa-link"></i></a><a href="#225-用队列实现栈" class="headerlink" title="225.用队列实现栈"></a>225.用队列实现栈</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/implement-stack-using-queues/" >LeetCode.225题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-1"   >          <a href="#第一次做-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-1" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;21</p>        <h4 id="第一次代码-1"   >          <a href="#第一次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-1" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个队列</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; list;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        list.add(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//出栈的逻辑我是这样实现的:</span></span><br><span class="line">        <span class="comment">//将队首的元素以此出队然后重新以此入队</span></span><br><span class="line">        <span class="comment">//  这样保证了原来队尾的数据到了队首的位置，然后将这个队首元素获取之后出队即可</span></span><br><span class="line">        <span class="type">int</span> length=list.size();</span><br><span class="line">        <span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line"><span class="comment">//非队尾元素重新入队</span></span><br><span class="line">            <span class="keyword">if</span>(i!=length-<span class="number">1</span>)&#123;</span><br><span class="line">               <span class="type">int</span> temp=list.get(<span class="number">0</span>);</span><br><span class="line">               list.remove(<span class="number">0</span>);</span><br><span class="line">               list.add(temp);</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="comment">//运行到这里 队首是原来队尾元素</span></span><br><span class="line">           result=list.get(<span class="number">0</span>);</span><br><span class="line">           list.remove(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//根据队列长度判断栈顶指针位置，以便直接获取栈顶元素</span></span><br><span class="line">        <span class="keyword">return</span> list.get(list.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//如果队列为空则栈为空</span></span><br><span class="line">        <span class="keyword">return</span> list.size()==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-1"   >          <a href="#提交成功-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-1" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-1"   >          <a href="#题解-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3>      <p>这道题的题解和我第一次自己做的代码是一致的，用<strong>一个队列来实现栈</strong></p><p><strong>用一个队列实现栈</strong></p><p>思路:入栈、获取栈顶元素、判断栈是否为空都是比较简单就能理解的，而最主要的区别在于出栈的过程，因为队列先进先出而栈是后进先出</p><ul><li>push:入队和入栈是一样的，</li><li>top:获取栈顶元素只要我们获取到队列的末尾元素即可</li><li>empty:判断队列是否为空即可</li><li>pop: 这里将队尾之前的数据出队再重新入队，使得原来队尾的元素排到了队首，再将这个元素出队即可</li></ul><p>代码</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line">    <span class="comment">//队列 用于模拟栈</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Integer&gt; queue;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        queue=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        queue.add(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取队列的长度</span></span><br><span class="line">        <span class="type">int</span> length=queue.size();</span><br><span class="line">        <span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将非队尾的元素以此出队之后重新入队，使其队首是原先队尾的元素</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">            <span class="comment">//非队尾元素出队再重新入队</span></span><br><span class="line">            <span class="keyword">if</span>(i!=length-<span class="number">1</span>)&#123;</span><br><span class="line">               <span class="type">int</span> temp=queue.get(<span class="number">0</span>);</span><br><span class="line">               queue.remove(<span class="number">0</span>);</span><br><span class="line">               queue.add(temp);</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//运行到这里队首元素是原先队尾元素  将获取其值再出队即完成出栈操作</span></span><br><span class="line">           result=queue.get(<span class="number">0</span>);</span><br><span class="line">           queue.remove(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取栈顶元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.get(queue.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断栈是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queue.size()==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h1 id="有效的括号"   >          <a href="#有效的括号" class="heading-link"><i class="fas fa-link"></i></a><a href="#有效的括号" class="headerlink" title="有效的括号"></a>有效的括号</h1>      <p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>每个右括号都有一个对应的相同类型的左括号。</li></ol>        <h2 id="20-有效的括号"   >          <a href="#20-有效的括号" class="heading-link"><i class="fas fa-link"></i></a><a href="#20-有效的括号" class="headerlink" title="20.有效的括号"></a>20.有效的括号</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/valid-parentheses/" >Leetcode.20题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-2"   >          <a href="#第一次做-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-2" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;22</p>        <h4 id="第一次代码-2"   >          <a href="#第一次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-2" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="comment">//左括号为进栈又括号为出栈</span></span><br><span class="line">    Stack&lt;Character&gt; stack=<span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c:s.toCharArray())&#123;</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">&#x27;&#123;&#x27;</span>||c==<span class="string">&#x27;(&#x27;</span>||c==<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">            stack.push(c);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//c==&#x27;&#125;&#x27;||c==&#x27;)&#x27;||c==&#x27;]&#x27;</span></span><br><span class="line">            <span class="keyword">if</span>(stack.size()==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c!=stack.pop())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败"   >          <a href="#提交失败" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:输入s&#x3D;”()” 输出false 预期输出true</p>        <h5 id="原因"   >          <a href="#原因" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因" class="headerlink" title="原因"></a>原因</h5>      <p>在pop的时候是( 而c为) 左右括号当然不相同啊，所以会返回false ，这里是逻辑上的一点点小问题</p>        <h4 id="第二次代码"   >          <a href="#第二次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">//左括号为进栈又括号为出栈</span></span><br><span class="line">        Stack&lt;Character&gt; stack=<span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;&#123;&#x27;</span>||c==<span class="string">&#x27;(&#x27;</span>||c==<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//c==&#x27;&#125;&#x27;||c==&#x27;)&#x27;||c==&#x27;]&#x27;</span></span><br><span class="line">                <span class="keyword">if</span>(stack.size()==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Character pop=stack.pop();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(c==<span class="string">&#x27;)&#x27;</span>&amp;&amp;pop!=<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;]&#x27;</span> &amp;&amp; pop!=<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;&#125;&#x27;</span>&amp;&amp; pop!=<span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//说明左括号没有用完 左括号数量不等于右括号数量</span></span><br><span class="line">        <span class="keyword">if</span>(stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-2"   >          <a href="#提交成功-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-2" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-2"   >          <a href="#题解-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3>      <p>这道题用栈来做就是一件很简单的题目，具体思路如下</p><p>​①当遇到左括号的时候就将其加入栈中</p><p>​②当遇到右括号时，先判断栈是否为空</p><p>​如果为空则返回false</p><p>​如果不为空要对栈顶元素进行弹出并且其比较是否是对应的左括号，如果是则继续循环，如果不是则返回false</p><p>​③结束循环判断栈是否为空，如果栈不为空说明左括号数量多于右括号数量 返回false</p><p>​④以上都没有结束方法且栈为空说明是符合条件的字符串，返回True</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">//左括号为进栈右括号为出栈</span></span><br><span class="line">        Stack&lt;Character&gt; stack=<span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s.toCharArray())&#123;</span><br><span class="line">            <span class="comment">//左括号进栈</span></span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;&#123;&#x27;</span>||c==<span class="string">&#x27;(&#x27;</span>||c==<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//c==&#x27;&#125;&#x27;||c==&#x27;)&#x27;||c==&#x27;]&#x27;</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//判断栈是否为空，如果为空且当前是右括号需要出栈则代表左括号少了</span></span><br><span class="line">                <span class="keyword">if</span>(stack.size()==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//栈顶元素出栈 对其类型进行比较</span></span><br><span class="line">                Character pop=stack.pop();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(c==<span class="string">&#x27;)&#x27;</span>&amp;&amp;pop!=<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;]&#x27;</span> &amp;&amp; pop!=<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">&#x27;&#125;&#x27;</span>&amp;&amp; pop!=<span class="string">&#x27;&#123;&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//说明左括号没有用完 左括号数量不等于右括号数量</span></span><br><span class="line">        <span class="keyword">if</span>(stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="删除字符串中的所有相邻重复项"   >          <a href="#删除字符串中的所有相邻重复项" class="heading-link"><i class="fas fa-link"></i></a><a href="#删除字符串中的所有相邻重复项" class="headerlink" title="删除字符串中的所有相邻重复项"></a>删除字符串中的所有相邻重复项</h1>      <p>给出由小写字母组成的字符串 <code>S</code>，<strong>重复项删除操作</strong>会选择两个相邻且相同的字母，并删除它们。</p><p>在 S 上反复执行重复项删除操作，直到无法继续删除。</p><p>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p>        <h2 id="1047-删除字符串中的所有相邻重复项"   >          <a href="#1047-删除字符串中的所有相邻重复项" class="heading-link"><i class="fas fa-link"></i></a><a href="#1047-删除字符串中的所有相邻重复项" class="headerlink" title="1047.删除字符串中的所有相邻重复项"></a>1047.删除字符串中的所有相邻重复项</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/" >Leetcode.1047题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-3"   >          <a href="#第一次做-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-3" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;22</p>        <h4 id="第一次代码-3"   >          <a href="#第一次代码-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-3" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">removeDuplicates</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    Stack&lt;Character&gt; stack=<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c:s.toCharArray())&#123;</span><br><span class="line">        <span class="keyword">if</span>(stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.peek()!=c)&#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            stack.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    String str=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c:stack)</span><br><span class="line">    &#123;</span><br><span class="line">        str+=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-3"   >          <a href="#提交成功-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-3" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-3"   >          <a href="#题解-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3>      <p>我们可以用栈来对这个字母消除的功能，每一次添加元素的时候和栈顶元素比较，不相等则添加，相等则消除</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">removeDuplicates</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    Stack&lt;Character&gt; stack=<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c:s.toCharArray())&#123;</span><br><span class="line">    <span class="comment">//当栈不为空且栈顶元素不相同时入栈</span></span><br><span class="line">        <span class="keyword">if</span>(stack.size()!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.peek()!=c)&#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//反之相同元素，消除出栈</span></span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            stack.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拼接结果进行返回</span></span><br><span class="line">    String str=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> c:stack)</span><br><span class="line">    &#123;</span><br><span class="line">        str+=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="逆波兰表达式求值"   >          <a href="#逆波兰表达式求值" class="heading-link"><i class="fas fa-link"></i></a><a href="#逆波兰表达式求值" class="headerlink" title="逆波兰表达式求值"></a>逆波兰表达式求值</h1>      <p>给你一个字符串数组 <code>tokens</code> ，表示一个根据 <span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437" >逆波兰表示法</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 表示的算术表达式。</p><p>请你计算该表达式。返回一个表示表达式值的整数。</p><p><strong>注意：</strong></p><ul><li>有效的算符为 <code>&#39;+&#39;</code>、<code>&#39;-&#39;</code>、<code>&#39;*&#39;</code> 和 <code>&#39;/&#39;</code> 。</li><li>每个操作数（运算对象）都可以是一个整数或者另一个表达式。</li><li>两个整数之间的除法总是 <strong>向零截断</strong> 。</li><li>表达式中不含除零运算。</li><li>输入是一个根据逆波兰表示法表示的算术表达式。</li><li>答案及所有中间计算结果可以用 <strong>32 位</strong> 整数表示。</li></ul>        <h2 id="150-逆波兰表达式求值"   >          <a href="#150-逆波兰表达式求值" class="heading-link"><i class="fas fa-link"></i></a><a href="#150-逆波兰表达式求值" class="headerlink" title="150.逆波兰表达式求值"></a>150.逆波兰表达式求值</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/" >Leetcode.150(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-4"   >          <a href="#第一次做-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-4" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;23</p>        <h4 id="第一次代码-4"   >          <a href="#第一次代码-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-4" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack =<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String s: tokens)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;+&quot;</span>)||s.equals(<span class="string">&quot;-&quot;</span>)||s.equals(<span class="string">&quot;/&quot;</span>)||s.equals(<span class="string">&quot;*&quot;</span>))&#123;</span><br><span class="line">                <span class="type">int</span> a1=stack.pop();</span><br><span class="line">                <span class="type">int</span> a2=stack.pop();</span><br><span class="line">                <span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(s.equals(<span class="string">&quot;+&quot;</span>))&#123;</span><br><span class="line">                    result=a1+a2;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.equals(<span class="string">&quot;*&quot;</span>))&#123;</span><br><span class="line">                    result=a1*a2;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.equals(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">                    result=a1/a2;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    result=a1-a2;</span><br><span class="line">                &#125;</span><br><span class="line">                stack.push(result);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stack.push(Integer.parseInt(s));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-1"   >          <a href="#提交失败-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-1" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE：tokens &#x3D;[“4”,”13”,”5”,”&#x2F;“,”+”] 输出4 预期输出6</p><p>原因是在做除法的时候先弹出的数应该是被除数，而我把它放在除数的位置上面了</p>        <h4 id="第二次代码-1"   >          <a href="#第二次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-1" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack =<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String s: tokens)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;+&quot;</span>)||s.equals(<span class="string">&quot;-&quot;</span>)||s.equals(<span class="string">&quot;/&quot;</span>)||s.equals(<span class="string">&quot;*&quot;</span>))&#123;</span><br><span class="line">                <span class="type">int</span> a1=stack.pop();</span><br><span class="line">                <span class="type">int</span> a2=stack.pop();</span><br><span class="line">                <span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(s.equals(<span class="string">&quot;+&quot;</span>))&#123;</span><br><span class="line">                    result=a2+a1;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.equals(<span class="string">&quot;*&quot;</span>))&#123;</span><br><span class="line">                    result=a2*a1;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.equals(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">                    result=a2/a1;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    result=a2-a1;</span><br><span class="line">                &#125;</span><br><span class="line">                stack.push(result);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stack.push(Integer.parseInt(s));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-4"   >          <a href="#提交成功-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-4" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-4"   >          <a href="#题解-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3>      <p>这道题用栈来解决是一个非常好的，当遇见运算符的时候把栈顶的两个元素做一个运算操作再把结果存入栈中，遇到数字直接加入栈中即可</p><p><em>踩坑点</em>：在做减法和除法的时候要注意被除数与除数之间的关系，先弹出的应该是被除数(减数)，后弹出的应该是除数(被减数)</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> &#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack =<span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String s: tokens)&#123;</span><br><span class="line">            <span class="comment">//遇见运算符，将栈顶两个数字进行运算操作</span></span><br><span class="line">            <span class="keyword">if</span>(s.equals(<span class="string">&quot;+&quot;</span>)||s.equals(<span class="string">&quot;-&quot;</span>)||s.equals(<span class="string">&quot;/&quot;</span>)||s.equals(<span class="string">&quot;*&quot;</span>))&#123;</span><br><span class="line">                <span class="type">int</span> a1=stack.pop();</span><br><span class="line">                <span class="type">int</span> a2=stack.pop();</span><br><span class="line">                <span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(s.equals(<span class="string">&quot;+&quot;</span>))&#123;</span><br><span class="line">                    result=a2+a1;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.equals(<span class="string">&quot;*&quot;</span>))&#123;</span><br><span class="line">                    result=a2*a1;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.equals(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">                    result=a2/a1;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    result=a2-a1;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//运算结果存入栈中</span></span><br><span class="line">                stack.push(result);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//数字直接加入栈中</span></span><br><span class="line">                stack.push(Integer.parseInt(s));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="扩展-逆波兰表达式"   >          <a href="#扩展-逆波兰表达式" class="heading-link"><i class="fas fa-link"></i></a><a href="#扩展-逆波兰表达式" class="headerlink" title="扩展(逆波兰表达式)"></a>扩展(逆波兰表达式)</h3>      <p>逆波兰表达式：逆波兰表达式就是运算的后缀表达式，是便于计算机对运算的一种处理</p><div class="table-container"><table><thead><tr><th>正常表达式</th><th>逆波兰表达式</th></tr></thead><tbody><tr><td>1+2</td><td>12+</td></tr><tr><td>(1+2)*3</td><td>12+3*</td></tr><tr><td>(1+2)*(3+4)</td><td>12+34+*</td></tr></tbody></table></div><p>我们将正常表达式转化成二叉树之后，将运算符作为父结点，数据作为叶子子结点</p><p>那么就如图所示</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230823094253033.png"  alt="逆波兰表达式">      </p><p>所以逆波兰表达式本质上就是正常表达式二叉树的后序遍历</p>        <h1 id="滑动窗口最大值"   >          <a href="#滑动窗口最大值" class="heading-link"><i class="fas fa-link"></i></a><a href="#滑动窗口最大值" class="headerlink" title="滑动窗口最大值"></a>滑动窗口最大值</h1>      <p>给你一个整数数组 <code>nums</code>，有一个大小为 <code>k</code> 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 <code>k</code> 个数字。滑动窗口每次只向右移动一位。</p><p>返回 <em>滑动窗口中的最大值</em> 。</p>        <h2 id="239-滑动窗口最大值"   >          <a href="#239-滑动窗口最大值" class="heading-link"><i class="fas fa-link"></i></a><a href="#239-滑动窗口最大值" class="headerlink" title="239.滑动窗口最大值"></a>239.滑动窗口最大值</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/sliding-window-maximum/" >Leetcode.239题(hard)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-5"   >          <a href="#第一次做-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-5" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;24</p>        <h4 id="第一次代码-5"   >          <a href="#第一次代码-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-5" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">       <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> length=nums.length-k+<span class="number">1</span> &lt;<span class="number">1</span>?<span class="number">1</span>:nums.length-k+<span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span>[] result=<span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">       Queue&lt;Integer&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(;j&lt;nums.length;)&#123;</span><br><span class="line">            <span class="type">int</span> len=j-i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(j==nums.length-<span class="number">1</span>||len==k)&#123;</span><br><span class="line">                <span class="comment">//移动到最后一个元素了</span></span><br><span class="line">                <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> temp=i;temp&lt;=j;temp++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(nums[temp]&gt;=max) max=nums[temp];</span><br><span class="line">                &#125;</span><br><span class="line">                result[i++]=max;</span><br><span class="line">                j++;</span><br><span class="line">                queue.poll();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(len&lt;k)&#123;</span><br><span class="line">                queue.add(nums[j]);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-2"   >          <a href="#提交失败-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-2" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE：nums&#x3D;[1,-1] k&#x3D;1 输出[1,0] 预期输出[1,-1]</p><p>原因在max的初始化，我初始化为0，而nums[i]是有可能小于0的</p>        <h4 id="第二次代码-2"   >          <a href="#第二次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-2" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">       <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> length=nums.length-k+<span class="number">1</span> &lt;<span class="number">1</span>?<span class="number">1</span>:nums.length-k+<span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span>[] result=<span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">       Queue&lt;Integer&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(;j&lt;nums.length;)&#123;</span><br><span class="line">            <span class="type">int</span> len=j-i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(j==nums.length-<span class="number">1</span>||len==k)&#123;</span><br><span class="line">                <span class="comment">//移动到最后一个元素了</span></span><br><span class="line">                <span class="type">int</span> max=Integer.MAX_VALUE+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> temp=i;temp&lt;=j;temp++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(nums[temp]&gt;=max) max=nums[temp];</span><br><span class="line">                &#125;</span><br><span class="line">                result[i++]=max;</span><br><span class="line">                j++;</span><br><span class="line">                queue.poll();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(len&lt;k)&#123;</span><br><span class="line">                queue.add(nums[j]);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-3"   >          <a href="#提交失败-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-3" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>超出时间限制，测试用例耗时过长，我判断是每次获取滑动数组这块循环太浪费时间</p>        <h4 id="第三次代码"   >          <a href="#第三次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">       <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> length=nums.length-k+<span class="number">1</span> &lt;<span class="number">1</span>?<span class="number">1</span>:nums.length-k+<span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span>[] result=<span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">       Queue&lt;Integer&gt; queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(;j&lt;nums.length;)&#123;</span><br><span class="line">            <span class="type">int</span> len=j-i+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(j==nums.length-<span class="number">1</span>||len==k)&#123;</span><br><span class="line">                queue.add(nums[j]);</span><br><span class="line">                <span class="type">int</span> max;</span><br><span class="line">                <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                    max=nums[<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> temp=i;temp&lt;=j;temp++)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(nums[temp]&gt;=max) max=nums[temp];</span><br><span class="line">                        &#125;</span><br><span class="line">                    result[i++]=max;</span><br><span class="line">                    queue.poll();</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    max=result[i-<span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">if</span>(nums[j]&gt;=max)&#123;</span><br><span class="line">                        result[i++]=nums[j];</span><br><span class="line">                        queue.poll();</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        max=Integer.MAX_VALUE+<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="type">int</span> temp=i;temp&lt;=j;temp++)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(nums[temp]&gt;=max) max=nums[temp];</span><br><span class="line">                        &#125;</span><br><span class="line">                        result[i++]=max;</span><br><span class="line">                        queue.poll();  </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(len&lt;k)&#123;</span><br><span class="line">                queue.add(nums[j]);</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-4"   >          <a href="#提交失败-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-4" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>测试用例超出时间限制，测试是成功的提交是失败的，就是再后面最大值判断的时候超了时间</p><p>这道题没能在规定时间内做出来</p>        <h3 id="题解-5"   >          <a href="#题解-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3>      <p>思路：最简单能想到的就是，当滑动到指定位置，然后遍历滑动窗口中的数据找到最大值，这就是<strong>暴力法</strong>，时间复杂度就是n*k，k为指定的元素个数，在LeetCode上面暴力法不能作为题解做出来</p><p><strong>单调递减队列(用队列求解)</strong></p><p>我们可以定义一个队列，然后自定义规则，我们只<strong>要维护可能成为最大数的数据即可</strong></p><p><em>也即队列中的数据一定是单调递减的，入队时要将比入队数据小的pop出去</em></p><p>例如在-1,3,2,5 </p><p>那么遍历到-1队列数据为-1 </p><p>而当遍历到3的时候队列就要将比3小的数据pop出去，那么队列中就是3</p><p>而遍历到2的时候，因为2比3小，但是在3后面所以可以正常入队 那么队列中为3 ，2</p><p>当遍历到5的时候，因为队列中的3,2都比5小，所以都要被pop出去，然后5入队</p><p>我们就主要要维护三个方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getMaxValue()  </span><br><span class="line">获取队首数据，此时队列中最大数就是队首数据</span><br><span class="line"></span><br><span class="line">push(<span class="type">int</span> val)</span><br><span class="line">push数据的时候从队尾开始进行元素判断，将数值小于val的数据都出队淘汰出去</span><br><span class="line">例如 队列中为<span class="number">3</span>，-<span class="number">1</span>  入队为 <span class="number">2</span> 那么就要将小于<span class="number">2</span>的数据淘汰出去再将<span class="number">2</span>入队 最后队列数据为<span class="number">3</span>,<span class="number">2</span></span><br><span class="line">队列中为<span class="number">3</span>   入队为<span class="number">5</span>，那么将<span class="number">3</span>淘汰，<span class="number">5</span>入队 也即队列数据为<span class="number">5</span></span><br><span class="line"></span><br><span class="line">pop(<span class="type">int</span> val)</span><br><span class="line">pop数据传入一个参数val 我们要判断队首元素与val的值</span><br><span class="line">如果队首元素值比val大 那么就什么都不做</span><br><span class="line">如果队首元素值等于val 那么就将队首元素出队</span><br></pre></td></tr></table></div></figure><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">    <span class="comment">//用于接收结果集</span></span><br><span class="line">        <span class="type">int</span>[] result=<span class="keyword">new</span> <span class="title class_">int</span>[nums.length-k+<span class="number">1</span>];</span><br><span class="line">        MyQueue queue=<span class="keyword">new</span> <span class="title class_">MyQueue</span>();</span><br><span class="line">    <span class="comment">//i表示滑动窗口的起始位置 j表示滑动窗口的结束位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;j&lt;nums.length;)&#123;</span><br><span class="line">            <span class="type">int</span> len=j-i+<span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//入队nums[j]</span></span><br><span class="line">            <span class="keyword">if</span>(len&lt;=k)&#123;</span><br><span class="line">                queue.push(nums[j]);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(j==nums.length-<span class="number">1</span>||len==k)&#123;</span><br><span class="line">                <span class="comment">//获取滑动窗口最大值</span></span><br><span class="line">                result[i]=queue.getMaxValue();</span><br><span class="line">            <span class="comment">//淘汰滑动窗口起始位置的元素  如果nums[i]&lt;队首元素数据那么什么都不做</span></span><br><span class="line">                queue.pop(nums[i]);</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyQueue</span>&#123;</span><br><span class="line">        ArrayDeque&lt;Integer&gt; queue;</span><br><span class="line">        MyQueue()&#123;</span><br><span class="line">            queue=<span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(queue.size()!=<span class="number">0</span>&amp;&amp;queue.peek()&gt;val)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            queue.poll();</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(queue.size()!=<span class="number">0</span>&amp;&amp;queue.peekLast()&lt;val)&#123;</span><br><span class="line">                queue.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            queue.add(val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaxValue</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> queue.peek();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="前-K-个高频元素"   >          <a href="#前-K-个高频元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#前-K-个高频元素" class="headerlink" title="前 K 个高频元素"></a>前 K 个高频元素</h1>      <p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回其中出现频率前 <code>k</code> 高的元素。你可以按 <strong>任意顺序</strong> 返回答案。</p>        <h2 id="347-前K个高频元素"   >          <a href="#347-前K个高频元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#347-前K个高频元素" class="headerlink" title="347.前K个高频元素"></a>347.前K个高频元素</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/top-k-frequent-elements/" >Leetcode.347题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-6"   >          <a href="#第一次做-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-6" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;25</p>        <h4 id="第一次代码-6"   >          <a href="#第一次代码-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-6" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public int[] topKFrequent(int[] nums, int k) &#123;</span><br><span class="line">        int[] result=new int[k];</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map=new HashMap&lt;&gt;();</span><br><span class="line">        for(int i:nums)&#123;</span><br><span class="line">            map.put(i,map.getOrDefault(i,0)+1);</span><br><span class="line">        &#125;</span><br><span class="line">        int[] arr=new int[map.size()];</span><br><span class="line">        int i=0;</span><br><span class="line">        for(Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet())&#123;</span><br><span class="line">            int v=entry.getValue();</span><br><span class="line">            arr[i++]=v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        </span><br><span class="line">        for(int j=0;j&lt;k;j++)&#123;</span><br><span class="line">            i=arr.length-j-1;</span><br><span class="line">            for(Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet())&#123;</span><br><span class="line">            if(entry.getValue().equals(arr[i]))&#123;</span><br><span class="line">                result[j]=entry.getKey();</span><br><span class="line">                i--;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-5"   >          <a href="#提交失败-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-5" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:nums&#x3D;[1,2] k&#x3D;2 输出[1,1] 预期输出[1,2]</p>        <h4 id="第二次代码-3"   >          <a href="#第二次代码-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-3" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//BF</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] topKFrequent(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="type">int</span>[] result=<span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:nums)&#123;</span><br><span class="line">            map.put(i,map.getOrDefault(i,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[map.size()];</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet())&#123;</span><br><span class="line">            <span class="type">int</span> v=entry.getValue();</span><br><span class="line">            arr[i++]=v;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">            i=arr.length-j-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet())&#123;</span><br><span class="line">            <span class="keyword">if</span>(entry.getValue().equals(arr[i]))&#123;</span><br><span class="line">                result[j]=entry.getKey();</span><br><span class="line">                map.put(result[j],<span class="number">0</span>);</span><br><span class="line">                i--;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-5"   >          <a href="#提交成功-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-5" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-6"   >          <a href="#题解-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3>      <p>利用<strong>优先级队列小顶堆</strong>求解</p><p>思路：</p><p>​1.用一个HashMap来统计每个数字出现的次数</p><p>​2.利用一个小顶堆，我们这里用优先级队列实现，传入比较器将由频率次数的小到大排列形成的二叉树</p><p>​3.遍历数组维护一个数量为k的小顶堆，一旦数量超过k个则先传入数据按照频率维护好堆，再pop出根元素，也即最小频率元素</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] topKFrequent(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">    <span class="comment">//遍历nums 统计每个元素出现的次数</span></span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:nums)&#123;</span><br><span class="line">            map.put(i,map.getOrDefault(i,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//利用优先级队列维护堆，这里我们传入的比较器是我们要生成小顶堆</span></span><br><span class="line">         PriorityQueue&lt;Integer&gt; queue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(</span><br><span class="line">            (o1,o2)-&gt;&#123;</span><br><span class="line">                <span class="keyword">return</span> map.get(o1)-map.get(o2);</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line"><span class="comment">//遍历数组，维护数量为k的小顶堆，每次pop出根元素也即频率最小的元素</span></span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Integer,Integer&gt; entry:map.entrySet())&#123;</span><br><span class="line">            <span class="keyword">if</span>(queue.size()&lt;k)&#123;</span><br><span class="line">                queue.add(entry.getKey());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                </span><br><span class="line">                queue.add(entry.getKey());</span><br><span class="line">                queue.poll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//将小顶堆的数据取出输出</span></span><br><span class="line">        <span class="type">int</span>[] result=<span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;k;j++)&#123;</span><br><span class="line">            result[j]=queue.poll();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="拓展-大顶堆和小顶堆"   >          <a href="#拓展-大顶堆和小顶堆" class="heading-link"><i class="fas fa-link"></i></a><a href="#拓展-大顶堆和小顶堆" class="headerlink" title="拓展(大顶堆和小顶堆)"></a>拓展(大顶堆和小顶堆)</h3>      <p>堆是一种非线性的数据结构，是<strong>基于完全二叉树</strong>的结构的一维数组</p><p>大顶堆：即每个结点的值都大于其左右子结点的值</p><p>小顶堆：即每个结点的值都小于其左右子结点的值</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230826080613631.png"  alt="大顶堆和小顶堆">      </p><p>我们可以用<strong>优先级队列</strong>来维护响应的大顶堆和小顶堆</p><p><strong>代码</strong></p><p>根据比较器的规则不同可以维护不同的堆</p><p>大顶堆</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue&lt;Integer&gt; queue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(</span><br><span class="line">           (o1,o2)-&gt;&#123;</span><br><span class="line">               <span class="keyword">return</span> map.get(o2)-map.get(o1);</span><br><span class="line">           &#125;</span><br><span class="line">       );</span><br></pre></td></tr></table></div></figure><p>小顶堆</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue&lt;Integer&gt; queue=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(</span><br><span class="line">           (o1,o2)-&gt;&#123;</span><br><span class="line">               <span class="keyword">return</span> map.get(o1)-map.get(o2);</span><br><span class="line">           &#125;</span><br><span class="line">       );</span><br></pre></td></tr></table></div></figure>        <h1 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h1>      <p>到这里队列和栈已经告一段落，从这章中我们可以复习<strong>队列和栈</strong>的数据结构，队列是FIFO的数据结构而栈是LIFO的数据结构，同时我们可以学习到<strong>优先级队列</strong>来维护<strong>大顶堆、小顶堆</strong>以及单调队列</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死之前要学完的算法-[KMP算法]</title>
      <link href="/2023/08/19/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%AD%A6%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95-%5BKMP%E7%AE%97%E6%B3%95%5D/"/>
      <url>/2023/08/19/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%AD%A6%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95-%5BKMP%E7%AE%97%E6%B3%95%5D/</url>
      
        <content type="html"><![CDATA[<p><strong>KMP算法</strong></p><p>KMP是字符串匹配算法，而还有一种算法是BF算法(Brute Force)也即暴力算法 我们先用暴力算法看看怎么匹配字符串的过程，易于理解</p>        <h1 id="BF"   >          <a href="#BF" class="heading-link"><i class="fas fa-link"></i></a><a href="#BF" class="headerlink" title="BF"></a>BF</h1>      <p>假设有一个模拟字符串 s1&#x3D;”aabaaccde”和一个比较串s2&#x3D;”aac”</p><p>最容易想到的方法是双层循环，第一层遍历模拟串，第二层来进行匹配比较串是否是子串</p>        <h2 id="思路"   >          <a href="#思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#思路" class="headerlink" title="思路"></a>思路</h2>      <ul><li>先对s1和s2做一个判断 如果模拟串s1长度比比较串s2更短就不可能是子串</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(s1.length&lt;s2.length)&#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>第一层遍历模拟串s1，用i表示正在匹配的字符是否是比较串s2中的起始位置</li></ul><p>如果s1.charAt(i)&#x3D;&#x3D;s2.charAt(0) 那么进行判断i是否是比较串的起始位置</p><p>如果s1.charAt(i)!&#x3D;s2.charAt(0) 那么进入下一个位置继续遍历</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;s1.length();)&#123;</span><br><span class="line"><span class="keyword">if</span>(s1.charAt(i)==s2.charAt(j))&#123;</span><br><span class="line">        <span class="comment">//第二层循环 判断是否是子串</span></span><br><span class="line"><span class="comment">//具体判断代码....</span></span><br><span class="line">                <span class="comment">//如果是子串 则返回当前索引下标 return i;</span></span><br><span class="line">                <span class="comment">//如果不是子串 则将j置为0 等待下一次判断</span></span><br><span class="line">                <span class="comment">//i++;j=0;</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s1.charAt(i)!=s2.charAt(j))&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><ul><li>第二层遍历判断比较串是否在模拟串中</li></ul><p>如果每一个字符都对应的上那么就是子串，返回当前索引i</p><p>如果有一个字符对应不上则break，将j置为0等待下一次比较</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第二层循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> index=i;j&lt;s2.length()&amp;&amp;index&lt;s1.length();)&#123;</span><br><span class="line">    <span class="comment">//判断字符是否相同</span></span><br><span class="line">   <span class="keyword">if</span>(s1.charAt(index)==s2.charAt(j))&#123;</span><br><span class="line">      <span class="comment">//如果j指向了比较串s2的最后一个位置 且字符相同</span></span><br><span class="line">       <span class="keyword">if</span>(j==s2.length()-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//反之没有指向最后一个元素 则两个位置都++</span></span><br><span class="line">       index++;</span><br><span class="line">       j++;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="comment">//如果有一个字符不相同 那么就不是子串 将j置为0,i++然后跳出循环</span></span><br><span class="line">       j=<span class="number">0</span>;</span><br><span class="line">       i++;</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="匹配子串流程图"   >          <a href="#匹配子串流程图" class="heading-link"><i class="fas fa-link"></i></a><a href="#匹配子串流程图" class="headerlink" title="匹配子串流程图"></a>匹配子串流程图</h2>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com//image-20230820035249818.png"  alt="匹配子串流程图(1)">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com//image-20230820035207219.png"  alt="匹配子串流程图(2)">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com//image-20230820035609512.png"  alt="匹配子串流程图(3)">      </p>        <h2 id="完整代码"   >          <a href="#完整代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">    <span class="type">char</span>[] arr=haystack.toCharArray();</span><br><span class="line">    <span class="type">char</span>[] Narr=needle.toCharArray();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对s1和s2长度判断</span></span><br><span class="line">    <span class="keyword">if</span>(arr.length&lt;Narr.length)&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//外层循环遍历模拟串</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;arr.length;)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]!=Narr[j])&#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//内层循环匹配比较串</span></span><br><span class="line">            <span class="comment">//arr[i]==Narr[j]</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> index=i;j&lt;Narr.length&amp;&amp;index&lt;arr.length;)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[index]==Narr[j])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(j==Narr.length-<span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span> i;</span><br><span class="line">                    &#125;</span><br><span class="line">                    index++;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    j=<span class="number">0</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="KMP"   >          <a href="#KMP" class="heading-link"><i class="fas fa-link"></i></a><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1>      <p>我们可以通过模拟子串匹配的过程发现，每一次匹配之后都会有一部分位置可以确认不会匹配上，而暴力法就浪费了这一部分的信息，</p><p>KMP可以通过回溯指针到最长相同前后缀位置来以便进行下一次子串的匹配</p>        <h2 id="前缀"   >          <a href="#前缀" class="heading-link"><i class="fas fa-link"></i></a><a href="#前缀" class="headerlink" title="前缀"></a>前缀</h2>      <p>前缀：字符串除了最后一个字符，剩下的字符有前到后的所有组合</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例如: 字符串&quot;aaabbbc&quot;</span><br><span class="line">那么前缀有: </span><br><span class="line">a</span><br><span class="line">aa</span><br><span class="line">aaa</span><br><span class="line">aaab</span><br><span class="line">aaabb</span><br><span class="line">aaabbb</span><br></pre></td></tr></table></div></figure>        <h2 id="后缀"   >          <a href="#后缀" class="heading-link"><i class="fas fa-link"></i></a><a href="#后缀" class="headerlink" title="后缀"></a>后缀</h2>      <p>后缀：字符串除了首字符,剩下的字符由尾到前的所有组合</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例如:字符串&quot;aaabbbc&quot;</span><br><span class="line">那么后缀有:</span><br><span class="line">c</span><br><span class="line">bc</span><br><span class="line">bbc</span><br><span class="line">bbbc</span><br><span class="line">abbbc</span><br><span class="line">aabbbc</span><br></pre></td></tr></table></div></figure>        <h2 id="最长相同前后缀"   >          <a href="#最长相同前后缀" class="heading-link"><i class="fas fa-link"></i></a><a href="#最长相同前后缀" class="headerlink" title="最长相同前后缀"></a>最长相同前后缀</h2>      <p>例如:s&#x3D;”aabaa”，那么这个字符的最长公共前后缀就是”aa”</p>        <h2 id="KMP实现思路"   >          <a href="#KMP实现思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#KMP实现思路" class="headerlink" title="KMP实现思路"></a>KMP实现思路</h2>      <p>字符串比较思路是一样的，然后KMP相较于BF的是在<strong>失配</strong>情况下移动比较串的过程</p><p>当失配情况下，当前i位置不变移动比较字符串的j索引，而移动j索引则需要用到next数组，查看到当前j之前的next数组就能知道移动后比较串j的新位置</p>        <h2 id="NEXT数组"   >          <a href="#NEXT数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#NEXT数组" class="headerlink" title="NEXT数组"></a>NEXT数组</h2>      <p>next数组用于装比较串的每个子串的最大相同前后缀的长度</p><p><strong>例1</strong></p><p>S&#x3D;”aabaa” ,那么求得next数组就为[0,1,0,1,2]</p><p>具体步骤如下：</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">子串a  那么前后缀都是0 所以next[0]==0</span><br><span class="line">子串aa 那么有一个相同a所以Next[1]==1</span><br><span class="line">子串aab 所以没有相同前后缀  所以Next[2]=0</span><br><span class="line">子串aaba 有一个相同a 所以Next[3]==1</span><br><span class="line">子串aabaa 有两个相同aa 所以Next[4]==2</span><br><span class="line">也即</span><br><span class="line">子串  有几个相同</span><br><span class="line">a 0</span><br><span class="line">aa 1</span><br><span class="line">aab 0</span><br><span class="line">aaba1</span><br><span class="line">aabaa2</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p><strong>例2</strong></p><p>s&#x3D;”ababa” 那么求得next数组就为[0,0,1,2,3]</p><p>具体步骤如下：</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">子串a 那么前后缀都是0 next[0]==0</span><br><span class="line">子串ab 那么没有相同前后缀    next[1]==0</span><br><span class="line">子串aba 那么有一个相同前后缀a  next[2]==1</span><br><span class="line">子串abab 那么有两个相同前后缀ab  next[3]==2</span><br><span class="line">子串ababa 那么有三个相同前后缀aba next[4]==3</span><br><span class="line">也即</span><br><span class="line">a0</span><br><span class="line">ab  0</span><br><span class="line">aba 1</span><br><span class="line">abab2</span><br><span class="line">ababa 3</span><br></pre></td></tr></table></div></figure>        <h3 id="代码获取Next数组"   >          <a href="#代码获取Next数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码获取Next数组" class="headerlink" title="代码获取Next数组"></a>代码获取Next数组</h3>      <p>1.定义一个i用于当前要获取的子串的位置，定义一个j用于表示最长前缀的尾部</p><p>2.先初始化next[0]&#x3D;0 然后j指向0的位置</p><p>3.当前后字符相同的时候 next[i]&#x3D;j+1;j++;i++;</p><p>4.当前后字符不相同的时候，循环回溯j的位置，每次都是往前查一位j&#x3D;next[j-1]</p><p>5.当j&#x3D;&#x3D;0的时候判断当前j字符和i字符是否相同如果相同则next[i]&#x3D;++j;</p><p>6.如果当前j字符和i字符不相同则next[i]&#x3D;0，表示没有相同前后缀</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取next数组</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span>[] getNext(String s)&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line">       <span class="type">int</span>[] next=<span class="keyword">new</span> <span class="title class_">int</span>[s.length()];</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;arr.length;)&#123;</span><br><span class="line">           <span class="comment">//初始化i==0的位置</span></span><br><span class="line">           <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">               next[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">               i++;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//当前后缀相同的时候</span></span><br><span class="line">           <span class="keyword">if</span>(arr[j]==arr[i])&#123;</span><br><span class="line">               <span class="comment">//将当前j+1放到当前索引下标  i和j都++</span></span><br><span class="line">               next[i]=j+<span class="number">1</span>;</span><br><span class="line">               j++;</span><br><span class="line">               i++;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="comment">//当前后缀不相同的时候进行回溯</span></span><br><span class="line">               <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;arr[j]!=arr[i])&#123;</span><br><span class="line">                   <span class="comment">//回溯要找前一个位置的下标</span></span><br><span class="line">                   j=next[j-<span class="number">1</span>];</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//如果j==0 那么j已经指向最初的位置</span></span><br><span class="line">               <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">                   <span class="comment">//判断第一个字符是否和当前字符一样</span></span><br><span class="line">                   <span class="keyword">if</span>(arr[j]==arr[i])&#123;</span><br><span class="line">                       <span class="comment">//是的话就将1赋值给当前位置</span></span><br><span class="line">                       next[i]=++j;</span><br><span class="line">                   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                       <span class="comment">//反之则不一样下一次要从0开始找</span></span><br><span class="line">                       next[i]=<span class="number">0</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">              </span><br><span class="line">                   <span class="comment">//当前位置也判断过 所以i++</span></span><br><span class="line">                   i++;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> next;    </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="匹配子串过程"   >          <a href="#匹配子串过程" class="heading-link"><i class="fas fa-link"></i></a><a href="#匹配子串过程" class="headerlink" title="匹配子串过程"></a>匹配子串过程</h2>      <p>1.遍历模拟串，然后比较当前位置和比较串的j位置是否相同</p><p>2.如果相同，那么说明这个字符是匹配上的，判断j位置是不是比较串末尾 如果是则说明找到子串，返回i-needle.length()+1，如果不是末尾，则i++,j++往后继续匹配</p><p>3.如果匹配字符失配了，移动比较字符数组j索引，如果j&gt;0查询next[j-1]的数据将j移动到那个数值的索引位置即可，如果j&#x3D;&#x3D;0那么说明已经从头比较了，所以直接i++</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line"><span class="comment">//获取next数组 用于回溯指针</span></span><br><span class="line">        <span class="type">int</span>[] next=getNext(needle);</span><br><span class="line">        <span class="comment">//获取模拟串的字符数组</span></span><br><span class="line">        <span class="type">char</span>[] arr=haystack.toCharArray();</span><br><span class="line">        <span class="comment">//获取比较串的字符数组</span></span><br><span class="line">        <span class="type">char</span>[] Narr=needle.toCharArray();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历arr数组 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;arr.length;)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//如果遍历的字符相等 则两个指针向后移动</span></span><br><span class="line">            <span class="keyword">if</span>(Narr[j]==arr[i]&amp;&amp;j&lt;Narr.length)&#123;</span><br><span class="line">                <span class="comment">//判断此时是不是比较串末尾 如果是则直接返回i-Narr.length+1</span></span><br><span class="line">                <span class="keyword">if</span>(j==Narr.length-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> i-Narr.length+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                j++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//Narr[j]!=arr[i]</span></span><br><span class="line">                <span class="comment">//模拟串数组的滑动 本质上改变下标j的位置</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//找前一个位置的下标  移动到那个位置</span></span><br><span class="line">                <span class="keyword">if</span>(j&gt;<span class="number">0</span>)&#123;j=next[j-<span class="number">1</span>]; <span class="keyword">continue</span>;&#125;</span><br><span class="line">                <span class="comment">//如果j已经为0了说明要从头开始遍历</span></span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">                   i++; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="代码"   >          <a href="#代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码" class="headerlink" title="代码"></a>代码</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line"><span class="comment">//获取next数组 用于回溯指针</span></span><br><span class="line">        <span class="type">int</span>[] next=getNext(needle);</span><br><span class="line">        <span class="comment">//获取比较串的字符数组</span></span><br><span class="line">        <span class="type">char</span>[] arr=haystack.toCharArray();</span><br><span class="line">        <span class="comment">//获取模拟串的字符数组</span></span><br><span class="line">        <span class="type">char</span>[] Narr=needle.toCharArray();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历arr数组 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;arr.length;)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//如果遍历的字符相等 则两个指针向后移动</span></span><br><span class="line">            <span class="keyword">if</span>(Narr[j]==arr[i]&amp;&amp;j&lt;Narr.length)&#123;</span><br><span class="line">                <span class="comment">//判断此时是不是模拟串末尾 如果是则直接返回i-Narr.length+1</span></span><br><span class="line">                <span class="keyword">if</span>(j==Narr.length-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> i-Narr.length+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                j++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//Narr[j]!=arr[i]</span></span><br><span class="line">                <span class="comment">//模拟串数组的滑动 本质上改变下标j的位置</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//找前一个位置的下标  移动到那个位置</span></span><br><span class="line">                <span class="keyword">if</span>(j&gt;<span class="number">0</span>)&#123;j=next[j-<span class="number">1</span>]; <span class="keyword">continue</span>;&#125;</span><br><span class="line">                <span class="comment">//如果j已经为0了说明要从头开始遍历</span></span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">                   i++; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取next数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getNext(String s)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line">        <span class="type">int</span>[] next=<span class="keyword">new</span> <span class="title class_">int</span>[s.length()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;arr.length;)&#123;</span><br><span class="line">            <span class="comment">//初始化i==0的位置</span></span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                next[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当前后缀相同的时候</span></span><br><span class="line">            <span class="keyword">if</span>(arr[j]==arr[i])&#123;</span><br><span class="line">                <span class="comment">//将当前j+1放到当前索引下标  i和j都++</span></span><br><span class="line">                next[i]=j+<span class="number">1</span>;</span><br><span class="line">                j++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//当前后缀不相同的时候进行回溯</span></span><br><span class="line">                <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;arr[j]!=arr[i])&#123;</span><br><span class="line">                    <span class="comment">//回溯要找前一个位置的下标</span></span><br><span class="line">                    j=next[j-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果j==0 那么j已经指向最初的位置</span></span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//判断第一个字符是否和当前字符一样</span></span><br><span class="line">                    <span class="keyword">if</span>(arr[j]==arr[i])&#123;</span><br><span class="line">                        <span class="comment">//是的话就将1赋值给当前位置</span></span><br><span class="line">                        next[i]=++j;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">//反之则不一样下一次要从0开始找</span></span><br><span class="line">                        next[i]=<span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">               </span><br><span class="line">                    <span class="comment">//当前位置也判断过 所以i++</span></span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死之前要做完的算法手册-[4.字符串]</title>
      <link href="/2023/08/16/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B4.%E5%AD%97%E7%AC%A6%E4%B8%B2%5D/"/>
      <url>/2023/08/16/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B4.%E5%AD%97%E7%AC%A6%E4%B8%B2%5D/</url>
      
        <content type="html"><![CDATA[        <h1 id="反转字符串"   >          <a href="#反转字符串" class="heading-link"><i class="fas fa-link"></i></a><a href="#反转字符串" class="headerlink" title="反转字符串"></a>反转字符串</h1>      <p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>s</code> 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须**<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95" >原地</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>修改输入数组**、使用 O(1) 的额外空间解决这一问题。</p>        <h2 id="344-反转字符串"   >          <a href="#344-反转字符串" class="heading-link"><i class="fas fa-link"></i></a><a href="#344-反转字符串" class="headerlink" title="344.反转字符串"></a>344.反转字符串</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/reverse-string/" >Leetcode.344题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做"   >          <a href="#第一次做" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;17 </p>        <h4 id="第一次代码"   >          <a href="#第一次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=s.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="type">char</span> temp=s[left];</span><br><span class="line">            s[left]=s[right];</span><br><span class="line">            s[right]=temp;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功"   >          <a href="#提交成功" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解" class="headerlink" title="题解"></a>题解</h3>      <p><strong>双指针法</strong></p><p>思想是一个指针指向s的起始位置，一个指针指向s的结束位置，然后交换之后分别移动指针 直到左指针大于等于右指针</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] s)</span> &#123;</span><br><span class="line">     <span class="comment">//左指针从0开始 右指针在数组s的结束位置</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=s.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当左指针小于右指针的时候交换数据</span></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="type">char</span> temp=s[left];</span><br><span class="line">            s[left]=s[right];</span><br><span class="line">            s[right]=temp;</span><br><span class="line">    <span class="comment">//左指针向后移动 右指针向前移动</span></span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="541-反转字符串II"   >          <a href="#541-反转字符串II" class="heading-link"><i class="fas fa-link"></i></a><a href="#541-反转字符串II" class="headerlink" title="541.反转字符串II"></a>541.反转字符串II</h2>      <p>给定一个字符串 <code>s</code> 和一个整数 <code>k</code>，从字符串开头算起，每计数至 <code>2k</code> 个字符，就反转这 <code>2k</code> 字符中的前 <code>k</code> 个字符。</p><ul><li>如果剩余字符少于 <code>k</code> 个，则将剩余字符全部反转。</li><li>如果剩余字符小于 <code>2k</code> 但大于或等于 <code>k</code> 个，则反转前 <code>k</code> 个字符，其余字符保持原样。</li></ul><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/reverse-string-ii/" >Leetcode.541题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-1"   >          <a href="#第一次做-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-1" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;17</p>        <h4 id="第一次代码-1"   >          <a href="#第一次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-1" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseStr</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> mid=k-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">2</span>*k-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> length=s.length();</span><br><span class="line">        <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(length&lt;<span class="number">2</span>*k)&#123;</span><br><span class="line">            <span class="comment">//全部反转</span></span><br><span class="line">            right=length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="type">char</span> temp=s.charAt(left);</span><br><span class="line">                arr[left]=s.charAt(right);</span><br><span class="line">                arr[right]=temp;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//length&gt;=2k</span></span><br><span class="line">            right=mid;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="type">char</span> temp=s.charAt(left);</span><br><span class="line">                arr[left]=s.charAt(right);</span><br><span class="line">                arr[right]=temp;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">         </span><br><span class="line">        &#125;</span><br><span class="line">     <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">char</span> c:arr)&#123;</span><br><span class="line">         sb.append(c+<span class="string">&quot;&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误"   >          <a href="#提交错误" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE：s &#x3D;”abcdefg” ，k &#x3D;2 ，输出 “bacdefg”， 预期结果”bacdfeg”</p>        <h4 id="第二次代码"   >          <a href="#第二次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseStr</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=k-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> length=s.length();</span><br><span class="line">        <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//反转前k个元素</span></span><br><span class="line">        <span class="keyword">if</span>(length&lt;=k)&#123;</span><br><span class="line">            right=length-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="type">char</span> temp=arr[left];</span><br><span class="line">                arr[left]=arr[right];</span><br><span class="line">                arr[right]=temp;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;         </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(length&lt;=<span class="number">2</span>*k)&#123;</span><br><span class="line">            <span class="comment">//k&lt;length&lt;=2k </span></span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="type">char</span> temp=arr[left];</span><br><span class="line">                arr[left]=arr[right];</span><br><span class="line">                arr[right]=temp;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//length&gt;2k</span></span><br><span class="line">            <span class="type">int</span> gap=length-<span class="number">2</span>*k;</span><br><span class="line">            <span class="comment">//反转前2k中k个元素</span></span><br><span class="line">            <span class="comment">//k&lt;length&lt;=2k </span></span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="type">char</span> temp=arr[left];</span><br><span class="line">                arr[left]=arr[right];</span><br><span class="line">                arr[right]=temp;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">if</span>(gap&lt;k)&#123;</span><br><span class="line">                left=<span class="number">2</span>*k;</span><br><span class="line">                right=length-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                    <span class="type">char</span> temp=arr[left];</span><br><span class="line">                    arr[left]=arr[right];</span><br><span class="line">                    arr[right]=temp;</span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(gap&lt;<span class="number">2</span>*k)&#123;</span><br><span class="line">                left=<span class="number">2</span>*k;</span><br><span class="line">                right=<span class="number">3</span>*k-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                    <span class="type">char</span> temp=arr[left];</span><br><span class="line">                    arr[left]=arr[right];</span><br><span class="line">                    arr[right]=temp;</span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:arr)&#123;</span><br><span class="line">            sb.append(c+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-1"   >          <a href="#提交错误-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-1" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE：s &#x3D;”krmyfshbspcgtesxnnljhfursyissjnsocgdhgfxubewllxzqhpasguvlrxtkgatzfybprfmmfithphckksnvjkcvnsqgsgosfxc” ，k &#x3D;20 ，输出 “jlnnxsetgcpsbhsfymrkhfursyissjnsocgdhgfxubewllxzqhpasguvlrxtkgatzfybprfmmfithphckksnvjkcvnsqgsgosfxc”， 预期结果”jlnnxsetgcpsbhsfymrkhfursyissjnsocgdhgfxtxrlvugsaphqzxllwebukgatzfybprfmmfithphccxfsogsgqsnvckjvnskk”</p>        <h4 id="第三次代码"   >          <a href="#第三次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseStr</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left;</span><br><span class="line">        <span class="type">int</span> right;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> length=s.length();</span><br><span class="line">        <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line">        <span class="type">int</span> cor=<span class="number">2</span>*k;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(cor&lt;=length)&#123;</span><br><span class="line">            <span class="comment">//每次反转前K个元素</span></span><br><span class="line">             right=cor-k-<span class="number">1</span>;</span><br><span class="line">             left=right-k&lt;<span class="number">0</span>?<span class="number">0</span>:right-k;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="type">char</span> temp=arr[left];</span><br><span class="line">                arr[left]=arr[right];</span><br><span class="line">                arr[right]=temp;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cor==length)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cor+=<span class="number">2</span>*k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后一次反转 cor&gt;length</span></span><br><span class="line">        <span class="type">int</span> gap=length-cor+<span class="number">2</span>*k;</span><br><span class="line">        <span class="keyword">if</span>(gap&gt;<span class="number">0</span>&amp;&amp;gap&lt;k)&#123;</span><br><span class="line">             left=cor-<span class="number">2</span>*k&lt;<span class="number">0</span>?<span class="number">0</span>:cor-<span class="number">2</span>*k;</span><br><span class="line">             right=length-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="type">char</span> temp=arr[left];</span><br><span class="line">                arr[left]=arr[right];</span><br><span class="line">                arr[right]=temp;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(gap==<span class="number">2</span>*k)&#123;</span><br><span class="line">            <span class="comment">//反转完了</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(gap&gt;=k)&#123;</span><br><span class="line">            left=cor-<span class="number">2</span>*k&lt;<span class="number">0</span>?<span class="number">0</span>:cor-<span class="number">2</span>*k;</span><br><span class="line">            right=left+k-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="type">char</span> temp=arr[left];</span><br><span class="line">                arr[left]=arr[right];</span><br><span class="line">                arr[right]=temp;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:arr)&#123;</span><br><span class="line">            sb.append(c+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-2"   >          <a href="#提交错误-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-2" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE：s &#x3D;”krmyfshbspcgtesxnnljhfursyissjnsocgdhgfxubewllxzqhpasguvlrxtkgatzfybprfmmfithphckksnvjkcvnsqgsgosfxc” ，k &#x3D;2 ，输出 “rkmsfyhpsbcetgsnnxlfhjuysrijssncosgghdfbuxellwxhqzpgsaurlvxgktafztyrpbffmmiphthkkcsjvnknvcssgqgfsoxc”， 预期结果””rkmysfhbpscgetsxnnljfhurysisjsnscogdghfxbuewllxzhqpagsuvrlxtgkatfzybrpfmfmitphhckksnjvkcnvsqsggofsxc”</p>        <h4 id="第四次代码"   >          <a href="#第四次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四次代码" class="headerlink" title="第四次代码"></a>第四次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseStr</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> left;</span><br><span class="line">        <span class="type">int</span> right;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> length=s.length();</span><br><span class="line">        <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line">    <span class="comment">//游标 每次锁定2k个元素</span></span><br><span class="line">        <span class="type">int</span> cor=<span class="number">2</span>*k;</span><br><span class="line">        <span class="keyword">while</span>(cor&lt;=length)&#123;</span><br><span class="line">            <span class="comment">//每次反转前K个元素</span></span><br><span class="line">            left=cor-<span class="number">2</span>*k&lt;<span class="number">0</span>?<span class="number">0</span>:cor-<span class="number">2</span>*k;</span><br><span class="line">            right=left+k-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="type">char</span> temp=arr[left];</span><br><span class="line">                arr[left]=arr[right];</span><br><span class="line">                arr[right]=temp;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//游标移动2k个位置</span></span><br><span class="line">            cor+=<span class="number">2</span>*k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后一次反转 cor&gt;length gap为剩余的字符个数</span></span><br><span class="line">        <span class="type">int</span> gap=length-cor+<span class="number">2</span>*k;</span><br><span class="line">        <span class="keyword">if</span>(gap&gt;<span class="number">0</span>&amp;&amp;gap&lt;k)&#123;</span><br><span class="line">            <span class="comment">//剩余在0~k之间 反转全部剩余字符</span></span><br><span class="line">             left=cor-<span class="number">2</span>*k&lt;<span class="number">0</span>?<span class="number">0</span>:cor-<span class="number">2</span>*k;</span><br><span class="line">             right=length-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="type">char</span> temp=arr[left];</span><br><span class="line">                arr[left]=arr[right];</span><br><span class="line">                arr[right]=temp;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(gap==<span class="number">2</span>*k)&#123;</span><br><span class="line">            <span class="comment">//gap==2k 正好全部反转完了 </span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(gap&gt;=k)&#123;</span><br><span class="line">            <span class="comment">//gap&lt;2k &amp;&amp; gap&gt;k 反转前k个元素</span></span><br><span class="line">            left=cor-<span class="number">2</span>*k&lt;<span class="number">0</span>?<span class="number">0</span>:cor-<span class="number">2</span>*k;</span><br><span class="line">            right=left+k-<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="type">char</span> temp=arr[left];</span><br><span class="line">                arr[left]=arr[right];</span><br><span class="line">                arr[right]=temp;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:arr)&#123;</span><br><span class="line">            sb.append(c+<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-1"   >          <a href="#提交成功-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-1" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-1"   >          <a href="#题解-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3>      <p>这道题不涉及到算法的过程，只是我们要模拟这个每2k个字符串进行反转然后对尾部字符串判断 1.如果不足k个则全部反转 如果不足2k个则反转前k个</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseStr</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line"></span><br><span class="line">       StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="comment">//获取字符数组</span></span><br><span class="line">       <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每次遍历2k个元素</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i+=<span class="number">2</span>*k)&#123;</span><br><span class="line">           <span class="comment">//如果此次循环能够找到k个元素进行反转</span></span><br><span class="line">           <span class="keyword">if</span>(i+k&lt;arr.length)&#123;</span><br><span class="line">               <span class="comment">//能够反转前k个元素</span></span><br><span class="line">               <span class="type">int</span> left=i;</span><br><span class="line">               <span class="type">int</span> right=i+k-<span class="number">1</span>;</span><br><span class="line">               <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                   <span class="type">char</span> temp=arr[left];</span><br><span class="line">                   arr[left++]=arr[right];</span><br><span class="line">                   arr[right--]=temp;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//反转完进行下一次判断 </span></span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//最后不够反转k个元素</span></span><br><span class="line">           <span class="type">int</span> left=i;</span><br><span class="line">           <span class="type">int</span> right=arr.length-<span class="number">1</span>;</span><br><span class="line">           <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                   <span class="type">char</span> temp=arr[left];</span><br><span class="line">                   arr[left++]=arr[right];</span><br><span class="line">                   arr[right--]=temp;</span><br><span class="line">               &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">char</span> c:arr) sb.append(c+<span class="string">&quot;&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> sb.toString();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure><p><strong>思路</strong></p><p>把最后不足2k个元素当成一次循环来看，如果够k个元素就认为也是一次2k个元素的前k元素反转，如果不够k个元素那么就反转当前索引i到数组末尾的元素。如果不清楚可以看第一次做中第四次代码中对末尾元素个数的处理</p>        <h1 id="替换空格"   >          <a href="#替换空格" class="heading-link"><i class="fas fa-link"></i></a><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h1>      <p>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p><figure class="highlight c++"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = <span class="string">&quot;We are happy.&quot;</span></span><br><span class="line">输出：<span class="string">&quot;We%20are%20happy.&quot;</span></span><br></pre></td></tr></table></div></figure>        <h2 id="剑指-Offer-05-替换空格"   >          <a href="#剑指-Offer-05-替换空格" class="heading-link"><i class="fas fa-link"></i></a><a href="#剑指-Offer-05-替换空格" class="headerlink" title="剑指 Offer 05. 替换空格"></a>剑指 Offer 05. 替换空格</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/" >剑指 Offer 05(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-2"   >          <a href="#第一次做-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-2" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;18</p>        <h4 id="第一次代码-2"   >          <a href="#第一次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-2" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">replaceSpace</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:arr)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c!=<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                sb.append(c+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-2"   >          <a href="#提交成功-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-2" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-2"   >          <a href="#题解-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3>      <p><strong>利用StringBuilder直接替换空格字符</strong></p><p>思路是直接遍历s，如果s索引i的字符是空格字符则替换成%20再添加到StringBuilder中，否则直接添加原字符到StringBuilder中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">replaceSpace</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">     <span class="comment">//如果是空格</span></span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i)==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                sb.append(<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//反之不是空格</span></span><br><span class="line">                sb.append(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p><strong>双指针法</strong></p><p><strong>思路</strong> </p><p>1.先统计有多少个空格字符，然后算出要替换之后的数组长度</p><p>2.创建一个数组，数组长度为替换之后的数组长度，然后将数组初始化</p><p>3.数组初始化是将s每个字符添加到新数组的位置去</p><p>4.定义一个right指针指向新数组的尾部  一个left指向s字符串的最后一个位置</p><p>5.当left大于等于0并且左指针小于等于右指针的时候循环  ，循环判断这个字符是不是空格字符</p><p>6.如果是空格字符那么右指针添加三个数据后再移动三格，左指针移动一格</p><p>7.如果不是空格字符那么就将当前位置的数据添加到right位置，然后左右指针都向前移动一格</p><p>8.返回新字符串</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">replaceSpace</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="comment">//count用于统计有多少个空格字符</span></span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新数组 新数组长度为老字符串长度+要替换之后多出来的长度</span></span><br><span class="line">        <span class="type">char</span>[] result=<span class="keyword">new</span> <span class="title class_">char</span>[s.length()+<span class="number">2</span>*count];</span><br><span class="line"><span class="comment">//新数组初始化数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            result[i]=s.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个右指针一个左指针  右指针指向新数组的尾部，左指针指向老字符串的最后一位</span></span><br><span class="line">        <span class="type">int</span> right=result.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> left=s.length()-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当左指针大于等于0 并且左指针小于等于右指针的时候循环</span></span><br><span class="line">        <span class="keyword">while</span>(left&gt;=<span class="number">0</span>&amp;&amp;left&lt;=right)&#123;</span><br><span class="line">            <span class="comment">//如果是空格字符</span></span><br><span class="line">            <span class="keyword">if</span>(s.charAt(left)==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                result[right]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                result[right-<span class="number">1</span>]=<span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">                result[right-<span class="number">2</span>]=<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">                right-=<span class="number">3</span>;</span><br><span class="line">                left--;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果不是空格字符 </span></span><br><span class="line">            result[right--]=s.charAt(left--);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回新字符串</span></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(result);</span><br></pre></td></tr></table></div></figure>        <h3 id="图解"   >          <a href="#图解" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解" class="headerlink" title="图解"></a>图解</h3>      <p><strong>双指针法</strong></p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230818091650084.png"  alt="双指针法(1)">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230818092035372.png"  alt="双指针法(2)">      </p>        <h1 id="翻转字符串里的单词"   >          <a href="#翻转字符串里的单词" class="heading-link"><i class="fas fa-link"></i></a><a href="#翻转字符串里的单词" class="headerlink" title="翻转字符串里的单词"></a>翻转字符串里的单词</h1>      <p>给你一个字符串 <code>s</code> ，请你反转字符串中 <strong>单词</strong> 的顺序。</p><p><strong>单词</strong> 是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开。</p><p>返回 <strong>单词</strong> 顺序颠倒且 <strong>单词</strong> 之间用单个空格连接的结果字符串。</p><p><strong>注意：</strong>输入字符串 <code>s</code>中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p>        <h2 id="151-反转字符串中的单词"   >          <a href="#151-反转字符串中的单词" class="heading-link"><i class="fas fa-link"></i></a><a href="#151-反转字符串中的单词" class="headerlink" title="151.反转字符串中的单词"></a>151.反转字符串中的单词</h2>      <p> <span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/reverse-words-in-a-string/" >Leetcode.151题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-3"   >          <a href="#第一次做-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-3" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;18</p>        <h4 id="第一次代码-3"   >          <a href="#第一次代码-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-3" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        String[] strArr=s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        StringBuilder sb= <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=strArr.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(strArr[i].equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                sb.append(strArr[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sb.append(strArr[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String result=sb.toString();</span><br><span class="line">        <span class="keyword">if</span>(result.charAt(result.length()-<span class="number">1</span>)==<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            result=result.substring(<span class="number">0</span>,result.length()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-3"   >          <a href="#提交成功-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-3" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-3"   >          <a href="#题解-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3>      <p>这道题不用内置库中的分割字符串、移除空白空格，我们自己来对字符串删除前后空格、反转字符串、反转单词</p><p><strong>过程</strong> </p><p>例如s为” hello  world “ 前后各有一个空格，中间有两个空格</p><p>1.删除前后空格以及多余的中间空格，这步结束之后s为 “hello world”</p><p>2.反转字符串s，这步结束之后s为”dlrow olleh” </p><p>3.反转字符串中每个单词，这步结束之后s为”world hello”</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">//删除前后空格以及中间多余空格</span></span><br><span class="line">        s=trimBlack(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反转字符串</span></span><br><span class="line">        s=reserveString(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反转每个单词</span></span><br><span class="line">        s=reserverWorld(s);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//移除多余空格</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">trimBlack</span><span class="params">(String s)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=s.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//如果起始位置是空格则left++ 如果终止位置是空格则right-- </span></span><br><span class="line">        <span class="keyword">while</span>(s.charAt(left)==<span class="string">&#x27; &#x27;</span>) left++;</span><br><span class="line">        <span class="keyword">while</span>(s.charAt(right)==<span class="string">&#x27; &#x27;</span>)right--;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//运行到这里说明left和right指向的都是非空格字符</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除中间多余空格 </span></span><br><span class="line">        <span class="comment">//1.如果不是空格则直接添加 </span></span><br><span class="line">        <span class="comment">//2.如果是空格下一个字符不是空格 那么保留空格 </span></span><br><span class="line">        <span class="comment">//3.如果是空格且下一个字符也是空格则直接舍去</span></span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(left)!=<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                sb.append(s.charAt(left++));</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s.charAt(left)==<span class="string">&#x27; &#x27;</span>&amp;&amp;s.charAt(left+<span class="number">1</span>)!=<span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                sb.append(<span class="string">&#x27; &#x27;</span>); left++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反转字符串</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reserveString</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=s.length()-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            sb.append(s.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反转每个单词</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reserverWorld</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="comment">//获取字符数组</span></span><br><span class="line">        <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line">        <span class="comment">//定义左指针left 游标cor</span></span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cor=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//循环 遍历字符数组</span></span><br><span class="line">        <span class="keyword">for</span>(;cor&lt;arr.length;)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果游标位置不为空格 且游标位置不是数组最后一位</span></span><br><span class="line">            <span class="keyword">if</span>(arr[cor]!=<span class="string">&#x27; &#x27;</span>&amp;&amp;cor!=arr.length-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//游标向后移动 表示当前left到cor这是一个连续的单词</span></span><br><span class="line">                cor++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//arr[cor]==&#x27; &#x27; || cor=arr.length-1</span></span><br><span class="line">                <span class="keyword">if</span>(cor==arr.length-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="comment">//这是最后一个单词</span></span><br><span class="line">                    <span class="comment">//获取右指针 右指针的位置为游标位置</span></span><br><span class="line">                    <span class="type">int</span> right=cor;</span><br><span class="line">                    <span class="comment">//反转每个字符</span></span><br><span class="line">                    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                        <span class="type">char</span> temp=arr[left];</span><br><span class="line">                        arr[left++]=arr[right];</span><br><span class="line">                        arr[right--]=temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//arr[cor]==&#x27; &#x27; 也即cor位置指向空格 那么left到cor-1就是一个完整的单词</span></span><br><span class="line">                    <span class="comment">//这是字符串中的单词，不是最后一个单词</span></span><br><span class="line">                    <span class="type">int</span> right=cor-<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                        <span class="type">char</span> temp=arr[left];</span><br><span class="line">                        arr[left++]=arr[right];</span><br><span class="line">                        arr[right--]=temp;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//游标向后移动  ，左指针指向游标位置，等待下一个要反转的单词搜索完毕</span></span><br><span class="line">                    cor++;</span><br><span class="line">                    left=cor;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(arr);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="左旋转字符串"   >          <a href="#左旋转字符串" class="heading-link"><i class="fas fa-link"></i></a><a href="#左旋转字符串" class="headerlink" title="左旋转字符串"></a>左旋转字符串</h1>      <p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字2，该函数将返回左旋转两位得到的结果”cdefgab”。</p>        <h2 id="剑指-Offer-58-II-左旋转字符串"   >          <a href="#剑指-Offer-58-II-左旋转字符串" class="heading-link"><i class="fas fa-link"></i></a><a href="#剑指-Offer-58-II-左旋转字符串" class="headerlink" title="剑指 Offer 58 - II. 左旋转字符串"></a>剑指 Offer 58 - II. 左旋转字符串</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/" >剑指 Offer 58(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-4"   >          <a href="#第一次做-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-4" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;19 </p>        <h4 id="第一次代码-4"   >          <a href="#第一次代码-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-4" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseLeftWords</span><span class="params">(String s, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=n-<span class="number">1</span>;n&lt;s.length();n++)&#123;</span><br><span class="line">            sb.append(s.charAt(n));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            sb.append(s.charAt(j));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-4"   >          <a href="#提交成功-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-4" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-4"   >          <a href="#题解-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3>      <p>如果只在本字符串上进行一个左旋转操作，可以先进行一个<strong>局部反转</strong>，然后再<strong>整体反转</strong>，这也是一种解题的方向</p><p>例如 </p><ul><li>s&#x3D;”abcdefg” n&#x3D;2</li><li>先将n左右两边的子字符串进行一个局部反转  结果是 s&#x3D;”bagfedc”;</li><li>然后再对整个s进行一个反转 结果为s&#x3D;”cdefgab” 也即我们需要的结果</li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseLeftWords</span><span class="params">(String s, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">//先反转n之前的子字符串</span></span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=n-<span class="number">1</span>;</span><br><span class="line">        <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="type">char</span> temp=arr[left];</span><br><span class="line">            arr[left++]=arr[right];</span><br><span class="line">            arr[right--]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//再反转n开始的子字符串</span></span><br><span class="line">        left=n;</span><br><span class="line">        right=s.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="type">char</span> temp=arr[left];</span><br><span class="line">            arr[left++]=arr[right];</span><br><span class="line">            arr[right--]=temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最后再反转整个字符数组</span></span><br><span class="line">        left=<span class="number">0</span>;</span><br><span class="line">        right=s.length()-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">            <span class="type">char</span> temp=arr[left];</span><br><span class="line">            arr[left++]=arr[right];</span><br><span class="line">            arr[right--]=temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(arr);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p><strong>暴力法</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">reverseLeftWords</span><span class="params">(String s, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=n-<span class="number">1</span>;n&lt;s.length();n++)&#123;</span><br><span class="line">            sb.append(s.charAt(n));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            sb.append(s.charAt(j));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="实现-strStr"   >          <a href="#实现-strStr" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现-strStr" class="headerlink" title="实现 strStr()"></a>实现 strStr()</h1>      <p>给你两个字符串 <code>haystack</code> 和 <code>needle</code> ，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串的第一个匹配项的下标（下标从 0 开始）。如果 <code>needle</code> 不是 <code>haystack</code> 的一部分，则返回 <code>-1</code> 。</p>        <h2 id="28-找出字符串中第一个匹配项的下标"   >          <a href="#28-找出字符串中第一个匹配项的下标" class="heading-link"><i class="fas fa-link"></i></a><a href="#28-找出字符串中第一个匹配项的下标" class="headerlink" title="28.找出字符串中第一个匹配项的下标"></a>28.找出字符串中第一个匹配项的下标</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/" >Leetcode.28题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-5"   >          <a href="#第一次做-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-5" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;19</p>        <h4 id="第一次代码-5"   >          <a href="#第一次代码-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-5" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">        <span class="type">int</span> index=-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> n=needle.length();</span><br><span class="line">        <span class="type">boolean</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>;i&lt;haystack.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(haystack.charAt(i)!=needle.charAt(j))</span><br><span class="line">            &#123;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> temp=i;temp&lt;i+n;)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(haystack.charAt(temp++)==needle.charAt(j++))</span><br><span class="line">                        <span class="keyword">if</span>(temp==i+n-<span class="number">1</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> i;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(haystack.charAt(temp)!=needle.charAt(j++))&#123;</span><br><span class="line">                        j=<span class="number">0</span>;</span><br><span class="line">                        i++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                      </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败"   >          <a href="#提交失败" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败" class="headerlink" title="提交失败"></a>提交失败</h5>              <h4 id="第二次代码-1"   >          <a href="#第二次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-1" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">        <span class="type">int</span> index=-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> n=needle.length();</span><br><span class="line">        <span class="type">boolean</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="type">char</span>[] arr=haystack.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] Narr=needle.toCharArray();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==Narr[<span class="number">0</span>])&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> tempI=i+<span class="number">1</span>,j=<span class="number">1</span>;j&lt;Narr.length;)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[tempI]==Narr[j])&#123;</span><br><span class="line">                        <span class="keyword">if</span>(j==Narr.length-<span class="number">1</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> i;</span><br><span class="line">                        &#125;</span><br><span class="line">                        tempI++;</span><br><span class="line">                        j++;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        i=tempI;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-1"   >          <a href="#提交失败-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-1" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE：超出时间限制，输入haystack&#x3D;”a”,needle&#x3D;”a”</p>        <h4 id="第三次代码-1"   >          <a href="#第三次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-1" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(haystack.length()&lt;needle.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> index=-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> n=needle.length();</span><br><span class="line">        <span class="type">boolean</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="type">char</span>[] arr=haystack.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] Narr=needle.toCharArray();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==Narr[<span class="number">0</span>])&#123;</span><br><span class="line">                <span class="keyword">if</span>(Narr.length==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> tempI=i+<span class="number">1</span>,j=<span class="number">1</span>;j&lt;Narr.length;)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[tempI]==Narr[j])&#123;</span><br><span class="line">                        <span class="keyword">if</span>(j==Narr.length-<span class="number">1</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> i;</span><br><span class="line">                        &#125;</span><br><span class="line">                        tempI++;</span><br><span class="line">                        j++;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        i=tempI;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-2"   >          <a href="#提交失败-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-2" class="headerlink" title="提交失败"></a>提交失败</h5>              <h4 id="第四次代码-1"   >          <a href="#第四次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四次代码-1" class="headerlink" title="第四次代码"></a>第四次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(haystack.length()&lt;needle.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> index=-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> n=needle.length();</span><br><span class="line">        <span class="type">boolean</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="type">char</span>[] arr=haystack.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] Narr=needle.toCharArray();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==Narr[<span class="number">0</span>])&#123;</span><br><span class="line">                <span class="keyword">if</span>(Narr.length==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(arr.length-i&lt;Narr.length)&#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> tempI=i+<span class="number">1</span>,j=<span class="number">1</span>;j&lt;Narr.length&amp;&amp;tempI&lt;arr.length;)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[tempI]==Narr[j])&#123;</span><br><span class="line">                        <span class="keyword">if</span>(j==Narr.length-<span class="number">1</span>)&#123;</span><br><span class="line">                            <span class="keyword">return</span> i;</span><br><span class="line">                        &#125;</span><br><span class="line">                        tempI++;</span><br><span class="line">                        j++;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        i++;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-5"   >          <a href="#提交成功-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-5" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-5"   >          <a href="#题解-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3>      <p>这道题要用KMP算法来求解</p><p>具体KMP思路可以看我另一篇:死之前要学完的算法-[KMP算法]，这里不会详细说</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] next=getNext(needle);</span><br><span class="line">        <span class="type">char</span>[] arr=haystack.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] Narr=needle.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;arr.length;)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(Narr[j]==arr[i]&amp;&amp;j&lt;Narr.length)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==Narr.length-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> i-Narr.length+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                j++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//Narr[j]!=arr[i]</span></span><br><span class="line">                <span class="keyword">if</span>(j&gt;<span class="number">0</span>)&#123;j=next[j-<span class="number">1</span>]; <span class="keyword">continue</span>;&#125;</span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">                   i++; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//求得next数组 next中存放的是回溯下标</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getNext(String s)&#123;</span><br><span class="line">        <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line">        <span class="type">int</span>[] next=<span class="keyword">new</span> <span class="title class_">int</span>[s.length()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;arr.length;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                next[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]==arr[i])&#123;</span><br><span class="line">                next[i]=j+<span class="number">1</span>;</span><br><span class="line">                j++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;arr[j]!=arr[i])&#123;</span><br><span class="line">                    j=next[j-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[j]==arr[i])&#123;</span><br><span class="line">                        next[i]=++j;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        next[i]=<span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="重复的子字符串"   >          <a href="#重复的子字符串" class="heading-link"><i class="fas fa-link"></i></a><a href="#重复的子字符串" class="headerlink" title="重复的子字符串"></a>重复的子字符串</h1>      <p>给定一个非空的字符串 <code>s</code> ，检查是否可以通过由它的一个子串重复多次构成。</p>        <h2 id="459-重复的子字符串"   >          <a href="#459-重复的子字符串" class="heading-link"><i class="fas fa-link"></i></a><a href="#459-重复的子字符串" class="headerlink" title="459.重复的子字符串"></a>459.重复的子字符串</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/repeated-substring-pattern/" >Leetcode.459(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-6"   >          <a href="#第一次做-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-6" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;20</p>        <h4 id="第一次代码-6"   >          <a href="#第一次代码-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-6" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">repeatedSubstringPattern</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()==<span class="number">1</span>) <span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span>[] hash=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(hash[c-<span class="string">&#x27;a&#x27;</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                hash[c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hash[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                sb.append((<span class="type">char</span>)(i+<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String needle=sb.toString();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断比较串是否能完全包含s</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] next=getNext(needle);</span><br><span class="line">        <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] Narr=needle.toCharArray();</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==Narr[j])&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==next.length-<span class="number">1</span>)&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                    j=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getNext(String s)&#123;</span><br><span class="line">        <span class="type">int</span>[] next=<span class="keyword">new</span> <span class="title class_">int</span>[s.length()];</span><br><span class="line">        <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line">        next[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;arr.length;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]==arr[i])&#123;</span><br><span class="line">                next[i]=j+<span class="number">1</span>;</span><br><span class="line">                j++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//回溯</span></span><br><span class="line">                <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;arr[j]!=arr[i])&#123;</span><br><span class="line">                    j=next[j-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[j]==arr[i])&#123;</span><br><span class="line">                        next[i]=j++;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        next[i]=<span class="number">0</span>;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-3"   >          <a href="#提交失败-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-3" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE：输入”abaababaab” 输出flase 预期输出true   </p><p>该字符串可以由abaab这个子串连续组成</p>        <h4 id="第二次代码-2"   >          <a href="#第二次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-2" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">repeatedSubstringPattern</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()==<span class="number">1</span>) <span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span>[] hash=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s.toCharArray())&#123;</span><br><span class="line">            hash[c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(hash[c-<span class="string">&#x27;a&#x27;</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">                max=hash[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(hash[c-<span class="string">&#x27;a&#x27;</span>]!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(hash[c-<span class="string">&#x27;a&#x27;</span>]!=max)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count&lt;<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-4"   >          <a href="#提交失败-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-4" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE：输入”abaababaab” 输出flase 预期输出true   </p><p>该字符串可以由abaab这个子串连续组成</p>        <h4 id="第三次代码-2"   >          <a href="#第三次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-2" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">repeatedSubstringPattern</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()==<span class="number">1</span>) <span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span>[] hash=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        StringBuilder lsb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">if</span>(s.length()%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//奇数个 所以子串一定也是奇数个</span></span><br><span class="line">            <span class="type">int</span> len=(<span class="type">int</span>)Math.sqrt(s.length());</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                sb.append(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> c:s.toCharArray())&#123;</span><br><span class="line">                <span class="keyword">if</span>(hash[c-<span class="string">&#x27;a&#x27;</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    hash[c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(hash[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    sb.append((<span class="type">char</span>)(i+<span class="string">&#x27;a&#x27;</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;   </span><br><span class="line">            <span class="comment">//最长子串</span></span><br><span class="line">            <span class="type">int</span> len=s.length()/count;</span><br><span class="line">            <span class="comment">//遍历前len个元素</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                lsb.append(s.charAt(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        String needle=sb.toString();</span><br><span class="line">        String lsbNeedle=lsb.toString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(lsbNeedle==<span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">            <span class="comment">//奇数</span></span><br><span class="line">            <span class="keyword">return</span> tryRespeat(needle,s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> minflag=tryRespeat(needle,s);</span><br><span class="line">        <span class="type">boolean</span> maxflag=tryRespeat(lsbNeedle,s);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> minflag||maxflag;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryRespeat</span><span class="params">(String needle,String s)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] next=getNext(needle);</span><br><span class="line">        <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] Narr=needle.toCharArray();</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==Narr[j])&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==next.length-<span class="number">1</span>)&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                    j=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getNext(String s)&#123;</span><br><span class="line">        <span class="type">int</span>[] next=<span class="keyword">new</span> <span class="title class_">int</span>[s.length()];</span><br><span class="line">        <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line">        next[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;arr.length;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]==arr[i])&#123;</span><br><span class="line">                next[i]=j+<span class="number">1</span>;</span><br><span class="line">                j++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//回溯</span></span><br><span class="line">                <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;arr[j]!=arr[i])&#123;</span><br><span class="line">                    j=next[j-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[j]==arr[i])&#123;</span><br><span class="line">                        next[i]=j++;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        next[i]=<span class="number">0</span>;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-5"   >          <a href="#提交失败-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-5" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:”aaaaaaaaaaaaaaaaa” 输出false 预期输出true</p><p>当字符串长度为奇数的时候还是取子串取错了</p>        <h4 id="第四次代码-2"   >          <a href="#第四次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四次代码-2" class="headerlink" title="第四次代码"></a>第四次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">repeatedSubstringPattern</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()==<span class="number">1</span>) <span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            StringBuilder sb=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">                sb.append(s.charAt(j));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">boolean</span> result=tryRespeat(sb.toString(),s);</span><br><span class="line">            <span class="keyword">if</span>(result)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryRespeat</span><span class="params">(String needle,String s)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] next=getNext(needle);</span><br><span class="line">        <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] Narr=needle.toCharArray();</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==Narr[j])&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==next.length-<span class="number">1</span>)&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                    j=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getNext(String s)&#123;</span><br><span class="line">        <span class="type">int</span>[] next=<span class="keyword">new</span> <span class="title class_">int</span>[s.length()];</span><br><span class="line">        <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line">        next[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;arr.length;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]==arr[i])&#123;</span><br><span class="line">                next[i]=j+<span class="number">1</span>;</span><br><span class="line">                j++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//回溯</span></span><br><span class="line">                <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;arr[j]!=arr[i])&#123;</span><br><span class="line">                    j=next[j-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[j]==arr[i])&#123;</span><br><span class="line">                        next[i]=j++;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        next[i]=<span class="number">0</span>;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-6"   >          <a href="#提交失败-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-6" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:超出时间限制，因为这次获取子串的方式是枚举也即全暴力获取，然后给出的字符串s很长就超出时间限制了</p>        <h3 id="题解-6"   >          <a href="#题解-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3>              <h4 id="暴力法"   >          <a href="#暴力法" class="heading-link"><i class="fas fa-link"></i></a><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h4>      <p>暴力法就是双层循环 第一层循环i从1开始 用来记录子串的结束位置</p><p>第二层循环j从0开始 获取从j到i的所有子串 然后和主串比较</p><p>这里不做暴力法的详细做法</p>        <h4 id="移动数组"   >          <a href="#移动数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#移动数组" class="headerlink" title="移动数组"></a>移动数组</h4>      <p>思路：一个字符串s 如果s是由重复子串构成的话，那么前半个部分和后半个部分会相同，我们将字符串扩展到原来的两倍并且去掉首位元素，来判断原来的字符串s是否在新的扩展后的字符串中出现 如果是那么则说明是重复子串构成的</p><p>例如</p><p>字符串s为”abcabc” ,那么将s扩展一倍为字符串ss为”abcabcabcabc”</p><p>s的前半部分”abc”和后半部分”abc”相等 所以我们判断原字符串的后半部分和原字符串的前半部分组成的字符串是不是原来的字符串</p><p><em>注意</em></p><p>字符串ss要去掉首尾字母，然后再进行是否出现子串的判断<del>是否出现子串用了KMP算法实现</del></p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230820101419616.png"  alt="移动数组(1)">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230820101734419.png"  alt="移动数组(2)">      </p><p><strong>代码实现</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">repeatedSubstringPattern</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="comment">//扩展一倍</span></span><br><span class="line">        String ss=s+s;</span><br><span class="line">    <span class="comment">//截去首尾字符</span></span><br><span class="line">        String newStr=ss.substring(<span class="number">1</span>,ss.length()-<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//判断s是否在newStr中出现</span></span><br><span class="line">        <span class="keyword">return</span> tryRespeat(s,newStr);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断原来的字符串是否出现在扩展后的字符串中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryRespeat</span><span class="params">(String needle,String s)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] next=getNext(needle);</span><br><span class="line">        <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] Narr=needle.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;arr.length;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==Narr[j])&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==Narr.length-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;arr[i]!=Narr[j])&#123;</span><br><span class="line">                    j=next[j-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[i]==Narr[j])&#123;</span><br><span class="line">                        j++;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取next数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getNext(String s)&#123;</span><br><span class="line">        <span class="type">int</span>[] next=<span class="keyword">new</span> <span class="title class_">int</span>[s.length()];</span><br><span class="line">        <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line">        next[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;arr.length;)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]==arr[i])&#123;</span><br><span class="line">                next[i]=j+<span class="number">1</span>;</span><br><span class="line">                j++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//回溯</span></span><br><span class="line">                <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;arr[j]!=arr[i])&#123;</span><br><span class="line">                    j=next[j-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(arr[j]==arr[i])&#123;</span><br><span class="line">                        next[i]=j++;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        next[i]=<span class="number">0</span>;</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="KMP算法实现"   >          <a href="#KMP算法实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#KMP算法实现" class="headerlink" title="KMP算法实现"></a>KMP算法实现</h4>      <p>思路:利用KMP算出字符串s的最小重复子串</p><p><strong>s的最小重复子串长度是字符串长度减去最长相同前后缀长度</strong></p><p>这个观点很重要，举个例子说说为什么会是这个</p><p>例如字符串s为”abcabcabc” 那么next数组也即[0,0,0,1,2,3,4,5,6]</p><p>那么最长相同前后缀长度也即next[next.length-1]，也即等于6</p><p>字符串长度为9，所以最小重复子串长度就为9-6&#x3D;3，也即最小子串为s.substring(0,3);</p><p>然后获得了最小子串，判断这个最小子串能不能组成字符s即可</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">repeatedSubstringPattern</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="comment">//获取最小子串长度</span></span><br><span class="line">    <span class="type">int</span> len=s.length()-getNext(s)[s.length()-<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//如果没有最小重复子串则返回false</span></span><br><span class="line">       <span class="keyword">if</span>(len==s.length())&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="comment">//获取最小子串needle</span></span><br><span class="line">       String needle=s.substring(<span class="number">0</span>,len);</span><br><span class="line">       <span class="keyword">return</span> tryRespeat(needle,s);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//判断这个子串是否能完成组成字符s</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryRespeat</span><span class="params">(String needle,String s)</span>&#123;</span><br><span class="line">       <span class="type">int</span>[] next=getNext(needle);</span><br><span class="line">       <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line">       <span class="type">char</span>[] Narr=needle.toCharArray();</span><br><span class="line">       <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;)&#123;</span><br><span class="line">           <span class="keyword">if</span>(arr[i]==Narr[j])&#123;</span><br><span class="line">               <span class="keyword">if</span>(j==next.length-<span class="number">1</span>)&#123;</span><br><span class="line">                   i++;</span><br><span class="line">                   j=<span class="number">0</span>;</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               i++;</span><br><span class="line">               j++;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(j!=<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取next数组</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span>[] getNext(String s)&#123;</span><br><span class="line">       <span class="type">int</span>[] next=<span class="keyword">new</span> <span class="title class_">int</span>[s.length()];</span><br><span class="line">       <span class="type">char</span>[] arr=s.toCharArray();</span><br><span class="line">       next[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;arr.length;)&#123;</span><br><span class="line">           <span class="keyword">if</span>(arr[j]==arr[i])&#123;</span><br><span class="line">               next[i]=j+<span class="number">1</span>;</span><br><span class="line">               j++;</span><br><span class="line">               i++;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="comment">//回溯</span></span><br><span class="line">               <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;arr[j]!=arr[i])&#123;</span><br><span class="line">                   j=next[j-<span class="number">1</span>];</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</span><br><span class="line">                   <span class="keyword">if</span>(arr[j]==arr[i])&#123;</span><br><span class="line">                       next[i]=j++;</span><br><span class="line">                       i++;</span><br><span class="line">                   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                       next[i]=<span class="number">0</span>;</span><br><span class="line">                       i++;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> next;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h1 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h1>      <p>字符串这章也算是走到这里暂时结束了，我们从这章可以学到极其抽象的<strong>KMP算法</strong>来判断子串是否在主串中出现过，也能学到旋转字符串、删除空白字符等操作。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死之前要做完的算法手册-[3.哈希表]</title>
      <link href="/2023/08/13/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B3.%E5%93%88%E5%B8%8C%E8%A1%A8%5D/"/>
      <url>/2023/08/13/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B3.%E5%93%88%E5%B8%8C%E8%A1%A8%5D/</url>
      
        <content type="html"><![CDATA[        <h1 id="哈希表基础"   >          <a href="#哈希表基础" class="heading-link"><i class="fas fa-link"></i></a><a href="#哈希表基础" class="headerlink" title="哈希表基础"></a>哈希表基础</h1>      <p>哈希表也称散列表，是根据Key直接访问地址的数据类型</p><p><strong>哈希函数</strong></p><p>利用函数将元素的数据取得一个哈希值，这个哈希值也即要存放的地址</p><p><strong>哈希碰撞</strong></p><p>当存放的地址已经有值的时候就发生了哈希碰撞，处理哈希碰撞有以下几种方法</p><ul><li>线性探测法：从当前位置往下遍历找到一个空位置将数据存进去</li><li>链式寻址法：链式寻址法也即<strong>拉链法</strong>，插入到位置结点的下一个结点中，形成链表</li><li>再哈希法：用另外的哈希函数计算一个新的哈希值</li></ul>        <h1 id="有效的字母异位词"   >          <a href="#有效的字母异位词" class="heading-link"><i class="fas fa-link"></i></a><a href="#有效的字母异位词" class="headerlink" title="有效的字母异位词"></a>有效的字母异位词</h1>      <p>给定两个字符串 <code>*s*</code> 和 <code>*t*</code> ，编写一个函数来判断 <code>*t*</code> 是否是 <code>*s*</code> 的字母异位词。</p><p><strong>注意：</strong>若 <code>*s*</code> 和 <code>*t*</code> 中每个字符出现的次数都相同，则称 <code>*s*</code> 和 <code>*t*</code> 互为字母异位词。</p>        <h2 id="242-有效的字母异位词"   >          <a href="#242-有效的字母异位词" class="heading-link"><i class="fas fa-link"></i></a><a href="#242-有效的字母异位词" class="headerlink" title="242. 有效的字母异位词"></a>242. 有效的字母异位词</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/valid-anagram/" >Leetcode.242题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做"   >          <a href="#第一次做" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;13</p>        <h4 id="第一次代码"   >          <a href="#第一次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        HashMap&lt;Character,Integer&gt; Smap =<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        HashMap&lt;Character,Integer&gt; Tmap =<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s.toCharArray())&#123;</span><br><span class="line">            Smap.put(c,Smap.getOrDefault(c,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:t.toCharArray())&#123;</span><br><span class="line">            Tmap.put(c,Tmap.getOrDefault(c,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(!Tmap.containsKey(c))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(Smap.get(c)!=Tmap.get(c))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误"   >          <a href="#提交错误" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:输入”a” ,”ab” 输出true，预期输出false</p>        <h5 id="原因"   >          <a href="#原因" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因" class="headerlink" title="原因"></a>原因</h5>      <p>我只对s中的元素对t中的个数判断，实际上如果两个字符串长度都不同的话就不可能是有效的，所以我对两个map长度进行一个判断</p>        <h4 id="第二次代码"   >          <a href="#第二次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        HashMap&lt;Character,Integer&gt; Smap =<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        HashMap&lt;Character,Integer&gt; Tmap =<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s.toCharArray())&#123;</span><br><span class="line">            Smap.put(c,Smap.getOrDefault(c,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:t.toCharArray())&#123;</span><br><span class="line">            Tmap.put(c,Tmap.getOrDefault(c,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(Tmap.size()!=Smap.size())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(!Tmap.containsKey(c))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(Smap.get(c)!=Tmap.get(c))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-1"   >          <a href="#提交错误-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-1" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>case：最后一个测试用例不通过</p>        <h5 id="原因-1"   >          <a href="#原因-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-1" class="headerlink" title="原因"></a>原因</h5>      <p>我这个时候意识到了之前在数组篇的时候map.get()获取到的数据是Integer类型的，就如这个 if(Smap.get(c)!&#x3D;Tmap.get(c)) 如果数据超过127那么比较地址值之后就会返回false，所以我们这里要用eqauls()方法进行比较</p>        <h4 id="第三次代码"   >          <a href="#第三次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        HashMap&lt;Character,Integer&gt; Smap =<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        HashMap&lt;Character,Integer&gt; Tmap =<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s.toCharArray())&#123;</span><br><span class="line">            Smap.put(c,Smap.getOrDefault(c,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:t.toCharArray())&#123;</span><br><span class="line">            Tmap.put(c,Tmap.getOrDefault(c,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(Tmap.size()!=Smap.size())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(!Tmap.containsKey(c))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!Smap.get(c).equals(Tmap.get(c)))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功"   >          <a href="#提交成功" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解" class="headerlink" title="题解"></a>题解</h3>      <p>我第一次做的时候是利用暴力法将两个字符串出现次数统计 然后遍历做对比</p><p>我们可以用<strong>哈希法</strong>，利用一个数组来做这个题</p><p><strong>思路</strong></p><p>因为有效字母异位词说明这个字符串里面只能出现a-z，那么我们可以用26位的数组 hash来承接这个a-z，例如a对应下标为0，z对应下标为25</p><p>然后数组初始化为0，数组中的数据代表出现的次数</p><p><strong>第一次循环</strong>，我们统计s字符串出现过的字符次数</p><p><strong>第二次循环</strong>，我们遍历t字符串，将每一次出现的字符在hash中做减减操作</p><p><strong>第三次循环</strong>，我们遍历hash数组 判断这个数组中每个元素是否为0，如果都为0说明s字符串的字符都在t中出现过相同次数</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个hash数组，索引0-25代表a-z,数组中的数据代表这个字母出现的次数</span></span><br><span class="line">        <span class="type">int</span>[] hash=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一次循环，我们遍历字符串s</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:s.toCharArray())&#123;</span><br><span class="line">        <span class="comment">//将获取到的每一个字符-&#x27;a&#x27; 获取一个映射</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        如果c==&#x27;a&#x27;, 那么c-&#x27;a&#x27;==0 也即a映射到索引为0的位置</span></span><br><span class="line"><span class="comment">        如果c==&#x27;b&#x27;, c-&#x27;b&#x27;==1 也即b代表索引1的位置</span></span><br><span class="line"><span class="comment">        然后出现次数++，数组中的数据代表这个字母出现多少次</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">            hash[c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//第二次循环，我们遍历字符串t</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:t.toCharArray())&#123;</span><br><span class="line">        <span class="comment">//将对应出现的次数--</span></span><br><span class="line">            hash[c-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第三次遍历，我们遍历hash数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:hash)&#123;</span><br><span class="line">        <span class="comment">//如果数据不为0那么说明s中的这个字母在t中出现的次数不对</span></span><br><span class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//运行到这里说明hash数组中的数据都是0，那么也就是s是t的有效字母异位词</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="图解"   >          <a href="#图解" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解" class="headerlink" title="图解"></a>图解</h3>      <p><strong>哈希法(数组)</strong></p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com//image-20230813074212630.png"  alt="哈希数组(1)">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com//image-20230813074507361.png"  alt="哈希数组(2)">      </p><p>第三次遍历hash数组 </p><ul><li><p>如果有一个元素不为0那么说明s和t中出现次数不一样直接返回false </p></li><li><p>如果遍历结束那么就返回true，说明数组中的元素都是0</p></li></ul>        <h1 id="两个数组的交集"   >          <a href="#两个数组的交集" class="heading-link"><i class="fas fa-link"></i></a><a href="#两个数组的交集" class="headerlink" title="两个数组的交集"></a>两个数组的交集</h1>      <p>给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回 <em>它们的交集</em> 。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。</p>        <h2 id="349-两个数组的交集"   >          <a href="#349-两个数组的交集" class="heading-link"><i class="fas fa-link"></i></a><a href="#349-两个数组的交集" class="headerlink" title="349.两个数组的交集"></a>349.两个数组的交集</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/intersection-of-two-arrays/" >Leetcode.349题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-1"   >          <a href="#第一次做-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-1" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;14</p>        <h4 id="第一次代码-1"   >          <a href="#第一次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-1" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(nums1.length&lt;nums2.length)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:nums1)&#123;</span><br><span class="line">                map.put(i,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:nums2)&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(i))&#123;</span><br><span class="line">                    map.put(i,map.get(i)-<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:nums2)&#123;</span><br><span class="line">                map.put(i,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:nums1)&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(i))&#123;</span><br><span class="line">                    map.put(i,map.get(i)-<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">            ArrayList&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(Map.Entry&lt;Integer,Integer&gt; e:map.entrySet())&#123;</span><br><span class="line">                <span class="keyword">if</span>(e.getValue()&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    list.add(e.getKey());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span>[] result=<span class="keyword">new</span> <span class="title class_">int</span>[list.size()];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">                result[i]=list.get(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-1"   >          <a href="#提交成功-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-1" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="思路"   >          <a href="#思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#思路" class="headerlink" title="思路"></a>思路</h3>      <p>这道题可以利用set的去重原理，然后先获取到数组一个哈希表</p><p>然后遍历另一个数组判断是否出现过，出现过将它放到要返回的数组中</p>        <h3 id="题解-1"   >          <a href="#题解-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3>      <p><strong>哈希表是Set</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="comment">//获取一个set哈希表</span></span><br><span class="line">        HashSet&lt;Integer&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个reSet哈希表用于存放交集，这里需要去重</span></span><br><span class="line">        HashSet&lt;Integer&gt; reset =<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//如果nums1的数量更小，那么将小的数组做哈希表的数据</span></span><br><span class="line">        <span class="keyword">if</span>(nums1.length&lt;nums2.length)&#123;</span><br><span class="line">            <span class="comment">//遍历nums1,存到set中</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:nums1)&#123;</span><br><span class="line">                set.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历nums2，找到交集</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:nums2)&#123;</span><br><span class="line">                <span class="keyword">if</span>(set.contains(i))&#123;</span><br><span class="line">                    reset.add(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//遍历nums2,存到set中</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:nums2)&#123;</span><br><span class="line">                set.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历nums1，找到交集</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:nums1)&#123;</span><br><span class="line">                <span class="keyword">if</span>(set.contains(i))&#123;</span><br><span class="line">                    reset.add(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个数组用于返回交集</span></span><br><span class="line">        <span class="type">int</span>[] result=<span class="keyword">new</span> <span class="title class_">int</span>[reset.size()];</span><br><span class="line">    <span class="comment">//从索引为0开始存数据</span></span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//遍历交集set</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : reset)&#123;</span><br><span class="line">            result[i++]=num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回result</span></span><br><span class="line">        <span class="keyword">return</span> result;        </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></div></figure><p><strong>哈希表是数组</strong></p><p><del>因为这道题的背景中nums1和nums2的数据一定是1到1000之间，所以我们可以不考虑数据较大而不能确定数组大小的情况</del></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="comment">//定义一个数组用于做哈希表</span></span><br><span class="line">   <span class="type">int</span>[] hashTable=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个set 用于去重交集元素</span></span><br><span class="line">        HashSet&lt;Integer&gt; reset=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//遍历nums1 将nums1的元素都在哈希表置为1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i: nums1)&#123;</span><br><span class="line">             hashTable[i]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历nums2 判断nums2的元素是否在nums1中出现</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:nums2)&#123;</span><br><span class="line">            <span class="comment">//如果hashTable[i]==1 说明出现在nums1中</span></span><br><span class="line">            <span class="keyword">if</span>( hashTable[i]==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//添加到去重集合reset中</span></span><br><span class="line">                 reset.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个集合用于返回交集</span></span><br><span class="line">        <span class="type">int</span>[] result=<span class="keyword">new</span> <span class="title class_">int</span>[reset.size()];</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//遍历reset 将元素添加到交集数组中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:reset)&#123;</span><br><span class="line">            result[j++]=i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">      </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></div></figure><p><strong>哈希表是map</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">    <span class="comment">//定义一个map ，用于做哈希表</span></span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//如果nums1的个数比nums2小 说明交集大小最多为num1的大小</span></span><br><span class="line">        <span class="keyword">if</span>(nums1.length&lt;nums2.length)&#123;</span><br><span class="line">            <span class="comment">//遍历nums1 将其存入map中</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:nums1)&#123;</span><br><span class="line">                map.put(i,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历nums2 如果map中存在这个数 则将其自减</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:nums2)&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(i))&#123;</span><br><span class="line">                    map.put(i,map.get(i)-<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//遍历nums2 将其存入map中</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:nums2)&#123;</span><br><span class="line">                map.put(i,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历nums1 如果map中存在这个数 则将其自减</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:nums1)&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(i))&#123;</span><br><span class="line">                    map.put(i,map.get(i)-<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义一个list，用于存放去重之后的交集元素</span></span><br><span class="line">            ArrayList&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//遍历map</span></span><br><span class="line">            <span class="keyword">for</span>(Map.Entry&lt;Integer,Integer&gt; e:map.entrySet())&#123;</span><br><span class="line">                <span class="comment">//如果Entry的value不为1 那么则说明是交集元素</span></span><br><span class="line">                <span class="keyword">if</span>(e.getValue()&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//将key放入list中</span></span><br><span class="line">                    list.add(e.getKey());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="comment">//定义一个数组用于返回交集</span></span><br><span class="line">            <span class="type">int</span>[] result=<span class="keyword">new</span> <span class="title class_">int</span>[list.size()];</span><br><span class="line">    <span class="comment">//遍历list 将其数据放入result数组中</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">                result[i]=list.get(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="快乐数"   >          <a href="#快乐数" class="heading-link"><i class="fas fa-link"></i></a><a href="#快乐数" class="headerlink" title="快乐数"></a>快乐数</h1>      <p>编写一个算法来判断一个数 <code>n</code> 是不是快乐数。</p><p><strong>「快乐数」</strong> 定义为：</p><ul><li>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</li><li>然后重复这个过程直到这个数变为 1，也可能是 <strong>无限循环</strong> 但始终变不到 1。</li><li>如果这个过程 <strong>结果为</strong> 1，那么这个数就是快乐数。</li></ul><p>如果 <code>n</code> 是 <em>快乐数</em> 就返回 <code>true</code> ；不是，则返回 <code>false</code> 。</p><p> <strong>示例</strong></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 19</span><br><span class="line">输出：true</span><br><span class="line">解释：</span><br><span class="line">12 + 92 = 82</span><br><span class="line">82 + 22 = 68</span><br><span class="line">62 + 82 = 100</span><br><span class="line">12 + 02 + 02 = 1</span><br></pre></td></tr></table></div></figure>        <h2 id="202-快乐数"   >          <a href="#202-快乐数" class="heading-link"><i class="fas fa-link"></i></a><a href="#202-快乐数" class="headerlink" title="202.快乐数"></a>202.快乐数</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/happy-number/" >Leetcode.202题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-2"   >          <a href="#第一次做-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-2" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;14</p>        <h4 id="第一次代码-2"   >          <a href="#第一次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-2" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">while</span>(n%<span class="number">10</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">            arr[n%<span class="number">10</span>]++;</span><br><span class="line">            n/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                count+=arr[i]*i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count%<span class="number">5</span>==<span class="number">0</span>||count==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-2"   >          <a href="#提交错误-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-2" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:输入5 输出true 预期输出false</p>        <h5 id="原因-2"   >          <a href="#原因-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-2" class="headerlink" title="原因"></a>原因</h5>      <p>我错判认为5的倍数也能是快乐数，重新算了一下发现5也是不行的</p>        <h4 id="第二次代码-1"   >          <a href="#第二次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-1" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">while</span>(n%<span class="number">10</span>==<span class="number">0</span>&amp;&amp;n/<span class="number">10</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">            n/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(n%<span class="number">10</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">            arr[n%<span class="number">10</span>]++;</span><br><span class="line">            n/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">                count+=arr[i]*i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count%<span class="number">10</span>==<span class="number">0</span>||count==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-3"   >          <a href="#提交错误-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-3" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE：输入7 输出false 预期输出true</p>        <h5 id="原因-3"   >          <a href="#原因-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-3" class="headerlink" title="原因"></a>原因</h5>      <p>我对快乐数的判断出现了严重性错误</p><p>这个题没能第一次做出来</p>        <h3 id="题解-2"   >          <a href="#题解-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3>      <p><strong>分析</strong></p><p>因为n在2的32次方-1之间，假设有一个5位的数，那么它最大是99999，那么它变化的数是9²+9²+9²+9²+9²&#x3D;81*5&#x3D;405</p><p>也即99999这个数在替换成平方和的时候只能在[0,405]这个区间</p><p>如果这个数是一个快乐数那么会变换成1最后跳出循环</p><p>如果这个数不是一个快乐数那么会一直循环，也即产生了环</p><p>我们只要判断替换平方和这个数是否出现过，如果出现过说明陷入了循环中</p><p><strong>集合法</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">      <span class="comment">//定义一个set集合用来承接替换成平方和的数</span></span><br><span class="line">      HashSet&lt;Integer&gt; reset=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">while</span>(n!=<span class="number">1</span>)&#123;  </span><br><span class="line">           reset.add(n);        </span><br><span class="line">           n=getNumber(n);</span><br><span class="line"><span class="comment">//如果reset中包含n 说明进入了循环</span></span><br><span class="line">           <span class="keyword">if</span>(reset.contains(n))&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="comment">//当n==1的时候跳出循环 返回true是快乐数</span></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//定义一个方法来转换平方和</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumber</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">       <span class="comment">//定义res用来接收平方和</span></span><br><span class="line">       <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span>(n%<span class="number">10</span>!=<span class="number">0</span> || n/<span class="number">10</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="comment">//s为该位数</span></span><br><span class="line">           <span class="type">int</span> s=n%<span class="number">10</span>;</span><br><span class="line">           <span class="comment">//res=res+s²</span></span><br><span class="line">           res+=s*s;</span><br><span class="line">           n/=<span class="number">10</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 返回平方和</span></span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure><p><strong>快慢指针法</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">//定义慢指针和快指针 从n开始</span></span><br><span class="line">        <span class="type">int</span> slow=n;</span><br><span class="line">        <span class="type">int</span> fast=n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="comment">//slow每次变化一次，fast每次变化两次  </span></span><br><span class="line">            <span class="comment">//如果n==1的话第一次之后就会跳出循环，不等于1的话说明第一个结点不为1 开始找环</span></span><br><span class="line">            slow=getNumber(slow);</span><br><span class="line">            fast=getNumber(fast);</span><br><span class="line">            fast=getNumber(fast);</span><br><span class="line">        &#125;<span class="keyword">while</span>(fast!=slow);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断环的入口是否是1 </span></span><br><span class="line">        <span class="keyword">return</span> slow==<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumber</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="comment">//定义res用来返回变化后的平方和</span></span><br><span class="line">        <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> temp=n%<span class="number">10</span>;</span><br><span class="line">            res+=temp*temp;</span><br><span class="line">            n/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com//image-20230814111826990.png"  alt="快慢指针参考图(1)">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com//image-20230814112115719.png"  alt="双指针参考图(2)">      </p>        <h1 id="两数之和"   >          <a href="#两数之和" class="heading-link"><i class="fas fa-link"></i></a><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h1>      <p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p>        <h2 id="1-两数之和"   >          <a href="#1-两数之和" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/two-sum/" >Leecode.1(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-3"   >          <a href="#第一次做-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-3" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;15</p>        <h4 id="第一次代码-3"   >          <a href="#第一次代码-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-3" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span>[] result=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        HashSet&lt;Integer&gt; gap=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            result[<span class="number">0</span>]=i;</span><br><span class="line">            gap.add(target-nums[i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(gap.contains(nums[j]))&#123;</span><br><span class="line">                    result[<span class="number">1</span>]=j;</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-2"   >          <a href="#提交成功-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-2" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-3"   >          <a href="#题解-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3>      <p><strong>思路</strong></p><p>这道题可以用map来处理，因为我们要返回下标，所以我们的map可以key是值，value是索引</p><p>遍历数组，然后判断相加的值是否在map中出现过，如果出现过则返回这两个值的value 如果没有出现过就添加到map中</p><p><strong>map是用来存放已经遍历过的数据 key&#x3D;数值 value&#x3D;索引下标</strong></p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">    <span class="comment">//定义一个数组用于返回下标</span></span><br><span class="line">        <span class="type">int</span>[] result=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line"><span class="comment">//定义一个哈希map用于存放已经遍历过的元素</span></span><br><span class="line">        HashMap&lt;Integer,Integer&gt; map =<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="comment">//需要相加的数值</span></span><br><span class="line">            <span class="type">int</span> gap=target-nums[i];</span><br><span class="line">            <span class="comment">//如果map中存在这个数据</span></span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(gap))&#123;</span><br><span class="line">                <span class="comment">//将下标返回</span></span><br><span class="line">                result[<span class="number">0</span>]=i;</span><br><span class="line">                result[<span class="number">1</span>]=map.get(gap);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//map中不存在差值元素，将当前数据添加到map中</span></span><br><span class="line">            map.put(nums[i],i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="四数相加II"   >          <a href="#四数相加II" class="heading-link"><i class="fas fa-link"></i></a><a href="#四数相加II" class="headerlink" title="四数相加II"></a>四数相加II</h1>      <p>给你四个整数数组 <code>nums1</code>、<code>nums2</code>、<code>nums3</code> 和 <code>nums4</code> ，数组长度都是 <code>n</code> ，请你计算有多少个元组 <code>(i, j, k, l)</code> 能满足：</p><ul><li><code>0 &lt;= i, j, k, l &lt; n</code></li><li><code>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code></li></ul>        <h2 id="454-四数相加II"   >          <a href="#454-四数相加II" class="heading-link"><i class="fas fa-link"></i></a><a href="#454-四数相加II" class="headerlink" title="454.四数相加II"></a>454.四数相加II</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/4sum-ii/" >Leecode.454题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-4"   >          <a href="#第一次做-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-4" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;15</p>        <h4 id="第一次代码-4"   >          <a href="#第一次代码-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-4" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1.length==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> nums1[<span class="number">0</span>]+nums2[<span class="number">0</span>]+nums3[<span class="number">0</span>]+nums4[<span class="number">0</span>]==<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将四数相加变成两数相加</span></span><br><span class="line">            <span class="type">int</span> sum1[]=<span class="keyword">new</span> <span class="title class_">int</span>[nums1.length*<span class="number">2</span>];</span><br><span class="line">            <span class="type">int</span> sum2[]=<span class="keyword">new</span> <span class="title class_">int</span>[nums1.length*<span class="number">2</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums1.length;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nums1.length;j++)&#123;</span><br><span class="line">                    sum1[index]=nums1[i]+nums2[j];</span><br><span class="line">                    sum2[index]=nums3[i]+nums4[j];</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">            HashMap&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;sum1.length;i++)&#123;</span><br><span class="line">                map.put(sum1[i],i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;sum2.length;i++)&#123;</span><br><span class="line">                <span class="type">int</span> gap=<span class="number">0</span>-sum2[i];</span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(gap))&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-4"   >          <a href="#提交错误-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-4" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE: 输入[-1,1],[1,-1],[-1,1],[-1,-1] 输出3 预期输出6</p>        <h5 id="原因-4"   >          <a href="#原因-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-4" class="headerlink" title="原因"></a>原因</h5>      <p>当添加元素到map中的时候，如果出现相同的会覆盖，而后面判断有没有这个元素的时候就等于是少了前面几次的判断，所以我将map的含义做了改变，Key&#x3D;值，value&#x3D;出现的次数 ，然后count+&#x3D;value即可</p>        <h4 id="第二次代码-2"   >          <a href="#第二次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-2" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1.length==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> nums1[<span class="number">0</span>]+nums2[<span class="number">0</span>]+nums3[<span class="number">0</span>]+nums4[<span class="number">0</span>]==<span class="number">0</span>?<span class="number">1</span>:<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将四数相加变成两数相加</span></span><br><span class="line">            <span class="type">int</span> sum1[]=<span class="keyword">new</span> <span class="title class_">int</span>[nums1.length*<span class="number">2</span>];</span><br><span class="line">            <span class="type">int</span> sum2[]=<span class="keyword">new</span> <span class="title class_">int</span>[nums1.length*<span class="number">2</span>];</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums1.length;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nums1.length;j++)&#123;</span><br><span class="line">                    sum1[index]=nums1[i]+nums2[j];</span><br><span class="line">                    sum2[index]=nums3[i]+nums4[j];</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">            HashMap&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:sum1)&#123;</span><br><span class="line">                map.put(i,map.getOrDefault(i,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;sum2.length;i++)&#123;</span><br><span class="line">                <span class="type">int</span> gap=<span class="number">0</span>-sum2[i];</span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(gap))&#123;</span><br><span class="line">                    count+=map.get(gap);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-5"   >          <a href="#提交错误-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-5" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>索引越界异常   Index 6 out of bounds for length 6</p>        <h5 id="原因-5"   >          <a href="#原因-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-5" class="headerlink" title="原因"></a>原因</h5>      <p>我把两个数组之和的结果个数设置为原来数组的两倍，实际上笛卡尔积是乘积的关系，所以应该将新数组的长度设为原来的平方</p>        <h4 id="第三次代码-1"   >          <a href="#第三次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-1" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//将四数相加变成两数相加</span></span><br><span class="line">            <span class="type">int</span> sum1[]=<span class="keyword">new</span> <span class="title class_">int</span>[nums1.length*nums1.length];</span><br><span class="line">            <span class="type">int</span> sum2[]=<span class="keyword">new</span> <span class="title class_">int</span>[nums1.length*nums1.length];</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums1.length;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nums1.length;j++)&#123;</span><br><span class="line">                    sum1[index]=nums1[i]+nums2[j];</span><br><span class="line">                    sum2[index]=nums3[i]+nums4[j];</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">            HashMap&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:sum1)&#123;</span><br><span class="line">                map.put(i,map.getOrDefault(i,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;sum2.length;i++)&#123;</span><br><span class="line">                <span class="type">int</span> gap=<span class="number">0</span>-sum2[i];</span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(gap))&#123;</span><br><span class="line">                    count+=map.get(gap);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-3"   >          <a href="#提交成功-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-3" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-4"   >          <a href="#题解-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3>      <p>①先遍历a+b 得到a+b的所有组合 然后放到map中 </p><p>②map中的key代表的是a+b中的数  value代表是出现了多少次</p><p>③再遍历c+d，得到c+d的所有组合 然后求得target&#x3D;0-(c+d)</p><p>④判断target是否在map中出现，如果出现count+&#x3D;map.value(target)</p><p>⑤返回count</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//将四数相加变成两数相加</span></span><br><span class="line">    <span class="comment">//定义sum1用来存放a+b的所有组合 定义sum2用来存放c+d的所有组合</span></span><br><span class="line">            <span class="type">int</span> sum1[]=<span class="keyword">new</span> <span class="title class_">int</span>[nums1.length*nums1.length];</span><br><span class="line">            <span class="type">int</span> sum2[]=<span class="keyword">new</span> <span class="title class_">int</span>[nums1.length*nums1.length];</span><br><span class="line">            </span><br><span class="line">    <span class="comment">//从0开始添加到sum中</span></span><br><span class="line">            <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums1.length;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nums1.length;j++)&#123;</span><br><span class="line">                    <span class="comment">//sum1[index]=a[i]+b[j]</span></span><br><span class="line">                    <span class="comment">//sum2[index]=c[i]+d[j]</span></span><br><span class="line">                    sum1[index]=nums1[i]+nums2[j];</span><br><span class="line">                    sum2[index]=nums3[i]+nums4[j];</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//统计符合条件的四元组个数</span></span><br><span class="line">            <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//定义map用于存放a+b中的数据 value为出现的次数</span></span><br><span class="line">            HashMap&lt;Integer,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:sum1)&#123;</span><br><span class="line">                <span class="comment">//map添加数据</span></span><br><span class="line">                map.put(i,map.getOrDefault(i,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历c+d的数据</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;sum2.length;i++)&#123;</span><br><span class="line">                <span class="comment">//获取target</span></span><br><span class="line">                <span class="type">int</span> gap=<span class="number">0</span>-sum2[i];</span><br><span class="line">                <span class="comment">//如果map中出现了 那么count+=map.get(target)</span></span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(gap))&#123;</span><br><span class="line">                    count+=map.get(gap);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="comment">//返回count</span></span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>也即</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">            HashMap&lt;Integer,Integer&gt; map =<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//遍历a+b</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:nums1)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j:nums2)&#123;</span><br><span class="line">                    map.put(i+j,map.getOrDefault(i+j,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//遍历c+d</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i:nums3)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j:nums4)&#123;</span><br><span class="line">                    <span class="type">int</span> gap=<span class="number">0</span>-i-j;</span><br><span class="line">                    <span class="keyword">if</span>(map.containsKey(gap))&#123;</span><br><span class="line">                        count+=map.get(gap);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="赎金信"   >          <a href="#赎金信" class="heading-link"><i class="fas fa-link"></i></a><a href="#赎金信" class="headerlink" title="赎金信"></a>赎金信</h1>      <p>给你两个字符串：<code>ransomNote</code> 和 <code>magazine</code> ，判断 <code>ransomNote</code> 能不能由 <code>magazine</code> 里面的字符构成。</p><p>如果可以，返回 <code>true</code> ；否则返回 <code>false</code> 。</p><p><code>magazine</code> 中的每个字符只能在 <code>ransomNote</code> 中使用一次。</p>        <h2 id="383-赎金信"   >          <a href="#383-赎金信" class="heading-link"><i class="fas fa-link"></i></a><a href="#383-赎金信" class="headerlink" title="383.赎金信"></a>383.赎金信</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/ransom-note/" >Leetcode.383题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-5"   >          <a href="#第一次做-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-5" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;16</p>        <h4 id="第一次代码-5"   >          <a href="#第一次代码-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-5" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] hashTable=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:magazine.toCharArray())&#123;</span><br><span class="line">            hashTable[c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:ransomNote.toCharArray())&#123;</span><br><span class="line">            hashTable[c-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:hashTable)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-4"   >          <a href="#提交成功-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-4" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-5"   >          <a href="#题解-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3>      <p><strong>思路</strong></p><p>magazine和ransomNote的字符规定为小写字母，所以我们可以用一个hashTable做一个字母的映射</p><p>第一个循环 将magazize中的字符出现次数++</p><p>第二个循环将ransomNote中的字符在哈希表的出现次数–</p><p>第三个循环判断这个哈希表中是否有小于0的字符 如果有则说明这个字符在ransomNote中的个数比Magazine的个数多</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个hash表 0-a  1-b ... 25-z</span></span><br><span class="line">        <span class="type">int</span>[] hashTable=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="comment">//第一次遍历magazine 统计每个字符出现的次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:magazine.toCharArray())&#123;</span><br><span class="line">            hashTable[c-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//第二次遍历ransomNote 减去对应的字符出现次数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c:ransomNote.toCharArray())&#123;</span><br><span class="line">            hashTable[c-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//第三次遍历hash表，判断是否有小于0的元素，如果有则说明在ransomNote的个数比magazine的个数多</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i:hashTable)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//运行到这里说明hash表的每个元素都大于等于0  返回true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="三数之和"   >          <a href="#三数之和" class="heading-link"><i class="fas fa-link"></i></a><a href="#三数之和" class="headerlink" title="三数之和"></a>三数之和</h1>      <p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组 <code>[nums[i], nums[j], nums[k]]</code> 满足 <code>i != j</code>、<code>i != k</code> 且 <code>j != k</code> ，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p><p>你返回所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p>        <h2 id="15-三数之和"   >          <a href="#15-三数之和" class="heading-link"><i class="fas fa-link"></i></a><a href="#15-三数之和" class="headerlink" title="15.三数之和"></a>15.三数之和</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/3sum/" >Leetcode.15题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-6"   >          <a href="#第一次做-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-6" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;16 </p>        <h4 id="第一次代码-6"   >          <a href="#第一次代码-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-6" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length&lt;<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length-<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;nums.length-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="type">int</span> target=<span class="number">0</span>-nums[i]-nums[j];</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> z=j+<span class="number">1</span>;z&lt;nums.length;z++)</span><br><span class="line">                <span class="keyword">if</span>(nums[z]==target)&#123;</span><br><span class="line">                    List&lt;Integer&gt; hsset=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                    hsset.add(nums[i]);</span><br><span class="line">                    hsset.add(nums[j]);</span><br><span class="line">                    hsset.add(nums[z]);</span><br><span class="line"></span><br><span class="line">                    list.add(hsset);</span><br><span class="line">                    <span class="keyword">break</span>;   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-6"   >          <a href="#提交错误-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-6" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE：输入nums &#x3D;[-1,0,1,2,-1,-4] 输出 [[-1,0,1],[-1,2,-1],[0,1,-1]] 预期结果 [[-1,-1,2],[-1,0,1]]</p>        <h4 id="第二次代码-3"   >          <a href="#第二次代码-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-3" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span>(nums.length&lt;<span class="number">3</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       List&lt;List&lt;Integer&gt;&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       List&lt;Integer&gt; hsset=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length-<span class="number">2</span>;i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;nums.length-<span class="number">1</span>;j++)&#123;</span><br><span class="line">               <span class="type">int</span> target=<span class="number">0</span>-nums[i]-nums[j];</span><br><span class="line">               <span class="keyword">for</span>(<span class="type">int</span> z=j+<span class="number">1</span>;z&lt;nums.length;z++)</span><br><span class="line">               <span class="keyword">if</span>(nums[z]==target)&#123;</span><br><span class="line">                   hsset.add(nums[i]);</span><br><span class="line">                   hsset.add(nums[j]);</span><br><span class="line">                   hsset.add(nums[z]);</span><br><span class="line"></span><br><span class="line">                   <span class="keyword">break</span>;   </span><br><span class="line">           &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       HashSet&lt;Integer&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;hsset.size()-<span class="number">2</span>;)&#123;</span><br><span class="line">            </span><br><span class="line">           <span class="keyword">if</span>(set.contains(hsset.get(i))&amp;&amp; set.contains(hsset.get(i+<span class="number">1</span>))&amp;&amp; set.contains(hsset.get(i+<span class="number">2</span>)))&#123;</span><br><span class="line">               i+=<span class="number">3</span>;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           ArrayList&lt;Integer&gt; array=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">           set.add(hsset.get(i));</span><br><span class="line">           set.add(hsset.get(i+<span class="number">1</span>));</span><br><span class="line">           set.add(hsset.get(i+<span class="number">2</span>));</span><br><span class="line">           array.add(hsset.get(i));</span><br><span class="line">           array.add(hsset.get(i+<span class="number">1</span>));</span><br><span class="line">           array.add(hsset.get(i+<span class="number">2</span>));</span><br><span class="line">           list.add(array);</span><br><span class="line">           i+=<span class="number">3</span>;     </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> list;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-7"   >          <a href="#提交错误-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-7" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE: nums[-1,0,1,2,-1,-4,-2,-3,3,0,4] 输出[[-1,0,1],[-1,2,-1],[-1,-2,3],[-1,-3,4],[0,-4,4]] 预期输出[[-4,0,4],[-4,1,3],[-3,-1,4],[-3,0,3],[-3,1,2],[-2,-1,3],[-2,0,2],[-1,-1,2],[-1,0,1]]</p><p>我用hashset去重判断了，好像有点过头了</p><p>这道题没能做出来，主要是去重的逻辑不好考虑</p>        <h3 id="题解-6"   >          <a href="#题解-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3>      <p>这道题用<strong>双指针法</strong>，因为哈希法对去重的逻辑麻烦不好理解，而双指针比较下更易于做去重的操作</p><p><strong>思路</strong></p><p>a+b+c&#x3D;&#x3D;0</p><p><strong>首先，先对数组进行排序，这样能保证顺序是有序的方便做去重</strong></p><p>1.对数组排序</p><p>2.用一层for循环,i从0开始 来找到第一个元素nums[i] 如果nums[i]&gt;0 那么就可以return 因为a&gt;0 排序后就不会有a+b+c&#x3D;&#x3D;0</p><p>3.用left指针和right指针分别表示第二个元素和第三个元素，初始化left&#x3D;i+1,right&#x3D;nums.length-1;</p><p>4.考虑a元素去重，如果i&gt;0 &amp;&amp; nums[i]&#x3D;&#x3D;nums[i-1] 那么continue </p><p> <em>为什么不是nums[i]&#x3D;&#x3D;nums[i+1]</em></p><p><del>原因是这个nums[i]&#x3D;&#x3D;nums[i+1]判断的是结果集的不可重复，而元素如果为 -1 -1 2 第一个元素和第二个元素是可以相同的 相反，如果是判断和前一个元素相同因为b和c没变，a移动之后还是相同的元素，所以这个结果集不能算在内</del> </p><p>5.判断a+b+c?0   如果＞则移动right– 如果&lt;则移动left++如果为&#x3D; 则添加到result中</p><p>6.添加完之后移动指针，这里考虑b和c的去重 如果nums[left]&#x3D;&#x3D;nums[left+1] 持续left++ 如果nums[right]&#x3D;&#x3D;nums[right-1] 持续right–</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">//定义一个结果集 用于返回结果</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//对nums进行排序</span></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="comment">//如果a大于0 那么结束循环</span></span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果前一个元素和当前元素值相同那么这个结果集是相同的 continue</span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span> &amp;&amp; nums[i]==nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> left=i+<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//当左指针小于右指针的时候循环</span></span><br><span class="line">            <span class="comment">//left==right 也即b==c的时候是指向同一个元素 所以不能进入循环</span></span><br><span class="line">            <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                <span class="comment">//sum为a+b+c 的值</span></span><br><span class="line">                <span class="type">int</span> sum=nums[i]+nums[left]+nums[right];</span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果三数之和大于0说明大了 right需要减减 移动右指针</span></span><br><span class="line">                <span class="keyword">if</span>(sum&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//同理sum小了 移动左指针</span></span><br><span class="line">                    left++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// sum==0</span></span><br><span class="line">                    result.add(Arrays.asList(nums[i],nums[left],nums[right]));</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//对b和c去重 保证left&lt;right </span></span><br><span class="line">                    <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[left]==nums[left+<span class="number">1</span>]) left++;</span><br><span class="line">                    <span class="keyword">while</span>(left&lt;right&amp;&amp;nums[right]==nums[right-<span class="number">1</span>]) right--;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//移动left找下一个结果集</span></span><br><span class="line">                    left++;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p><strong>注意</strong></p><p>对b和c去重移动right和left指针的时候要对left&lt;right做判断 要持续让left&lt;right 如果不符合就要跳出循环</p>        <h1 id="四数之和"   >          <a href="#四数之和" class="heading-link"><i class="fas fa-link"></i></a><a href="#四数之和" class="headerlink" title="四数之和"></a>四数之和</h1>      <p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，和一个目标值 <code>target</code> 。请你找出并返回满足下述全部条件且<strong>不重复</strong>的四元组 <code>[nums[a], nums[b], nums[c], nums[d]]</code> （若两个四元组元素一一对应，则认为两个四元组重复）：</p><ul><li><code>0 &lt;= a, b, c, d &lt; n</code></li><li><code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> <strong>互不相同</strong></li><li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li></ul><p>你可以按 <strong>任意顺序</strong> 返回答案 。</p>        <h2 id="18-四数之和"   >          <a href="#18-四数之和" class="heading-link"><i class="fas fa-link"></i></a><a href="#18-四数之和" class="headerlink" title="18.四数之和"></a>18.四数之和</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/4sum/" >Leetcode.18题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-7"   >          <a href="#第一次做-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-7" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;16</p>        <h4 id="第一次代码-7"   >          <a href="#第一次代码-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-7" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;target) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j]&gt;target) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;<span class="number">1</span>&amp;&amp;nums[j]==nums[j-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> left=j+<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                    <span class="type">int</span> sum=target-nums[i]-nums[j]-nums[left]-nums[right];</span><br><span class="line">                    <span class="keyword">if</span>(sum&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        result.add(Arrays.asList(</span><br><span class="line">                            nums[i],</span><br><span class="line">                            nums[j],</span><br><span class="line">                            nums[left],</span><br><span class="line">                            nums[right]));</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right &amp;&amp; nums[left]==nums[left+<span class="number">1</span>]) left++;</span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right &amp;&amp; nums[right]==nums[right-<span class="number">1</span>]) right--;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败"   >          <a href="#提交失败" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:nums &#x3D;[-2,-1,-1,1,1,2,2] target&#x3D;0  输出[-2,-1,1,2] 预期输出[[-2,-1,1,2],[-1,-1,1,1]]</p>        <h4 id="第二次代码-4"   >          <a href="#第二次代码-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-4" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;target) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">             </span><br><span class="line">                <span class="keyword">if</span>(j&gt;i+<span class="number">1</span>&amp;&amp;nums[j]==nums[j-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> left=j+<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                    <span class="type">int</span> sum=target-nums[i]-nums[j]-nums[left]-nums[right];</span><br><span class="line">                    <span class="keyword">if</span>(sum&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        result.add(Arrays.asList(</span><br><span class="line">                            nums[i],</span><br><span class="line">                            nums[j],</span><br><span class="line">                            nums[left],</span><br><span class="line">                            nums[right]));</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right &amp;&amp; nums[left]==nums[left+<span class="number">1</span>]) left++;</span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right &amp;&amp; nums[right]==nums[right-<span class="number">1</span>]) right--;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-1"   >          <a href="#提交失败-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-1" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:[-1,-2,-5,-4,-3,3,3,5] target&#x3D;-11  输出[] 预期输出[[-5,-4,-3,1]]</p>        <h4 id="第三次代码-2"   >          <a href="#第三次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-2" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">             </span><br><span class="line">                <span class="keyword">if</span>(j&gt;i+<span class="number">1</span>&amp;&amp;nums[j]==nums[j-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> left=j+<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                    <span class="type">int</span> sum=target-nums[i]-nums[j]-nums[left]-nums[right];</span><br><span class="line">                    <span class="keyword">if</span>(sum&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        result.add(Arrays.asList(</span><br><span class="line">                            nums[i],</span><br><span class="line">                            nums[j],</span><br><span class="line">                            nums[left],</span><br><span class="line">                            nums[right]));</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right &amp;&amp; nums[left]==nums[left+<span class="number">1</span>]) left++;</span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right &amp;&amp; nums[right]==nums[right-<span class="number">1</span>]) right--;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-2"   >          <a href="#提交失败-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-2" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:输入nums &#x3D;[1000000000,1000000000,1000000000,1000000000] target &#x3D;-294967296 输出[[1000000000,1000000000,1000000000,1000000000]] 预期输出[]</p>        <h4 id="第四次代码"   >          <a href="#第四次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四次代码" class="headerlink" title="第四次代码"></a>第四次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(target&lt;<span class="number">0</span> &amp;&amp; nums[i]&gt;=<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">         </span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">             </span><br><span class="line">                <span class="keyword">if</span>(j&gt;i+<span class="number">1</span>&amp;&amp;nums[j]==nums[j-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> left=j+<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                    <span class="type">int</span> sum=nums[i]+nums[j]+nums[left]+nums[right]&gt;Integer.MAX_VALUE? Integer.MAX_VALUE : nums[i]+nums[j]+nums[left]+nums[right];</span><br><span class="line">                    <span class="keyword">if</span>(sum&lt;target)&#123;</span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;target)&#123;</span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        result.add(Arrays.asList(</span><br><span class="line">                            nums[i],</span><br><span class="line">                            nums[j],</span><br><span class="line">                            nums[left],</span><br><span class="line">                            nums[right]));</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right &amp;&amp; nums[left]==nums[left+<span class="number">1</span>]) left++;</span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right &amp;&amp; nums[right]==nums[right-<span class="number">1</span>]) right--;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-5"   >          <a href="#提交成功-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-5" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-7"   >          <a href="#题解-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-7" class="headerlink" title="题解"></a>题解</h3>      <p>这道题的逻辑和三数之和的逻辑是一样的，只不过三数之和的时候是确认一个下标i获得一个元素a</p><p>而这个是确认下标i和j确认两个元素a和b</p><p>然后去通过<strong>双指针</strong>获取c和d</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="comment">/*剪枝 </span></span><br><span class="line"><span class="comment">            当target&lt;nums[i] 并且nums[i] &gt;0 则不满足要求 </span></span><br><span class="line"><span class="comment">            如果target&lt;0 并且nums[i]&lt;0 则还有可能是满足的结果集 </span></span><br><span class="line"><span class="comment">            例如 target=-5  结果集 -4 -2 0 1 </span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">if</span>(target&lt;nums[i]&amp;&amp; nums[i]&gt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//去重a </span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">                <span class="comment">//二级减枝 原因上同</span></span><br><span class="line">                <span class="keyword">if</span>(target&lt;nums[i]+nums[j]&amp;&amp; nums[i]+nums[j]&gt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">//去重b</span></span><br><span class="line">                <span class="keyword">if</span>(j&gt;i+<span class="number">1</span>&amp;&amp;nums[j]==nums[j-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="type">int</span> left=j+<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line">                    <span class="comment">//获取四数之和 a+b+c+d</span></span><br><span class="line">                    <span class="type">int</span> sum=nums[i]+nums[j]+nums[left]+nums[right];</span><br><span class="line">                    <span class="keyword">if</span>(sum&lt;target)&#123;</span><br><span class="line">                        <span class="comment">//sum小了 所以左指针向右移</span></span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum&gt;target)&#123;</span><br><span class="line">                        <span class="comment">//sum大了 所以右指针向左移</span></span><br><span class="line">                        right--;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        result.add(Arrays.asList(</span><br><span class="line">                            nums[i],</span><br><span class="line">                            nums[j],</span><br><span class="line">                            nums[left],</span><br><span class="line">                            nums[right]));</span><br><span class="line"><span class="comment">//去重c和d</span></span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right &amp;&amp; nums[left]==nums[left+<span class="number">1</span>]) left++;</span><br><span class="line">                        <span class="keyword">while</span>(left&lt;right &amp;&amp; nums[right]==nums[right-<span class="number">1</span>]) right--;</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">//开始找下一个结果集</span></span><br><span class="line">                        left++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p><strong>踩坑点</strong></p><p>① 在剪枝的时候可能认为nums[i]&gt;targer就break 实际上负数相加可能会更小 比如a&#x3D;-4 b&#x3D;-2 c&#x3D;0 d&#x3D;-1 target&#x3D;-5 仍然是满足条件的结果集</p><p>②去重的时候 当前索引要和前一位比较，如果<strong>和后一位比较就是结果集内不能有相同元素</strong> </p>        <h1 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h1>      <p>哈希表一节也算是暂时告一段落，我们从哈希表这一章里面学到了 如果<strong>判断某个元素是否出现过可以用哈希表做映射</strong>，如果去重的操作不好执行可以用双指针来进行去重</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死之前要做完的算法手册-[2.链表篇]</title>
      <link href="/2023/08/09/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B2.%E9%93%BE%E8%A1%A8%E7%AF%87%5D/"/>
      <url>/2023/08/09/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B2.%E9%93%BE%E8%A1%A8%E7%AF%87%5D/</url>
      
        <content type="html"><![CDATA[<p><strong>链表基础</strong></p><p>1、单向链表</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230810162248140.png"  alt="单向链表模型">      </p><p>2.双向链表</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230813075644341.png"  alt="双向链表">      </p><p>3.环形链表</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230813075915350.png"  alt="环形链表">      </p>        <h1 id="移除链表元素"   >          <a href="#移除链表元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#移除链表元素" class="headerlink" title="移除链表元素"></a>移除链表元素</h1>      <p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p>        <h2 id="203-移除链表元素"   >          <a href="#203-移除链表元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#203-移除链表元素" class="headerlink" title="203.移除链表元素"></a>203.移除链表元素</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/remove-linked-list-elements/" >Leetcode.203题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做"   >          <a href="#第一次做" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;10</p>        <h4 id="第一次代码"   >          <a href="#第一次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">       ListNode tempNode=head;</span><br><span class="line">       <span class="keyword">while</span>(head!=<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(head.val==val)&#123;</span><br><span class="line">               <span class="keyword">if</span>(head.next!=<span class="literal">null</span>)</span><br><span class="line">               head.next=head.next.next;</span><br><span class="line">               head=head.next;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> head.next;</span><br><span class="line">           <span class="keyword">if</span>(node.val==val)&#123;</span><br><span class="line">               head.next=node.next;</span><br><span class="line">           &#125;</span><br><span class="line">           head=node;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> tempNode;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误"   >          <a href="#提交错误" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE: 输入[7,7,7,7] val&#x3D;7 返回[7,7] 预期返回[]</p>        <h4 id="第二次代码"   >          <a href="#第二次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    ListNode tempNode=head;</span><br><span class="line">    <span class="keyword">while</span>(head!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tempNode!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tempNode.val==val)&#123;</span><br><span class="line">                tempNode=tempNode.next;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">if</span>(node!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(node.val==val)&#123;</span><br><span class="line">            head.next=node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        head=node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tempNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-1"   >          <a href="#提交错误-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-1" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:输入[1,2,2,1] val&#x3D;2 返回[1,2,1] 预期返回[]</p>        <h5 id="原因"   >          <a href="#原因" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因" class="headerlink" title="原因"></a>原因</h5>      <p>我只判断了一次当头结点为val的时候将头部指针指向后面一个，但是后面移动的时候当连续得出现要删除的元素时候没办法处理了</p><p>也即我没判断当前结点为val的时候的删除元素操作</p>        <h3 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解" class="headerlink" title="题解"></a>题解</h3>      <p><strong>虚拟头结点法</strong></p><p>定义一个虚拟头结点 将原本的头结点插入到虚拟头结点之后 这样就不用判断是否为头结点元素的删除</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">//定义一个虚拟的头结点</span></span><br><span class="line">    ListNode VirHead=<span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">    <span class="comment">//将虚拟头指向原先头结点</span></span><br><span class="line">        VirHead.next=head;</span><br><span class="line">    <span class="comment">//获取一个当前结点指针 循环用当前指针操作</span></span><br><span class="line">        ListNode curNode=VirHead;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//循环条件是curNode.next!=null 意图是操作当前结点的下一个结点，而不是操作当前结点 因为删除和添加结点都需要前后结点</span></span><br><span class="line">        <span class="keyword">while</span>(curNode.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//如果下一个结点元素值为目标值</span></span><br><span class="line">            <span class="keyword">if</span>(curNode.next.val==val)&#123;</span><br><span class="line">                <span class="comment">//将当前结点指向下一个结点的下一个结点 然后再循环判断移动之后的下一个结点是不是要删除的结点</span></span><br><span class="line">                curNode.next=curNode.next.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//否则下一个结点不是要移除的元素，将当前结点移动到下一结点</span></span><br><span class="line">                curNode=curNode.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> VirHead.next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p><strong>当前头结点操作</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="comment">//判断头结点是不是要删除的元素   </span></span><br><span class="line">       <span class="keyword">while</span>(head!=<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(head.val==val)&#123;</span><br><span class="line">               <span class="comment">//是要删除的元素则将head往后移动一位</span></span><br><span class="line">               head=head.next;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="comment">//否则说明头结点不是要删除的结点 跳出循环</span></span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="comment">//获取一个node指针来指向头结点的位置  这个node是用来循环操作的</span></span><br><span class="line">       ListNode node=head;</span><br><span class="line">       <span class="comment">//运行到这里头结点已经不可能是目标值了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断当前位置不为空并且下一个结点不为空</span></span><br><span class="line">       <span class="keyword">while</span>(node!=<span class="literal">null</span>&amp;&amp;node.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(node.next.val==val)&#123;</span><br><span class="line">               node.next=node.next.next;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               node=node.next;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="comment">//返回头结点</span></span><br><span class="line">       <span class="keyword">return</span> head;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h3>      <p>通过代码随想录的视频学习了这道题的做法，我发现我自己在第一次做的时候无论是移动头结点的位置和非头结点的位置 我都是将当前结点指向要删除的元素的下一个结点 并且移动指针到下一个结点，而忽略了对连续元素的判断</p><p>我们移除结点需要注意的点：</p><p>① 我们要删除结点需要获取<strong>目标上一个节点、目标结点、下一个结点</strong>，如果目标是头结点则将头结点指向头结点下一个结点即可</p><p>②我们要删除非头结点，正因为删除结点需要获取目标上一个节点、目标结点下一个结点所以我们直接从<strong>当前结点</strong>来判断下一个结点是不是要删除的元素</p><p>②移动当前指针的条件：下一个结点不是要删除的元素，反之如果是则本次循环<strong>仅将当前结点指向目标结点的下一个结点，而不移动当前结点指针</strong></p><p>我推荐是用<strong>虚拟头结点</strong>来做这道题，这样我们就少了对是否头结点的判断，我们只要做好删除非头结点的逻辑处理，然后返回的结点为虚拟头结点的下一个结点即可</p>        <h3 id="图解"   >          <a href="#图解" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解" class="headerlink" title="图解"></a>图解</h3>      <p><strong>虚拟头结点</strong></p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230810160723221.png"  alt="虚拟头结点(1)">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230810161243007.png"  alt="虚拟头结点(2)">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230810161427054.png"  alt="虚拟头结点(3)">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230810161712465.png"  alt="虚拟头结点(4)">      </p>        <h1 id="设计链表"   >          <a href="#设计链表" class="heading-link"><i class="fas fa-link"></i></a><a href="#设计链表" class="headerlink" title="设计链表"></a>设计链表</h1>      <p>你可以选择使用单链表或者双链表，设计并实现自己的链表。</p><p>单链表中的节点应该具备两个属性：<code>val</code> 和 <code>next</code> 。<code>val</code> 是当前节点的值，<code>next</code> 是指向下一个节点的指针&#x2F;引用。</p><p>如果是双向链表，则还需要属性 <code>prev</code> 以指示链表中的上一个节点。假设链表中的所有节点下标从 <strong>0</strong> 开始。</p><p>实现 <code>MyLinkedList</code> 类：</p><ul><li><code>MyLinkedList()</code> 初始化 <code>MyLinkedList</code> 对象。</li><li><code>int get(int index)</code> 获取链表中下标为 <code>index</code> 的节点的值。如果下标无效，则返回 <code>-1</code> 。</li><li><code>void addAtHead(int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。</li><li><code>void addAtTail(int val)</code> 将一个值为 <code>val</code> 的节点追加到链表中作为链表的最后一个元素。</li><li><code>void addAtIndex(int index, int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中下标为 <code>index</code> 的节点之前。如果 <code>index</code> 等于链表的长度，那么该节点会被追加到链表的末尾。如果 <code>index</code> 比长度更大，该节点将 <strong>不会插入</strong> 到链表中。</li><li><code>void deleteAtIndex(int index)</code> 如果下标有效，则删除链表中下标为 <code>index</code> 的节点。</li></ul>        <h2 id="707-设计链表"   >          <a href="#707-设计链表" class="heading-link"><i class="fas fa-link"></i></a><a href="#707-设计链表" class="headerlink" title="707.设计链表"></a>707.设计链表</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/design-linked-list/" >Leetcode.707题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-1"   >          <a href="#第一次做-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-1" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;10</p>        <h4 id="第一次代码-1"   >          <a href="#第一次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-1" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用来记录链表索引下标</span></span><br><span class="line">    <span class="type">int</span> count=-<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    MyLinkedList next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//空参构造</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;count)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        MyLinkedList cur=<span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line">        cur=<span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i&lt;index)&#123;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加到链表头部</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        MyLinkedList node= <span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line">        node.val=val;</span><br><span class="line">        node.next=<span class="built_in">this</span>;</span><br><span class="line">        <span class="built_in">this</span>.next=node;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        MyLinkedList cur=<span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line">        cur=<span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        MyLinkedList node=<span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line">        node.val=val;</span><br><span class="line">        node.next=<span class="literal">null</span>;</span><br><span class="line">        cur.next=node;</span><br><span class="line">        count++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;count)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index==count+<span class="number">1</span>)&#123;</span><br><span class="line">            addAtTail(val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        MyLinkedList node=<span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line">        MyLinkedList cur=<span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line">        cur=<span class="built_in">this</span>;</span><br><span class="line">        node.val=val;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;index-<span class="number">1</span>)&#123;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到前一个元素</span></span><br><span class="line">        node.next=cur.next;</span><br><span class="line">        cur.next=node;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;count)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        MyLinkedList node=<span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line">        MyLinkedList cur=<span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line">        cur=<span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;index-<span class="number">1</span>)&#123;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到下标为index的前一个结点</span></span><br><span class="line">        <span class="keyword">if</span>(cur.next.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            cur.next=cur.next.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur.next=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-2"   >          <a href="#提交错误-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-2" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>​CASE： 超出时间限制</p>        <h5 id="原因-1"   >          <a href="#原因-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-1" class="headerlink" title="原因"></a>原因</h5>      <p>我添加头结点的时候将新结点指向this。this的next指向了新结点 这就造成了一个双向的指向效果达成死锁</p>        <h4 id="第二次代码-1"   >          <a href="#第二次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-1" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用来记录链表索引下标</span></span><br><span class="line">    <span class="type">int</span> count=-<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    MyLinkedList next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//空参构造</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;count)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        MyLinkedList cur=<span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line">        cur=<span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i&lt;index)&#123;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加到链表头部</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        MyLinkedList node= <span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line">        node.val=val;</span><br><span class="line">        node.next=<span class="built_in">this</span>;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        MyLinkedList cur=<span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line">        cur=<span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        MyLinkedList node=<span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line">        node.val=val;</span><br><span class="line">        node.next=<span class="literal">null</span>;</span><br><span class="line">        cur.next=node;</span><br><span class="line">        count++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;count)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index==count+<span class="number">1</span>)&#123;</span><br><span class="line">            addAtTail(val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        MyLinkedList node=<span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line">        MyLinkedList cur=<span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line">        cur=<span class="built_in">this</span>;</span><br><span class="line">        node.val=val;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;index-<span class="number">1</span>)&#123;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到前一个元素</span></span><br><span class="line">        node.next=cur.next;</span><br><span class="line">        cur.next=node;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;count)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        MyLinkedList node=<span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line">        MyLinkedList cur=<span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();</span><br><span class="line">        cur=<span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;index-<span class="number">1</span>)&#123;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到下标为index的前一个结点</span></span><br><span class="line">        <span class="keyword">if</span>(cur.next.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            cur.next=cur.next.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur.next=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-3"   >          <a href="#提交错误-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-3" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:Cannot read field “next” because “<local4>.next” is null  at line 82, MyLinkedList.deleteAtIndex</p><p>输入[“MyLinkedList”,”addAtHead”,”addAtHead”,”addAtHead”,”addAtIndex”,”deleteAtIndex”,”addAtHead”,”addAtTail”,”get”,”addAtHead”,”addAtIndex”,”addAtHead”]</p><p>[[],[7],[2],[1],[3,0],[2],[6],[4],[4],[4],[5,0],[6]]</p>        <h5 id="原因-2"   >          <a href="#原因-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-2" class="headerlink" title="原因"></a>原因</h5>      <p>添加和删除索引下标为index结点的时候遍历忘了加i++导致死循环最后挑不出来，而cur&#x3D;&#x3D;null就正好报错</p><p>这道题花了好久的时间才做出来</p>        <h4 id="第三次代码"   >          <a href="#第三次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkNode</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    LinkNode next;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.val=val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    LinkNode head=<span class="keyword">new</span> <span class="title class_">LinkNode</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">       size=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;size-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>  -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LinkNode cur=head;</span><br><span class="line">        <span class="keyword">while</span>(index&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line"></span><br><span class="line">        LinkNode node=<span class="keyword">new</span> <span class="title class_">LinkNode</span>(val);</span><br><span class="line">        </span><br><span class="line">        node.next=head.next;</span><br><span class="line">        head.next=node;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line"></span><br><span class="line">        LinkNode cur=<span class="keyword">new</span> <span class="title class_">LinkNode</span>();</span><br><span class="line">        LinkNode node=<span class="keyword">new</span> <span class="title class_">LinkNode</span>(val);</span><br><span class="line"></span><br><span class="line">        cur=head;</span><br><span class="line">        <span class="keyword">while</span>(cur.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到尾结点</span></span><br><span class="line">        cur.next=node;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            addAtHead(val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index==size)&#123;</span><br><span class="line">            addAtTail(val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;size)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LinkNode cur=<span class="keyword">new</span> <span class="title class_">LinkNode</span>();</span><br><span class="line">        LinkNode node=<span class="keyword">new</span> <span class="title class_">LinkNode</span>(val);</span><br><span class="line"></span><br><span class="line">        cur=head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(index&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            index--;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找到index前一个元素</span></span><br><span class="line">        node.next=cur.next;</span><br><span class="line">        cur.next=node;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;size-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LinkNode cur=<span class="keyword">new</span> <span class="title class_">LinkNode</span>();</span><br><span class="line"></span><br><span class="line">        cur=head;</span><br><span class="line">        <span class="keyword">if</span>(index==<span class="number">0</span>)&#123;</span><br><span class="line">            head=head.next;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(index&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next=cur.next.next;</span><br><span class="line">        </span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功"   >          <a href="#提交成功" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-1"   >          <a href="#题解-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkNode</span>&#123;</span><br><span class="line">    <span class="comment">//val用于存放数据</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="comment">//next指向下一个结点</span></span><br><span class="line">    LinkNode next;</span><br><span class="line">    <span class="comment">//空参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">(<span class="type">int</span> val)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.val=val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line">    <span class="comment">//用于表示链表长度</span></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="comment">//虚拟头结点head，不存放数据</span></span><br><span class="line">    LinkNode head=<span class="keyword">new</span> <span class="title class_">LinkNode</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//初始化长度为0</span></span><br><span class="line">       size=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">//检验index的合法性</span></span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;size-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>  -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//定义一个当前结点指针用于遍历</span></span><br><span class="line">        LinkNode cur=head;</span><br><span class="line">        <span class="comment">//遍历找到index前一个结点</span></span><br><span class="line">        <span class="keyword">while</span>(index&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回数据  cur现在指向index-1的位置</span></span><br><span class="line">        <span class="keyword">return</span> cur.next.val;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line"></span><br><span class="line">        LinkNode node=<span class="keyword">new</span> <span class="title class_">LinkNode</span>(val);</span><br><span class="line">        <span class="comment">//将虚拟头结点后的下一个结点给node</span></span><br><span class="line">        node.next=head.next;</span><br><span class="line">        <span class="comment">//将虚拟头结点指向node</span></span><br><span class="line">        head.next=node;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//cur用于遍历</span></span><br><span class="line">        LinkNode cur=head;</span><br><span class="line">        LinkNode node=<span class="keyword">new</span> <span class="title class_">LinkNode</span>(val);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当cur.next==null 也即cur是最后一个结点</span></span><br><span class="line">        <span class="keyword">while</span>(cur.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到尾结点</span></span><br><span class="line">        cur.next=node;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">//如果index&lt;=0 说明插入头结点</span></span><br><span class="line">        <span class="keyword">if</span>(index&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            addAtHead(val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果index==size说明插入尾结点</span></span><br><span class="line">        <span class="keyword">if</span>(index==size)&#123;</span><br><span class="line">            addAtTail(val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//index&gt;size不合法</span></span><br><span class="line">        <span class="keyword">if</span>(index&gt;size)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LinkNode cur=head;</span><br><span class="line">        LinkNode node=<span class="keyword">new</span> <span class="title class_">LinkNode</span>(val);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历链表，找到目标结点的前一个结点</span></span><br><span class="line">        <span class="keyword">while</span>(index&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            index--;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找到index前一个元素</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将当前结点的下一个结点给node  当前结点指向node</span></span><br><span class="line">        node.next=cur.next;</span><br><span class="line">        cur.next=node;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;size-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LinkNode cur=head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找到要删除的结点的前一个结点</span></span><br><span class="line">        <span class="keyword">while</span>(index&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将目标结点的下一个结点由cur.next保存</span></span><br><span class="line">        cur.next=cur.next.next;</span><br><span class="line">        </span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="总结-1"   >          <a href="#总结-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3>      <p>这道题做了我很久，一来是我通过看视频然后知道用虚拟头结点的做法，我第一开始做的时候不知道哪里是当前位置，哪里是头结点</p><p>二来是一个问题卡了我很久，就是一直有一个val&#x3D;0的数据存在，后面我才知道我把head当成一个结点存放进链表中了，而这个<strong>head应该就是虚拟头结点</strong></p><p>三是小问题的卡，有的地方size++没写有的地方size–没写导致一直编译报错</p>        <h3 id="踩坑点"   >          <a href="#踩坑点" class="heading-link"><i class="fas fa-link"></i></a><a href="#踩坑点" class="headerlink" title="踩坑点"></a>踩坑点</h3>      <p>这里定义的head就是虚拟头结点，不用自己在创建一个虚拟头结点指向head</p>        <h1 id="反转链表"   >          <a href="#反转链表" class="heading-link"><i class="fas fa-link"></i></a><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1>      <p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p>        <h2 id="26-反转链表"   >          <a href="#26-反转链表" class="heading-link"><i class="fas fa-link"></i></a><a href="#26-反转链表" class="headerlink" title="26.反转链表"></a>26.反转链表</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/reverse-linked-list/" >LeetCode.26题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-2"   >          <a href="#第一次做-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-2" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;11</p>        <h4 id="第一次代码-2"   >          <a href="#第一次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-2" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">//虚拟头结点</span></span><br><span class="line">        ListNode dumpHead=<span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        dumpHead.next=head;</span><br><span class="line"></span><br><span class="line">        ListNode cur=dumpHead;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用来记录有多少个结点</span></span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(cur.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            list.add(cur.val);</span><br><span class="line">            cur=cur.next;</span><br><span class="line">            count++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将cur重置到头结点的位置</span></span><br><span class="line">        cur=dumpHead.next;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</span><br><span class="line">            cur.val=list.get(i);</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dumpHead.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-4"   >          <a href="#提交错误-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-4" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:输入[1,2,3,4,5] 输出[0,1,2,3,4] 预期输出[5,4,3,2,1]</p>        <h5 id="原因-3"   >          <a href="#原因-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-3" class="headerlink" title="原因"></a>原因</h5>      <p>注意到这里输出了一个0 然后顺序是正的 接着我就知道我哪里出现了问题</p><p>1.我这个cur起始位置是虚拟头结点的位置，放入list中数据应该是从虚拟头结点之后的头结点开始</p><p>2.第二次反转数据的时候遍历应该是倒着遍历的，我正着遍历就没有意义了，我目的是将结点的数据调换而不是整个结点的指向反转</p>        <h4 id="第二次代码-2"   >          <a href="#第二次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-2" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">//虚拟头结点</span></span><br><span class="line">        ListNode dumpHead=<span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        dumpHead.next=head;</span><br><span class="line"></span><br><span class="line">        ListNode cur=dumpHead;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用来记录有多少个结点</span></span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(cur.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            list.add(cur.next.val);</span><br><span class="line">            cur=cur.next;</span><br><span class="line">            count++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将cur重置到头结点的位置</span></span><br><span class="line">        cur=dumpHead.next;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=list.size()-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            cur.val=list.get(i);</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dumpHead.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-1"   >          <a href="#提交成功-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-1" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-2"   >          <a href="#题解-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3>      <p><strong>双指针法</strong></p><p>定义一个指针pre用来代表cur的前一个结点,一个指针cur表示当前操作的结点，当前结点的指向应该指向前一个结点(cur.next&#x3D;pre)</p><p>然后循环直到cur&#x3D;&#x3D;null 也即pre是最后一个结点，此时将pre当成新的头结点返回</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义一个指针操作当前结点</span></span><br><span class="line">        ListNode cur=head;</span><br><span class="line">        <span class="comment">//定义一个指针指向cur前一个   定义为NULL是因为头结点反转后变成尾结点所以指向null</span></span><br><span class="line">        ListNode pre=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环条件结束 cur==null 也即pre指向原来尾结点</span></span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//定义一个指针用于记录当前结点的下一个结点，为了防止丢失结点</span></span><br><span class="line">            ListNode temp=cur.next;</span><br><span class="line">            <span class="comment">//将当前结点指向前一个结点</span></span><br><span class="line">            cur.next=pre;</span><br><span class="line">            <span class="comment">//前一个结点向后移动</span></span><br><span class="line">            pre=cur;</span><br><span class="line">            <span class="comment">//当前结点向后移动</span></span><br><span class="line">            cur=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回pre也即尾结点作为新的头结点</span></span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p><strong>指向关系</strong></p><p>未反转前</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230811205325163.png"  alt="未反转前">      </p><p>反转过程</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230811205522760.png"  alt="反转过程">      </p><p>反转之后</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230811205801449.png"  alt="反转之后">      </p><p><strong>递归法</strong></p><p>我们用双指针的思路改造递归就行</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//传入参数 将cur初始化为head pre初始化为null</span></span><br><span class="line">        <span class="keyword">return</span> reverse(head,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode cur,ListNode pre)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//递归结束条件 如果cur==null说明pre为尾结点</span></span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="literal">null</span>) </span><br><span class="line">            <span class="comment">//返回pre 作为新的头结点</span></span><br><span class="line">            <span class="keyword">return</span> pre;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取cur的下一个结点，防止丢失结点</span></span><br><span class="line">        ListNode temp=cur.next;</span><br><span class="line">        <span class="comment">//将cur的next指向前一个结点</span></span><br><span class="line">        cur.next=pre;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将递归，将下一个temp结点作为cur，将当前cur作为pre，当递归结束返回一个pre也即新的头结点</span></span><br><span class="line">        ListNode newHead=reverse(temp,cur);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回新的头结点</span></span><br><span class="line">        <span class="keyword">return</span> newHead; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="两两交换链表中的节点"   >          <a href="#两两交换链表中的节点" class="heading-link"><i class="fas fa-link"></i></a><a href="#两两交换链表中的节点" class="headerlink" title="两两交换链表中的节点"></a>两两交换链表中的节点</h1>      <p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p><p>实例 :</p><p>1-&gt;2-&gt;3&gt;4</p><p>交换后</p><p>2-&gt;1&gt;4&gt;3    </p><p>必须是交换结点，而不能仅仅交换数据</p>        <h2 id="24-两两交换链表中的节点"   >          <a href="#24-两两交换链表中的节点" class="heading-link"><i class="fas fa-link"></i></a><a href="#24-两两交换链表中的节点" class="headerlink" title="24.两两交换链表中的节点"></a>24.两两交换链表中的节点</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/swap-nodes-in-pairs/" >Leecode.24题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-3"   >          <a href="#第一次做-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-3" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;11</p>        <h4 id="第一次代码-3"   >          <a href="#第一次代码-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-3" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line"></span><br><span class="line">        ListNode pre=<span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        ListNode cur=head;</span><br><span class="line">        pre.next=cur;</span><br><span class="line"></span><br><span class="line">        ListNode next=<span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            next=cur.next;        </span><br><span class="line">            <span class="keyword">if</span>(next!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//存在下一个结点</span></span><br><span class="line">                <span class="comment">//存放下下结点</span></span><br><span class="line">                ListNode temp=next.next;  </span><br><span class="line">                next.next=cur;</span><br><span class="line">                cur.next=temp;</span><br><span class="line">                pre.next=next;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(cur==head)&#123;</span><br><span class="line">                 head=next;   </span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                pre=cur;</span><br><span class="line">                cur=temp;</span><br><span class="line">             </span><br><span class="line">                <span class="keyword">continue</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(next==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//cur为尾结点</span></span><br><span class="line">                <span class="comment">//不做处理</span></span><br><span class="line">                cur=cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-2"   >          <a href="#提交成功-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-2" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>直接一次性提交成功了，虽然提交测试代码的时候有一点点犯错，一是忘记移动头结点的指针，然后我对cur&#x3D;&#x3D;head判断了，如果cur是头结点那么头结点应该指向下一个结点，然后第二个是指针移动的时候 目标是cur&#x3D;cur.next.next;  pre&#x3D;cur.next; 然后我先写移动cur指针后移动pre指针造成了一个循环的错误</p>        <h3 id="题解-3"   >          <a href="#题解-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3>      <p><strong>直接操控原链表</strong></p><p>我这里保留了我第一次做的方法 利用了三个指针 pre,cur,next 分别指向结点的前一位，当前结点，下一个结点</p><p>①将cur指向当前头结点，pre.next&#x3D;cur，将pre操作到cur前一个结点，next&#x3D;null</p><p>②当cur不为空的时候进入循环判断，获取next&#x3D;cur.next，如果next为空则说明当前结点是尾结点，不为空则说明后面有结点</p><p>③cur.next有结点那么就应该和当前结点做一个交换 ，获取temp指向next.next</p><p>④将next.next&#x3D;cur,cur.next&#x3D;temp,pre.next&#x3D;next; 移动引用前一个结点指向后一个结点，后一个结点指向当前结点，当前结点指向后面第二个结点</p><p>⑤对cur此时的结点位置做一个判断，如果此时是一个头结点，那么将头结点head指向交换之后的next结点</p><p>⑥将pre移动到cur即反转之后的位置，将cur移动到temp 即后面第二个结点</p><p>⑦返回head头结点</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义前一个结点指针</span></span><br><span class="line">        ListNode pre=<span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">    <span class="comment">//定义当前结点指针</span></span><br><span class="line">        ListNode cur=head;</span><br><span class="line">    <span class="comment">//将前一个结点指向当前结点</span></span><br><span class="line">        pre.next=cur;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义后一个结点指针</span></span><br><span class="line">        ListNode next=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果当前结点不为空则进入循环</span></span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//获取下一个结点</span></span><br><span class="line">            next=cur.next;</span><br><span class="line">           </span><br><span class="line">            <span class="comment">//如果下一个结点不为空</span></span><br><span class="line">            <span class="keyword">if</span>(next!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//存在下一个结点</span></span><br><span class="line">                <span class="comment">//存放下下结点 temp</span></span><br><span class="line">                ListNode temp=next.next;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//将next指向cur ,cur指向temp , pre指向next</span></span><br><span class="line">                next.next=cur;</span><br><span class="line">                cur.next=temp;</span><br><span class="line">                pre.next=next;</span><br><span class="line">                <span class="comment">//如果cur是头结点 那么将头结点指向next结点</span></span><br><span class="line">                <span class="keyword">if</span>(cur==head)&#123;</span><br><span class="line">                 head=next;   </span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反转完成移动指针 将pre指向cur当前位置，cur指向temp位置</span></span><br><span class="line">                pre=cur;</span><br><span class="line">                cur=temp;</span><br><span class="line">    </span><br><span class="line">                <span class="keyword">continue</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(next==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//cur为尾结点</span></span><br><span class="line">                <span class="comment">//不做处理</span></span><br><span class="line">                cur=cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p><strong>虚拟头结点法</strong></p><p>虚拟头结点法主要是cur来对后面两个结点进行一个判断，他是交换后两个结点，如果后面结点个数小于两个就不进行交换，返回只需要返回虚拟头结点的下一个结点</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="comment">//虚拟头结点    </span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dumpHead</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        dumpHead.next=head;</span><br><span class="line">    <span class="comment">//当前指针</span></span><br><span class="line">        ListNode cur=dumpHead;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    我们假设虚拟头结点是0  原链表是1 2 3 4</span></span><br><span class="line"><span class="comment">    那么 可以看成是cur和dumphead指向0  cur.next指向1 ，即下面这种关系</span></span><br><span class="line"><span class="comment">    dumphead</span></span><br><span class="line"><span class="comment">    01234</span></span><br><span class="line"><span class="comment">    curhead</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">//当下一个结点和下第二个结点不为空的时候进行交换 即后两个结点不为空交换后两个结点</span></span><br><span class="line">        <span class="keyword">while</span>(cur.next!=<span class="literal">null</span>&amp;&amp; cur.next.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//记录后面两个结点指针</span></span><br><span class="line">            ListNode node=cur.next;</span><br><span class="line">            ListNode nodeNext=cur.next.next;</span><br><span class="line">            <span class="comment">//记录第三个结点指针</span></span><br><span class="line">            ListNode third=cur.next.next.next;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//交换过程</span></span><br><span class="line">            cur.next=cur.next.next;</span><br><span class="line">            nodeNext.next=node;</span><br><span class="line">            node.next=third;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            这个交换过程可以看成是 </span></span><br><span class="line"><span class="comment">            （1）将0指向2</span></span><br><span class="line"><span class="comment">            （2）将2指向1</span></span><br><span class="line"><span class="comment">            （3）将1指向3</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="comment">//移动指针 </span></span><br><span class="line">            cur=cur.next.next;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            例如</span></span><br><span class="line"><span class="comment">            交换1和2的时候 cur是在0的位置，那么要对3,4判断的时候cur应该在2的位置</span></span><br><span class="line"><span class="comment">            无论交换之后的变化是怎么样只要cur往后移动两格就行</span></span><br><span class="line"><span class="comment">            ..</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//返回虚拟头结点的下一个结点</span></span><br><span class="line">        <span class="keyword">return</span> dumpHead.next;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="删除链表的倒数第N个节点"   >          <a href="#删除链表的倒数第N个节点" class="heading-link"><i class="fas fa-link"></i></a><a href="#删除链表的倒数第N个节点" class="headerlink" title="删除链表的倒数第N个节点"></a>删除链表的倒数第N个节点</h1>      <p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p><p>进阶：你能尝试使用一趟扫描实现吗？</p>        <h2 id="19-删除链表的倒数第N个结点"   >          <a href="#19-删除链表的倒数第N个结点" class="heading-link"><i class="fas fa-link"></i></a><a href="#19-删除链表的倒数第N个结点" class="headerlink" title="19.删除链表的倒数第N个结点"></a>19.删除链表的倒数第N个结点</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/" >LeetCode.19题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-4"   >          <a href="#第一次做-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-4" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;12</p>        <h4 id="第一次代码-4"   >          <a href="#第一次代码-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-4" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">//虚拟头结点</span></span><br><span class="line">        ListNode dumpHead=<span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        dumpHead.next=head;</span><br><span class="line">    <span class="comment">//当前结点指针</span></span><br><span class="line">        ListNode cur=dumpHead;</span><br><span class="line">        <span class="comment">//用于统计链表长度</span></span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//当cur不是尾结点 count++ 统计链表长度</span></span><br><span class="line">        <span class="keyword">while</span>(cur.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            count++;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取下标</span></span><br><span class="line">        <span class="type">int</span> index=count-n;</span><br><span class="line">    <span class="comment">//将cur指向虚拟头结点</span></span><br><span class="line">        cur=dumpHead;</span><br><span class="line">        <span class="keyword">while</span>(index&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            index--;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到要删除的目标元素的前一个元素</span></span><br><span class="line">        cur.next=cur.next.next;</span><br><span class="line">        <span class="keyword">return</span> dumpHead.next;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-3"   >          <a href="#提交成功-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-3" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>我这里是用了两层循环 第一层来获取整个链表长度 然后来判断要删除的元素的索引值，找到目标结点前一个结点，将前一个结点指向目标结点的下一个结点</p>        <h3 id="题解-4"   >          <a href="#题解-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3>      <p><strong>双指针+虚拟头结点</strong></p><p>这道题的关键在于怎么找到倒数第n个结点</p><p>我们可以先将快指针走n个位置 然后再一起移动快慢指针，那么快慢指针之间差距就为n，当快指针指向null的时候 那么慢指针就是指向倒数第n个结点</p><p>又因为 删除第n个结点需要知道倒数第n+1个结点，所以快指针要走n+1步</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">//快指针、虚拟头结点、慢指针</span></span><br><span class="line">        ListNode dumpHead=<span class="keyword">new</span> <span class="title class_">ListNode</span>();</span><br><span class="line">        dumpHead.next=head;</span><br><span class="line">        ListNode fast=dumpHead;</span><br><span class="line">        ListNode slow=dumpHead;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何找到第倒数n个结点呢?</span></span><br><span class="line">        <span class="comment">//先将fast移动n步 之后再一起移动fast和slow指针 </span></span><br><span class="line">        <span class="comment">//那么当fast==null的时候 slow就是倒数第n个结点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//又因为要移除第n个结点，所以我们要将slow停留在倒数第n个结点前一个 也即倒数n+1个</span></span><br><span class="line">        <span class="comment">//那么fast就应该先移动n+1步</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//先++一次 让快指针移动n+1步 因为怕移动n次之后fast==null再fast=fast.next造成空指针异常</span></span><br><span class="line">        n++;</span><br><span class="line">        <span class="keyword">while</span>(n--&gt;<span class="number">0</span>&amp;&amp;fast!=<span class="literal">null</span>)&#123;</span><br><span class="line">            fast=fast.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(fast!=<span class="literal">null</span>)&#123;</span><br><span class="line">            fast=fast.next;</span><br><span class="line">            slow=slow.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//找到倒数第n+1个结点 删除倒数第n个结点</span></span><br><span class="line">        slow.next=slow.next.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dumpHead.next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="链表相交"   >          <a href="#链表相交" class="heading-link"><i class="fas fa-link"></i></a><a href="#链表相交" class="headerlink" title="链表相交"></a>链表相交</h1>      <p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。</p><p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p>        <h2 id="面试题-02-07-链表相交"   >          <a href="#面试题-02-07-链表相交" class="heading-link"><i class="fas fa-link"></i></a><a href="#面试题-02-07-链表相交" class="headerlink" title="面试题 02.07.链表相交"></a>面试题 02.07.链表相交</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/" >LeetCode.面试题02.07题目(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span> 也同样是第160题.相交链表  <span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/intersection-of-two-linked-lists/" >LeetCode.160题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>  </p>        <h3 id="第一次做-5"   >          <a href="#第一次做-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-5" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;12</p>        <h4 id="第一次代码-5"   >          <a href="#第一次代码-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-5" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">        <span class="comment">//最老套的一个结点一个结点判断</span></span><br><span class="line">        ListNode curA=headA;</span><br><span class="line">        ListNode curB=headB;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(curA!=<span class="literal">null</span>)&#123;</span><br><span class="line">            curB=headB;</span><br><span class="line">            <span class="keyword">while</span>(curB!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(curA==curB)&#123;</span><br><span class="line">                    <span class="keyword">return</span> curB;</span><br><span class="line">                &#125;</span><br><span class="line">                curB=curB.next;</span><br><span class="line">            &#125;</span><br><span class="line">            curA=curA.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-4"   >          <a href="#提交成功-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-4" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>双循环的代码可以说是获取所有结点的笛卡尔积，一个一个结点进行判断，如果相同则返回，双循环结束说明没有交点返回null</p><p>双循环太糙了，看看能不能自己改进改进</p>        <h4 id="改进之后代码"   >          <a href="#改进之后代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#改进之后代码" class="headerlink" title="改进之后代码"></a>改进之后代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">    <span class="comment">//定义curA用于遍历A链表 curB用于遍历B链表</span></span><br><span class="line">        ListNode curA=headA;</span><br><span class="line">        ListNode curB=headB;</span><br><span class="line">    <span class="comment">//countA记录A链表个数 countB记录链表B个数</span></span><br><span class="line">        <span class="type">int</span> countA=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> countB=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//遍历A链表 统计个数</span></span><br><span class="line">        <span class="keyword">while</span>(curA!=<span class="literal">null</span>)&#123;</span><br><span class="line">            curA=curA.next;</span><br><span class="line">            countA++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//遍历完将指针指回头结点</span></span><br><span class="line">        curA=headA;</span><br><span class="line">    <span class="comment">//遍历B链表 统计个数</span></span><br><span class="line">        <span class="keyword">while</span>(curB!=<span class="literal">null</span>)&#123;</span><br><span class="line">            curB=curB.next;</span><br><span class="line">            countB++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//遍历完将指针指回头结点</span></span><br><span class="line">        curB=headB;</span><br><span class="line">    <span class="comment">//获取A链表和B链表的长度差距   </span></span><br><span class="line">        <span class="type">int</span> n=countA-countB;</span><br><span class="line">    <span class="comment">//如果n&gt;0 说明A链表更长</span></span><br><span class="line">        <span class="keyword">if</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//将curA移动n步</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                curA=curA.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//b链表更长 将curB移动n步</span></span><br><span class="line">            n=-<span class="number">1</span>*n;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                curB=curB.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//遍历从curA和curB开始的链表</span></span><br><span class="line">        <span class="keyword">while</span>(curA!=<span class="literal">null</span>&amp;&amp;curB!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//如果A结点等于B结点说明找到第一个交点 返回即可</span></span><br><span class="line">            <span class="keyword">if</span>(curA==curB)&#123;</span><br><span class="line">                <span class="keyword">return</span> curA;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//A和B往后移动</span></span><br><span class="line">            curA=curA.next;</span><br><span class="line">            curB=curB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-5"   >          <a href="#提交成功-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-5" class="headerlink" title="提交成功"></a>提交成功</h5>      <p><strong>思路</strong></p><p>链表A和链表B如果有相交的部分的话，那么相交之后的结点应该都是相同的</p><p>那么我先获取两个链表的长度，如果极限状态就是一个链表都是另外一个链表的部分，那么相交的第一个结点就是子链表的第一个头结点</p><p>如果长度不相同，那么更长链表超出的部分一定不是相交的部分，于是移动n步使得链表A和链表B要遍历的长度相同</p>        <h3 id="题解-5"   >          <a href="#题解-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3>      <p><strong>思路</strong></p><p>链表A和链表B如果有相交的部分的话，那么相交之后的结点应该都是相同的</p><p>那么我先获取两个链表的长度，如果极限状态就是一个链表都是另外一个链表的部分，那么相交的第一个结点就是子链表的第一个头结点。</p><p>如果长度不相同，那么更长链表超出的部分一定不是相交的部分，于是移动n步使得<strong>链表A和链表B要遍历用于判断的长度相同</strong>，将其<strong>首末对其</strong></p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">    <span class="comment">//定义curA用于遍历A链表 curB用于遍历B链表</span></span><br><span class="line">        ListNode curA=headA;</span><br><span class="line">        ListNode curB=headB;</span><br><span class="line">    <span class="comment">//countA记录A链表个数 countB记录链表B个数</span></span><br><span class="line">        <span class="type">int</span> countA=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> countB=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//遍历A链表 统计个数</span></span><br><span class="line">        <span class="keyword">while</span>(curA!=<span class="literal">null</span>)&#123;</span><br><span class="line">            curA=curA.next;</span><br><span class="line">            countA++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//遍历完将指针指回头结点</span></span><br><span class="line">        curA=headA;</span><br><span class="line">    <span class="comment">//遍历B链表 统计个数</span></span><br><span class="line">        <span class="keyword">while</span>(curB!=<span class="literal">null</span>)&#123;</span><br><span class="line">            curB=curB.next;</span><br><span class="line">            countB++;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//遍历完将指针指回头结点</span></span><br><span class="line">        curB=headB;</span><br><span class="line">    <span class="comment">//获取A链表和B链表的长度差距   </span></span><br><span class="line">        <span class="type">int</span> n=countA-countB;</span><br><span class="line">    <span class="comment">//如果n&gt;0 说明A链表更长</span></span><br><span class="line">        <span class="keyword">if</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//将curA移动n步</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                curA=curA.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//b链表更长 将curB移动n步</span></span><br><span class="line">            n=-<span class="number">1</span>*n;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                curB=curB.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//遍历从curA和curB开始的链表</span></span><br><span class="line">        <span class="keyword">while</span>(curA!=<span class="literal">null</span>&amp;&amp;curB!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//如果A结点等于B结点说明找到第一个交点 返回即可</span></span><br><span class="line">            <span class="keyword">if</span>(curA==curB)&#123;</span><br><span class="line">                <span class="keyword">return</span> curA;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//A和B往后移动</span></span><br><span class="line">            curA=curA.next;</span><br><span class="line">            curB=curB.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="环形链表II"   >          <a href="#环形链表II" class="heading-link"><i class="fas fa-link"></i></a><a href="#环形链表II" class="headerlink" title="环形链表II"></a>环形链表II</h1>      <p>题意： 给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。</p><p>为了表示给定链表中的环，使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。</p>        <h2 id="142-环形链表II"   >          <a href="#142-环形链表II" class="heading-link"><i class="fas fa-link"></i></a><a href="#142-环形链表II" class="headerlink" title="142.环形链表II"></a>142.环形链表II</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/linked-list-cycle-ii/" >LeetCode.142题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-6"   >          <a href="#第一次做-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-6" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;13</p>        <h4 id="第一次代码-6"   >          <a href="#第一次代码-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-6" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;ListNode,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        ListNode cur=head;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(cur))&#123;</span><br><span class="line">                <span class="keyword">return</span> cur;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(cur,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            cur=cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-6"   >          <a href="#提交成功-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-6" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>我的做法是将链表中的结点存放到一个map中，因为map是不可重复的，所以我每个结点判断一下是否有这个SetEntry，如果有则说明当前结点就是第一个环节点</p>        <h3 id="题解-6"   >          <a href="#题解-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3>      <p><strong>双指针法</strong></p><p>定义一个快指针一个慢指针，快指针每次移动两格，慢指针每次移动一格</p><ul><li><strong>判断链表是否有环</strong></li></ul><p>​当快慢指针指向同一个结点就说明是有环</p><ul><li><strong>判断环结点的位置，也即环的入口</strong></li></ul><p>​假设相遇的位置如下图所示</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230813060827204.png"  alt="环形链表图(1)">      </p><p>那么我们可以假设入口的距离为x，入口到相遇点的路径为y，相遇点过后再回到入口的距离为z</p><p>也即下图所示</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230813061538270.png"  alt="环形链表图(2)">      </p><p>因为慢指针相遇的移动距离是x+y,快指针的移动距离是x+n(z+y)+y</p><p>又因为快指针每次是移动两格，慢指针是每次移动一格，那么只要同时出发<strong>快指针的距离一定是慢指针的两倍</strong></p><p>也即 x+n(z+y)+y&#x3D;2*(x+y)</p><p>因此我们可以获取到关于x的一个函数，毕竟入口是我们需要求得环的入口的距离  x&#x3D;n(z+y)-y 又因为n是快指针走的圈数，当相遇的时候快指针一定转过了一圈，那么<strong>n一定大于等于1</strong>，那这个函数可以变形 让出一圈的距离来判断x与正数之间的关系 x&#x3D;(n-1)(z+y)+z</p><p>如果只转一圈 那么就有<strong>x&#x3D;&#x3D;z</strong></p><p>无论最后快指针转了多少圈，那么当相遇点再移动到入口的距离z会等于head到入口的距离x</p><p><strong>x&#x3D;&#x3D;z</strong></p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230813062525148.png"  alt="环形链表(3)">      </p><ul><li><p>求得x的值</p><p>将相遇点和头结点分别使用指针index1和index2，开始一格一格移动，当index1&#x3D;&#x3D;index2的时候说明找到了入口 返回index1即可</p></li></ul><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义快指针和慢指针</span></span><br><span class="line">       ListNode fast=head;</span><br><span class="line">       ListNode slow=head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为fast每次移动两格 所以要判断后面两个结点是否为空</span></span><br><span class="line">       <span class="keyword">while</span>(fast!=<span class="literal">null</span>&amp;&amp;fast.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">           fast=fast.next.next;</span><br><span class="line">           <span class="comment">//慢指针移动一格</span></span><br><span class="line">           slow=slow.next;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果fast==slow说明相遇了</span></span><br><span class="line">           <span class="keyword">if</span>(fast==slow)&#123;</span><br><span class="line">               <span class="comment">//定义一个指针index1记录当前相遇结点</span></span><br><span class="line">               ListNode index1=fast;</span><br><span class="line">               <span class="comment">//定义一个指针index2从头结点出发</span></span><br><span class="line">               ListNode index2=head;</span><br><span class="line">               <span class="comment">//当index1==index2的时候说明找到入口</span></span><br><span class="line">               <span class="keyword">while</span>(index1!=index2)</span><br><span class="line">               &#123;</span><br><span class="line">                   index1=index1.next;</span><br><span class="line">                   index2=index2.next; </span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">//找到入口</span></span><br><span class="line">                   <span class="keyword">if</span>(index1==index2)&#123;</span><br><span class="line">                    <span class="keyword">return</span> index1;</span><br><span class="line">                   &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="comment">//没有环 所以循环能结束</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="总结-2"   >          <a href="#总结-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-2" class="headerlink" title="总结"></a>总结</h1>      <p>这里链表篇也已经告一段落，下一章要进入哈希表的题型中，我们从链表中学到了<strong>虚拟头结点法、删除结点、反转链表、判断链表是否成环</strong></p><p>虚拟头结点是一个很好的方法将头结点当成普通的结点，这样就少了对头结点的判断和处理</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>死之前要做完的算法手册-[1.数组篇]</title>
      <link href="/2023/08/04/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B1.%E6%95%B0%E7%BB%84%E7%AF%87%5D/"/>
      <url>/2023/08/04/%E6%AD%BB%E4%B9%8B%E5%89%8D%E8%A6%81%E5%81%9A%E5%AE%8C%E7%9A%84%E7%AE%97%E6%B3%95%E6%89%8B%E5%86%8C-%5B1.%E6%95%B0%E7%BB%84%E7%AF%87%5D/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><p>经过考虑之后决定按照代码随想录的训练路线来做一个算法的学习</p><p>然后下面是我做数组算法的时候踩的坑</p><p><strong>如果赶时间的话做法可以不用看，就主要看思路、总结、图解</strong></p><p><em>输是正常的，重要的是不要怕输</em></p>        <h1 id="二分查找"   >          <a href="#二分查找" class="heading-link"><i class="fas fa-link"></i></a><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1>      <p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1</p><p>题目是<span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/binary-search/" >LeetCode上704题</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h2 id="704-二分查找"   >          <a href="#704-二分查找" class="heading-link"><i class="fas fa-link"></i></a><a href="#704-二分查找" class="headerlink" title="704.二分查找"></a>704.二分查找</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/binary-search/" >LeetCode.704题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做"   >          <a href="#第一次做" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次单独做于23&#x2F;08&#x2F;04，说实话二分查找想起来很简单，但是一写就踩了不少坑</p>        <h4 id="第一次代码"   >          <a href="#第一次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length;</span><br><span class="line">        <span class="keyword">while</span>(low!=high)&#123;</span><br><span class="line">            <span class="type">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target&gt;nums[mid])&#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(target==nums[mid])&#123;</span><br><span class="line">                <span class="keyword">return</span> mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(target&lt;nums[mid])&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误"   >          <a href="#提交错误" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE1:nums&#x3D;[-1,0,3,5,9,12],target&#x3D;9,输出-1,预计输出 4</p><p>CASE2:nums&#x3D;[-1,0,3,5,9,12],target&#x3D;2,输出-1,预计输出-1</p><p>这不是运行案例都没通过嘛?更别提提交测试了</p>        <h5 id="原因"   >          <a href="#原因" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因" class="headerlink" title="原因"></a>原因</h5>      <p>下标我是从0开始，而上标是从数组的长度6开始，但是数组中存数的时候是0~5,所以这是第一个不对的地方，于是我进行了修正把上标的位置改成length-1</p>        <h4 id="第二次源代码"   >          <a href="#第二次源代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次源代码" class="headerlink" title="第二次源代码"></a>第二次源代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;   </span><br><span class="line"><span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(low!=high)&#123;</span><br><span class="line">            <span class="type">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target&gt;nums[mid])&#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(target==nums[mid])&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(target&lt;nums[mid])&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-1"   >          <a href="#提交错误-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-1" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:nums&#x3D;[5],target&#x3D;5,输出-1,预计输出0</p>        <h5 id="原因-1"   >          <a href="#原因-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-1" class="headerlink" title="原因"></a>原因</h5>      <p>下标从0开始,上标也是0压根就没有进入循环判断，所以我又做了改正，将一个元素的数组进行了单独判断</p>        <h4 id="第三次代码"   >          <a href="#第三次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;   </span><br><span class="line">        <span class="comment">//如果nums只有一个元素</span></span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> target==nums[<span class="number">0</span>]? <span class="number">0</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(low!=high)&#123;</span><br><span class="line">            <span class="type">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target&gt;nums[mid])&#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(target==nums[mid])&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(target&lt;nums[mid])&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>我当时觉得我简直就是天才，对数组长度为0的时候不会做判断，而数组只有一个元素的时候单独判断，返回执行时间还更快，但这又出了岔子</p>        <h5 id="提交错误-2"   >          <a href="#提交错误-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-2" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:nums&#x3D;[2,5],target&#x3D;5,输出-1,预计输出1</p>        <h5 id="原因-2"   >          <a href="#原因-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-2" class="headerlink" title="原因"></a>原因</h5>      <p>不仅仅是nums[length-1]不能进行一个判断同时也是nums[0]没办法进行判断，也就是数组的边界都不能进行一个判断，问题出在了循环的时候当low&#x3D;&#x3D;high的时候就退出了循环 而边界的时候就没有判断到，所以我最后进行了改正</p>        <h4 id="第四次代码"   >          <a href="#第四次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四次代码" class="headerlink" title="第四次代码"></a>第四次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果nums只有一个元素</span></span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> target==nums[<span class="number">0</span>]? <span class="number">0</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            <span class="type">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target&gt;nums[mid])&#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(target==nums[mid])&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(target&lt;nums[mid])&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功"   >          <a href="#提交成功" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>但是实际上有没有对一个元素数组的判断都能通过测试，问题就出在While循环中的判断条件，当low等于high的时候也应该进行一次判断，也就是Low&gt;high的时候结束循环</p>        <h3 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h3>      <p>看了视频学习之后才知道 <strong>二分法</strong>的两个重点，主要要取决于边界处理</p><p>主要有两个版本，1.是左闭右闭的区间</p><p>​   2.是左闭右合的区间</p><p>为了防止搞混我主要学习的是左闭右闭的区间写法</p>        <h4 id="while循环的条件判断"   >          <a href="#while循环的条件判断" class="heading-link"><i class="fas fa-link"></i></a><a href="#while循环的条件判断" class="headerlink" title="while循环的条件判断"></a>while循环的条件判断</h4>      <p>重点思想是low和high是不是一个合法的值在条件判断中，如果下标是1，上标是1，那么也应该做一个while循环判断</p><p>所以是while(low&lt;&#x3D;high)</p>        <h4 id="low和high的赋值处理"   >          <a href="#low和high的赋值处理" class="heading-link"><i class="fas fa-link"></i></a><a href="#low和high的赋值处理" class="headerlink" title="low和high的赋值处理"></a>low和high的赋值处理</h4>      <p>上一次判断的时候nums[mid]&gt;target，所以明确的是mid这个索引值已经不等于我们的目标索引值</p><p>因此low&#x3D;mid+1，同理当nums[mid]&lt;target时high&#x3D;mid-1;</p>        <h3 id="图解"   >          <a href="#图解" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解" class="headerlink" title="图解"></a>图解</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230804122255989.png"  alt="二分法图解">      </p>        <h2 id="35-搜索插入位置"   >          <a href="#35-搜索插入位置" class="heading-link"><i class="fas fa-link"></i></a><a href="#35-搜索插入位置" class="headerlink" title="35.搜索插入位置"></a>35.搜索插入位置</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/search-insert-position/" >LeetCode.35题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-1"   >          <a href="#第一次做-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-1" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;04，因为刚学完二分查找，所以找相似的题目巩固</p>        <h4 id="第一次代码-1"   >          <a href="#第一次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-1" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">// 二分法</span></span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mid=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]==target)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-3"   >          <a href="#提交错误-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-3" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>Case1：nums[1,3,5,6] ,target&#x3D;5, 输出2 ，预期输出 2</p><p>Case2：nums[1,3,5,6] ,target&#x3D;2, 输出0，预期输出 1</p><p>Case3：nums[1,3,5,6] ,target&#x3D;7, 输出3 ，预期输出 2</p>        <h5 id="原因-3"   >          <a href="#原因-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-3" class="headerlink" title="原因"></a>原因</h5>      <p>当元素中没有这个元素的时候，最后上标和下标会指向mid的位置，这个位置的索引值是有值的所以应该在当前索引+1就是要求到的索引值</p>        <h4 id="第二次代码"   >          <a href="#第二次代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">// 二分法</span></span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mid=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]==target)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-4"   >          <a href="#提交错误-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-4" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>Case1：nums[1,3,5,6] ,target&#x3D;0, 输出1 ，预期输出 0</p>        <h5 id="原因-4"   >          <a href="#原因-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-4" class="headerlink" title="原因"></a>原因</h5>      <p>第一次错的改正思路不对，没有找到元素之后要插入元素的时候，最后low和high不会指向同一个索引值，一定是low＞high</p><p>要判断low和high与mid的关系 如果low&gt;mid，说明要插入的值比nums[mid]的值还要大，要插入在mid后面，反之如果high&lt;mid，说明当前值比插入的值要大，要插入在mid前面</p>        <h4 id="第三次代码-1"   >          <a href="#第三次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-1" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">// 二分法</span></span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mid=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]==target)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(low&gt;mid)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mid-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-5"   >          <a href="#提交错误-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-5" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE1:nums[1,3,5,6], target&#x3D;0,输出-1,预期输出0</p>        <h5 id="原因-5"   >          <a href="#原因-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-5" class="headerlink" title="原因"></a>原因</h5>      <p>在插入在当前mid索引值时多减了一位，如果这个数比mid值更小的话应该就是当前位置，而当前位置及以后的值应该往后移动</p>        <h4 id="第四次代码-1"   >          <a href="#第四次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四次代码-1" class="headerlink" title="第四次代码"></a>第四次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">// 二分法</span></span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mid=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]==target)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(low&gt;mid)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-1"   >          <a href="#提交成功-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-1" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="总结-1"   >          <a href="#总结-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3>      <p>先<strong>二分查找</strong>判断是否当前数组有这个值，如果有的话直接返回mid就是索引小标值</p><p>如果当前数组中没有这个值，就要判断插入在当前位置的前面还是后面</p><p>当low&gt;mid时就说明最后跳出循环前还进行了一次nums[mid]&lt;target判断 也就是说明mid索引的元素比插入元素更小，所以要插入在mid的后面</p><p>反之如果没有low&gt;mid说明当前值比mid值更小那么久应该插入当前元素位置，让当前元素及以后元素往后移</p>        <h3 id="图解-1"   >          <a href="#图解-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解-1" class="headerlink" title="图解"></a>图解</h3>              <h4 id="找得到元素"   >          <a href="#找得到元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#找得到元素" class="headerlink" title="找得到元素"></a>找得到元素</h4>      <p>找得到元素就是普通的二分查找返回目标索引值，图解于704题图解所示</p>        <h4 id="找不到元素，插入在前面"   >          <a href="#找不到元素，插入在前面" class="heading-link"><i class="fas fa-link"></i></a><a href="#找不到元素，插入在前面" class="headerlink" title="找不到元素，插入在前面"></a>找不到元素，插入在前面</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230804151101834.png"  alt="插入在前面">      </p>        <h4 id="找不到元素，插入在后面"   >          <a href="#找不到元素，插入在后面" class="heading-link"><i class="fas fa-link"></i></a><a href="#找不到元素，插入在后面" class="headerlink" title="找不到元素，插入在后面"></a>找不到元素，插入在后面</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230804150906559.png"  alt="插入在后面">      </p>        <h2 id="34-在排序数组中查找元素的第一个和最后一个位置"   >          <a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="heading-link"><i class="fas fa-link"></i></a><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34.在排序数组中查找元素的第一个和最后一个位置"></a>34.在排序数组中查找元素的第一个和最后一个位置</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/" >LeetCode.34题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-2"   >          <a href="#第一次做-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-2" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>于23&#x2F;08&#x2F;04</p>        <h4 id="第一次代码-2"   >          <a href="#第一次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-2" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="comment">//二分法</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mid=-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] arr=&#123;mid,mid&#125;;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;target)</span><br><span class="line">            &#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//找到元素</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//结束循环判断mid值</span></span><br><span class="line">        <span class="keyword">if</span>(mid!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//则说明有元素</span></span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=mid;i&gt;=low;i--)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span>(nums[i]==target)</span><br><span class="line">               &#123;</span><br><span class="line">                   low=i;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=mid;i&lt;=high;i++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(nums[i]==target)&#123;</span><br><span class="line">                   high=i;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           arr[<span class="number">0</span>]=low;</span><br><span class="line">           arr[<span class="number">1</span>]=high;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有找到元素</span></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-6"   >          <a href="#提交错误-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-6" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>Case: nums[5,7,7,8,8,10],target&#x3D;8,输出[4，4]，预期输出[3,4]</p>        <h5 id="原因-6"   >          <a href="#原因-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-6" class="headerlink" title="原因"></a>原因</h5>      <p>在结束循环判断的时候我将I设为Mid值，如果找到了元素那么nums[mid]&#x3D;&#x3D;target，那一定会执行将low和high的值改成mid，但是这是没有意义的，我的意图是找出mid前后两边和target相同的个数，因此我做了改正 将low判断的初始化值为mid-1即mid的前一位，high的判断index改为mid+1即mid的后一位</p>        <h4 id="第二次代码-1"   >          <a href="#第二次代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-1" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">       <span class="comment">//二分法</span></span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">       <span class="type">int</span> mid=-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span>[] arr=&#123;mid,mid&#125;;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">           mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">           <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">               high=mid-<span class="number">1</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;target)</span><br><span class="line">           &#123;</span><br><span class="line">               low=mid+<span class="number">1</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="comment">//找到元素</span></span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">int</span> lowCount=<span class="number">0</span>; <span class="comment">//记录mid索引前面和target相同的个数</span></span><br><span class="line">       <span class="type">int</span> highCount=<span class="number">0</span>;<span class="comment">//记录mid索引后面和target相同的个数</span></span><br><span class="line">       <span class="comment">//结束循环判断mid值</span></span><br><span class="line">       <span class="keyword">if</span>(mid!=-<span class="number">1</span>)&#123;</span><br><span class="line">           <span class="comment">//则说明有元素</span></span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=mid-<span class="number">1</span>;i&gt;=low;i--)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span>(nums[i]==target)</span><br><span class="line">               &#123;</span><br><span class="line">                   lowCount++;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=mid+<span class="number">1</span>;i&lt;=high;i++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(nums[i]==target)&#123;</span><br><span class="line">                   highCount++;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           arr[<span class="number">0</span>]=mid-lowCount;</span><br><span class="line">           arr[<span class="number">1</span>]=mid+highCount;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//没有找到元素</span></span><br><span class="line">       <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-7"   >          <a href="#提交错误-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-7" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>Case: nums[5,7,7,8,8,10],target&#x3D;6,输出[0，0]，预期输出[-1,-1]</p>        <h5 id="原因-7"   >          <a href="#原因-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-7" class="headerlink" title="原因"></a>原因</h5>      <p>本次代码引入了计数器思想，就是在mid值前面的相同数量我计一个数，mid值后面相同的数量我也计一个数，最后给arr赋值的时候就只要加减Count就能代表有多少数据了</p><p>而问题又出现了，不存在的数据返回了[0,0]</p><p>通过Debug判断我才发现我有一个很严重的误区，就是无论有没有找到元素mid值一定不会等于-1，因为进入了第一个while循环判断中，如果没有找到值应该是一个mid值也会存在，所以第二个判断的起始条件有误导致后面赋值的时候mid值的错误导致整个问题出错</p>        <h4 id="第三次代码-2"   >          <a href="#第三次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-2" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="comment">//二分法</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mid=-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> midCount=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] arr=&#123;mid,mid&#125;;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;target)</span><br><span class="line">            &#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                midCount++;</span><br><span class="line">                <span class="comment">//找到元素</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> lowCount=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> highCount=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//结束循环判断mid值</span></span><br><span class="line">        <span class="keyword">if</span>(midCount!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//则说明有元素</span></span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=mid-<span class="number">1</span>;i&gt;=low;i--)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span>(nums[i]==target)</span><br><span class="line">               &#123;</span><br><span class="line">                   lowCount++;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=mid+<span class="number">1</span>;i&lt;=high;i++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(nums[i]==target)&#123;</span><br><span class="line">                   highCount++;</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">        arr[<span class="number">0</span>]=mid-lowCount;</span><br><span class="line">        arr[<span class="number">1</span>]=mid+highCount;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有找到元素</span></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-2"   >          <a href="#提交成功-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-2" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>我引入了一个MidCount计数器，如果找到元素时候MidCount++，这样判断找到元素的判断条件就能确定下来</p>        <h3 id="总结和解题思路"   >          <a href="#总结和解题思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结和解题思路" class="headerlink" title="总结和解题思路"></a>总结和解题思路</h3>      <p>①定义MidCount&#x3D;0 用来记录是否找到元素，初始化一个数组arr[-1,-1]</p><p>②通过二分查找的方式，如果找到元素将MidCount++则跳出循环，同时low和high就是可以确认的目标值边界 也就是nums[low]和nums[high]之间能找到target目标值，mid索引位置也就是二分查找找到的目标值索引位置</p><p>③判断MidCount&#x3D;&#x3D;0  如果等于0说明二分查找没有找到元素直接返回数组arr ，如果不等于0则说明二分查找找到了元素</p><p>④MidCount1&#x3D;0，即找到了元素，定义两个计数器LowCount和HighCount用来记录Mid索引前后分别相同的元素个数</p><p>⑤从mid索引开始向前遍历，如果遍历没有找到相同元素则跳出遍历，如果找到了元素则LowCount++继续遍历</p><p>⑥从mid索引开始向后遍历，如果遍历没有找到相同元素则跳出遍历，如果找到了元素则HighCount++继续遍历</p><p>⑦mid-LowCount表示第一个target出现的索引值 赋值给arr[0]</p><p>⑧mid+highCount表示最后一个target出现的索引值 赋值给arr[1]</p><p>⑨返回arr</p>        <h2 id="69-x的平方根"   >          <a href="#69-x的平方根" class="heading-link"><i class="fas fa-link"></i></a><a href="#69-x的平方根" class="headerlink" title="69.x的平方根"></a>69.x的平方根</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/sqrtx/" >LeetCode.69题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-3"   >          <a href="#第一次做-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-3" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;05</p>        <h4 id="第一次代码-3"   >          <a href="#第一次代码-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-3" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i*i&lt;=x;i++)&#123;</span><br><span class="line">           <span class="keyword">return</span> i;</span><br><span class="line">       &#125;      </span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-8"   >          <a href="#提交错误-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-8" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:输入x&#x3D;4，输出0，预期2</p>        <h5 id="原因-8"   >          <a href="#原因-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-8" class="headerlink" title="原因"></a>原因</h5>      <p>可能思路有点搞，一进来循环就返回i了，我的想法是找到i的平方大于x的时候就直接返回i,我觉得这下就是直接的整数</p><p>然而我改成int i放在循环外面 循环做一个空语句然后 返回i 依然是出错了， 当输入X为8的时候，输出3，预期2</p><p>我就大概知道我的思路出现问题了</p>        <h4 id="第二次代码-2"   >          <a href="#第二次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-2" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i*i&lt;x;i++)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//出循环了判断一下i²和x的大小</span></span><br><span class="line">        <span class="keyword">if</span>(i*i&gt;x)&#123;</span><br><span class="line">            <span class="comment">//说明数在 i-1的²和i的²之间</span></span><br><span class="line">            <span class="keyword">return</span> i-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-9"   >          <a href="#提交错误-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-9" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>最后输入的值是2147483647，超出时间限度</p>        <h5 id="原因-9"   >          <a href="#原因-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-9" class="headerlink" title="原因"></a>原因</h5>      <p>说明时间复杂度高了，具体应该是for循环的时候判断太多次了？又或者是死循环了，重新审一下题 x最大为2的32次方-1 那么判断循环跳出的时候i*i的数值已经超过了整数上限</p>        <h4 id="第三次代码-3"   >          <a href="#第三次代码-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-3" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">       <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(i=<span class="number">0</span>;;i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>((i*i&gt;Integer.MAX_VALUE?Integer.MAX_VALUE : i * i)&gt; x)&#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;      </span><br><span class="line">       <span class="comment">//出循环了判断一下i²和x的大小</span></span><br><span class="line">       <span class="keyword">if</span>(i*i&gt;x)&#123;</span><br><span class="line">           <span class="comment">//说明数在 i-1的²和i的²之间</span></span><br><span class="line">           <span class="keyword">return</span> i-<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> i;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-10"   >          <a href="#提交错误-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-10" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>输入2147395600，输出289398，预期输出46340</p>        <h5 id="原因-10"   >          <a href="#原因-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-10" class="headerlink" title="原因"></a>原因</h5>      <p>46340的平方为2147395600,46341的平方为2147488281，而2的32次方-1为2147483647 即 46340²&lt;2147483647&lt;46341²</p><p>也就是这个求平方根最大能输出的值就应该在46340</p><p>我在上面改正的代码的时候做了一个判断 当i×i的数值大于整数的上限的时候设置为整数上限 反之为i×i,应该就是这个地方出了问题</p><p>经过debug的时候就知道了 当相等的时候没有进行跳出循环 因为这算是找到了数据但是我依然让他进行了下一次判断 下一次判断的时候会因为超出上限造成数据错误  </p>        <h4 id="第四次代码-2"   >          <a href="#第四次代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四次代码-2" class="headerlink" title="第四次代码"></a>第四次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">       <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(i=<span class="number">0</span>;;i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(i==<span class="number">46340</span>)&#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>((i*i&gt;Integer.MAX_VALUE?Integer.MAX_VALUE : i * i)&gt;=x)&#123;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;      </span><br><span class="line">       <span class="comment">//出循环了判断一下i²和x的大小</span></span><br><span class="line">       <span class="keyword">if</span>(i*i&gt;x)&#123;</span><br><span class="line">           <span class="comment">//说明数在 i-1的²和i的²之间</span></span><br><span class="line">           <span class="keyword">return</span> i-<span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> i;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-3"   >          <a href="#提交成功-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-3" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>我直接做了一个边界处理 就是因为最大的值就是46340，所以我直接当i为46340的时候返回，但是这样代码不太优雅，因为我是因为知道错误改正之后得出一个结论就是最大的就是46340，而这个数据不应该是这样做一个特殊处理的，这道题将会看网上的题解做出自己的总结</p>        <h3 id="题解"   >          <a href="#题解" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解" class="headerlink" title="题解"></a>题解</h3>      <p>这个题可以用到二分查找法，因为本质上就是求一个值一共有三种条件</p><ul><li>求的值的平方恰好等于所给值，就<strong>正好找到这个算术平方根</strong></li><li>求的值的平方大于所给值，就说明这个值<strong>一定不是要求到的算术平方根</strong></li><li>求的值的平方小于所给值，说明这个值<strong>可能是要求的算术平方根</strong></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mySqrt</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span>x/<span class="number">2</span>;   </span><br><span class="line"><span class="comment">//因为除了0和1之后的所有数的一半都是小于或者等于算术平方根 也即[0,X/2]这个区间中一定有一个算数平方根是要求到的 </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里过滤掉0和1的特殊情况</span></span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span> || x==<span class="number">1</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">        <span class="type">int</span> mid=(high+low)/<span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(mid==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(mid&gt;x/mid)&#123;</span><br><span class="line">            high=mid-<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mid== x/mid)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//mid &lt; x/mid;</span></span><br><span class="line">            low=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> high;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="总结-2"   >          <a href="#总结-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3>      <p>①因为除了0和1之后的所有数的一半都是小于或者等于算术平方根 也即[0,X&#x2F;2]这个区间中一定有一个算数平方根是要求到的</p><p>②比较的时候采用 mid (&gt; | &#x3D;&#x3D; | &lt; )x &#x2F;mid的方式来替换掉mid × mid  (&gt; | &#x3D;&#x3D; | &lt; ) x  ，避免因为乘法导致的溢出问题</p><p>③因为采用了<strong>除法进行比较</strong>，所以 引入了一个判断IF(mid&#x3D;&#x3D;0) break; 来规避除数不能为0的问题</p>        <h2 id="367-有效的完全平方数"   >          <a href="#367-有效的完全平方数" class="heading-link"><i class="fas fa-link"></i></a><a href="#367-有效的完全平方数" class="headerlink" title="367.有效的完全平方数"></a>367.有效的完全平方数</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/valid-perfect-square/" >LeetCode.367(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-4"   >          <a href="#第一次做-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-4" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>于23&#x2F;08&#x2F;05</p>        <h4 id="第一次代码-4"   >          <a href="#第一次代码-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-4" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPerfectSquare</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span>(num==<span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> high=num/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">           <span class="type">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">           <span class="keyword">if</span>(mid==<span class="number">0</span>)&#123;</span><br><span class="line">               <span class="comment">//也即low=0 , high =1  ==&gt; num=2 那么没有完全平方数直接返回false</span></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(mid&gt;num/mid)&#123;</span><br><span class="line">               high=mid-<span class="number">1</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mid&lt; num/mid)&#123;</span><br><span class="line">               low=mid+<span class="number">1</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="comment">//mid == num/mid</span></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-11"   >          <a href="#提交错误-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-11" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:输入5 输出true ,预期输出false;</p>        <h5 id="原因-11"   >          <a href="#原因-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-11" class="headerlink" title="原因"></a>原因</h5>      <p>做这道题的时候因为受到69题的影响 所以判断语句中用的除法，但是好像这道题是不适用的，因为num&#x2F;mid的时候是因为上面一道题求得是整数的平方根，那么在范围中间的数据做除法会进行一个末尾抛弃，对最后的结果并不造成影响而这道题的num是实实切切要进行判断的</p>        <h5 id="分析场景"   >          <a href="#分析场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#分析场景" class="headerlink" title="分析场景"></a>分析场景</h5>      <p>当所求值的平方相等于目标值，那么说明找到了一个数据i，我们只要分析i-1,i,i+1这三个数的平方和x的关系即可</p><p>如果有一个是相等的那么说明，是有效的</p>        <h4 id="第二次代码-3"   >          <a href="#第二次代码-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-3" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPerfectSquare</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=num/<span class="number">2</span>;</span><br><span class="line">        <span class="type">long</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            <span class="type">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(mid==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//也即low=0 , high =1  ==&gt; num=2 那么没有完全平方数直接返回false</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(mid&gt;num/mid)&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mid&lt; num/mid)&#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//mid == num/mid</span></span><br><span class="line">                index=(<span class="type">long</span>)mid;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index*index==num|(index+<span class="number">1</span>)*(index+<span class="number">1</span>)==num|(index-<span class="number">1</span>*index-<span class="number">1</span>)==num)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-4"   >          <a href="#提交成功-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-4" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>这次我引入了一个变量index，用于记录找到mid&#x3D;&#x3D;num&#x2F;mid的时候的mid值</p>        <h3 id="总结-3"   >          <a href="#总结-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3>      <p>其实我是做完了这道题然后去看别人的题解，因为这道题没有说不能用内置库，所以他们做的时候有的用了Sqrt函数。</p><p>总之我先总结我自己这道题的思路</p><p>①将num&#x3D;&#x3D;1的特殊情况直接返回true，这也是沿用69题的思路，因为除了0和1之外其他的数的平方根都小于等于自己的一半</p><p>②利用<strong>二分查找</strong> 当mid&#x3D;&#x3D;num&#x2F;mid的时候跳出循环 并用index记录这个mid值</p><p>此时跳出循环可能是 1.mid的平方恰好等于num 那么直接返回true即可</p><p>​2.mid的平方小于num，因为num&#x2F;mid是整除，所以可能num的平方根是小数，所以要判断mid+1和mid-1的平方和num的关系</p><p>③我引入了一个Long变量来记录index的平方，为了避免乘法的溢出，同时在跳出的时候将mid值进行强转</p><p>④最后判断一下mid-1,mid,mid+1的平方与num的关系，如果有一个相等则返回true，所以我这里用了逻辑或，只要有一个条件成立即可不用判断完</p>        <h1 id="移除元素"   >          <a href="#移除元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h1>      <p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并<strong>原地</strong>修改输入数组。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p>示例 1: 给定 nums &#x3D; [3,2,2,3], val &#x3D; 3, 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。 你不需要考虑数组中超出新长度后面的元素。</p><p>示例 2: 给定 nums &#x3D; [0,1,2,2,3,0,4,2], val &#x3D; 2, 函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</p>        <h2 id="27-移除元素"   >          <a href="#27-移除元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#27-移除元素" class="headerlink" title="27.移除元素"></a>27.移除元素</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/remove-element/" >Leetcode.27移除元素(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-5"   >          <a href="#第一次做-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-5" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;05</p>        <h4 id="第一次代码-5"   >          <a href="#第一次代码-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-5" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==val)&#123;</span><br><span class="line">                <span class="comment">//当前位置的元素和数组前面的元素做一个交换</span></span><br><span class="line">                <span class="type">int</span> temp=nums[count];</span><br><span class="line">                nums[count]=val;</span><br><span class="line">                nums[i]=count;</span><br><span class="line">                count++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这样循环结束前count元素都是要丢掉的元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">            <span class="type">int</span> temp=nums[i];</span><br><span class="line">            nums[i]=nums[nums.length-<span class="number">1</span>-i];</span><br><span class="line">            nums[nums.length-i-<span class="number">1</span>]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.length-count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败"   >          <a href="#提交失败" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE：输入nums[3，2，2，3]，val&#x3D;3 输出[3,2,2]，预期输出[2,2]</p>        <h5 id="原因-12"   >          <a href="#原因-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-12" class="headerlink" title="原因"></a>原因</h5>      <p>1.通过debug的时候发现给nums[i]赋值的时候用的是count，而不是用temp交换</p><p>2.在第一个for循环的时候判断条件 i&lt;nums.length-1这样没有遍历到最后一个元素   </p><p><strong>这两个问题纯纯的低级错误中的低级错误</strong></p>        <h4 id="第二次代码-4"   >          <a href="#第二次代码-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-4" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==val)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//当前位置的元素和数组前面的元素做一个交换</span></span><br><span class="line">                <span class="type">int</span> temp=nums[count];</span><br><span class="line">                nums[count]=val;</span><br><span class="line">                nums[i]=temp;</span><br><span class="line">                count++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这样循环结束前count元素都是要丢掉的元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">            <span class="type">int</span> temp=nums[i];</span><br><span class="line">            nums[i]=nums[nums.length-<span class="number">1</span>-i];</span><br><span class="line">            nums[nums.length-i-<span class="number">1</span>]=temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> nums.length-count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="总结及思想"   >          <a href="#总结及思想" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结及思想" class="headerlink" title="总结及思想"></a>总结及思想</h3>      <p>通过学习代码随想录的视频，这个题可以由一种双指针的方法来实现删除元素的操作</p><p><strong>首先</strong></p><p>我们要明白数组的性质，数组是一串地址连续的元素序列，所以要删除元素只能是后面的元素对前面元素的覆盖，本质上数组还是相同的大小</p>        <h4 id="双指针"   >          <a href="#双指针" class="heading-link"><i class="fas fa-link"></i></a><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h4>      <p>①定义一个Fast索引指针用来遍历老数组，定义一个Slow索引指针用来指向新数组</p><p>②For循环判断条件是Fast&lt;arr.length</p><p>③当指向一个元素的时候判断这个元素是不是我们要删除的，如果不是则将arr[slow]&#x3D;arr[fast]并将slow和fast指针++指向下一个元素 </p><p>也即新数组的元素确定</p><p>④如果是我们要删除的元素则将Fast指针指向下一个元素，而Slow指针不动表示这个位置元素需要被覆盖</p><p>⑤循环结束返回slow,sloiw的大小也是新数组的大小</p>        <h4 id="双指针代码实现"   >          <a href="#双指针代码实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#双指针代码实现" class="headerlink" title="双指针代码实现"></a>双指针代码实现</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> fast=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;fast&lt;nums.length;fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=val)&#123;</span><br><span class="line">                <span class="comment">//是新数组需要的元素</span></span><br><span class="line">                nums[slow]=nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="交换元素"   >          <a href="#交换元素" class="heading-link"><i class="fas fa-link"></i></a><a href="#交换元素" class="headerlink" title="交换元素"></a>交换元素</h4>      <p>也就是我第一次做这道题的时候的思想</p><p>①先定义一个指针count，指向数组索引为0的位置</p><p>②for循环遍历，当找到我们不要的元素，将其放到数组前面</p><p>③这样第一次遍历结束 前面的元素都是我们不要的元素，并且我们得到了一个不要元素的数量计数器Count</p><p>④第二次循环的时候，将前count个元素和数组的后count个元素进行交换</p><p>⑤返回arr.length-count  也就是返回数组前面的元素，不要最后count个元素</p><p><strong>弊端</strong></p><p>这样是进行了两次for循环判断，这时间复杂度相较于双指针的方法实现更大</p>        <h4 id="交换指针代码实现"   >          <a href="#交换指针代码实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#交换指针代码实现" class="headerlink" title="交换指针代码实现"></a>交换指针代码实现</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]==val)&#123;</span><br><span class="line">                <span class="comment">//当前位置的元素和数组前面的元素做一个交换</span></span><br><span class="line">                <span class="type">int</span> temp=nums[count];</span><br><span class="line">                nums[count]=val;</span><br><span class="line">                nums[i]=temp;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这样循环结束前count元素都是要丢掉的元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">            <span class="type">int</span> temp=nums[i];</span><br><span class="line">            nums[i]=nums[nums.length-<span class="number">1</span>-i];</span><br><span class="line">            nums[nums.length-i-<span class="number">1</span>]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.length-count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="图解-2"   >          <a href="#图解-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解-2" class="headerlink" title="图解"></a>图解</h3>              <h4 id="双指针图解"   >          <a href="#双指针图解" class="heading-link"><i class="fas fa-link"></i></a><a href="#双指针图解" class="headerlink" title="双指针图解"></a>双指针图解</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230805093305176.png"  alt="双指针图解【1】">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230805094005008.png"  alt="双指针图解【2】">      </p>        <h4 id="交换元素图解"   >          <a href="#交换元素图解" class="heading-link"><i class="fas fa-link"></i></a><a href="#交换元素图解" class="headerlink" title="交换元素图解"></a>交换元素图解</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230805094505082.png"  alt="交换元素图解">      </p>        <h2 id="26-删除排序数组中的重复项"   >          <a href="#26-删除排序数组中的重复项" class="heading-link"><i class="fas fa-link"></i></a><a href="#26-删除排序数组中的重复项" class="headerlink" title="26.删除排序数组中的重复项"></a>26.删除排序数组中的重复项</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/" >Leetcode.26题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-6"   >          <a href="#第一次做-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-6" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;06</p>        <h4 id="第一次代码-6"   >          <a href="#第一次代码-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-6" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> fast=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(;fast&lt;nums.length;fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast==nums.length-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[fast-<span class="number">1</span>]!=nums[fast])&#123;</span><br><span class="line">                    nums[slow]=nums[fast];</span><br><span class="line">                    slow++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=nums[fast+<span class="number">1</span>])&#123;</span><br><span class="line">                nums[slow]=nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-12"   >          <a href="#提交错误-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-12" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:数组索引越界异常 Index -1 out of bounds for length 1 发生在nums[fast-1]！&#x3D;nums[fast]中</p>        <h5 id="原因-13"   >          <a href="#原因-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-13" class="headerlink" title="原因"></a>原因</h5>      <p>没有判断异常情况，当nums.length&#x3D;&#x3D;1的时候直接返回1就行了</p>        <h4 id="第二次代码-5"   >          <a href="#第二次代码-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-5" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> fast=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(;fast&lt;nums.length;fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast==nums.length-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[fast-<span class="number">1</span>]!=nums[fast])&#123;</span><br><span class="line">                    nums[slow]=nums[fast];</span><br><span class="line">                    slow++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=nums[fast+<span class="number">1</span>])&#123;</span><br><span class="line">                nums[slow]=nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-13"   >          <a href="#提交错误-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-13" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:输入[1,1] 输出[], 预期结果[1]</p>        <h5 id="原因-14"   >          <a href="#原因-14" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-14" class="headerlink" title="原因"></a>原因</h5>      <p>出在fast&#x3D;&#x3D;nums.length-1的时候 我将最后一个元素和倒数第二个元素进行了对比，如果不相同的话才更新到新数组中，然而我等于是比了两次因为第一次的时候是倒数第二的元素和倒数第一的元素比较，如果相同的话倒数第二个元素不会进入到新数组中，而第二次比较导致最后一个元素也进不到新数组中</p>        <h4 id="第三次代码-4"   >          <a href="#第三次代码-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-4" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> fast=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(;fast&lt;nums.length;fast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fast==nums.length-<span class="number">1</span>)&#123;</span><br><span class="line">                    nums[slow]=nums[fast];</span><br><span class="line">                    slow++;    </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=nums[fast+<span class="number">1</span>])&#123;</span><br><span class="line">                nums[slow]=nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-5"   >          <a href="#提交成功-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-5" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="总结-4"   >          <a href="#总结-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3>      <p>利用<strong>双指针</strong>的思想做出这题，然后要考虑到特殊情况，比较元素的时候要小心数组索引越界异常，踩坑就是这里</p>        <h2 id="283-移动零"   >          <a href="#283-移动零" class="heading-link"><i class="fas fa-link"></i></a><a href="#283-移动零" class="headerlink" title="283.移动零"></a>283.移动零</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/move-zeroes/" >Leetcode.283题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-7"   >          <a href="#第一次做-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-7" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次于23&#x2F;08&#x2F;06</p>        <h4 id="第一次代码-7"   >          <a href="#第一次代码-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-7" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> slow=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> fast=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;fast&gt;=<span class="number">0</span>;fast--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]==<span class="number">0</span>)&#123;</span><br><span class="line">                nums[slow]=<span class="number">0</span>;</span><br><span class="line">                slow--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-14"   >          <a href="#提交错误-14" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-14" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:输入[0,1,0,3,12] 输出[0,1,0,0,0] 预期输出[1,3,12,0,0]</p>        <h5 id="原因-15"   >          <a href="#原因-15" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-15" class="headerlink" title="原因"></a>原因</h5>      <p>我的意思是从后面开始遍历，然后当为0的时候更新慢指针的位置，把0记录在数组后面这样就不用做移动操作</p><p>实际上更新慢指针的时候将数据丢失了，导致非0的位置成了0而为0的位置没有变化，所以为了数据不丢失我将更新操作做了调整</p>        <h4 id="第二次代码-6"   >          <a href="#第二次代码-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-6" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> slow=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> fast=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;fast&gt;=<span class="number">0</span>;fast--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[fast]==<span class="number">0</span>)&#123;</span><br><span class="line">                nums[fast]=nums[slow];</span><br><span class="line">                nums[slow]=<span class="number">0</span>;</span><br><span class="line">                slow--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-1"   >          <a href="#提交失败-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-1" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:输入[0,1,0,3,12] 输出[3,1,12,0,0] 预期输出[1,3,12,0,0]</p>        <h5 id="原因-16"   >          <a href="#原因-16" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-16" class="headerlink" title="原因"></a>原因</h5>      <p>因为我选择交换位置 而且我是从后面开始遍历的所以第一个0和3交换了位置 第二个0和12交换了位置，这样保证了数据不丢失，但是这样就影响了数据的次序，这是我没有考虑到的。我开始想是不是我的思路出现问题，就这样我改改提交了第三次代码</p>        <h4 id="第三次代码-5"   >          <a href="#第三次代码-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-5" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">slow</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> fast= <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;fast&lt;nums.length;fast++)&#123;</span><br><span class="line">            <span class="comment">//从头遍历 当元素不为0的时候更新到新数组中</span></span><br><span class="line">            <span class="keyword">if</span>(nums[fast]!=<span class="number">0</span>)&#123;</span><br><span class="line">                nums[slow]=nums[fast];</span><br><span class="line">                slow++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//当循环结束新数组和老数组数量不同说明最后的元素需要更新成0</span></span><br><span class="line">        <span class="keyword">if</span>(slow!=fast)</span><br><span class="line">        <span class="keyword">for</span>(;slow&lt;fast;slow++)&#123;</span><br><span class="line">            nums[slow]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-6"   >          <a href="#提交成功-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-6" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>我反思了一下顺序的丢失可能是因为从后面开始遍历的原因，所以我选择从头遍历，然后最后进行一个判断如果新老数组长度不相等，则更新最后几个元素，因为最后几个元素将0的位置填补掉了</p>        <h3 id="总结-5"   >          <a href="#总结-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-5" class="headerlink" title="总结"></a>总结</h3>      <p><strong>双指针</strong>的时候更新元素只是覆盖，要注意数据丢失的问题以及数据次序的问题</p>        <h2 id="844-比较含退格的字符串"   >          <a href="#844-比较含退格的字符串" class="heading-link"><i class="fas fa-link"></i></a><a href="#844-比较含退格的字符串" class="headerlink" title="844.比较含退格的字符串"></a>844.比较含退格的字符串</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/backspace-string-compare/" >Leetcode.844题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-8"   >          <a href="#第一次做-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-8" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次于23&#x2F;08&#x2F;06</p>        <h4 id="第一次代码-8"   >          <a href="#第一次代码-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-8" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">backspaceCompare</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="comment">//1.获取字符数组</span></span><br><span class="line">        <span class="type">char</span>[] c= s.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] d= t.toCharArray();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取c数组的快慢指针</span></span><br><span class="line">        <span class="type">int</span> cslow=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> cFast=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//获取d数组的快慢指针</span></span><br><span class="line">        <span class="type">int</span> dslow=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> dFast=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;cFast&lt;c.length;cFast++)&#123;</span><br><span class="line">            <span class="comment">//当c[cFast]!=&#x27;#&#x27;的时候进行更新新数组操作，当c[cFast]==&#x27;#&#x27;的时候进行一个退格覆盖</span></span><br><span class="line">            <span class="keyword">if</span>(c[cFast]!=<span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                c[cslow]=c[cFast];</span><br><span class="line">                cslow++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//c[cFast==&#x27;#&#x27;]</span></span><br><span class="line">                <span class="comment">//判断cslow的值 防止--slow的时候索引越界异常</span></span><br><span class="line">                <span class="keyword">if</span>(cslow==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                c[--cslow]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//下同</span></span><br><span class="line">        <span class="keyword">for</span>(;dFast&lt;d.length;dFast++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(d[dFast]!=<span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">                d[dslow]=d[dFast];</span><br><span class="line">                dslow++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//d[dFast==&#x27;#&#x27;]</span></span><br><span class="line">                <span class="keyword">if</span>(dslow==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                d[--dslow]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//拼接数组成字符串</span></span><br><span class="line">        String newSstr=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        String newTstr=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;cslow;i++)&#123;</span><br><span class="line">            newSstr=newSstr+c[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;dslow;i++)&#123;</span><br><span class="line">            newTstr=newTstr+d[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newSstr.equals(newTstr);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-7"   >          <a href="#提交成功-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-7" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>但是好像有一点点不太优雅提交完这个答案，我总觉得有地方可以改进，并且相同代码有点太多了，而看了评论区大概就是抽取出一个方法然后返回一个String类型的值  主函数中用  return 方法1(s).eqauls(方法1(t)) 这样好像优雅一点</p>        <h3 id="总结-6"   >          <a href="#总结-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-6" class="headerlink" title="总结"></a>总结</h3>      <p>利用<strong>双指针</strong>的思想</p><p>①先获取char类型的数组，方便使用双指针</p><p>②当nums[fast]!&#x3D;’#’的时候进行一个更新到新数组操作 即nums[slow++]&#x3D;nums[fast];</p><p>③当nums[fast]&#x3D;&#x3D;’#’的时候要进行一个退格操作 即nums[–slow]&#x3D;’#’  但是这里有一个坑 <strong>当slow为0的时候要注意–slow的索引越界</strong></p><p>所以我进行了一个判断  当slow&#x3D;&#x3D;0的时候直接continue;</p><p>④将字符数组返回成字符串 ，通过字符串的equasl方法比较并返回结果，我这里做的太不优雅了可以改进一点的</p>        <h2 id="977-有序数组的平方"   >          <a href="#977-有序数组的平方" class="heading-link"><i class="fas fa-link"></i></a><a href="#977-有序数组的平方" class="headerlink" title="977.有序数组的平方"></a>977.有序数组的平方</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/squares-of-a-sorted-array/" >Leetcode.977题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-9"   >          <a href="#第一次做-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-9" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;06</p>        <h4 id="第一次代码-9"   >          <a href="#第一次代码-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-9" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="comment">//先平方</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            nums[i]=nums[i]*nums[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nums.length;j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="type">int</span> temp=nums[i+<span class="number">1</span>];</span><br><span class="line">                nums[i+<span class="number">1</span>]=nums[i];</span><br><span class="line">                nums[i]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-8"   >          <a href="#提交成功-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-8" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>很显然这次是一个暴力解法，因为我有一点点不知道怎么用双指针来解这道题，并且还有一点很关键的是，暴力解法的暴力循环我用了最老套的双层嵌套，这是一个时间复杂度为O(n²)的方法</p>        <h3 id="题解-1"   >          <a href="#题解-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3>              <h4 id="思路"   >          <a href="#思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#思路" class="headerlink" title="思路"></a>思路</h4>      <p>依然是使用<strong>双指针</strong>的思想</p><p><strong>数组最左边或者最右边一定会产生最大的平方数</strong>，因此我们用两个指针一个指向最左边的一个指向最右边，然后来比较两者之间的最大值</p><p>然后将最大的写入新数组中，循环条件是左边的指针小于等于右边指针 (也就是左边指针不超过右边指针)，新数组用一个新的指针指向，并且要从后往前写这样保证了数据大的排在后面</p><p><strong>破局点</strong>：1.可以用新数组来承接老数组的数值，这样不会因为原地修改造成数据丢失</p><p>​2.老数组的两边一定会产生这个数组中最大的平方数</p><p>​3.新数组从后往前写保证了新数组的顺序</p>        <h4 id="代码"   >          <a href="#代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码" class="headerlink" title="代码"></a>代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">       <span class="comment">// 双指针</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//指向最左边</span></span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//指向最右边 </span></span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//新数组的索引下标，从后往前写</span></span><br><span class="line">        <span class="type">int</span> write=nums.length-<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//定义一个新数组</span></span><br><span class="line">        <span class="type">int</span>[] newArr=<span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//当左边指针不超过右边指针时候进入循环</span></span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            <span class="comment">//如果左边产生的平方数比右边的平方大 将左边的平方写入新数组中然后指针移动</span></span><br><span class="line">            <span class="keyword">if</span>(nums[low]*nums[low]&gt;nums[high]*nums[high])&#123;</span><br><span class="line">                newArr[write]=nums[low]*nums[low];</span><br><span class="line">                low++;</span><br><span class="line">                write--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//反之将右边的平方数写入数组中然后指针移动</span></span><br><span class="line">                newArr[write]=nums[high]*nums[high];</span><br><span class="line">                high--;</span><br><span class="line">                write--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newArr;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="图解-3"   >          <a href="#图解-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解-3" class="headerlink" title="图解"></a>图解</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230806111400239.png"  alt="977题双指针图解(1)">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230806111548953.png"  alt="977题双指针图解(2)">      </p>        <h1 id="有序数组的平方"   >          <a href="#有序数组的平方" class="heading-link"><i class="fas fa-link"></i></a><a href="#有序数组的平方" class="headerlink" title="有序数组的平方"></a>有序数组的平方</h1>      <p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。</p>        <h2 id="977-有序数组的平方-1"   >          <a href="#977-有序数组的平方-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#977-有序数组的平方-1" class="headerlink" title="977.有序数组的平方"></a>977.有序数组的平方</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/squares-of-a-sorted-array/" >Leetcode.977题(easy)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>有点扯，这道题明明昨天刚做过 3&gt;3 就当无事发生再重新做一遍吧</p>        <h3 id="代码-1"   >          <a href="#代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">    <span class="comment">//定义双指针 low指向老数组最左边 high指向老数组最右边 write指向新数组的写入位置，从后往前写所以指向最后</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> high=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> write=nums.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个新数组</span></span><br><span class="line">        <span class="type">int</span>[] newArr= <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当low不超过high的时候进行循环</span></span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">            <span class="comment">//左边的数平方比右边的数平方大</span></span><br><span class="line">            <span class="keyword">if</span>(nums[low]*nums[low]&gt;nums[high]*nums[high])&#123;</span><br><span class="line">                <span class="comment">//写入新数组中，low++,write--</span></span><br><span class="line">                newArr[write--]=nums[low]*nums[low];</span><br><span class="line">                low++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//反之右边的数的平方比左边的数大</span></span><br><span class="line">                <span class="comment">//写入新数组中，high--,write--</span></span><br><span class="line">                newArr[write--]=nums[high]*nums[high];</span><br><span class="line">                high--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//返回新数组</span></span><br><span class="line">        <span class="keyword">return</span> newArr;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="图解-4"   >          <a href="#图解-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解-4" class="headerlink" title="图解"></a>图解</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230806111400239.png"  alt="977题双指针图解(1)">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230806111548953.png"  alt="977题双指针图解(2)">      </p>        <h1 id="长度最小的子数组"   >          <a href="#长度最小的子数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#长度最小的子数组" class="headerlink" title="长度最小的子数组"></a>长度最小的子数组</h1>      <p>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0</p>        <h2 id="209-长度最小的子数组"   >          <a href="#209-长度最小的子数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#209-长度最小的子数组" class="headerlink" title="209.长度最小的子数组"></a>209.长度最小的子数组</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/minimum-size-subarray-sum/" >Leetcode.209题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><em>给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的 连续 子数组，并返回其长度。如果不存在符合条件的子数组，返回 0</em></p>        <h3 id="第一次做-10"   >          <a href="#第一次做-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-10" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;07</p>        <h4 id="第一次代码-10"   >          <a href="#第一次代码-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-10" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> temp=nums.length;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(;slow&lt;nums.length;slow++)&#123;</span><br><span class="line">            sum=<span class="number">0</span>;</span><br><span class="line">            count=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=slow;i&lt;nums.length;i++)&#123;</span><br><span class="line">                sum+=nums[i];</span><br><span class="line">                <span class="keyword">if</span>(sum&gt;=target)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    <span class="keyword">if</span>(temp&gt;=count)&#123;</span><br><span class="line">                        temp=count;</span><br><span class="line">                        flag=<span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-2"   >          <a href="#提交失败-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-2" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:输入396893380 超出时间限制</p>        <h5 id="原因-17"   >          <a href="#原因-17" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-17" class="headerlink" title="原因"></a>原因</h5>      <p>嵌套循环中每一次都需要从当前之后下一个元素开始，时间复杂度太高了，我在想是不是前N个才能sum&gt;&#x3D;target的情况下，那N-1个一定是sum&lt;target，我们只需要从第N+1个元素开始看下一次条件?</p>        <h4 id="第二次代码-7"   >          <a href="#第二次代码-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-7" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> temp=nums.length;</span><br><span class="line">        <span class="type">boolean</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(;slow&lt;nums.length;)&#123;</span><br><span class="line">            sum=<span class="number">0</span>;</span><br><span class="line">            count=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=slow;i&lt;nums.length;i++)&#123;</span><br><span class="line">                sum+=nums[i];</span><br><span class="line">                <span class="keyword">if</span>(sum&gt;=target)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    <span class="keyword">if</span>(temp&gt;=count)&#123;</span><br><span class="line">                        temp=count;</span><br><span class="line">                        flag=<span class="literal">true</span>;</span><br><span class="line">                        slow=i+<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-3"   >          <a href="#提交失败-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-3" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:输入11 [1,1,1,1,1,1,1,1] 超出时间限制</p>        <h5 id="原因-18"   >          <a href="#原因-18" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-18" class="headerlink" title="原因"></a>原因</h5>      <p>第二个循环才能导致外循环的slow更改数据，如果一直找不到最小的数组则陷入了死循环中</p>        <h4 id="第三次代码-6"   >          <a href="#第三次代码-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-6" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> slow=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> temp=nums.length;</span><br><span class="line">        <span class="type">boolean</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(;slow&lt;nums.length;slow++)&#123;</span><br><span class="line">            sum+=nums[slow];</span><br><span class="line">            count++;</span><br><span class="line">           <span class="keyword">if</span>(sum&gt;=target)&#123;</span><br><span class="line">               sum=<span class="number">0</span>;</span><br><span class="line">               <span class="keyword">if</span>(temp&gt;count)&#123;</span><br><span class="line">                   temp=count;</span><br><span class="line">                   count=<span class="number">0</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               flag=<span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-4"   >          <a href="#提交失败-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-4" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:输入 11 [1,2,3,4,5] 输出5 预期输出3</p>        <h5 id="原因-19"   >          <a href="#原因-19" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-19" class="headerlink" title="原因"></a>原因</h5>      <p>很显然是因为我第一次失败的错误思路，我假设前n个才能导致sum&gt;&#x3D;target，我认为n-1个时达不到sum&gt;&#x3D;target目标，所以我直接认为下一个子数组要从下一个也即n+1开始看</p><p>这道题我没能成功自己做出来</p>        <h3 id="题解-2"   >          <a href="#题解-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3>      <p>这道题还是用<strong>滑动窗口</strong>的思路，如果用暴力解法会时间超出限制，所以暴力法就不行了。然后双指针主要是如何更新起始位置的指针是这道题的关键，我第一次做的时候第三次代码用了相似的思路，但是我没能成功移动起始索引</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">//定义left和right指针 一个用于表示起始位置，一个用于表示终止位置</span></span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//定义sum用来比较数值，temp是用来记录最小长度的，temp的初始化只要比nums.length大就行</span></span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> temp=Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(;right&lt;nums.length;right++)&#123;</span><br><span class="line">            sum+=nums[right];</span><br><span class="line">            <span class="comment">//while循环来不断更新起始位置 ，当sum&lt;target中断循环说明启示位置更新到sum&lt;target的位置了</span></span><br><span class="line">            <span class="keyword">while</span>(sum&gt;=target)&#123;</span><br><span class="line">                <span class="comment">//获取数组最小长度  结束位置-起始位置+1是当前窗口的元素个数 </span></span><br><span class="line">                temp=Math.min(temp,right-left+<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//减去启示位置的元素值 用来更新起始位置</span></span><br><span class="line">                sum-=nums[left];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果temp和初始化长度一样则说明没有最小数组，反之说明找到了最小数组，返回最小数组长度</span></span><br><span class="line">        <span class="keyword">return</span> temp==Integer.MAX_VALUE? <span class="number">0</span> :temp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="总结-7"   >          <a href="#总结-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-7" class="headerlink" title="总结"></a>总结</h3>      <p><strong>滑动窗口的思想</strong>重点在于怎么来更新起始位置的指针，这里用while循环来保证【起始位置，终止位置】这段数组中sum&lt;target，如果用if来进行条件判断则不能保证这个【起始位置，终止位置】这个区间中sum&lt;target</p>        <h3 id="图解-5"   >          <a href="#图解-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解-5" class="headerlink" title="图解"></a>图解</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230807105205073.png"  alt="滑动窗口图解(1)">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230807105326262.png"  alt="滑动窗口图解(2)">      </p>        <h2 id="904-水果成篮"   >          <a href="#904-水果成篮" class="heading-link"><i class="fas fa-link"></i></a><a href="#904-水果成篮" class="headerlink" title="904.水果成篮"></a>904.水果成篮</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/fruit-into-baskets/" >Leetcode.904题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 fruits 表示，其中 fruits[i] 是第 i 棵树上的水果 种类 。</p><p>你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：</p><p>你只有 两个 篮子，并且每个篮子只能装 单一类型 的水果。每个篮子能够装的水果总量没有限制。<br>你可以选择任意一棵树开始采摘，你必须从 每棵 树（包括开始采摘的树）上 恰好摘一个水果 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。<br>一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。<br>给你一个整数数组 fruits ，返回你可以收集的水果的 最大 数目。</p>        <h3 id="第一次做-11"   >          <a href="#第一次做-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-11" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;07</p>        <h4 id="第一次代码-11"   >          <a href="#第一次代码-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-11" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">totalFruit</span><span class="params">(<span class="type">int</span>[] fruits)</span> &#123;</span><br><span class="line">        <span class="type">int</span> typeA=Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> typeB=Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(;right&lt;fruits.length;right++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(typeA==Integer.MAX_VALUE)&#123;</span><br><span class="line">                typeA=fruits[right];</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(typeA!=fruits[right]&amp;&amp;typeB==Integer.MAX_VALUE)&#123;</span><br><span class="line">                typeB=fruits[right];</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fruits[right]==typeA||fruits[right]==typeB)&#123;</span><br><span class="line">                 count++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(fruits[right]!=typeA&amp;&amp;fruits[right]!=typeB)&#123;</span><br><span class="line">                max= max&gt;count?max:count;</span><br><span class="line">                count=<span class="number">0</span>; </span><br><span class="line">                <span class="keyword">while</span>(fruits[left]==typeA)&#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">                typeA=typeB;</span><br><span class="line">                typeB=Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        max=max&gt;count?max:count;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-5"   >          <a href="#提交失败-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-5" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:输入[0,1,2,2] 输出2 ，预期输出3</p>        <h5 id="原因-20"   >          <a href="#原因-20" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-20" class="headerlink" title="原因"></a>原因</h5>      <p>因为把第三种水果判断的时候我将count置为0 但是实际上我还有一个篮子装有水果，我忽略了另一个篮子中的水果个数</p>        <h4 id="第二次代码-8"   >          <a href="#第二次代码-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-8" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">totalFruit</span><span class="params">(<span class="type">int</span>[] fruits)</span> &#123;</span><br><span class="line">        <span class="type">int</span> typeA=Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> typeB=Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> Acount=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> Bcount=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(;right&lt;fruits.length;right++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(typeA==Integer.MAX_VALUE)&#123;</span><br><span class="line">                typeA=fruits[right];</span><br><span class="line">                Acount++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(typeA!=fruits[right]&amp;&amp;typeB==Integer.MAX_VALUE)&#123;</span><br><span class="line">                typeB=fruits[right];</span><br><span class="line">                Bcount++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fruits[right]==typeA)&#123;</span><br><span class="line">                Acount++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fruits[right]==typeB)&#123;</span><br><span class="line">                Bcount++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(fruits[right]!=typeA&amp;&amp;fruits[right]!=typeB)&#123;</span><br><span class="line">                max= max&gt;(Acount+Bcount)?max:(Acount+Bcount);</span><br><span class="line">                Acount=Bcount;</span><br><span class="line">                Bcount=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(fruits[left]==typeA)&#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">                typeA=typeB;</span><br><span class="line">                typeB=fruits[right];</span><br><span class="line">                Bcount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         max= max&gt;(Acount+Bcount)?max:(Acount+Bcount);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-15"   >          <a href="#提交错误-15" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-15" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE:输入[1,0,1,4,1,4,1,2,3] 输出4 预期输出5</p>        <h5 id="原因-21"   >          <a href="#原因-21" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-21" class="headerlink" title="原因"></a>原因</h5>      <p>逻辑错了滑动窗口下一个位置应该是下一个元素前面一个类型的起始个数</p>        <h4 id="第三次代码-7"   >          <a href="#第三次代码-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-7" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">totalFruit</span><span class="params">(<span class="type">int</span>[] fruits)</span> &#123;</span><br><span class="line">       <span class="type">int</span> typeA=Integer.MAX_VALUE;</span><br><span class="line">       <span class="type">int</span> typeB=Integer.MAX_VALUE;</span><br><span class="line">       <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> Acount=<span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> Bcount=<span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span>(;right&lt;fruits.length;right++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(typeA==Integer.MAX_VALUE)&#123;</span><br><span class="line">               typeA=fruits[right];</span><br><span class="line">               Acount++;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(typeA!=fruits[right]&amp;&amp;typeB==Integer.MAX_VALUE)&#123;</span><br><span class="line">               typeB=fruits[right];</span><br><span class="line">               Bcount++;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(fruits[right]==typeA)&#123;</span><br><span class="line">               Acount++;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(fruits[right]==typeB)&#123;</span><br><span class="line">               Bcount++;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span>(fruits[right]!=typeA&amp;&amp;fruits[right]!=typeB)&#123;</span><br><span class="line">               max= max&gt; (Acount+Bcount)?max:(Acount+Bcount);</span><br><span class="line">               </span><br><span class="line">               <span class="keyword">if</span>(fruits[right-<span class="number">1</span>]==typeA)&#123;</span><br><span class="line">                   <span class="comment">//清空B篮子</span></span><br><span class="line">                   <span class="keyword">while</span>(Bcount!=<span class="number">0</span>)&#123;</span><br><span class="line">                       <span class="keyword">if</span>(fruits[left++]==typeB) Bcount--;</span><br><span class="line">                       <span class="keyword">else</span> Acount--;</span><br><span class="line">                   &#125;</span><br><span class="line">                  </span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span>(fruits[right-<span class="number">1</span>]==typeB)&#123;</span><br><span class="line">                   <span class="comment">//清空A篮子</span></span><br><span class="line">                   <span class="keyword">while</span>(Acount!=<span class="number">0</span>)&#123;</span><br><span class="line">                       <span class="keyword">if</span>(fruits[left++]==typeA) Acount--;</span><br><span class="line">                       <span class="keyword">else</span> Bcount--;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">//把B篮子给A篮子</span></span><br><span class="line">                   Acount=Bcount;</span><br><span class="line">                   typeA=typeB;</span><br><span class="line">                   Bcount=<span class="number">0</span>;</span><br><span class="line">               &#125;</span><br><span class="line">                typeB=fruits[right];</span><br><span class="line">                Bcount++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">         max= max&gt; (Acount+Bcount)?max:(Acount+Bcount);</span><br><span class="line">       <span class="keyword">return</span> max;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-9"   >          <a href="#提交成功-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-9" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>我把左右两个篮子的个数分开算，当碰到第三种水果的时候判断前一种水果是什么让他成为种类A，索引应该移动到连续的种类A的第一个，然后把第三种水果装成种类B的篮子中</p>        <h4 id="第四次代码-3"   >          <a href="#第四次代码-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四次代码-3" class="headerlink" title="第四次代码"></a>第四次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">totalFruit</span><span class="params">(<span class="type">int</span>[] fruits)</span> &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map= <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;right&lt;fruits.length;right++)&#123;</span><br><span class="line">            <span class="comment">//没有装满两种类型</span></span><br><span class="line">            <span class="keyword">if</span>(map.size()&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(fruits[right]))&#123;</span><br><span class="line">                    <span class="type">int</span> count=map.get(fruits[right]);</span><br><span class="line">                    map.put(fruits[right],++count);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    map.put(fruits[right],<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="keyword">if</span>(map.containsKey(fruits[right]))&#123;</span><br><span class="line">                     <span class="comment">//是两种之一</span></span><br><span class="line">                    <span class="type">int</span> count=map.get(fruits[right]);</span><br><span class="line">                    map.put(fruits[right],++count);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//第三种，需要清空其中一种</span></span><br><span class="line">                <span class="comment">//获取最长的长度</span></span><br><span class="line">                len=Math.max(len,right-left);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//最靠近第三种水果的第二种水果种类 nums[right-1] 我们这一步的目标是清空种类1 保留连续的第二种水果</span></span><br><span class="line">                </span><br><span class="line">                <span class="type">int</span> bCount=right-left-map.get(fruits[right-<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">while</span>(bCount!=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(fruits[left]==fruits[right-<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">int</span> count=map.get(fruits[right-<span class="number">1</span>]);</span><br><span class="line">                    map.put(fruits[right-<span class="number">1</span>],--count);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    map.put(fruits[left],--bCount);</span><br><span class="line">                    &#125;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//循环结束移除第一种水果</span></span><br><span class="line">                map.remove(fruits[left-<span class="number">1</span>]);</span><br><span class="line">                <span class="comment">//将第三种水果添加进篮子中</span></span><br><span class="line">                map.put(fruits[right],<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> len=Math.max(len,right-left);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-10"   >          <a href="#提交成功-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-10" class="headerlink" title="提交成功"></a>提交成功</h5>      <p>利用集合写的，没想到不仅是时间和空间都比第三次代码花的多</p>        <h3 id="总结-8"   >          <a href="#总结-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-8" class="headerlink" title="总结"></a>总结</h3>      <p>①利用<strong>滑动窗口</strong>的思想，用类型A和类型B代表两个篮子，同时用Acount和Bcount表示水果个数</p><p>②当碰到第三种水果的时候先判断上一个水果是类型A还是类型B 收集max &#x3D; MAX&gt;Acount+Bcount ? MAX ：Acount+ Bcount</p><p>③如果是类型A就把类型B的水果清空以及类型B以前的水果A要减去 如 0 1 0 1 0 0 3 要把倒数第二个0以前的0101都清空掉</p><p>④如果是类型B就把类型A的水果以及类型A以前的水果B都清空，然后将B水果放到A水果篮中，B个数为0</p><p>⑤把类型C放到类型B中，设置B果篮中的水果个数为1</p><p>⑥最后返回最大的水果个数</p>        <h2 id="76-最小覆盖子串"   >          <a href="#76-最小覆盖子串" class="heading-link"><i class="fas fa-link"></i></a><a href="#76-最小覆盖子串" class="headerlink" title="76.最小覆盖子串"></a>76.最小覆盖子串</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/minimum-window-substring/" >Leetcode.76题(hard)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>给你一个字符串 s、一个字符串 t 。返回 s 中涵盖 t 所有字符的最小子串。如果 s 中不存在涵盖 t 所有字符的子串，则返回空字符串 “” 。</p>        <h3 id="第一次做-12"   >          <a href="#第一次做-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-12" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;08</p>        <h4 id="第一次代码-12"   >          <a href="#第一次代码-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-12" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">minWindow</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>((t==<span class="literal">null</span> &amp;&amp; <span class="string">&quot;&quot;</span>.equals(t))||(s==<span class="literal">null</span> &amp;&amp; <span class="string">&quot;&quot;</span>.equals(s)))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span>[] arr=t.toCharArray();</span><br><span class="line">    Map&lt;Character,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    Map&lt;Character,Integer&gt; tempMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> a:arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(a))&#123;</span><br><span class="line">            <span class="comment">//如果包含</span></span><br><span class="line">            <span class="type">int</span> count=map.get(a);</span><br><span class="line">            map.put(a,++count);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.put(a,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tempMap=map;</span><br><span class="line">    <span class="type">char</span>[] sArr=s.toCharArray();</span><br><span class="line"></span><br><span class="line">    List&lt;Character&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="type">int</span> count=arr.length;</span><br><span class="line">    <span class="type">int</span> sCount=<span class="number">0</span>;</span><br><span class="line">    String result=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> max=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;right&lt;sArr.length;right++)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(tempMap.containsKey(sArr[right]))&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> temp=tempMap.get(sArr[right]);</span><br><span class="line">            temp--;</span><br><span class="line">            <span class="keyword">if</span>(temp==<span class="number">0</span>)&#123;</span><br><span class="line">                tempMap.remove(sArr[right]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                tempMap.put(sArr[right],temp);</span><br><span class="line">            &#125;</span><br><span class="line">            sCount++;</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(sArr[right]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(sCount==count)&#123;</span><br><span class="line">            max= max&gt;list.toString().length()? max: list.toString().length();</span><br><span class="line">            result= list.toString().length()&gt;=max? list.toString():result;</span><br><span class="line">            <span class="keyword">if</span>(tempMap.containsKey(sArr[left]))&#123;</span><br><span class="line">            </span><br><span class="line">                <span class="type">int</span> temp=tempMap.get(sArr[left]);</span><br><span class="line">                    tempMap.put(sArr[left],++temp);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    tempMap.put(sArr[left],<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            sCount--;</span><br><span class="line">            list.remove(left);</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-16"   >          <a href="#提交错误-16" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-16" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE: s:”ADOBECODEBANC” t:”ABC”,输出”[D, O, B, E, C, O, D, E, B, A]”。预期输出”BANC”</p>        <h5 id="原因-22"   >          <a href="#原因-22" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-22" class="headerlink" title="原因"></a>原因</h5>      <p>挺搞的一开始，我返回的是最长的字符串max&#x3D; max&gt;list.toString().length()? max: list.toString().length(); 其次输出的数组不是一个字符串所以我还要把这个数组变成字符串</p>        <h4 id="第二次代码-9"   >          <a href="#第二次代码-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-9" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">minWindow</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>((t==<span class="literal">null</span> &amp;&amp; <span class="string">&quot;&quot;</span>.equals(t))||(s==<span class="literal">null</span> &amp;&amp; <span class="string">&quot;&quot;</span>.equals(s)))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] arr=t.toCharArray();</span><br><span class="line">        Map&lt;Character,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Character,Integer&gt; tempMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> a:arr)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(a))&#123;</span><br><span class="line">                <span class="comment">//如果包含</span></span><br><span class="line">                <span class="type">int</span> count=map.get(a);</span><br><span class="line">                map.put(a,++count);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(a,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tempMap=map;</span><br><span class="line">        <span class="type">char</span>[] sArr=s.toCharArray();</span><br><span class="line"></span><br><span class="line">        List&lt;Character&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="type">int</span> count=arr.length;</span><br><span class="line">        <span class="type">int</span> sCount=<span class="number">0</span>;</span><br><span class="line">        String result=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(;right&lt;sArr.length;right++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(tempMap.containsKey(sArr[right]))&#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> temp=tempMap.get(sArr[right]);</span><br><span class="line">                temp--;</span><br><span class="line">                <span class="keyword">if</span>(temp==<span class="number">0</span>)&#123;</span><br><span class="line">                    tempMap.remove(sArr[right]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    tempMap.put(sArr[right],temp);</span><br><span class="line">                &#125;</span><br><span class="line">                sCount++;</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(sArr[right]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(sCount==count)&#123;</span><br><span class="line">                min=min&gt;list.toString().length()?list.toString().length():min;</span><br><span class="line">                result=list.toString().length()&lt;=min? Arrays.toString(list.toArray()) :result;</span><br><span class="line">                <span class="keyword">if</span>(tempMap.containsKey(sArr[left]))&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="type">int</span> temp=tempMap.get(sArr[left]);</span><br><span class="line">                    tempMap.put(sArr[left],++temp);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    tempMap.put(sArr[left],<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                sCount--;</span><br><span class="line">                list.remove(left);</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-6"   >          <a href="#提交失败-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-6" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE: s:”ADOBECODEBANC” t:”ABC”,输出”[A,D,O,B,E,C]”。预期输出”BANC”</p>        <h5 id="原因-23"   >          <a href="#原因-23" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-23" class="headerlink" title="原因"></a>原因</h5>      <p>1.我还是没有解决数组变成字符串的问题</p><p>2.因为下标移动的时候没有从A移动到B，那么导致了list中存在DOBE…. 每次只删除了一个元素</p>        <h4 id="第三次代码-8"   >          <a href="#第三次代码-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-8" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">minWindow</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>((t==<span class="literal">null</span> &amp;&amp; <span class="string">&quot;&quot;</span>.equals(t))||(s==<span class="literal">null</span> &amp;&amp; <span class="string">&quot;&quot;</span>.equals(s)))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] arr=t.toCharArray();</span><br><span class="line">        Map&lt;Character,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Character,Integer&gt; tempMap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> a:arr)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(a))&#123;</span><br><span class="line">                <span class="comment">//如果包含</span></span><br><span class="line">                <span class="type">int</span> count=map.get(a);</span><br><span class="line">                map.put(a,++count);</span><br><span class="line">                tempMap.put(a,++count);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(a,<span class="number">1</span>);</span><br><span class="line">                tempMap.put(a,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] sArr=s.toCharArray();</span><br><span class="line"></span><br><span class="line">        LinkedList&lt;Character&gt; list=<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> count=arr.length;</span><br><span class="line">        <span class="type">int</span> sCount=<span class="number">0</span>;</span><br><span class="line">        String result=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(;right&lt;sArr.length;right++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(sArr[right]))&#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> temp=map.get(sArr[right]);</span><br><span class="line">                temp--;</span><br><span class="line">                <span class="keyword">if</span>(temp==<span class="number">0</span>)&#123;</span><br><span class="line">                    tempMap.remove(sArr[right]);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    tempMap.put(sArr[right],temp);</span><br><span class="line">                &#125;</span><br><span class="line">                sCount++;</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(sArr[right]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(sCount&gt;=count)&#123;</span><br><span class="line">                min=min&gt;list.toArray().length?list.toArray().length:min;</span><br><span class="line">                result=list.toArray().length&lt;=min? Arrays.toString(list.toArray()) :result;</span><br><span class="line">                <span class="keyword">while</span>(tempMap.size()&lt;=<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (map.containsKey(sArr[left])) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(tempMap.containsKey(sArr[left]))&#123;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> tempMap.get(sArr[left]);</span><br><span class="line">                            tempMap.put(sArr[left], ++temp);</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            tempMap.put(sArr[left], <span class="number">1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (tempMap.size() == <span class="number">2</span>) &#123;</span><br><span class="line">                        sCount--;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    list.removeFirst();</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-7"   >          <a href="#提交失败-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-7" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE: s:”ADOBECODEBANC” t:”ABC”,输出”[A,D,O,B,E,C]”。预期输出”BANC”</p>        <h5 id="原因-24"   >          <a href="#原因-24" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-24" class="headerlink" title="原因"></a>原因</h5>      <p>我没能找到正确的索引下标移动，我中期一度卡在删除list元素中，然后发现删除的顺序和我插入元素的顺序不太一样？我后面用了removeFirst方法来删除第一个元素</p>        <h4 id="第四次代码-4"   >          <a href="#第四次代码-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四次代码-4" class="headerlink" title="第四次代码"></a>第四次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">minWindow</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输入判断</span></span><br><span class="line">        <span class="keyword">if</span>(s==<span class="literal">null</span>||<span class="string">&quot;&quot;</span>.equals(s) ||t==<span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(t))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] sArr= s.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] tArr= t.toCharArray();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//利用一个哈希map来记录目标子串的种类以及每个种类出现的次数</span></span><br><span class="line">        HashMap&lt;Character,Integer&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : tArr)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(c))&#123;</span><br><span class="line">                <span class="comment">//如果是重复的字符 则添加个数</span></span><br><span class="line">                <span class="type">int</span> count=map.get(c);</span><br><span class="line">                map.put(c,++count);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//是第一次的字符则放入 Key=c ,Value=1</span></span><br><span class="line">                map.put(c,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用来记录一共有多少个目标子串</span></span><br><span class="line">        <span class="type">int</span> Type=map.size();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//滑动指针的双指针 </span></span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//用一个getCount来代表滑动窗口中已经有的种类个数</span></span><br><span class="line">        <span class="type">int</span> getCount=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//定义一个哈希map来承接出现的子串以及子串个数</span></span><br><span class="line">        HashMap&lt;Character,Integer&gt; hsmap=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line">        String result=<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> hscount=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;right&lt;sArr.length;right++)&#123;</span><br><span class="line">            <span class="comment">//判断当前字符是不是在对照表map中</span></span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(sArr[right]))&#123;</span><br><span class="line">                <span class="comment">//放入htmap中</span></span><br><span class="line">                <span class="keyword">if</span>(hsmap.containsKey(sArr[right]))&#123;</span><br><span class="line">                    <span class="comment">//如果有则更新个数</span></span><br><span class="line">                    <span class="type">int</span> count=hsmap.get(sArr[right]);</span><br><span class="line">                    hsmap.put(sArr[right],++count);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//没有则不更新htmap中个数，但是更新种类个数</span></span><br><span class="line">                    hsmap.put(sArr[right],<span class="number">1</span>);</span><br><span class="line">                    getCount++;</span><br><span class="line">                &#125;</span><br><span class="line">                hscount++;</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="keyword">while</span>(getCount==Type)&#123;</span><br><span class="line">                <span class="comment">//如果getCount==Type相等则说明滑动窗口已经覆盖了最小子串,移动左指针减去冗余个数</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//如果这个元素是在t表中有的判断是否有冗余出现</span></span><br><span class="line">                <span class="keyword">if</span>(hsmap.containsKey(sArr[left]))&#123;</span><br><span class="line">                    <span class="comment">//如果left索引位置的元素在hsmap中的个数大于map中的个数说明多于了</span></span><br><span class="line">                    <span class="type">int</span> count=hsmap.get(sArr[left]);</span><br><span class="line">                    <span class="keyword">if</span>(hsmap.get(sArr[left])&gt;map.get(sArr[left]))&#123;</span><br><span class="line">                        count--;</span><br><span class="line">                        hsmap.put(sArr[left],count);</span><br><span class="line">                        left++;</span><br><span class="line">                        hscount--;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(count==map.get(sArr[left])) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(hscount&gt;=tArr.length)&#123;</span><br><span class="line">                            min = min &gt; (right - left + <span class="number">1</span>) ? right - left + <span class="number">1</span> : min;</span><br><span class="line">                            result = min &gt;= (right - left + <span class="number">1</span>) ? s.substring(left, right + <span class="number">1</span>) : result;</span><br><span class="line">                            <span class="keyword">if</span>(count==<span class="number">1</span>)&#123;</span><br><span class="line">                                hsmap.remove(sArr[left]);</span><br><span class="line">                                getCount--;</span><br><span class="line">                                left++;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            count--;</span><br><span class="line">                            hsmap.put(sArr[left],count);</span><br><span class="line">                            hscount--;</span><br><span class="line">                            left++;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(count&lt;map.get(sArr[left]))&#123;</span><br><span class="line">                        <span class="comment">//说明不符合规定,应该移动右指针</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//反之不在要求中的数据</span></span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交错误-17"   >          <a href="#提交错误-17" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交错误-17" class="headerlink" title="提交错误"></a>提交错误</h5>      <p>CASE：s:”aaaaaaaaaaaabbbbbcdd” t:”abcdd” 输出abbbbbcd 预期输出abbbbbcdd</p>        <h5 id="原因-25"   >          <a href="#原因-25" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-25" class="headerlink" title="原因"></a>原因</h5>      <p>这里我还是看过视频之后写的，然后写了一两个小时改改停停还是改不出来，后面再看看其他用hashmap写的才知道自己哪里做错了</p><p>我这里Type就是当<strong>新的进来就直接认为是找到子串了实际上是不对的，要先类型有也要数量有</strong></p>        <h3 id="题解-3"   >          <a href="#题解-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3>      <p><strong>代码</strong></p><p>这里还是用了<strong>双指针</strong>的<strong>滑动窗口</strong>思想</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">minWindow</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="comment">//最小子串起始索引</span></span><br><span class="line">        <span class="type">int</span> start=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//最小子串长度</span></span><br><span class="line">        <span class="type">int</span> min=Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//双指针</span></span><br><span class="line">        <span class="type">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> right=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这是目标t中需要的字符串种类以及个数</span></span><br><span class="line">        Map&lt;Character,Integer&gt; needs=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//这是滑动窗口用的hsmap</span></span><br><span class="line">        Map&lt;Character,Integer&gt; windows=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历t数组给needs赋值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> ch:t.toCharArray())&#123;</span><br><span class="line">            needs.put(ch,needs.getOrDefault(ch,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用于记录符合个数且类型的个数</span></span><br><span class="line">        <span class="type">int</span> match=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//循环开始找子串</span></span><br><span class="line">        <span class="keyword">while</span>(right&lt;s.length())&#123;</span><br><span class="line">            <span class="comment">//先获取当前right位置的字符</span></span><br><span class="line">            <span class="type">char</span> c1=s.charAt(right);</span><br><span class="line">            <span class="comment">//判断needs中是否包含c1这个字符串,如果是说明是我们需要的</span></span><br><span class="line">            <span class="keyword">if</span>(needs.containsKey(c1))&#123;</span><br><span class="line">                <span class="comment">//needs中包含c1这个字符串</span></span><br><span class="line">                <span class="comment">//将其放入滑动窗口中 相同则累加个数</span></span><br><span class="line">                windows.put(c1,windows.getOrDefault(c1,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 判断滑动窗口中个数是否达到要求个数</span></span><br><span class="line">                <span class="keyword">if</span>(windows.get(c1).equals(needs.get(c1)))&#123;</span><br><span class="line">                    <span class="comment">//达到了则match++;</span></span><br><span class="line">                    match++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//右指针向右移动</span></span><br><span class="line">            right++;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 内循环用于滑动左指针 ,count等于needs.size说明每个都符合条件了</span></span><br><span class="line">            <span class="keyword">while</span>(match==needs.size())&#123;</span><br><span class="line">                <span class="comment">// //记录当前的字符串长度</span></span><br><span class="line">                <span class="comment">// min= min&gt;=(right-left) ? right-left : min;</span></span><br><span class="line">                <span class="comment">// //记录最小子串的起始位置</span></span><br><span class="line">                <span class="comment">// start=(right-left)&lt;=min? left:start;</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(right-left&lt;min)&#123;</span><br><span class="line">                    min=right-left;</span><br><span class="line">                    start=left;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//滑动左指针</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//先获取当前left对应的字符</span></span><br><span class="line">                <span class="type">char</span> c2=s.charAt(left);</span><br><span class="line">                <span class="comment">//判断这个字符串是不是needs中的</span></span><br><span class="line">                <span class="keyword">if</span>(needs.containsKey(c2))&#123;</span><br><span class="line">                    <span class="comment">//将滑动窗口中的子串向右移动</span></span><br><span class="line">                    windows.put(c2,windows.get(c2)-<span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//计数器--</span></span><br><span class="line">                    <span class="keyword">if</span>(windows.get(c2)&lt;needs.get(c2))&#123;</span><br><span class="line">                        match--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//左指针向右移动</span></span><br><span class="line">                left++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min==Integer.MAX_VALUE? <span class="string">&quot;&quot;</span>: s.substring(start,start+min);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="总结-9"   >          <a href="#总结-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-9" class="headerlink" title="总结"></a>总结</h3>      <p>这个题不愧是hard难度我只能说，从第一波自己写写了快两小时但是还是频繁出错，然后看官方答案我看不懂但是大概知道了思路，然后我想用hashmap把它写出来 一写就勾八写了一个多小时还没做错了 大概测试用例还有40多道，然后我去b站看了好几个视频，有C++的有Go的还有Java的 总算是差不多把自己心中想的和看得懂的写出来了，这道题真得多练练，不练真不会做</p>        <h3 id="踩坑点"   >          <a href="#踩坑点" class="heading-link"><i class="fas fa-link"></i></a><a href="#踩坑点" class="headerlink" title="踩坑点"></a>踩坑点</h3>      <p>①这个match值应该是<strong>种类要相同并且个数相同</strong>才能++，我自己做就因为种类相同就认为找到了最小子串</p><p>②<strong>windows.get(c1).equals(needs.get(c1))<strong>，这里不能写成windos(get(c1))&#x3D;&#x3D;windos(get(c2))。因为这里get出来的值是Integet类型，底部有-128，127的缓存数组，但是超过这个返回会new一个对象，所以</strong>&#x3D;&#x3D;比较的时候会比较地址值而不是比较数值</strong>测试用例不通过，得用equals方法才能测试通过</p>        <h1 id="螺旋矩阵II"   >          <a href="#螺旋矩阵II" class="heading-link"><i class="fas fa-link"></i></a><a href="#螺旋矩阵II" class="headerlink" title="螺旋矩阵II"></a>螺旋矩阵II</h1>      <p>给定一个正整数 n，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。</p>        <h2 id="59-螺旋矩阵-II"   >          <a href="#59-螺旋矩阵-II" class="heading-link"><i class="fas fa-link"></i></a><a href="#59-螺旋矩阵-II" class="headerlink" title="59.螺旋矩阵 II"></a>59.螺旋矩阵 II</h2>      <p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/spiral-matrix-ii/" >leetCode.59题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>给定一个正整数 n，生成一个包含 1 到 n^2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。</p>        <h3 id="第一次做-13"   >          <a href="#第一次做-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-13" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;08</p>        <h4 id="第一次代码-13"   >          <a href="#第一次代码-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-13" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">public int[][] generateMatrix(int n) &#123;</span><br><span class="line">        int number=1;</span><br><span class="line"></span><br><span class="line">        int[][] arr=new int[n][n];</span><br><span class="line">        int iIndex=0;</span><br><span class="line">        int jIndex=0;</span><br><span class="line">        </span><br><span class="line">            for(int i=0,j=0;i&lt;n/2;)&#123;</span><br><span class="line">                    i=iIndex++;</span><br><span class="line">                    j=jIndex++;</span><br><span class="line">                FullArr(number,iIndex,jIndex,n,arr,i,j);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            if(n%2==1)&#123;</span><br><span class="line">                arr[iIndex][jIndex]=n*n;</span><br><span class="line">            &#125;</span><br><span class="line">        return arr;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    public void FullArr(int number,int iIndex,int jIndex,int n,int[][] arr,int i,int j)&#123;</span><br><span class="line">        //填完第一行</span><br><span class="line">            if(i==iIndex)&#123;</span><br><span class="line">                for(;j&lt;n-jIndex;j++)&#123;</span><br><span class="line">                    arr[i][j]=number++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //循环结束后i==0;j==n</span><br><span class="line">            if(j==n-jIndex)&#123;</span><br><span class="line">                for(;++i&lt;n-iIndex;)&#123;</span><br><span class="line">                    arr[i][j]=number++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //填完最后一列</span><br><span class="line">            //循环结束后i==j==n</span><br><span class="line">            if(i==n-iIndex)&#123;</span><br><span class="line">                j--;</span><br><span class="line">                for(;--j&gt;=jIndex;)&#123;</span><br><span class="line">                    arr[i-1][j]=number++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //填完最后一行</span><br><span class="line">            //循环结束后i==n,j==-1</span><br><span class="line">            if(j==jIndex)&#123;</span><br><span class="line">                i--;</span><br><span class="line">                for(;--i&gt;iIndex;)&#123;</span><br><span class="line">                    arr[i][jIndex]=number++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            //循环完i==0,j==-1</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-8"   >          <a href="#提交失败-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-8" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">3</span></span><br><span class="line">输出：[[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">0</span>,<span class="number">9</span>]]</span><br><span class="line">预期结果:[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>],[<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>]]</span><br></pre></td></tr></table></div></figure>        <h5 id="原因-26"   >          <a href="#原因-26" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-26" class="headerlink" title="原因"></a>原因</h5>      <p>填外圈的时候先进行了iIndex和jindex++导致没有填到数据 而且因为这是第一次写的逻辑可能有点乱。填完外圈有点找不到iIndex和jIndex指向哪里</p>        <h4 id="第二次代码-10"   >          <a href="#第二次代码-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-10" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span> number=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[][] arr=<span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="type">int</span> iIndex=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> jIndex=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;)&#123;</span><br><span class="line">                number=FullArr(number,iIndex,jIndex,n,arr,i,j);</span><br><span class="line">                    i= ++iIndex;</span><br><span class="line">                    j= ++jIndex;    </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                arr[iIndex][jIndex]=n*n;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">FullArr</span><span class="params">(<span class="type">int</span> number,<span class="type">int</span> iIndex,<span class="type">int</span> jIndex,<span class="type">int</span> n,<span class="type">int</span>[][] arr,<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        <span class="comment">//填完第一行</span></span><br><span class="line">            <span class="keyword">if</span>(i==iIndex)&#123;</span><br><span class="line">                <span class="keyword">for</span>(;j&lt;n-jIndex;j++)&#123;</span><br><span class="line">                    arr[i][j]=number++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//循环结束后i==0;j==n</span></span><br><span class="line">            <span class="keyword">if</span>(j==n-jIndex)&#123;</span><br><span class="line">                <span class="keyword">for</span>(;++i&lt;n-iIndex;)&#123;</span><br><span class="line">                    arr[i][j-<span class="number">1</span>]=number++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//填完最后一列</span></span><br><span class="line">            <span class="comment">//循环结束后i==j==n</span></span><br><span class="line">            <span class="keyword">if</span>(i==n-iIndex)&#123;</span><br><span class="line">                j--;</span><br><span class="line">                <span class="keyword">for</span>(;--j&gt;=jIndex;)&#123;</span><br><span class="line">                    arr[i-<span class="number">1</span>][j]=number++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//填完最后一行</span></span><br><span class="line">            <span class="comment">//循环结束后i==n,j==-1</span></span><br><span class="line">            <span class="keyword">if</span>(j==jIndex-<span class="number">1</span>)&#123;</span><br><span class="line">                i--;</span><br><span class="line">                <span class="keyword">for</span>(;--i&gt;iIndex;)&#123;</span><br><span class="line">                    arr[i][jIndex]=number++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//循环完i==0,j==-1</span></span><br><span class="line">            <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-11"   >          <a href="#提交成功-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-11" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="题解-4"   >          <a href="#题解-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3>      <p>从视频说这道题其实不涉及到算法，它只是一个模拟的转圈的过程，我们要遵循一个边界处理的不变量，这样才不会导致饶进循环里绕晕</p><p><strong>边界处理</strong></p><p>边界处理如果是左闭右开区间 那么每一条边都应该是左闭右开区间 也即每一条边只给左节点赋值右节点交给下一条边赋值</p><p><strong>代码</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个变量用于赋值</span></span><br><span class="line">        <span class="type">int</span> number=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//定义startx和starty作为每次绕圈赋值的起始坐标</span></span><br><span class="line">        <span class="type">int</span> startx=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> starty=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个二维数组</span></span><br><span class="line">        <span class="type">int</span>[][] arr=<span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="comment">//定义一个变量用于维护边界处理的逻辑</span></span><br><span class="line">        <span class="type">int</span> offset=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//进行循环将圈赋值,循环结束条件由要转几圈来决定</span></span><br><span class="line">        <span class="comment">//如果n==3 则需要转一圈，n==4，则需要转两圈</span></span><br><span class="line">        <span class="comment">//如果n是奇数那么会留下中心的值没有赋值</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">            假设n==3 那么这个循环结束arr会是</span></span><br><span class="line"><span class="comment">            1 2 3</span></span><br><span class="line"><span class="comment">            8 0 4</span></span><br><span class="line"><span class="comment">            7 6 5</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> count=<span class="number">0</span>;count&lt;n/<span class="number">2</span>;count++)&#123;</span><br><span class="line">            <span class="type">int</span> i=startx;</span><br><span class="line">            <span class="type">int</span> j=starty;</span><br><span class="line">            <span class="comment">//处理第一条边(上边) 遵循左闭右开原则 那么范围应该是[startx,n-offset)</span></span><br><span class="line">            <span class="keyword">for</span>(;j&lt;n-offset;j++) arr[startx][j]=number++;</span><br><span class="line">            <span class="comment">//处理第二条边(右边)</span></span><br><span class="line">            <span class="keyword">for</span>(;i&lt;n-offset;i++) arr[i][j]=number++;</span><br><span class="line">            <span class="comment">//处理第三条边(下边)</span></span><br><span class="line">            <span class="keyword">for</span>(;j&gt;starty;j--) arr[i][j]=number++;</span><br><span class="line">            <span class="comment">//处理第四条边(左边)</span></span><br><span class="line">            <span class="keyword">for</span>(;i&gt;startx;i--) arr[i][starty]=number++;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//每条边都处理完了要给起始位置移动到下一圈的开头</span></span><br><span class="line">            startx++;</span><br><span class="line">            starty++;</span><br><span class="line">            <span class="comment">//移动边界处理的数 下一次要范围更小</span></span><br><span class="line">            offset++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断n是否是奇数</span></span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//给中心值赋值</span></span><br><span class="line">            arr[startx][starty]=number;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="总结-10"   >          <a href="#总结-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-10" class="headerlink" title="总结"></a>总结</h3>      <p>这道题要耐着性子做，不能急 他主要就是一个模仿转圈的一个过程，我们只要做好边界处理，遵循一个相同的边界处理逻辑就不容易搞错</p><p>总之这道题还是不难的主要是一个逻辑的问题</p>        <h2 id="54-螺旋矩阵"   >          <a href="#54-螺旋矩阵" class="heading-link"><i class="fas fa-link"></i></a><a href="#54-螺旋矩阵" class="headerlink" title="54.螺旋矩阵"></a>54.螺旋矩阵</h2>      <p>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵 <code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong> ，返回矩阵中的所有元素。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/spiral-matrix/" >Leetcode.54题(medium)</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-14"   >          <a href="#第一次做-14" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-14" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;08&#x2F;09</p>        <h4 id="第一次代码-14"   >          <a href="#第一次代码-14" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-14" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">spiralOrder</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先获取二维数组的M和N</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> m=matrix.length;</span><br><span class="line">        <span class="type">int</span> n=matrix[<span class="number">0</span>].length;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> min= m&lt;=n? m:n;</span><br><span class="line">        <span class="comment">//定义一维数组用于返回数据</span></span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义每一次循环的起始点</span></span><br><span class="line">        <span class="type">int</span> startx=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> starty=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> offset=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// int number=0;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(count&lt;min/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="type">int</span> i=startx;</span><br><span class="line">            <span class="type">int</span> j=starty;</span><br><span class="line">            <span class="comment">//遍历第一条边 左闭右开</span></span><br><span class="line">            <span class="keyword">for</span>(;j&lt;n-offset;j++)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历第二条边</span></span><br><span class="line">            <span class="keyword">for</span>(;i&lt;m-offset;i++)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历第三条边</span></span><br><span class="line">            <span class="keyword">for</span>(;j&gt;starty;j--)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历第四条边</span></span><br><span class="line">            <span class="keyword">for</span>(;i&gt;startx;i--)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历完了 偏移量和下一次起始位置++</span></span><br><span class="line">            offset++;</span><br><span class="line">            startx++;</span><br><span class="line">            starty++;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历结束如果m&lt;n则会有一条边未填入到数据中</span></span><br><span class="line">        <span class="keyword">if</span>(m&lt;n)&#123;</span><br><span class="line">            <span class="type">int</span> i=startx;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=starty;j&lt;=n-offset;j++)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m&gt;n)&#123;</span><br><span class="line">            <span class="comment">//如果m&gt;n会有一列没有遍历</span></span><br><span class="line">            <span class="type">int</span> i=startx;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=starty;i&lt;=m-offset;i++)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m==n&amp;&amp; m%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            list.add(matrix[startx][starty]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-9"   >          <a href="#提交失败-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-9" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE：输入[[2,5],[8,4],[0,-1]]  输出[2,5,4,-1,0,8,4] 预期输出[2,5,4,-1,0,8]</p>        <h5 id="原因-27"   >          <a href="#原因-27" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-27" class="headerlink" title="原因"></a>原因</h5>      <p>无论如何如果二维数组个的i或者j为2的时候只要做一次循环就把数据添加完了而不用后面再做添加数据的判断</p><p>同时这还出现一个问题就是m&#x3D;&#x3D;1 || n&#x3D;&#x3D;1 以及 m&#x3D;&#x3D;n &amp;&amp; m&#x3D;&#x3D;1的情况</p>        <h4 id="第二次代码-11"   >          <a href="#第二次代码-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-11" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">spiralOrder</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">      <span class="comment">//先获取二维数组的M和N</span></span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> m=matrix.length;</span><br><span class="line">      <span class="type">int</span> n=matrix[<span class="number">0</span>].length;</span><br><span class="line">      <span class="keyword">if</span>(m==n&amp;&amp; m==<span class="number">1</span>)&#123;</span><br><span class="line">          List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">          list.add(matrix[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">          <span class="keyword">return</span> list;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="type">int</span> min= m&lt;=n? m:n;</span><br><span class="line">      <span class="comment">//定义一维数组用于返回数据</span></span><br><span class="line">      <span class="comment">// int[] result=new int[m*n];</span></span><br><span class="line">      List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//定义每一次循环的起始点</span></span><br><span class="line">      <span class="type">int</span> startx=<span class="number">0</span>;</span><br><span class="line">      <span class="type">int</span> starty=<span class="number">0</span>;</span><br><span class="line">      <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> offset=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// int number=0;</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(count&lt;min/<span class="number">2</span>)&#123;</span><br><span class="line">          <span class="type">int</span> i=startx;</span><br><span class="line">          <span class="type">int</span> j=starty;</span><br><span class="line">          <span class="comment">//遍历第一条边 左闭右开</span></span><br><span class="line">          <span class="keyword">for</span>(;j&lt;n-offset;j++)&#123;</span><br><span class="line">              <span class="comment">// result[number++]=matrix[i][j];</span></span><br><span class="line">              list.add(matrix[i][j]);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//遍历第二条边</span></span><br><span class="line">          <span class="keyword">for</span>(;i&lt;m-offset;i++)&#123;</span><br><span class="line">              <span class="comment">// result[number++]=matrix[i][j];</span></span><br><span class="line">              list.add(matrix[i][j]);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//遍历第三条边</span></span><br><span class="line">          <span class="keyword">for</span>(;j&gt;starty;j--)&#123;</span><br><span class="line">              <span class="comment">// result[number++]=matrix[i][j];</span></span><br><span class="line">              list.add(matrix[i][j]);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//遍历第四条边</span></span><br><span class="line">          <span class="keyword">for</span>(;i&gt;startx;i--)&#123;</span><br><span class="line">              <span class="comment">// result[number++]=matrix[i][j];</span></span><br><span class="line">              list.add(matrix[i][j]);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//遍历完了 偏移量和下一次起始位置++</span></span><br><span class="line">          offset++;</span><br><span class="line">          startx++;</span><br><span class="line">          starty++;</span><br><span class="line">          count++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(m==<span class="number">1</span>)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">              list.add(matrix[<span class="number">0</span>][i]);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">              list.add(matrix[i][<span class="number">0</span>]);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(m&lt;=<span class="number">2</span>||n&lt;=<span class="number">2</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> list;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//遍历结束如果m&lt;n则会有一条边未填入到数据中</span></span><br><span class="line">      <span class="keyword">if</span>(m&lt;n)&#123;</span><br><span class="line">          <span class="type">int</span> i=startx;</span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> j=starty;j&lt;=n-offset;j++)&#123;</span><br><span class="line">              <span class="comment">// result[number++]=matrix[i][j];</span></span><br><span class="line">              list.add(matrix[i][j]);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m&gt;n)&#123;</span><br><span class="line">          <span class="comment">//如果m&gt;n会有一列没有遍历</span></span><br><span class="line">          <span class="type">int</span> i=startx;</span><br><span class="line">          <span class="keyword">for</span>(<span class="type">int</span> j=starty;i&lt;=m-offset;i++)&#123;</span><br><span class="line">              <span class="comment">// result[number++]=matrix[i][j];</span></span><br><span class="line">              list.add(matrix[i][j]);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m==n&amp;&amp; min%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">          list.add(matrix[startx][starty]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-10"   >          <a href="#提交失败-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-10" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE:输入[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16],[17,18,19,20]]</p><p>​  输出[1,2,3,4,8,12,16,20,19,18,17,13,9,5,6,7,11,15,14,10,11]</p><p>  预期输出[[1,2,3,4,8,12,16,20,19,18,17,13,9,5,6,7,11,15,14,10]]</p>        <h5 id="原因-28"   >          <a href="#原因-28" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-28" class="headerlink" title="原因"></a>原因</h5>      <p>我太自以为是了，实际上这个两层循环结束数据就已经添加成功了，我决定修改最后再添加数据的逻辑</p><p>如果m！&#x3D;n &amp;&amp;min %2&#x3D;&#x3D;1 也就是一定有个奇数</p><p>如果m&#x3D;&#x3D;min 那么就说明循环结束还有一行数据没有添加</p><p>如果n&#x3D;&#x3D;min 那么久说明循环结束还有一列数据没有添加</p><p>如果m&#x3D;&#x3D;n &amp;&amp;min%2&#x3D;&#x3D;1 那么就说明循环结束最中间的数据没有添加进list中</p>        <h4 id="第三次代码-9"   >          <a href="#第三次代码-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次代码-9" class="headerlink" title="第三次代码"></a>第三次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">spiralOrder</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="comment">//先获取二维数组的M和N</span></span><br><span class="line">        <span class="type">int</span> m=matrix.length;</span><br><span class="line">        <span class="type">int</span> n=matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">if</span>(m==n&amp;&amp; m==<span class="number">1</span>)&#123;</span><br><span class="line">            List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            list.add(matrix[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> min= m&lt;=n? m:n;</span><br><span class="line">        <span class="comment">//定义一维数组用于返回数据</span></span><br><span class="line">        List&lt;Integer&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义每一次循环的起始点</span></span><br><span class="line">        <span class="type">int</span> startx=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> starty=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> offset=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(count&lt;min/<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="type">int</span> i=startx;</span><br><span class="line">            <span class="type">int</span> j=starty;</span><br><span class="line">            <span class="comment">//遍历第一条边 左闭右开</span></span><br><span class="line">            <span class="keyword">for</span>(;j&lt;n-offset;j++)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历第二条边</span></span><br><span class="line">            <span class="keyword">for</span>(;i&lt;m-offset;i++)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历第三条边</span></span><br><span class="line">            <span class="keyword">for</span>(;j&gt;starty;j--)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历第四条边</span></span><br><span class="line">            <span class="keyword">for</span>(;i&gt;startx;i--)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//遍历完了 偏移量和下一次起始位置++</span></span><br><span class="line">            offset++;</span><br><span class="line">            startx++;</span><br><span class="line">            starty++;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(m==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">                list.add(matrix[<span class="number">0</span>][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">                list.add(matrix[i][<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(m&lt;=<span class="number">2</span>||n&lt;=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历结束如果m&lt;n则会有一条边未填入到数据中</span></span><br><span class="line">        <span class="keyword">if</span>(m!=n&amp;&amp;min==m&amp;&amp;min%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> i=startx;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=starty;j&lt;=n-offset;j++)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m!=n&amp;&amp;min==n&amp;&amp;min%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//如果m&gt;n会有一列没有遍历</span></span><br><span class="line">            <span class="type">int</span> i=startx;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=starty;i&lt;=m-offset;i++)&#123;</span><br><span class="line">                list.add(matrix[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(m==n&amp;&amp; min%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            list.add(matrix[startx][starty]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-12"   >          <a href="#提交成功-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-12" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="总结-11"   >          <a href="#总结-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-11" class="headerlink" title="总结"></a>总结</h3>      <p>这道题仍然是一个模拟转圈的过程，但是这个返回数据的时候和添加的数据的时候要注意</p><p>①如果m&#x3D;&#x3D;n &amp;&amp; m&#x3D;&#x3D;1那么就说明这个数组只有matrix[0][0]这个数据 把这个数据添加到list中返回即可</p><p>②如果m!&#x3D;n &amp;&amp;m&#x3D;&#x3D;1||n&#x3D;&#x3D;1 那么就说明是一行数据或者是一列数据 ,那么是无法进入循环中遍历外层数组的，那么直接把这一行或者这一列数据取出来即可 </p><p>③循环结束再进行是否有遗漏数据的判断</p><p>④如果m！&#x3D;n &amp;&amp;min %2&#x3D;&#x3D;1 也就是m和n一定有个奇数 </p><pre><code> -4.1 如果m==min 那么就说明循环结束还有一行数据没有添加</code></pre><p>​ -4.2 如果n&#x3D;&#x3D;min 那么久说明循环结束还有一列数据没有添加</p><p>⑤如果m&#x3D;&#x3D;n &amp;&amp;min%2&#x3D;&#x3D;1 那么就说明循环结束最中间的数据没有添加进list中</p><p>⑥如果m!&#x3D;n &amp;&amp; min%2&#x3D;&#x3D;0 那么说明最小的那位保证了循环一定能遍历完整个数组 </p><p>只要慢慢做就行了这道题 不要急一点点补全条件即可</p>        <h1 id="剑指Offer-29-顺时针打印矩阵"   >          <a href="#剑指Offer-29-顺时针打印矩阵" class="heading-link"><i class="fas fa-link"></i></a><a href="#剑指Offer-29-顺时针打印矩阵" class="headerlink" title="剑指Offer 29.顺时针打印矩阵"></a>剑指Offer 29.顺时针打印矩阵</h1>      <p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。</p><p><span class="exturl"><a class="exturl__link"   href="https://leetcode.cn/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/" >剑指 Offer 29(easy). 顺时针打印矩阵</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h3 id="第一次做-15"   >          <a href="#第一次做-15" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次做-15" class="headerlink" title="第一次做"></a>第一次做</h3>      <p>第一次做于23&#x2F;8&#x2F;9</p>        <h4 id="第一次代码-15"   >          <a href="#第一次代码-15" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次代码-15" class="headerlink" title="第一次代码"></a>第一次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] spiralOrder(<span class="type">int</span>[][] matrix) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取矩阵M和N</span></span><br><span class="line">            <span class="type">int</span> m=matrix.length;</span><br><span class="line">            <span class="type">int</span> n=matrix[<span class="number">0</span>].length;</span><br><span class="line">            <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[m*n];</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> min=m&lt;n?m:n;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">            <span class="comment">//偏移量</span></span><br><span class="line">            <span class="type">int</span> offset=<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> startx=<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> starty=<span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> number=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(count&lt;min/<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="type">int</span> i=startx;</span><br><span class="line">                <span class="type">int</span> j=starty;</span><br><span class="line">                <span class="comment">//第一条边</span></span><br><span class="line">                <span class="keyword">for</span>(;j&lt;n-offset;j++) arr[number++]=matrix[i][j];</span><br><span class="line">                <span class="comment">//第二条边</span></span><br><span class="line">                <span class="keyword">for</span>(;i&lt;m-offset;i++) arr[number++]=matrix[i][j];</span><br><span class="line">                <span class="comment">// 第三条边</span></span><br><span class="line">                <span class="keyword">for</span>(;j&gt;starty;j--) arr[number++]=matrix[i][j];</span><br><span class="line">                <span class="comment">// 第四条边</span></span><br><span class="line">                <span class="keyword">for</span>(;i&gt;startx;i--) arr[number++]=matrix[i][j];</span><br><span class="line"></span><br><span class="line">                offset++;</span><br><span class="line">                count++;</span><br><span class="line">                startx++;</span><br><span class="line">                starty++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//说明只有一个元素 不能进入循环中</span></span><br><span class="line">            <span class="keyword">if</span>(m==n&amp;&amp;m==<span class="number">1</span>)&#123;</span><br><span class="line">                arr[number++]=matrix[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">return</span> arr;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(m==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//m==1说明只有一行数据</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++) arr[number++]=matrix[<span class="number">0</span>][j];</span><br><span class="line">                <span class="keyword">return</span> arr;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">// n==1说明只有一列数据</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++) arr[number++]=matrix[i][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">return</span> arr;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(min%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//那么说明一定有个参数是奇数边</span></span><br><span class="line">                <span class="keyword">if</span>(m==n)&#123;</span><br><span class="line">                    <span class="comment">//那么最后一定剩下一个元素没有添加</span></span><br><span class="line">                    arr[number++]=matrix[startx][starty];</span><br><span class="line">                    <span class="keyword">return</span> arr;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(m==min)&#123;</span><br><span class="line">                    <span class="comment">//那么说明一定有一行数据没有添加进去</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> j=starty;j&lt;=n-offset;j++)&#123;</span><br><span class="line">                        arr[number++]=matrix[startx][j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(n==min)&#123;</span><br><span class="line">                    <span class="comment">//那么说明有一列数据没加</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> i=startx;i&lt;=m-offset;i++)&#123;</span><br><span class="line">                        arr[number++]=matrix[i][starty];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> arr;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交失败-11"   >          <a href="#提交失败-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交失败-11" class="headerlink" title="提交失败"></a>提交失败</h5>      <p>CASE: 输入[] 抛出异常Index 0 out of bounds for length 0</p>        <h5 id="原因-29"   >          <a href="#原因-29" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-29" class="headerlink" title="原因"></a>原因</h5>      <p>如果matrix&#x3D;&#x3D;[];那么则在获取n的时候会出错因为没有matrix[0]这个数组</p>        <h4 id="第二次代码-12"   >          <a href="#第二次代码-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次代码-12" class="headerlink" title="第二次代码"></a>第二次代码</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] spiralOrder(<span class="type">int</span>[][] matrix) &#123;</span><br><span class="line">           <span class="keyword">if</span>(matrix.length==<span class="number">0</span>)&#123;</span><br><span class="line">               <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//获取矩阵M和N</span></span><br><span class="line">           <span class="type">int</span> m=matrix.length;</span><br><span class="line">           <span class="type">int</span> n=matrix[<span class="number">0</span>].length;</span><br><span class="line">           <span class="type">int</span>[] arr=<span class="keyword">new</span> <span class="title class_">int</span>[m*n];</span><br><span class="line"></span><br><span class="line">           <span class="type">int</span> min=m&lt;n?m:n;</span><br><span class="line"></span><br><span class="line">           <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">           <span class="comment">//偏移量</span></span><br><span class="line">           <span class="type">int</span> offset=<span class="number">1</span>;</span><br><span class="line">           <span class="type">int</span> startx=<span class="number">0</span>;</span><br><span class="line">           <span class="type">int</span> starty=<span class="number">0</span>;</span><br><span class="line">           <span class="type">int</span> number=<span class="number">0</span>;</span><br><span class="line">           <span class="keyword">while</span>(count&lt;min/<span class="number">2</span>)&#123;</span><br><span class="line">               <span class="type">int</span> i=startx;</span><br><span class="line">               <span class="type">int</span> j=starty;</span><br><span class="line">               <span class="comment">//第一条边</span></span><br><span class="line">               <span class="keyword">for</span>(;j&lt;n-offset;j++) arr[number++]=matrix[i][j];</span><br><span class="line">               <span class="comment">//第二条边</span></span><br><span class="line">               <span class="keyword">for</span>(;i&lt;m-offset;i++) arr[number++]=matrix[i][j];</span><br><span class="line">               <span class="comment">// 第三条边</span></span><br><span class="line">               <span class="keyword">for</span>(;j&gt;starty;j--) arr[number++]=matrix[i][j];</span><br><span class="line">               <span class="comment">// 第四条边</span></span><br><span class="line">               <span class="keyword">for</span>(;i&gt;startx;i--) arr[number++]=matrix[i][j];</span><br><span class="line"></span><br><span class="line">               offset++;</span><br><span class="line">               count++;</span><br><span class="line">               startx++;</span><br><span class="line">               starty++;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//说明只有一个元素 不能进入循环中</span></span><br><span class="line">           <span class="keyword">if</span>(m==n&amp;&amp;m==<span class="number">1</span>)&#123;</span><br><span class="line">               arr[number++]=matrix[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span>(m==<span class="number">1</span>)&#123;</span><br><span class="line">               <span class="comment">//m==1说明只有一行数据</span></span><br><span class="line">               <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n;j++) arr[number++]=matrix[<span class="number">0</span>][j];</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">               <span class="comment">// n==1说明只有一列数据</span></span><br><span class="line">               <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++) arr[number++]=matrix[i][<span class="number">0</span>];</span><br><span class="line">               <span class="keyword">return</span> arr;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span>(min%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">               <span class="comment">//那么说明一定有个参数是奇数边</span></span><br><span class="line">               <span class="keyword">if</span>(m==n)&#123;</span><br><span class="line">                   <span class="comment">//那么最后一定剩下一个元素没有添加</span></span><br><span class="line">                   arr[number++]=matrix[startx][starty];</span><br><span class="line">                   <span class="keyword">return</span> arr;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span>(m==min)&#123;</span><br><span class="line">                   <span class="comment">//那么说明一定有一行数据没有添加进去</span></span><br><span class="line">                   <span class="keyword">for</span>(<span class="type">int</span> j=starty;j&lt;=n-offset;j++)&#123;</span><br><span class="line">                       arr[number++]=matrix[startx][j];</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span>(n==min)&#123;</span><br><span class="line">                   <span class="comment">//那么说明有一列数据没加</span></span><br><span class="line">                   <span class="keyword">for</span>(<span class="type">int</span> i=startx;i&lt;=m-offset;i++)&#123;</span><br><span class="line">                       arr[number++]=matrix[i][starty];</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> arr;</span><br><span class="line">           </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="提交成功-13"   >          <a href="#提交成功-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#提交成功-13" class="headerlink" title="提交成功"></a>提交成功</h5>              <h3 id="总结-12"   >          <a href="#总结-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-12" class="headerlink" title="总结"></a>总结</h3>      <p>这道题和54题有异曲同工之处，都是循环求出M*N的二维数组的顺时针顺序</p><p>我们只要模拟转圈就可以了</p><p><strong>掉坑点</strong></p><p>当martix&#x3D;{[]}时候，当求取n值的手会抛出索引越界异常</p>        <h1 id="总结-13"   >          <a href="#总结-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-13" class="headerlink" title="总结"></a>总结</h1>      <p>算法-数组篇已经告一段落，我们从数组这一篇学到了<strong>二分查找</strong>、<strong>双指针思想</strong>、<strong>滑动窗口思想</strong>、<strong>模拟转圈</strong></p><p>这一篇章已经到此结束了 ，我们要进入第二篇-链表篇开始学习</p><p>、</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入剖析并发编程-JUC篇[3-CAS、Unsafe、LockSupport、ThreadLocal]</title>
      <link href="/2023/08/04/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-JUC%E7%AF%87%5B3-CAS%E3%80%81Unsafe%E3%80%81ThreadLocal%5D/"/>
      <url>/2023/08/04/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-JUC%E7%AF%87%5B3-CAS%E3%80%81Unsafe%E3%80%81ThreadLocal%5D/</url>
      
        <content type="html"><![CDATA[<p><strong>CAS机制原理、Unsafe魔法类、LockSupport工具类、ThreadLocal线程变量</strong></p><hr><ul><li>第一篇是JUC并发编程基础</li><li>第二篇是JMM、Volatile关键字、synchronize锁详解</li><li>第三篇是CAS机制原理、Unsafe魔法类、LockSupport工具类、ThreadLocal线程变量</li><li>第四篇是Atomic原子包源码详解</li><li>第五篇是AQS源码以及机制详解</li></ul><hr>        <h1 id="CAS机制"   >          <a href="#CAS机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#CAS机制" class="headerlink" title="CAS机制"></a>CAS机制</h1>      <p>CAS也就是Compare And Swap  也即比较并且交换</p><p>乐观锁也常常用于CAS来实现，在并发量不高的时候用CAS可以减少锁的开销</p><p>而CAS是怎么实现的呢?</p>        <h2 id="CAS原理"   >          <a href="#CAS原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#CAS原理" class="headerlink" title="CAS原理"></a>CAS原理</h2>      <p>CAS也就是比较并交换</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAS(V,E,N)</span><br></pre></td></tr></table></div></figure><p>V:要比较的内存地址值</p><p>E:要比较的值</p><p>N:要替换的新值</p><p>如果内存地址中的值和要比较的值相同则说明没有其他线程修改，则更新为新值</p><p>如果内存地址中的值和要比较的值不同则说明这个更新操作失败，不更新</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230811185534370.png"  alt="CAS原理">      </p><p>而我们要好奇一点 这个比较和交换这个过程难道不会出现问题吗？</p><p>而CAS最底层是通过cmpxchg指令来进行操作，说明<strong>这个CAS过程是一个原子性的过程</strong></p>        <h2 id="CAS实现"   >          <a href="#CAS实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#CAS实现" class="headerlink" title="CAS实现"></a>CAS实现</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> <span class="title">Atomic::cmpxchg</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> exchange_value,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="keyword">volatile</span> <span class="type">unsigned</span> <span class="type">int</span>* dest, <span class="type">unsigned</span> <span class="type">int</span> compare_value)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">assert</span>(<span class="built_in">sizeof</span>(<span class="type">unsigned</span> <span class="type">int</span>) == <span class="built_in">sizeof</span>(jint), <span class="string">&quot;more work to do&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)Atomic::<span class="built_in">cmpxchg</span>((jint)exchange_value, (<span class="keyword">volatile</span> jint*)dest,</span><br><span class="line">                                       (jint)compare_value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>底层操作</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> jint     <span class="title">Atomic::cmpxchg</span>    <span class="params">(jint exchange_value, <span class="keyword">volatile</span> jint* dest, jint compare_value)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  输入参数：</span></span><br><span class="line"><span class="comment">  参数1：新值</span></span><br><span class="line"><span class="comment">  参数2：目标地址值</span></span><br><span class="line"><span class="comment">  参数3：比较值(旧值)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="comment">//获取当前对象是不是一个volatile修饰</span></span><br><span class="line">  <span class="type">int</span> mp = os::<span class="built_in">is_MP</span>();</span><br><span class="line">   <span class="comment">//LOCK_IF_MP(%4) 如果当前对象是volatile修饰则加lock前缀锁住总线 </span></span><br><span class="line">  <span class="function">__asm__ <span class="title">volatile</span> <span class="params">(LOCK_IF_MP(%<span class="number">4</span>) <span class="string">&quot;cmpxchgl %1,(%3)&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">                    : <span class="string">&quot;=a&quot;</span> (exchange_value)</span></span></span><br><span class="line"><span class="params"><span class="function">                    : <span class="string">&quot;r&quot;</span> (exchange_value), <span class="string">&quot;a&quot;</span> (compare_value), <span class="string">&quot;r&quot;</span> (dest), <span class="string">&quot;r&quot;</span> (mp)</span></span></span><br><span class="line"><span class="params"><span class="function">                    : <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;memory&quot;</span>)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这个&quot;cmpchgl %1,(%3)&quot;中的占位符是下面语句中的</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     : &quot;=a&quot; (exchange_value) //0</span></span><br><span class="line"><span class="comment">         : &quot;r&quot; (exchange_value)  //1, &quot;a&quot; (compare_value) //2, &quot;r&quot; (dest) //3, &quot;r&quot; (mp)//4</span></span><br><span class="line"><span class="comment">         </span></span><br><span class="line"><span class="comment">        指令获取2 compare_value和 3 dest中的数据进行一个比较</span></span><br><span class="line"><span class="comment">        然后相等则将旧值写入到exchange_value中  返回旧值</span></span><br><span class="line"><span class="comment">        如果不相等则将新值返回</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="keyword">return</span> exchange_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="底层实现图"   >          <a href="#底层实现图" class="heading-link"><i class="fas fa-link"></i></a><a href="#底层实现图" class="headerlink" title="底层实现图"></a>底层实现图</h2>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230811185534370.png"  alt="CAS底层实现">      </p><p><strong>CAS机制带来的问题</strong></p><p>CAS机制带来了一种乐观锁的思想，而这个机制的也引入了一些问题</p>        <h2 id="ABA问题"   >          <a href="#ABA问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h2>      <p>假设有两个线程竞争同一个资源 k1&#x3D;1，使用CAS机制</p><p>线程T1获取了k1&#x3D;1，然后进行逻辑处理之后要将k1更新成100</p><p>线程T2也同时获取了k1&#x3D;1,然后线程T2先将 k1设置为2然后再设置为 1</p><p>当线程T1要进行更新操作的时候线程T2已经完成了一系列操作，它认为没有修改数据 这就是常说的ABA问题</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230811185615416.png"  alt="ABA问题图">      </p><p><strong>解决方案</strong></p><p>ABA问题的解决方案是使用版本号，当修改操作的时候会将版本更新，CAS的同时也要判断版本号是否相同</p>        <h2 id="循环开销问题"   >          <a href="#循环开销问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#循环开销问题" class="headerlink" title="循环开销问题"></a>循环开销问题</h2>      <p>由上面分析可得，CAS实现的过程中并<strong>没有涉及到循环</strong>的过程，而这个循环开销问题又是从何而来呢？</p><p>通常是<strong>我们</strong>进行业务逻辑的时候进行的一个<strong>更新失败自旋</strong>的操作</p><p>而CAS本身并不会带来循环开销的问题</p>        <h1 id="Unsafe魔法类"   >          <a href="#Unsafe魔法类" class="heading-link"><i class="fas fa-link"></i></a><a href="#Unsafe魔法类" class="headerlink" title="Unsafe魔法类"></a>Unsafe魔法类</h1>      <p>Unsafe类位于sun.misc包下，这类似于C的指针一样可以操控内存，而我们通常是通过JVM来进行一个申请内存，而这个类能直接操控内存就意味着它能绕开JVM管理，这也是实质上的不安全</p><ul><li>调用这个类不受JVM管理，也就是不能被GC必须要和C一样自己申请内存空间、自己释放空间，如果操作不当很容易造成内存泄漏</li><li>这个类很多方法需要提供offset偏移量，目标地址，偏移量要通过自己计算，操作不当可能会导致JVM崩溃，导致整个程序崩溃</li></ul>        <h2 id="构造方法"   >          <a href="#构造方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">Unsafe</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//私有化构造方法，说明我们不能直接new出这个对象</span></span><br></pre></td></tr></table></div></figure>        <h2 id="内存操作"   >          <a href="#内存操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#内存操作" class="headerlink" title="内存操作"></a>内存操作</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//申请内存空间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">allocateMemory</span><span class="params">(<span class="type">long</span> var1)</span>;</span><br><span class="line"><span class="comment">//申请重新分配内存空间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">reallocateMemory</span><span class="params">(<span class="type">long</span> var1, <span class="type">long</span> var3)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...这里省略了一些方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放内存空间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">freeMemory</span><span class="params">(<span class="type">long</span> var1)</span>;</span><br></pre></td></tr></table></div></figure>        <h2 id="屏障操作"   >          <a href="#屏障操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#屏障操作" class="headerlink" title="屏障操作"></a>屏障操作</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读屏障</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">loadFence</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//写屏障</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">storeFence</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//全屏障</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">fullFence</span><span class="params">()</span>;</span><br></pre></td></tr></table></div></figure>        <h2 id="CAS操作"   >          <a href="#CAS操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#CAS操作" class="headerlink" title="CAS操作"></a>CAS操作</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CAS操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">compareAndSwapObject</span><span class="params">(Object var1, <span class="type">long</span> var2, Object var4, Object var5)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">compareAndSwapInt</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">int</span> var4, <span class="type">int</span> var5)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">compareAndSwapLong</span><span class="params">(Object var1, <span class="type">long</span> var2, <span class="type">long</span> var4, <span class="type">long</span> var6)</span>;</span><br></pre></td></tr></table></div></figure>        <h2 id="阻塞线程-park方法"   >          <a href="#阻塞线程-park方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#阻塞线程-park方法" class="headerlink" title="阻塞线程(park方法)"></a>阻塞线程(park方法)</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//阻塞线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">park</span><span class="params">(<span class="type">boolean</span> var1, <span class="type">long</span> var2)</span>;</span><br></pre></td></tr></table></div></figure>        <h2 id="唤醒线程-unpark方法"   >          <a href="#唤醒线程-unpark方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#唤醒线程-unpark方法" class="headerlink" title="唤醒线程(unpark方法)"></a>唤醒线程(unpark方法)</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//唤醒线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">unpark</span><span class="params">(Object var1)</span>;</span><br></pre></td></tr></table></div></figure>        <h2 id="获取unsafe对象-反射"   >          <a href="#获取unsafe对象-反射" class="heading-link"><i class="fas fa-link"></i></a><a href="#获取unsafe对象-反射" class="headerlink" title="获取unsafe对象(反射)"></a>获取unsafe对象(反射)</h2>      <p><strong>代码说话</strong></p><p><strong>①错误方式</strong></p><p>1、试试直接new Unsafe对象</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Unsafe unsafe=<span class="keyword">new</span> <span class="title class_">Unsafe</span>();</span><br><span class="line"><span class="comment">//编译报错，因为构造方法是private修饰，不能直接new对象</span></span><br></pre></td></tr></table></div></figure><p>因为构造方法私有，所以我们不能直接new一个unsafe类来使用，那么我们又要用到unsafe类要怎么获取呢？</p><p>2、试试用Unsafe.getUnsafe()</p><p>我们发现有一个getUnsafe方法，那我们试试能不能直接通过这个方法来获取对象呢?</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> Unsafe.getUnsafe();</span><br><span class="line">        System.out.println(unsafe);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p><strong>结果</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.SecurityException: Unsafe</span><br></pre></td></tr></table></div></figure><p>这里抛出了一个异常unsafe，那提供了这个方法又有什么用呢？我们跟进源码看看</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title function_">getUnsafe</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">var0</span> <span class="operator">=</span> Reflection.getCallerClass();</span><br><span class="line">        <span class="comment">//判断是不是VM调用这个方法</span></span><br><span class="line">        <span class="keyword">if</span> (!VM.isSystemDomainLoader(var0.getClassLoader())) &#123;</span><br><span class="line">            <span class="comment">//不是虚拟机调用这个方法会抛出异常 异常信息为unsafe</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;Unsafe&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> theUnsafe;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p><strong>②正确方式</strong></p>        <h3 id="通过内部静态成员theUnsafe变量获取"   >          <a href="#通过内部静态成员theUnsafe变量获取" class="heading-link"><i class="fas fa-link"></i></a><a href="#通过内部静态成员theUnsafe变量获取" class="headerlink" title="通过内部静态成员theUnsafe变量获取"></a>通过内部静态成员theUnsafe变量获取</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个成员变量用来接收unsafe对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Unsafe unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field field= Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">            <span class="comment">//修改权限</span></span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            </span><br><span class="line">            unsafe = (Unsafe) field.get(<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(unsafe);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>打印结果</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sun.misc.Unsafe@3b9a45b3</span><br></pre></td></tr></table></div></figure><p>有值则说明获取了这个unsafe对象</p>        <h3 id="通过反射直接new一个unsafe对象"   >          <a href="#通过反射直接new一个unsafe对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#通过反射直接new一个unsafe对象" class="headerlink" title="通过反射直接new一个unsafe对象"></a>通过反射直接new一个unsafe对象</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个成员变量用来接收unsafe对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Unsafe unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Constructor&lt;Unsafe&gt; constructor = Unsafe.class.getDeclaredConstructor();</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            unsafe = constructor.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(unsafe);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>打印结果</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sun.misc.Unsafe@3b9a45b3</span><br></pre></td></tr></table></div></figure><p>有值则说明获取了这个unsafe对象</p>        <h1 id="LockSupport工具类"   >          <a href="#LockSupport工具类" class="heading-link"><i class="fas fa-link"></i></a><a href="#LockSupport工具类" class="headerlink" title="LockSupport工具类"></a>LockSupport工具类</h1>      <p><em>LockSupport是一个线程阻塞类，我们可以用LockSupport中的方法来阻塞和唤醒线程</em></p><p><strong>LockSupport源码</strong></p>        <h2 id="成员变量"   >          <a href="#成员变量" class="heading-link"><i class="fas fa-link"></i></a><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Unsafe魔法类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class="line"><span class="comment">//偏移量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> parkBlockerOffset;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> SEED;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> PROBE;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> SECONDARY;</span><br></pre></td></tr></table></div></figure>        <h2 id="park"   >          <a href="#park" class="heading-link"><i class="fas fa-link"></i></a><a href="#park" class="headerlink" title="park"></a>park</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">park</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//调用Unsafe中的park方法</span></span><br><span class="line">    UNSAFE.park(<span class="literal">false</span>, <span class="number">0L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="unpark"   >          <a href="#unpark" class="heading-link"><i class="fas fa-link"></i></a><a href="#unpark" class="headerlink" title="unpark"></a>unpark</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unpark</span><span class="params">(Thread thread)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (thread != <span class="literal">null</span>)</span><br><span class="line">        <span class="comment">//调用Unsafe中的unpark方法</span></span><br><span class="line">        UNSAFE.unpark(thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h2>      <p>LockSupport底层就是封装了Unsafe魔法类，调用Unsafe中的park进行阻塞，unpark进行唤醒</p>        <h1 id="ThreadLocal线程变量"   >          <a href="#ThreadLocal线程变量" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocal线程变量" class="headerlink" title="ThreadLocal线程变量"></a>ThreadLocal线程变量</h1>              <h2 id="ThreadLocal概念"   >          <a href="#ThreadLocal概念" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocal概念" class="headerlink" title="ThreadLocal概念"></a>ThreadLocal概念</h2>              <h3 id="ThreadLocal是什么"   >          <a href="#ThreadLocal是什么" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocal是什么" class="headerlink" title="ThreadLocal是什么?"></a>ThreadLocal是什么?</h3>      <p>ThreadLocal是线程变量，也被叫做线程本地副本，当线程之间要进行数据隔离的时候我们可以用ThreadLocal来保证线程之间的数据隔离，线程可以获取自己线程中的变量而对于其他线程来说是隔离且封闭的</p>        <h3 id="Thread、ThreadLocal和ThreadLocalMap的关系"   >          <a href="#Thread、ThreadLocal和ThreadLocalMap的关系" class="heading-link"><i class="fas fa-link"></i></a><a href="#Thread、ThreadLocal和ThreadLocalMap的关系" class="headerlink" title="Thread、ThreadLocal和ThreadLocalMap的关系"></a>Thread、ThreadLocal和ThreadLocalMap的关系</h3>      <p>Thread下有ThreadLocals这个成员变量 而ThreadLocals就是ThreadLocalMap，而ThreadLocal是一个线程下的变量副本</p><p>我们创建ThreadLocal然后调用方法都是调用ThreadLocalMap的方法，可以看成ThreadLocal是ThreadLocalMap的包装类，将其包装了一下</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230811080956496.png"  alt="ThreadLocal概念">      </p>        <h3 id="ThreadLocalMap的Entry"   >          <a href="#ThreadLocalMap的Entry" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocalMap的Entry" class="headerlink" title="ThreadLocalMap的Entry"></a>ThreadLocalMap的Entry</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span> <span class="keyword">extends</span> <span class="title class_">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class="line">            <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">            Object value;</span><br><span class="line"></span><br><span class="line">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">                <span class="built_in">super</span>(k);</span><br><span class="line">                value = v;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Entry继承了弱引用WeakReference</span></span><br></pre></td></tr></table></div></figure>        <h3 id="Java四大引用"   >          <a href="#Java四大引用" class="heading-link"><i class="fas fa-link"></i></a><a href="#Java四大引用" class="headerlink" title="Java四大引用"></a>Java四大引用</h3>      <ul><li>强引用：强引用是最普遍的引用，一般把一个对象赋给一个引用变量。例如Student s &#x3D;new Student();</li><li>弱引用：软引用是一种相对强引用弱化了一些的引用，需要用java.lang.ref.SoftReference 类来实现。</li><li>软引用：弱引用的使用和软引用类似，只是关键字变成了 WeakReference，特点是无论内存是否足够只要GC一定会被回收</li><li>虚引用：虚引用在任何时候都可能会被垃圾回收器回收，虚引用需要java.lang.ref.PhantomReference 来实现：</li></ul><p>这里用一个表格简单说说这四个引用的特点</p><div class="table-container"><table><thead><tr><th>引用类型</th><th>GC回收时间</th><th>用途</th><th>生存时间</th></tr></thead><tbody><tr><td>强引用</td><td>从不</td><td>对象的一般状态</td><td>JVM停止运行时死亡</td></tr><tr><td>弱引用</td><td>内存不足时</td><td>对象缓存</td><td>内存不足后终止</td></tr><tr><td>软引用</td><td>GC时</td><td>对象缓存</td><td>GC后终止</td></tr><tr><td>虚引用</td><td>unknow</td><td>unknow</td><td>unknow</td></tr></tbody></table></div>        <h2 id="ThreadLocal使用场景"   >          <a href="#ThreadLocal使用场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocal使用场景" class="headerlink" title="ThreadLocal使用场景"></a>ThreadLocal使用场景</h2>      <ul><li>在对象跨层传递的时候，例如Controller层和Service层传递变量</li><li>线程间数据隔离，例如Spring中事务管理机制用到ThreadLocal来保证单个线程操控数据库用的是同一个数据库连接。</li><li>用于存储Session，例如Session在当前会话周期有效，会话结束就销毁，很适合用ThreadLocal</li></ul>        <h2 id="ThreadLocal和synchronized的区别"   >          <a href="#ThreadLocal和synchronized的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocal和synchronized的区别" class="headerlink" title="ThreadLocal和synchronized的区别"></a>ThreadLocal和synchronized的区别</h2>      <p>1.Synchronized是用于线程间的通信，用于共享变量。ThreadLocal是用于线程间的隔离，用于数据隔离</p><p>2.Synchronized是用锁来实现多线程的时候只有某一个线程来访问共享变量，而ThreadLocal是每个线程之间有一个内部的变量副本，这样每个线程获取的只是自己的变量副本中的数据</p>        <h2 id="ThreadLocal源码"   >          <a href="#ThreadLocal源码" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocal源码" class="headerlink" title="ThreadLocal源码"></a>ThreadLocal源码</h2>      <p><strong>成员变量</strong></p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private final int threadLocalHashCode = nextHashCode();</span><br><span class="line">private static AtomicInteger nextHashCode = new AtomicInteger();</span><br><span class="line">private static final int HASH_INCREMENT = 0x61c88647;</span><br></pre></td></tr></table></div></figure>        <h3 id="get"   >          <a href="#get" class="heading-link"><i class="fas fa-link"></i></a><a href="#get" class="headerlink" title="get"></a>get</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取当前线程</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">   <span class="comment">// 调用getMap方法获取ThreadLocal</span></span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">    <span class="comment">//map是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//通过Map.getEntry传入获取entry</span></span><br><span class="line">        ThreadLocalMap.<span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> map.getEntry(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果e不为空则返回e</span></span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> (T)e.value;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//反之要么map为空要么enrty为空则调用setInitialValue() 初始化map</span></span><br><span class="line">    <span class="keyword">return</span> setInitialValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="set"   >          <a href="#set" class="heading-link"><i class="fas fa-link"></i></a><a href="#set" class="headerlink" title="set"></a>set</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">    <span class="comment">//获取当前线程</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line"> <span class="comment">//获取当前ThreadLocalMap</span></span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">    <span class="comment">//判断map是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">        <span class="comment">//不为空说明初始化过 将调用map.set方法</span></span><br><span class="line">        map.set(<span class="built_in">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//为空说明还没有初始化 调用createMap方法</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="remove"   >          <a href="#remove" class="heading-link"><i class="fas fa-link"></i></a><a href="#remove" class="headerlink" title="remove"></a>remove</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取当前线程下的ThreadLocalMap</span></span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">m</span> <span class="operator">=</span> getMap(Thread.currentThread());</span><br><span class="line">    <span class="keyword">if</span> (m != <span class="literal">null</span>)</span><br><span class="line">        <span class="comment">//如果map不为空则调用map.remove方法</span></span><br><span class="line">        m.remove(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="getMap"   >          <a href="#getMap" class="heading-link"><i class="fas fa-link"></i></a><a href="#getMap" class="headerlink" title="getMap"></a>getMap</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocalMap <span class="title function_">getMap</span><span class="params">(Thread t)</span> &#123;</span><br><span class="line">    <span class="comment">//返回当前线程下的threadLocals作为ThreadLocalMap  也即threadLocals==ThreadLocalMap</span></span><br><span class="line">    <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="Entry"   >          <a href="#Entry" class="heading-link"><i class="fas fa-link"></i></a><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span> <span class="keyword">extends</span> <span class="title class_">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class="line">    <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">    Object value;</span><br><span class="line"></span><br><span class="line">    Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">        <span class="built_in">super</span>(k);</span><br><span class="line">        value = v;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Entry模型也即K,V键值对</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="setInitialValue"   >          <a href="#setInitialValue" class="heading-link"><i class="fas fa-link"></i></a><a href="#setInitialValue" class="headerlink" title="setInitialValue"></a>setInitialValue</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> T <span class="title function_">setInitialValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//初始化map</span></span><br><span class="line">    <span class="type">T</span> <span class="variable">value</span> <span class="operator">=</span> initialValue();</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">    <span class="comment">//判断map不为空</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">        <span class="comment">//将调用set方法设置值</span></span><br><span class="line">        map.set(<span class="built_in">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//反之map为空则创建map</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="createMap"   >          <a href="#createMap" class="heading-link"><i class="fas fa-link"></i></a><a href="#createMap" class="headerlink" title="createMap"></a>createMap</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">createMap</span><span class="params">(Thread t, T firstValue)</span> &#123;</span><br><span class="line">    t.threadLocals = <span class="keyword">new</span> <span class="title class_">ThreadLocalMap</span>(<span class="built_in">this</span>, firstValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="ThreadLocal流程图"   >          <a href="#ThreadLocal流程图" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocal流程图" class="headerlink" title="ThreadLocal流程图"></a>ThreadLocal流程图</h3>      <p><strong>get方法</strong></p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230811083859493.png"  alt="ThreadLocal.get">      </p><p><strong>set方法</strong></p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230811083920601.png"  alt="ThreadLocal.set">      </p><p><strong>remove</strong></p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230811084052561.png"  alt="Thread.remove">      </p><p><strong>综上</strong></p><p>这ThreadLocal无论是get方法、set方法还是remove方法都是调用ThreadLocalMap中的方法，所以我们的关注重点应该是ThreadLocalMap</p>        <h2 id="ThreadLocalMap源码"   >          <a href="#ThreadLocalMap源码" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocalMap源码" class="headerlink" title="ThreadLocalMap源码"></a>ThreadLocalMap源码</h2>      <p><strong>成员变量</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"><span class="comment">//Entry数组</span></span><br><span class="line"><span class="keyword">private</span> Entry[] table;</span><br><span class="line"><span class="comment">//记录table容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//扩容阈值</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> threshold; <span class="comment">// Default to 0</span></span><br></pre></td></tr></table></div></figure>        <h3 id="getEntry"   >          <a href="#getEntry" class="heading-link"><i class="fas fa-link"></i></a><a href="#getEntry" class="headerlink" title="getEntry"></a>getEntry</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Entry <span class="title function_">getEntry</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> &#123;</span><br><span class="line">    <span class="comment">//获取threadLocalHashCode 然后与上table.length-1 目的是获取一个索引值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//通过table索引i 获取一个Entry对象e  Entry对象是Kv键值对</span></span><br><span class="line">    <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> table[i];</span><br><span class="line">    <span class="comment">//如果e非空 且 e的值正好等于当前ThreadLocal那么就说明找到了我们要的Entry</span></span><br><span class="line">    <span class="keyword">if</span> (e != <span class="literal">null</span> &amp;&amp; e.get() == key)</span><br><span class="line">        <span class="comment">//返回entry</span></span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">//走到这里说明e为空或者e.get！=key 说明不是我们找的Entry</span></span><br><span class="line">        <span class="comment">//进入getEntryAfterMiss方法</span></span><br><span class="line">        <span class="keyword">return</span> getEntryAfterMiss(key, i, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>getEntryAfterMiss</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Entry <span class="title function_">getEntryAfterMiss</span><span class="params">(ThreadLocal&lt;?&gt; key, <span class="type">int</span> i, Entry e)</span> &#123; </span><br><span class="line">    <span class="comment">//获取一个临时tab</span></span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> tab.length;</span><br><span class="line"><span class="comment">//这里做循环 如果e==null 则会停止循环</span></span><br><span class="line">    <span class="keyword">while</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//获取ThreadLocal </span></span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">        <span class="keyword">if</span> (k == key)</span><br><span class="line">            <span class="comment">//如果k==传入的ThreadLocal说明找到了 直接结束 返回e</span></span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="literal">null</span>)</span><br><span class="line">            <span class="comment">//如果k==null</span></span><br><span class="line">            expungeStaleEntry(i);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">//反之k有值且k！=key 则继续循环</span></span><br><span class="line">            <span class="comment">//走到nextIndex方法 目的是当前指针指向下一个元素</span></span><br><span class="line">            i = nextIndex(i, len);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//运行到这里说明当前这次循环没有找到元素  索引往后移动了</span></span><br><span class="line">        e = tab[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当e==null的时候结束循环 也即返回了null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>nextIndex</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">nextIndex</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="comment">//这里做了一个三元运算符 如果i+1&lt;len说明没有到数组最后一位</span></span><br><span class="line">    <span class="comment">//如果当前是最后一位元素，那么下一次从i要0开始  类似于指向循环数组</span></span><br><span class="line">    <span class="keyword">return</span> ((i + <span class="number">1</span> &lt; len) ? i + <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>expungeStaleEntry</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用这个方法是Entry存在 但是Entry的Key为null   传入参数为槽位i</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">expungeStaleEntry</span><span class="params">(<span class="type">int</span> staleSlot)</span> &#123;</span><br><span class="line"><span class="comment">//获取tab</span></span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> tab.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// expunge entry at staleSlot</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">//因为当前tab[i].key==null 所以将value也置为null 并且将这个槽位置为null意味着清除出tab中</span></span><br><span class="line">    tab[staleSlot].value = <span class="literal">null</span>;</span><br><span class="line">    tab[staleSlot] = <span class="literal">null</span>;</span><br><span class="line">    size--;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Rehash until we encounter null</span></span><br><span class="line">    Entry e;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="comment">//开始遍历  将i初始化为当前槽位的下一个位置，当下一个位置不为空的时候进入循环，循环结束i向后移动;</span></span><br><span class="line">    <span class="keyword">for</span> (i = nextIndex(staleSlot, len);</span><br><span class="line">         (e = tab[i]) != <span class="literal">null</span>;</span><br><span class="line">         i = nextIndex(i, len)) &#123;</span><br><span class="line">        <span class="comment">//这个循环结束条件为e=tab[i]==null;</span></span><br><span class="line">        <span class="comment">//获取key</span></span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果k==null 那么说明这个也要做这个清空槽位移除出tab中</span></span><br><span class="line">            e.value = <span class="literal">null</span>;</span><br><span class="line">            tab[i] = <span class="literal">null</span>;</span><br><span class="line">            size--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//反之重新做一遍hash</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> k.threadLocalHashCode &amp; (len - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//如果h！=i 说明是发生过哈希碰撞导致存入元素向后移动了</span></span><br><span class="line">            <span class="keyword">if</span> (h != i) &#123;</span><br><span class="line">                <span class="comment">//将目标槽位清空</span></span><br><span class="line">                tab[i] = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Unlike Knuth 6.4 Algorithm R, we must scan until</span></span><br><span class="line">                <span class="comment">// null because multiple entries could have been stale.</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//然后判断hash值这个位置是否为空 如果不为空则继续向后找</span></span><br><span class="line">                <span class="keyword">while</span> (tab[h] != <span class="literal">null</span>)</span><br><span class="line">                    h = nextIndex(h, len);</span><br><span class="line">                <span class="comment">//直到找到一个为空的位置将e插入进去</span></span><br><span class="line">                tab[h] = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这个循环过程也就是 如果key为null 那么就将这个Entry移除数组中，然后开始遍历找当前位置之后有没有空位置，如果有空位置就将空位置清空，如果没有空位置那么就重新计算哈希值 重新排放一下，直到下一个位置Entry也为空</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="set-1"   >          <a href="#set-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#set-1" class="headerlink" title="set"></a>set</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We don&#x27;t use a fast path as with get() because it is at</span></span><br><span class="line">    <span class="comment">// least as common to use set() to create new entries as</span></span><br><span class="line">    <span class="comment">// it is to replace existing ones, in which case, a fast</span></span><br><span class="line">    <span class="comment">// path would fail more often than not.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取Entry数组</span></span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> tab.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环 将e指向table[i] ，当e不为空的时候进行循环，循环下一次e为当前位置的下一个位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> tab[i];</span><br><span class="line">         e != <span class="literal">null</span>;</span><br><span class="line">         e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">        <span class="comment">//获取key</span></span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果table[i]的key和当前key相同，那么则替换value</span></span><br><span class="line">        <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">            e.value = value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果k==null 那么就走replaceStableEntry方法</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="literal">null</span>) &#123;</span><br><span class="line">            replaceStaleEntry(key, value, i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结束循环 e为空  </span></span><br><span class="line">    <span class="comment">//new一个新的Entry 将他放到索引i位置下</span></span><br><span class="line">    tab[i] = <span class="keyword">new</span> <span class="title class_">Entry</span>(key, value);</span><br><span class="line">    <span class="comment">//容量++</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">sz</span> <span class="operator">=</span> ++size;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//先清空部分槽位然后再判断清空之后size是不是还是大于阈值</span></span><br><span class="line">    <span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">        <span class="comment">//扩容</span></span><br><span class="line">        rehash();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>replaceStaleEntry</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">replaceStaleEntry</span><span class="params">(ThreadLocal&lt;?&gt; key, Object value,</span></span><br><span class="line"><span class="params">                               <span class="type">int</span> staleSlot)</span> &#123;</span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> tab.length;</span><br><span class="line">    Entry e;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Back up to check for prior stale entry in current run.</span></span><br><span class="line">    <span class="comment">// We clean out whole runs at a time to avoid continual</span></span><br><span class="line">    <span class="comment">// incremental rehashing due to garbage collector freeing</span></span><br><span class="line">    <span class="comment">// up refs in bunches (i.e., whenever the collector runs).</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用来记录要清空的槽位</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">slotToExpunge</span> <span class="operator">=</span> staleSlot;</span><br><span class="line">    <span class="comment">//将i置为上一个元素，往前遍历,当table[i]==null的时候结束循环,每次循环结束将i指向上一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> prevIndex(staleSlot, len);</span><br><span class="line">         (e = tab[i]) != <span class="literal">null</span>;</span><br><span class="line">         i = prevIndex(i, len))</span><br><span class="line">        <span class="comment">//如果e的key==null  将这个位置标记成要清空的槽位</span></span><br><span class="line">        <span class="keyword">if</span> (e.get() == <span class="literal">null</span>)</span><br><span class="line">            slotToExpunge = i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find either the key or trailing null slot of run, whichever</span></span><br><span class="line">    <span class="comment">// occurs first</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将i置为下一个位置，往后遍历，当table[i]==null的时候结束循环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> nextIndex(staleSlot, len);</span><br><span class="line">         (e = tab[i]) != <span class="literal">null</span>;</span><br><span class="line">         i = nextIndex(i, len)) &#123;</span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If we find key, then we need to swap it</span></span><br><span class="line">        <span class="comment">// with the stale entry to maintain hash table order.</span></span><br><span class="line">        <span class="comment">// The newly stale slot, or any other stale slot</span></span><br><span class="line">        <span class="comment">// encountered above it, can then be sent to expungeStaleEntry</span></span><br><span class="line">        <span class="comment">// to remove or rehash all of the other entries in run.</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果k==key 那么说明找到了要找的变量</span></span><br><span class="line">        <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">            <span class="comment">//覆盖e的值</span></span><br><span class="line">            e.value = value;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//当前位置和进入的staleSlot位置做交换?</span></span><br><span class="line">            tab[i] = tab[staleSlot];</span><br><span class="line">            tab[staleSlot] = e;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Start expunge at preceding stale entry if it exists</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//如果要清空槽位==staleSlot找到e.get==null的元素</span></span><br><span class="line">            <span class="keyword">if</span> (slotToExpunge == staleSlot)</span><br><span class="line">                <span class="comment">//将slotToExpuge=i;</span></span><br><span class="line">                slotToExpunge = i;</span><br><span class="line">            <span class="comment">//清空槽位 cleanSomeSlots</span></span><br><span class="line">            cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</span><br><span class="line">            <span class="comment">//结束方法</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If we didn&#x27;t find stale entry on backward scan, the</span></span><br><span class="line">        <span class="comment">// first stale entry seen while scanning for key is the</span></span><br><span class="line">        <span class="comment">// first still present in the run.</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果我们发现了k==null的Entry,并且要清空槽位依然等于第一个进来的槽位则将slotToExpunge设置为i</span></span><br><span class="line">        <span class="comment">//然后继续循环 直到找到Entry==null</span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="literal">null</span> &amp;&amp; slotToExpunge == staleSlot)</span><br><span class="line">            slotToExpunge = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If key not found, put new entry in stale slot</span></span><br><span class="line">    <span class="comment">//走到这个已经找到一个Entry==null</span></span><br><span class="line">    <span class="comment">//将新结点设置进去</span></span><br><span class="line">    tab[staleSlot].value = <span class="literal">null</span>;</span><br><span class="line">    tab[staleSlot] = <span class="keyword">new</span> <span class="title class_">Entry</span>(key, value);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there are any other stale entries in run, expunge them</span></span><br><span class="line">    <span class="keyword">if</span> (slotToExpunge != staleSlot)</span><br><span class="line">        <span class="comment">//清空槽位</span></span><br><span class="line">        cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>prevIndex</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">prevIndex</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ((i - <span class="number">1</span> &gt;= <span class="number">0</span>) ? i - <span class="number">1</span> : len - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p> cleanSomeSlots</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">cleanSomeSlots</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">removed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            Entry[] tab = table;</span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> tab.length;</span><br><span class="line">    <span class="comment">//循环 </span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                i = nextIndex(i, len);</span><br><span class="line">                <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> tab[i];</span><br><span class="line">                <span class="comment">//如果e!=null 并且e的key==null</span></span><br><span class="line">                <span class="keyword">if</span> (e != <span class="literal">null</span> &amp;&amp; e.get() == <span class="literal">null</span>) &#123;</span><br><span class="line">                    </span><br><span class="line">                    n = len;</span><br><span class="line">                    removed = <span class="literal">true</span>;</span><br><span class="line">                    <span class="comment">//清空i位置元素</span></span><br><span class="line">                    i = expungeStaleEntry(i);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//循环条件 当n=n无符号右移一位即除以2不为0 </span></span><br><span class="line">                <span class="comment">//即循环次数为log2n </span></span><br><span class="line">            &#125; <span class="keyword">while</span> ( (n &gt;&gt;&gt;= <span class="number">1</span>) != <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//返回是否删除元素</span></span><br><span class="line">            <span class="keyword">return</span> removed;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="remove-1"   >          <a href="#remove-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#remove-1" class="headerlink" title="remove"></a>remove</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> &#123;</span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> tab.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> key.threadLocalHashCode &amp; (len-<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//当e不为空的时候遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> tab[i];</span><br><span class="line">         e != <span class="literal">null</span>;</span><br><span class="line">         e = tab[i = nextIndex(i, len)]) &#123;</span><br><span class="line">        <span class="comment">//如果e.key==key 则说明找到了要删除的entry</span></span><br><span class="line">        <span class="keyword">if</span> (e.get() == key) &#123;</span><br><span class="line">            <span class="comment">//将e清除出去</span></span><br><span class="line">            e.clear();</span><br><span class="line">            <span class="comment">//清空槽位i以及i之后为空的位置</span></span><br><span class="line">            expungeStaleEntry(i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="rehash"   >          <a href="#rehash" class="heading-link"><i class="fas fa-link"></i></a><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h3>      <p><strong>前面</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)</span><br><span class="line">        <span class="comment">//扩容</span></span><br><span class="line">        rehash();</span><br><span class="line"></span><br><span class="line"><span class="comment">//而这个threshold阈值是多少呢?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认是0</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> threshold; <span class="comment">// Default to 0  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//传入参数时候len==16  阈值为16*2/3也即为10</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setThreshold</span><span class="params">(<span class="type">int</span> len)</span> &#123;</span><br><span class="line">            threshold = len * <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></div></figure><p>rehash</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rehash</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//扩容前清空一次元素</span></span><br><span class="line">    expungeStaleEntries();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use lower threshold for doubling to avoid hysteresis</span></span><br><span class="line">    <span class="comment">//再判断如果size&gt;= threshold-threshold/4就去扩容 也即size&gt;=3/4*threshold去扩容</span></span><br><span class="line">    <span class="keyword">if</span> (size &gt;= threshold - threshold / <span class="number">4</span>)</span><br><span class="line">        resize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>resize</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获得老数组</span></span><br><span class="line">    Entry[] oldTab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldLen</span> <span class="operator">=</span> oldTab.length;</span><br><span class="line">    <span class="comment">//新数组长度为老数组两倍</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newLen</span> <span class="operator">=</span> oldLen * <span class="number">2</span>;</span><br><span class="line">    Entry[] newTab = <span class="keyword">new</span> <span class="title class_">Entry</span>[newLen];</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldLen; ++j) &#123;</span><br><span class="line">       <span class="comment">//循环老数组</span></span><br><span class="line">        <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> oldTab[j];</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果e不为空</span></span><br><span class="line">            ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">            <span class="comment">//判断e.key是否为空 key如果为空则将value置为null</span></span><br><span class="line">            <span class="keyword">if</span> (k == <span class="literal">null</span>) &#123;</span><br><span class="line">                e.value = <span class="literal">null</span>; <span class="comment">// Help the GC</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//反之这里e.key有值 则重新计算一次hash值</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> k.threadLocalHashCode &amp; (newLen - <span class="number">1</span>);</span><br><span class="line">                <span class="comment">//如果新数组的h位置有人则往后走 直到找到空位置存入e</span></span><br><span class="line">                <span class="keyword">while</span> (newTab[h] != <span class="literal">null</span>)</span><br><span class="line">                    h = nextIndex(h, newLen);</span><br><span class="line">                newTab[h] = e;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将新的阈值设置成新数组长度的2/3 ;</span></span><br><span class="line">    setThreshold(newLen);</span><br><span class="line">    size = count;</span><br><span class="line">    table = newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="ThreadLocalMap流程图"   >          <a href="#ThreadLocalMap流程图" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocalMap流程图" class="headerlink" title="ThreadLocalMap流程图"></a>ThreadLocalMap流程图</h3>      <p><strong>getEntry</strong></p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230811091252041.png"  alt="ThreadLocalMap.getEntry">      </p><p><strong>Set</strong></p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230811090547958.png"  alt="ThreadLocalMap.set">      </p><p><strong>remove</strong></p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230811085405099.png"  alt="ThreadLocal.remove">      </p><p><strong>rehash</strong></p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230811084815487.png"  alt="rehash扩容流程图">      </p>        <h2 id="ThreadLocal内存泄漏问题"   >          <a href="#ThreadLocal内存泄漏问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#ThreadLocal内存泄漏问题" class="headerlink" title="ThreadLocal内存泄漏问题"></a>ThreadLocal内存泄漏问题</h2>      <p><strong>内存泄漏</strong> ：表示就是我们申请了内存,但是该内存一直无法释放; </p><p>内存泄漏会导致内存溢出问题: 申请内存时,发现申请内存不足,就会报错 </p>        <h3 id="内存泄漏场景"   >          <a href="#内存泄漏场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#内存泄漏场景" class="headerlink" title="内存泄漏场景"></a>内存泄漏场景</h3>      <p>而ThreadLocal中有内存泄漏的风险，我们用一张图来表示他们之间的引用关系</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230811182543145.png"  alt="ThreadLocal使用的引用关系">      </p><p>因为Entry的Key是一个<strong>弱引用</strong>的关系，所以只要是发生了GC那么将没有强引用的情况下会将ThreadLocal给回收也即以下场景</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230811182934063.png"  alt="弱引用GC之后">      </p><p>而内存泄漏出现在哪里呢？是Entry因为Key为NULL 但是存放了一个Value为Object 所以有以下一个强引用关系</p><p>CurrentThreadREF  -&gt; currentThread -&gt; ThreadLocalMap-&gt;entry[KEY:NULL,Value:Object]  这个Entry<strong>无法访问且无法释放</strong>，所以这就是一个内存泄漏，只要线程没有销毁那么就会一直存在内存泄漏装填</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230811183529082.png"  alt="image-20230811183529082">      </p>        <h3 id="一定会造成内存泄漏吗？"   >          <a href="#一定会造成内存泄漏吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#一定会造成内存泄漏吗？" class="headerlink" title="一定会造成内存泄漏吗？"></a>一定会造成内存泄漏吗？</h3>      <p>当弱引用销毁之后那么会存在一条强引用关系，那么这条强引用关系那么在<strong>当前线程销毁</strong>的时候，就能释放这个Entry也即不会造成内存泄漏。<strong>但是</strong>，线程是一个很重要的资源，我们创建和销毁线程都会浪费资源，所以我们用<strong>线程池来进行回收线程</strong>，所以线程的生命周期增加了，也即ThreadLocalMap的线程生命周期增加了。所以这个过程可能会产生内存泄漏问题</p>        <h3 id="为什么用弱引用不用强引用？"   >          <a href="#为什么用弱引用不用强引用？" class="heading-link"><i class="fas fa-link"></i></a><a href="#为什么用弱引用不用强引用？" class="headerlink" title="为什么用弱引用不用强引用？"></a>为什么用弱引用不用强引用？</h3>      <p>我们用两个图来描述<strong>假设用强引用</strong>的状况</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230811184249053.png"  alt="强引用场景(1)">      </p><p>假设此时ThreadLocalRef&#x3D;null，那么ThreadLocal本应该被GC回收</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230811184358056.png"  alt="强引用场景(2)">      </p><p>因为ThreadLocal存在一条ThreadLocalMap的强引用关系，所以这个ThreadLocal无法被GC，这导致这个ThreadLocal一直占用内存中，那么产生了一个内存泄漏的问题 因为无法访问到ThreadLocal</p><p>所以我们用弱引用当ThreadLocal的强引用关系不在的时候GC就能将其回收</p>        <h3 id="解决方案"   >          <a href="#解决方案" class="heading-link"><i class="fas fa-link"></i></a><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3>      <p>1.我们每次用ThreadLocal结束调用remove方法，来删除Entry</p><p>2.我们将ThreadLocalRef引用ThreadLocal设置修饰符Static  Final  扩大作用域防止ThreadLocalRef引用ThreadLocal的强引用结束，这样就能保证ThreadLocal能一直存在</p>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入剖析并发编程-JUC篇[2-JMM、Volatile、Synchronized]</title>
      <link href="/2023/08/03/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-JUC%E7%AF%87%5B2-JMM%E3%80%81Volatile%E3%80%81Synchronized%5D/"/>
      <url>/2023/08/03/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-JUC%E7%AF%87%5B2-JMM%E3%80%81Volatile%E3%80%81Synchronized%5D/</url>
      
        <content type="html"><![CDATA[<p> <strong>JMM、Volatile关键字、Synchronized锁详解</strong></p><hr><ul><li>第一篇是JUC并发编程基础</li><li>第二篇是JMM、Volatile关键字、synchronize锁详解</li><li>第三篇是CAS机制原理、Unsafe魔法类、LockSupport工具类、ThreadLocal线程变量</li><li>第四篇是Atomic原子包源码详解</li><li>第五篇是AQS源码以及机制详解</li></ul><hr>        <h1 id="JMM模型"   >          <a href="#JMM模型" class="heading-link"><i class="fas fa-link"></i></a><a href="#JMM模型" class="headerlink" title="JMM模型"></a>JMM模型</h1>      <p>JMM：即Java内存模型，JMM是JVM的一部分，JMM是一种抽象的概念</p>        <h2 id="JMM的三大特性"   >          <a href="#JMM的三大特性" class="heading-link"><i class="fas fa-link"></i></a><a href="#JMM的三大特性" class="headerlink" title="JMM的三大特性"></a>JMM的三大特性</h2>              <h3 id="①原子性"   >          <a href="#①原子性" class="heading-link"><i class="fas fa-link"></i></a><a href="#①原子性" class="headerlink" title="①原子性"></a>①原子性</h3>      <p>对共享变量的读取和写入是原子操作，Read和Load是一组原子操作，Store和Write是原子操作</p>        <h3 id="②有序性"   >          <a href="#②有序性" class="heading-link"><i class="fas fa-link"></i></a><a href="#②有序性" class="headerlink" title="②有序性"></a>②有序性</h3>      <p>StoreBuffer的先进先出性质保证了有序性</p>        <h3 id="③可见性"   >          <a href="#③可见性" class="heading-link"><i class="fas fa-link"></i></a><a href="#③可见性" class="headerlink" title="③可见性"></a>③可见性</h3>      <p>内存屏障保证了可见性</p><p>而JMM中用Volatile关键字可以导致数据可见、除此之外synchronized锁也能保证</p><p>八种交互模式</p><ul><li><p>Lock （锁定）：锁定，将主内存中的变量锁定成当前线程持有</p></li><li><p>Read（读取）：将内存中的数据刷到工作区中</p></li><li><p>Load（加载）：将工作区的变量放到工作区的副本变量中</p></li><li><p>use  （使用）：将工作区的变量放到CPU执行区域</p></li><li><p>Assian（赋值）：将修改后的数据赋值给工作区的副本变量中</p></li><li><p>Store（存储）：将工作内存的变量刷到主内存中</p></li><li><p>Write（写入）:  将Store刷出的值写到主内存中</p></li><li><p>Unlock（解锁）：解锁，将锁释放以便其他线程可以使用</p><p><em>JMM</em>工作流程</p></li></ul><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801192534473.png"  alt="JMM工作流程">      </p><p>要注意的是，在JMM模型中没有Invalidate Queues，所以没有Load Load问题，只有Store Load的问题，</p><p>接下来我们重点介绍Volatile关键字和Synchronized锁</p>        <h1 id="volatile关键字"   >          <a href="#volatile关键字" class="heading-link"><i class="fas fa-link"></i></a><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h1>      <p>Volatile关键字可以导致共享变量的可见性，而我们通过JUC并发编程基础那块分析得出，当JMM的共享变量的可见性只要保证StoreBuffer的数据能刷到Cache中，就会因为MESI协议和嗅探机制更新其他线程的数据</p><p>综上所述，Valatile关键字就是确保StoreBuffer的数据能刷到Cache中，其作用的就是添加了屏障，这里添加的是编译器屏障</p><p>抛开代码谈理论无异于耍流氓，我们从一个程序开始看起！</p>        <h2 id="使用场景"   >          <a href="#使用场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2>              <h3 id="场景一：没有添加volatile关键字"   >          <a href="#场景一：没有添加volatile关键字" class="heading-link"><i class="fas fa-link"></i></a><a href="#场景一：没有添加volatile关键字" class="headerlink" title="场景一：没有添加volatile关键字"></a>场景一：没有添加volatile关键字</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"><span class="comment">//定义一个变量a，不给a赋值，初始化之后a应该是0</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写Run方法 当a不为0X1111的时候进入循环</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(a!=<span class="number">0x1111</span>)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建线程然后执行run方法</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TestThread</span>().start();</span><br><span class="line">        <span class="comment">//线程睡一秒</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将a赋值为0X1111</span></span><br><span class="line">        a=<span class="number">0x1111</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>运行结果是该线程没有结束        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801211011188.png"  alt="场景一结果">      </p>        <h3 id="场景二：添加了Volatile关键字"   >          <a href="#场景二：添加了Volatile关键字" class="heading-link"><i class="fas fa-link"></i></a><a href="#场景二：添加了Volatile关键字" class="headerlink" title="场景二：添加了Volatile关键字"></a>场景二：添加了Volatile关键字</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> <span class="keyword">extends</span>  <span class="title class_">Thread</span>&#123;</span><br><span class="line"><span class="comment">//给a添加Volatile使其可见</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> a;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(a!=<span class="number">0x1111</span>)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TestThread</span>().start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        a=<span class="number">0x1111</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>运行结果是线程已经结束</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801211221395.png"  alt="场景二结果">      </p>        <h3 id="场景三：没加Volatile但是禁止JIT优化"   >          <a href="#场景三：没加Volatile但是禁止JIT优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#场景三：没加Volatile但是禁止JIT优化" class="headerlink" title="场景三：没加Volatile但是禁止JIT优化"></a>场景三：没加Volatile但是禁止JIT优化</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">添加VM参数：-Djava.compiler=NONE  <span class="comment">//禁止JIT优化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="type">int</span> a;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(a!=<span class="number">0x1111</span>)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TestThread</span>().start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        a=<span class="number">0x1111</span>;</span><br><span class="line">    &#125;   </span><br></pre></td></tr></table></div></figure><p>运行结果是线程已经结束        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801213142690.png"  alt="场景三结果">      </p>        <h3 id="场景四-没加Volatile但是加了Unsafe-loadFence"   >          <a href="#场景四-没加Volatile但是加了Unsafe-loadFence" class="heading-link"><i class="fas fa-link"></i></a><a href="#场景四-没加Volatile但是加了Unsafe-loadFence" class="headerlink" title="场景四:没加Volatile但是加了Unsafe.loadFence();"></a>场景四:没加Volatile但是加了Unsafe.loadFence();</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> <span class="keyword">extends</span>  <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="type">int</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(a!=<span class="number">0x1111</span>)&#123;</span><br><span class="line">            UnsafeUtils.getUnsafe().loadFence();</span><br><span class="line">            <span class="comment">//利用UnsafeUtils.getUnsafe()获得Unsafe实例</span></span><br><span class="line">            <span class="comment">//调用loadFence()方法 也就是添加了编译器屏障</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //读屏障</span></span><br><span class="line"><span class="comment">    public native void loadFence();</span></span><br><span class="line"><span class="comment">//写屏障</span></span><br><span class="line"><span class="comment">    public native void storeFence();</span></span><br><span class="line"><span class="comment">//全屏障</span></span><br><span class="line"><span class="comment">    public native void fullFence();</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TestThread</span>().start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        a=<span class="number">0x1111</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>运行结果是线程已经结束        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801213734565.png"  alt="image-20230801213734565">      </p>        <h2 id="分析"   >          <a href="#分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#分析" class="headerlink" title="分析"></a>分析</h2>      <p>只有第一种情况下没有结束进程，我们可以通过JVM调优的指令可以获取当前执行的线程验证。</p>        <h3 id="①获取运行中线程"   >          <a href="#①获取运行中线程" class="heading-link"><i class="fas fa-link"></i></a><a href="#①获取运行中线程" class="headerlink" title="①获取运行中线程"></a>①获取运行中线程</h3>      <div class="table-container"><table><thead><tr><th>常见指令</th><th>作用</th></tr></thead><tbody><tr><td>jps</td><td>用于获得系统中运行中的java进程</td></tr><tr><td>jinfo <pid></td><td>显示指定线程的详情信息</td></tr><tr><td>jstat -gc <pid> (ms)</td><td>获得JVM各区域详情 参数一:指定进程号 参数二:每xx毫秒刷新输出</td></tr><tr><td>jstack <pid></td><td>跟踪线程中的堆栈信息</td></tr><tr><td>jmap -histo <pid></td><td>获得指定线程中实例对象个数和所占字节数<br/>#!!</td></tr></tbody></table></div><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801214538319.png"  alt="image-20230801214538319">      </p><p>我们可以清楚看出TestThread线程Thread-0正在运行</p>        <h3 id="②打印汇编语言"   >          <a href="#②打印汇编语言" class="heading-link"><i class="fas fa-link"></i></a><a href="#②打印汇编语言" class="headerlink" title="②打印汇编语言"></a>②打印汇编语言</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly <span class="comment">//开启控制台输出汇编语言</span></span><br></pre></td></tr></table></div></figure><p>我们可以在打印出的汇编记录中，可以查找数据，看个大概就是先比较之后然后经过多次跳转之后，A指向B地址，B之后跳转会指向A地址，造成一个死循环</p><p>这是JIT在对热点代码的优化</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我们的热点代码</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(a!=<span class="number">0x1111</span>)&#123;</span><br><span class="line"><span class="comment">//            UnsafeUtils.getUnsafe().loadFence();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//经过优化之后大概变成</span></span><br><span class="line"><span class="keyword">do</span>(a!=<span class="number">0x1111</span>)&#123;</span><br><span class="line"><span class="comment">//只做一次判断然后进入死循环</span></span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></div></figure><p>而加入Volatile关键字就是防止编译器对代码进行优化，且通过屏障将变量刷到Cache中</p><p><em>即Volatile&#x3D;&#x3D;UnsafeUtils.getUnsafe().loadFence()</em></p><p>我们可以从源代码这块开始看，首先获取字节码指令</p>        <h3 id="③打印字节码指令"   >          <a href="#③打印字节码指令" class="heading-link"><i class="fas fa-link"></i></a><a href="#③打印字节码指令" class="headerlink" title="③打印字节码指令"></a>③打印字节码指令</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用javaP -c 来输出字节码指令</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801235858520.png"  alt="image-20230801235858520">      </p><p>可以知道调用的getstatic方法是主要关注的</p><p>我们打开HotSprot的源码查找getstatic方法</p><p>不过不会C++，只能看英文和上下文一点一点理解</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">CASE</span>(_getstatic):</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获得一个索引值</span></span><br><span class="line">      u2 index;</span><br><span class="line">        <span class="comment">//获取一个Cache</span></span><br><span class="line">      ConstantPoolCacheEntry* cache;</span><br><span class="line">        <span class="comment">//在这里看到了PC+1，所以合理猜测这个是index是程序计数器，然后计数器+1</span></span><br><span class="line">      index = Bytes::<span class="built_in">get_native_u2</span>(pc+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// QQQ Need to make this as inlined as possible. Probably need to</span></span><br><span class="line">      <span class="comment">// split all the bytecode cases out so c++ compiler has a chance</span></span><br><span class="line">      <span class="comment">// for constant prop to fold everything possible away.</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">//从cp中获取一个entry放到Cache中</span></span><br><span class="line">      cache = cp-&gt;<span class="built_in">entry_at</span>(index);</span><br><span class="line">        <span class="comment">//如果这个没有被解析过 那就给他解析下</span></span><br><span class="line">      <span class="keyword">if</span> (!cache-&gt;<span class="built_in">is_resolved</span>((Bytecodes::Code)opcode)) &#123;</span><br><span class="line">        <span class="built_in">CALL_VM</span>(InterpreterRuntime::<span class="built_in">resolve_get_put</span>(THREAD, (Bytecodes::Code)opcode),</span><br><span class="line">                handle_exception);</span><br><span class="line">        cache = cp-&gt;<span class="built_in">entry_at</span>(index);</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="comment">//总之走到这里Cache拿了一个值</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> VM_JVMTI</span></span><br><span class="line">        <span class="comment">//判断这个是不是一个中断事件，我们这里没有产生中断，所以不进这个IF语句</span></span><br><span class="line">          <span class="keyword">if</span> (_jvmti_interp_events) &#123;</span><br><span class="line">            <span class="type">int</span> *count_addr;</span><br><span class="line">            oop obj;</span><br><span class="line">            <span class="comment">// Check to see if a field modification watch has been set</span></span><br><span class="line">            <span class="comment">// before we take the time to call into the VM.</span></span><br><span class="line">            count_addr = (<span class="type">int</span> *)JvmtiExport::<span class="built_in">get_field_access_count_addr</span>();</span><br><span class="line">            <span class="keyword">if</span> ( *count_addr &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">              <span class="keyword">if</span> ((Bytecodes::Code)opcode == Bytecodes::_getstatic) &#123;</span><br><span class="line">                obj = (oop)<span class="literal">NULL</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                obj = (oop) <span class="built_in">STACK_OBJECT</span>(<span class="number">-1</span>);</span><br><span class="line">                <span class="built_in">VERIFY_OOP</span>(obj);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="built_in">CALL_VM</span>(InterpreterRuntime::<span class="built_in">post_field_access</span>(THREAD,</span><br><span class="line">                                          obj,</span><br><span class="line">                                          cache),</span><br><span class="line">                                          handle_exception);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* VM_JVMTI */</span></span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得一个Object对象</span></span><br><span class="line">          oop obj;</span><br><span class="line">        <span class="comment">//如果这个是个静态对象那么就应该从静态区获取对象</span></span><br><span class="line">          <span class="keyword">if</span> ((Bytecodes::Code)opcode == Bytecodes::_getstatic) &#123;</span><br><span class="line">              <span class="comment">//获取了一个Klass ，理解成Class模板</span></span><br><span class="line">            Klass* k = cache-&gt;<span class="built_in">f1_as_klass</span>();</span><br><span class="line">              <span class="comment">//将k的指向的静态对象给obj</span></span><br><span class="line">            obj = k-&gt;<span class="built_in">java_mirror</span>();</span><br><span class="line">            <span class="built_in">MORE_STACK</span>(<span class="number">1</span>);  <span class="comment">// Assume single slot push</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//反之这个是个实例对象，那么从Stack栈中的对象引用到堆里的对象取出给obj</span></span><br><span class="line">            obj = (oop) <span class="built_in">STACK_OBJECT</span>(<span class="number">-1</span>);</span><br><span class="line">              <span class="comment">//检查这个OBJ是否为空</span></span><br><span class="line">            <span class="built_in">CHECK_NULL</span>(obj);</span><br><span class="line">          &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//上面这块步骤主要是拿到一个OBJ对象</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// 现在存结果在这个栈中</span></span><br><span class="line">          <span class="comment">// Now store the result on the stack</span></span><br><span class="line">          <span class="comment">//</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获得了一个状态</span></span><br><span class="line">          TosState tos_type = cache-&gt;<span class="built_in">flag_state</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获得一个偏移量</span></span><br><span class="line">          <span class="type">int</span> field_offset = cache-&gt;<span class="built_in">f2_as_index</span>();</span><br><span class="line">        <span class="comment">//如果这个cache是volatile修饰的</span></span><br><span class="line">          <span class="keyword">if</span> (cache-&gt;<span class="built_in">is_volatile</span>()) &#123;</span><br><span class="line">              <span class="comment">//CPU_NOT_MULTIPLE_COPY_ATOMIC  现在是单原子的就执行Fence() 即屏障</span></span><br><span class="line">            <span class="keyword">if</span> (support_IRIW_for_not_multiple_copy_atomic_cpu) &#123;</span><br><span class="line">              OrderAccess::<span class="built_in">fence</span>();</span><br><span class="line">            &#125;</span><br><span class="line">              <span class="comment">//判断现在是个什么类型 我们现在传入的是Int类型数据 所以直接进入int_field_acquire</span></span><br><span class="line">            <span class="keyword">if</span> (tos_type == atos) &#123;</span><br><span class="line">              <span class="built_in">VERIFY_OOP</span>(obj-&gt;<span class="built_in">obj_field_acquire</span>(field_offset));</span><br><span class="line">              <span class="built_in">SET_STACK_OBJECT</span>(obj-&gt;<span class="built_in">obj_field_acquire</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == itos) &#123;</span><br><span class="line">                <span class="comment">//我们要进入这个分支</span></span><br><span class="line">              <span class="built_in">SET_STACK_INT</span>(obj-&gt;<span class="built_in">int_field_acquire</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == ltos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_LONG</span>(obj-&gt;<span class="built_in">long_field_acquire</span>(field_offset), <span class="number">0</span>);</span><br><span class="line">              <span class="built_in">MORE_STACK</span>(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == btos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_INT</span>(obj-&gt;<span class="built_in">byte_field_acquire</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == ctos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_INT</span>(obj-&gt;<span class="built_in">char_field_acquire</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == stos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_INT</span>(obj-&gt;<span class="built_in">short_field_acquire</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == ftos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_FLOAT</span>(obj-&gt;<span class="built_in">float_field_acquire</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_DOUBLE</span>(obj-&gt;<span class="built_in">double_field_acquire</span>(field_offset), <span class="number">0</span>);</span><br><span class="line">              <span class="built_in">MORE_STACK</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//走到这里即说明这个类型不是被volatile修饰</span></span><br><span class="line">            <span class="keyword">if</span> (tos_type == atos) &#123;</span><br><span class="line">              <span class="built_in">VERIFY_OOP</span>(obj-&gt;<span class="built_in">obj_field</span>(field_offset));</span><br><span class="line">              <span class="built_in">SET_STACK_OBJECT</span>(obj-&gt;<span class="built_in">obj_field</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == itos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_INT</span>(obj-&gt;<span class="built_in">int_field</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == ltos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_LONG</span>(obj-&gt;<span class="built_in">long_field</span>(field_offset), <span class="number">0</span>);</span><br><span class="line">              <span class="built_in">MORE_STACK</span>(<span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == btos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_INT</span>(obj-&gt;<span class="built_in">byte_field</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == ctos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_INT</span>(obj-&gt;<span class="built_in">char_field</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == stos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_INT</span>(obj-&gt;<span class="built_in">short_field</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tos_type == ftos) &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_FLOAT</span>(obj-&gt;<span class="built_in">float_field</span>(field_offset), <span class="number">-1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="built_in">SET_STACK_DOUBLE</span>(obj-&gt;<span class="built_in">double_field</span>(field_offset), <span class="number">0</span>);</span><br><span class="line">              <span class="built_in">MORE_STACK</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新计数器然后继续</span></span><br><span class="line">          <span class="built_in">UPDATE_PC_AND_CONTINUE</span>(<span class="number">3</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们要走到int_field_acquire方法的实现</span></span><br><span class="line"><span class="comment">//而int_field_acquire底层调用了Load_acquire方法</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>这里可能是因为我的原因导致这一块代码找不到，我选择从网上找了一下老版本的代码 不过实现思路应该是一样的</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title">compiler_barrier</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="function">__asm__ <span class="title">volatile</span> <span class="params">(<span class="string">&quot;&quot;</span> : : : <span class="string">&quot;memory&quot;</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::loadload</span><span class="params">()</span>   </span>&#123; <span class="built_in">compiler_barrier</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::storestore</span><span class="params">()</span> </span>&#123;<span class="built_in">compiler_barrier</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::loadstore</span><span class="params">()</span>  </span>&#123; <span class="built_in">compiler_barrier</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::storeload</span><span class="params">()</span>  </span>&#123; <span class="built_in">fence</span>();            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::acquire</span><span class="params">()</span>    </span>&#123; <span class="built_in">compiler_barrier</span>(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::release</span><span class="params">()</span>    </span>&#123; <span class="built_in">compiler_barrier</span>(); &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::fence</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(os::<span class="built_in">is_MP</span>()) &#123;</span><br><span class="line">    <span class="comment">//always use locked addl since mfence is sometimes expensive</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AMD64</span></span><br><span class="line">   <span class="function">__asm__ <span class="title">volatile</span> <span class="params">(<span class="string">&quot;lock; addl $0,0(%%rsp)&quot;</span> : : :<span class="string">&quot;cc&quot;</span>, <span class="string">&quot;memory&quot;</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">   <span class="function">__asm__ <span class="title">volatile</span> <span class="params">(<span class="string">&quot;lock; addl $0,0(%%esp)&quot;</span> : : :<span class="string">&quot;cc&quot;</span>, <span class="string">&quot;memory&quot;</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  &#125;</span><br><span class="line"> <span class="built_in">compiler_barrier</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/w329636271/article/details/54616543/" >后面这块代码来源于CSDN博主</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>在底层是通过加屏障的方式实现这个数据的可见性</p>        <h2 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h2>      <p>Volatile关键字实现数据的可见性主要是依靠了加编译器屏障，防止JIT对其优化。最终可以导致数据的</p>        <h1 id="Synchronized锁"   >          <a href="#Synchronized锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#Synchronized锁" class="headerlink" title="Synchronized锁"></a>Synchronized锁</h1>      <p>首先我们得先明白对象的构成，以及Synchronized锁的类型</p>        <h2 id="Object对象以及锁的级别"   >          <a href="#Object对象以及锁的级别" class="heading-link"><i class="fas fa-link"></i></a><a href="#Object对象以及锁的级别" class="headerlink" title="Object对象以及锁的级别"></a>Object对象以及锁的级别</h2>      <p>Object对象在存储的时候有<strong>对象头信息</strong>、<strong>数据</strong>、对齐填充信息</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230802160057306.png"  alt="Object对象">      </p><p>而对象头信息 我们可以从源码中获取得知对象头信息是怎么组成的，我们这里主要关注64位的</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  32 bits:</span></span><br><span class="line"><span class="comment">//  --------</span></span><br><span class="line"><span class="comment">//             hash:25 ------------&gt;| age:4    biased_lock:1 lock:2 (normal object)</span></span><br><span class="line"><span class="comment">//             JavaThread*:23 epoch:2 age:4    biased_lock:1 lock:2 (biased object)</span></span><br><span class="line"><span class="comment">//             size:32 ------------------------------------------&gt;| (CMS free block)</span></span><br><span class="line"><span class="comment">//             PromotedObject*:29 ----------&gt;| promo_bits:3 -----&gt;| (CMS promoted object)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  64 bits:</span></span><br><span class="line"><span class="comment">//  --------</span></span><br><span class="line"><span class="comment">//  unused:25 hash:31 --&gt;| unused:1   age:4    biased_lock:1 lock:2 (normal object)</span></span><br><span class="line"><span class="comment">//  JavaThread*:54 epoch:2 unused:1   age:4    biased_lock:1 lock:2 (biased object)</span></span><br><span class="line"><span class="comment">//  PromotedObject*:61 ---------------------&gt;| promo_bits:3 -----&gt;| (CMS promoted object)</span></span><br><span class="line"><span class="comment">//  size:64 -----------------------------------------------------&gt;| (CMS free block)</span></span><br></pre></td></tr></table></div></figure><p>共六十四位</p><ul><li><p>25位无使用位</p></li><li><p>31位哈希</p></li><li><p>1位是否被使用标记</p></li><li><p>4位age</p></li><li><p>1位是否为偏向锁</p></li><li><p>2位锁状态</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230802162051207.png"  alt="对象头">      </p></li></ul><p>接下来就是synchronized锁的级别</p><p>一共有四个状态 ，而对象头中有3位来表示锁的信息 一位偏向锁标志位，两位表示锁状态</p><ul><li>无锁：在对象头信息为0 01</li><li>偏向锁：在对象头信息为 1 01，偏向锁是当锁没有竞争压力的时候并且多次由同一个线程获取，为了减少多次CAS的操作就引入了偏向锁，偏向锁会偏向获得它的第一个线程，类似于初恋。</li><li>轻量级锁：在对象头信息为 0 00，轻量级锁是获得锁的时候一开始就会获得一个轻量级锁，升级为轻量级锁的时候会撤销偏向锁，当获取轻量级锁失败之后会自旋(自适应自旋)，如果CAS失败会走轻量级锁升级的过程</li><li>重量级锁：在对象头信息为 1 10，重量级锁是经过锁升级之后也就是我们常说的锁，重量级锁是竞争激烈的锁，重量级锁中有一个cxq阻塞队列，当线程获取锁失败后会进阻塞队列等待</li></ul><div class="table-container"><table><thead><tr><th>锁级别</th><th>是否为偏向锁</th><th>锁状态</th></tr></thead><tbody><tr><td>无锁态</td><td>0</td><td>01</td></tr><tr><td>偏向锁</td><td>1</td><td>01</td></tr><tr><td>轻量级锁</td><td></td><td>00</td></tr><tr><td>重量级锁</td><td></td><td>10</td></tr><tr><td>GC标记</td><td></td><td>11</td></tr></tbody></table></div><p>接下来我们要从代码开始分析了</p><p>一个很简单的程序，主要是添加了Synchronzied锁，这样的话就能从字节码文件中获取信息</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> <span class="keyword">extends</span>  <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">TestThread</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>用JavaP -C反编译获得字节码信息</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">利用javaP -c 来输出字节码指令</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public void run();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: dup</span><br><span class="line">       2: astore_1</span><br><span class="line">       3: monitorenter</span><br><span class="line">       4: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">       7: ldc           #3                  // String hello</span><br><span class="line">       9: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">      12: aload_1</span><br><span class="line">      13: monitorexit</span><br><span class="line">      14: goto          22</span><br><span class="line">      17: astore_2</span><br><span class="line">      18: aload_1</span><br><span class="line">      19: monitorexit</span><br><span class="line">      20: aload_2</span><br><span class="line">      21: athrow</span><br><span class="line">      22: return</span><br></pre></td></tr></table></div></figure><p>而重点要关注的是monitorenter和monitorexit</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3: monitorenter</span><br><span class="line">13: monitorexit</span><br><span class="line">19: monitorexit</span><br></pre></td></tr></table></div></figure><p>一次Monitorenter怎么会出现两次monitorexit呢？</p><p>原因是第二个monitorexit在finally代码块中，防止出现异常导致没有到达第一个monitorexit</p><p>而接下来我们要先进去看monitorenter方法</p>        <h2 id="monitorenter"   >          <a href="#monitorenter" class="heading-link"><i class="fas fa-link"></i></a><a href="#monitorenter" class="headerlink" title="monitorenter"></a>monitorenter</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">CASE</span>(_monitorenter): &#123;</span><br><span class="line">     <span class="comment">//1.从栈中获取一个对象lockee</span></span><br><span class="line">        oop lockee = <span class="built_in">STACK_OBJECT</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="comment">// derefing&#x27;s lockee ought to provoke implicit null check</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">//检查这个lockee是否为空</span></span><br><span class="line">        <span class="built_in">CHECK_NULL</span>(lockee);</span><br><span class="line">        <span class="comment">// find a free monitor or one already allocated for this object</span></span><br><span class="line">        <span class="comment">// if we find a matching object then we need a new monitor</span></span><br><span class="line">        <span class="comment">// since this is recursive enter</span></span><br><span class="line">     </span><br><span class="line">     <span class="comment">//获取BasicObjectLock指针 指向的是线程内所有的monitor</span></span><br><span class="line">     <span class="comment">//limit 指向栈顶 ， most_recent指的是栈底 entry用来存放找到的monitor对象</span></span><br><span class="line">        BasicObjectLock* limit = istate-&gt;<span class="built_in">monitor_base</span>();</span><br><span class="line">        BasicObjectLock* most_recent = (BasicObjectLock*) istate-&gt;<span class="built_in">stack_base</span>();</span><br><span class="line">        BasicObjectLock* entry = <span class="literal">NULL</span>;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     <span class="comment">//当limit和most_recent不指向同一个Monitor的时候进入循环</span></span><br><span class="line">     <span class="comment">//这个循环目的是找到一个可用的monitor或者发现这个锁被一个monitor监视了</span></span><br><span class="line">        <span class="keyword">while</span> (most_recent != limit ) &#123;</span><br><span class="line">            <span class="comment">//判断monitor的obj是否为空 如果是空则把它放到entry中</span></span><br><span class="line">          <span class="keyword">if</span> (most_recent-&gt;<span class="built_in">obj</span>() == <span class="literal">NULL</span>) entry = most_recent;</span><br><span class="line">          <span class="keyword">else</span> <span class="keyword">if</span> (most_recent-&gt;<span class="built_in">obj</span>() == lockee) <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//如果monitor的obj不为空且obj为lockee时跳出循环</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//否则没有找到一个可用的monitor，栈尾指针向栈顶移动</span></span><br><span class="line">          most_recent++;</span><br><span class="line">        &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//如果循环结束 entry不为空的话则说明找到了一个可用的monitor</span></span><br><span class="line">        <span class="keyword">if</span> (entry != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">//这里是找到了一个monitor</span></span><br><span class="line">            <span class="comment">//将entry指向lockee</span></span><br><span class="line">          entry-&gt;<span class="built_in">set_obj</span>(lockee);</span><br><span class="line">            </span><br><span class="line">          <span class="type">int</span> success = <span class="literal">false</span>;</span><br><span class="line">          <span class="type">uintptr_t</span> epoch_mask_in_place = (<span class="type">uintptr_t</span>)markOopDesc::epoch_mask_in_place;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//记录lockee的头信息</span></span><br><span class="line">          markOop mark = lockee-&gt;<span class="built_in">mark</span>();</span><br><span class="line">            <span class="comment">//获得一个hash值</span></span><br><span class="line">          <span class="type">intptr_t</span> hash = (<span class="type">intptr_t</span>) markOopDesc::no_hash;</span><br><span class="line">          <span class="comment">// implies UseBiasedLocking</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//判断头信息中是否有bias_pattern 即是否是偏向锁  如果是偏向锁那么进入下面[1]过程，反之进入[2]过程</span></span><br><span class="line">          <span class="keyword">if</span> (mark-&gt;<span class="built_in">has_bias_pattern</span>()) &#123;</span><br><span class="line">              <span class="comment">/*[1]过程：现在是一个偏向锁*/</span></span><br><span class="line">              <span class="comment">/*进入这个语句中说明已经是偏向锁状态:</span></span><br><span class="line"><span class="comment">              有四种情况：</span></span><br><span class="line"><span class="comment">              ①：偏向本线程</span></span><br><span class="line"><span class="comment">              ②：要撤销偏向锁(可能变成轻量级锁或者重量级锁)</span></span><br><span class="line"><span class="comment">              ③：不偏向本线程，要重偏向到本线程</span></span><br><span class="line"><span class="comment">              ④：是匿名偏向锁</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">              <span class="comment">//声明变量线程id</span></span><br><span class="line">            <span class="type">uintptr_t</span> thread_ident;</span><br><span class="line">            <span class="type">uintptr_t</span> anticipated_bias_locking_value;</span><br><span class="line">              <span class="comment">//将线程id记录下来</span></span><br><span class="line">            thread_ident = (<span class="type">uintptr_t</span>)istate-&gt;<span class="built_in">thread</span>();</span><br><span class="line">              </span><br><span class="line">              <span class="comment">//通过计算获得一个偏向锁的值</span></span><br><span class="line">            anticipated_bias_locking_value =</span><br><span class="line">              (((<span class="type">uintptr_t</span>)lockee-&gt;<span class="built_in">klass</span>()-&gt;<span class="built_in">prototype_header</span>() | thread_ident) ^ (<span class="type">uintptr_t</span>)mark) &amp;</span><br><span class="line">              ~((<span class="type">uintptr_t</span>) markOopDesc::age_mask_in_place);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*情况①偏向本线程*/</span> </span><br><span class="line">              </span><br><span class="line">              <span class="comment">//这个值==0的话那么就认为是已经偏向本线程  那就什么都不做 将success设置为true返回</span></span><br><span class="line">              <span class="comment">//可以理解成偏向锁的重入</span></span><br><span class="line">            <span class="keyword">if</span>  (anticipated_bias_locking_value == <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="comment">// already biased towards this thread, nothing to do</span></span><br><span class="line">              <span class="keyword">if</span> (PrintBiasedLockingStatistics) &#123;</span><br><span class="line">                (* BiasedLocking::<span class="built_in">biased_lock_entry_count_addr</span>())++;</span><br><span class="line">              &#125;</span><br><span class="line">              success = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">              </span><br><span class="line">            <span class="comment">/*情况②要撤销偏向锁*/</span> </span><br><span class="line">              </span><br><span class="line">            <span class="comment">//反之，判断是否要撤销偏向，说明这个锁很可能是变成了轻量级锁或者重量级锁</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((anticipated_bias_locking_value &amp; markOopDesc::biased_lock_mask_in_place) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//尝试撤销偏向</span></span><br><span class="line">              <span class="comment">// try revoke bias</span></span><br><span class="line">                <span class="comment">//通过klass模板找到一个纯净的头信息</span></span><br><span class="line">              markOop header = lockee-&gt;<span class="built_in">klass</span>()-&gt;<span class="built_in">prototype_header</span>();</span><br><span class="line">                </span><br><span class="line">              <span class="keyword">if</span> (hash != markOopDesc::no_hash) &#123;</span><br><span class="line">                  <span class="comment">//给header设置一个hash值</span></span><br><span class="line">                header = header-&gt;<span class="built_in">copy_set_hash</span>(hash);</span><br><span class="line">              &#125;</span><br><span class="line">                <span class="comment">//cas操作，撤销偏向</span></span><br><span class="line">              <span class="keyword">if</span> (Atomic::<span class="built_in">cmpxchg_ptr</span>(header, lockee-&gt;<span class="built_in">mark_addr</span>(), mark) == mark) &#123;</span><br><span class="line">                  <span class="comment">//撤销偏向成功</span></span><br><span class="line">                <span class="keyword">if</span> (PrintBiasedLockingStatistics)</span><br><span class="line">                  (*BiasedLocking::<span class="built_in">revoked_lock_entry_count_addr</span>())++;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">              </span><br><span class="line">            <span class="comment">/*③：不偏向本线程，要重偏向到本线程*/</span></span><br><span class="line">              </span><br><span class="line">              <span class="comment">//不是偏向本线程，那判断是否要重新偏向</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((anticipated_bias_locking_value &amp; epoch_mask_in_place) !=<span class="number">0</span>) &#123;</span><br><span class="line">               <span class="comment">//尝试重新偏向</span></span><br><span class="line">              <span class="comment">// try rebias</span></span><br><span class="line">                <span class="comment">//获得一个头信息给新头</span></span><br><span class="line">              markOop new_header = (markOop) ( (<span class="type">intptr_t</span>) lockee-&gt;<span class="built_in">klass</span>()-&gt;<span class="built_in">prototype_header</span>() | thread_ident);</span><br><span class="line">              <span class="keyword">if</span> (hash != markOopDesc::no_hash) &#123;</span><br><span class="line">                  <span class="comment">//给新头设置哈希值</span></span><br><span class="line">                new_header = new_header-&gt;<span class="built_in">copy_set_hash</span>(hash);</span><br><span class="line">              &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//CAS操作 ，重新偏向</span></span><br><span class="line">              <span class="keyword">if</span> (Atomic::<span class="built_in">cmpxchg_ptr</span>((<span class="type">void</span>*)new_header, lockee-&gt;<span class="built_in">mark_addr</span>(), mark) == mark) &#123;</span><br><span class="line">                  <span class="comment">//CAS成功，已经偏向本线程</span></span><br><span class="line">                <span class="keyword">if</span> (PrintBiasedLockingStatistics)</span><br><span class="line">                  (* BiasedLocking::<span class="built_in">rebiased_lock_entry_count_addr</span>())++;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">//反之没有重偏向成功，进入锁膨胀方法</span></span><br><span class="line">                <span class="built_in">CALL_VM</span>(InterpreterRuntime::<span class="built_in">monitorenter</span>(THREAD, entry), handle_exception);</span><br><span class="line">              &#125;</span><br><span class="line">                <span class="comment">//加锁成功</span></span><br><span class="line">              success = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">/*④：是匿名偏向锁*/</span></span><br><span class="line">                </span><br><span class="line">              <span class="comment">// try to bias towards thread in case object is anonymously biased</span></span><br><span class="line">              markOop header = (markOop) ((<span class="type">uintptr_t</span>) mark &amp; ((<span class="type">uintptr_t</span>)markOopDesc::biased_lock_mask_in_place |(<span class="type">uintptr_t</span>)markOopDesc::age_mask_in_place |</span><br><span class="line">epoch_mask_in_place));</span><br><span class="line">                <span class="comment">//获得一个头信息 ，然后判断是否给头信息设置hash值</span></span><br><span class="line">              <span class="keyword">if</span> (hash != markOopDesc::no_hash) &#123;</span><br><span class="line">                header = header-&gt;<span class="built_in">copy_set_hash</span>(hash);</span><br><span class="line">              &#125;</span><br><span class="line">                <span class="comment">//将头信息与线程id异或之后给new_header</span></span><br><span class="line">              markOop new_header = (markOop) ((<span class="type">uintptr_t</span>) header | thread_ident);</span><br><span class="line">              <span class="comment">// debugging hint</span></span><br><span class="line">              <span class="built_in">DEBUG_ONLY</span>(entry-&gt;<span class="built_in">lock</span>()-&gt;<span class="built_in">set_displaced_header</span>((markOop) (<span class="type">uintptr_t</span>) <span class="number">0xdeaddead</span>);)</span><br><span class="line">                  <span class="comment">//CAS操作 将匿名偏向锁偏向本线程</span></span><br><span class="line">              <span class="keyword">if</span> (Atomic::<span class="built_in">cmpxchg_ptr</span>((<span class="type">void</span>*)new_header, lockee-&gt;<span class="built_in">mark_addr</span>(), header) == header) &#123;</span><br><span class="line">                  <span class="comment">//加锁成功也就是匿名偏向锁偏向本线程</span></span><br><span class="line">                <span class="keyword">if</span> (PrintBiasedLockingStatistics)</span><br><span class="line">                  (* BiasedLocking::<span class="built_in">anonymously_biased_lock_entry_count_addr</span>())++;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">//反之尝试匿名偏向锁加锁失败，说明有竞争需要进行锁膨胀</span></span><br><span class="line">                <span class="built_in">CALL_VM</span>(InterpreterRuntime::<span class="built_in">monitorenter</span>(THREAD, entry), handle_exception);</span><br><span class="line">              &#125;</span><br><span class="line">              success = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="comment">/*下面是[2]过程，说明这个锁不是偏向锁*/</span>  </span><br><span class="line">          <span class="comment">// traditional lightweight locking</span></span><br><span class="line">            <span class="comment">//只能是轻量级锁或者是重量级锁</span></span><br><span class="line">          <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">              <span class="comment">//将lockee设置成无锁状态</span></span><br><span class="line">            markOop displaced = lockee-&gt;<span class="built_in">mark</span>()-&gt;<span class="built_in">set_unlocked</span>();</span><br><span class="line">              <span class="comment">//将entry的lock也设置成无锁 </span></span><br><span class="line">            entry-&gt;<span class="built_in">lock</span>()-&gt;<span class="built_in">set_displaced_header</span>(displaced);</span><br><span class="line">              <span class="comment">//是否使用重量级锁(即不用轻量级锁和偏向锁，默认为Flase)，如果禁用了则Call_vm为true</span></span><br><span class="line">            <span class="type">bool</span> call_vm = UseHeavyMonitors;</span><br><span class="line">            <span class="keyword">if</span> (call_vm || Atomic::<span class="built_in">cmpxchg_ptr</span>(entry, lockee-&gt;<span class="built_in">mark_addr</span>(), displaced) != displaced) &#123;</span><br><span class="line">                <span class="comment">/*场景1：禁用了轻量级锁，那么进入下面的判断 ！call_vm为false 直接走到else中 进行一个升级到重量级锁</span></span><br><span class="line"><span class="comment">                 场景2:如果是默认则Call_vm为false ，那么会进行一个轻量级锁加锁CAS过程， 如果加锁失败会进行锁膨胀升级到重量级锁</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">              <span class="comment">// Is it simple recursive case?</span></span><br><span class="line">                <span class="comment">//判断是否这个锁是轻量级锁重入，如果是把Lock设置为null</span></span><br><span class="line">              <span class="keyword">if</span> (!call_vm &amp;&amp; THREAD-&gt;<span class="built_in">is_lock_owned</span>((address) displaced-&gt;<span class="built_in">clear_lock_bits</span>())) &#123;</span><br><span class="line">                entry-&gt;<span class="built_in">lock</span>()-&gt;<span class="built_in">set_displaced_header</span>(<span class="literal">NULL</span>);</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">CALL_VM</span>(InterpreterRuntime::<span class="built_in">monitorenter</span>(THREAD, entry), handle_exception);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">UPDATE_PC_AND_TOS_AND_CONTINUE</span>(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          istate-&gt;<span class="built_in">set_msg</span>(more_monitors);</span><br><span class="line">          <span class="built_in">UPDATE_PC_AND_RETURN</span>(<span class="number">0</span>); <span class="comment">// Re-execute</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></div></figure><p>这里是上面没有详细说到的东西</p>        <h3 id="①basicObjectLock-记录了锁和持有锁的对象"   >          <a href="#①basicObjectLock-记录了锁和持有锁的对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#①basicObjectLock-记录了锁和持有锁的对象" class="headerlink" title="①basicObjectLock:记录了锁和持有锁的对象"></a>①basicObjectLock:记录了锁和持有锁的对象</h3>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BasicObjectLock</span> VALUE_OBJ_CLASS_SPEC &#123;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">VMStructs</span>;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  BasicLock _lock;                                    <span class="comment">// the lock, must be double word aligned</span></span><br><span class="line">  oop       _obj;                                     <span class="comment">// object holds the lock;</span></span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230802193545800.png"  alt="BasicObjectLock">      </p>        <h3 id="②Atomic-cmpxchg-ptr-exchange-value-dest-compare-value"   >          <a href="#②Atomic-cmpxchg-ptr-exchange-value-dest-compare-value" class="heading-link"><i class="fas fa-link"></i></a><a href="#②Atomic-cmpxchg-ptr-exchange-value-dest-compare-value" class="headerlink" title="②Atomic::cmpxchg_ptr(exchange_value,  dest, compare_value)"></a>②Atomic::cmpxchg_ptr(exchange_value,  dest, compare_value)</h3>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CAS操作 参数1:想要改变的值</span><br><span class="line">    参数2:目的地址</span><br><span class="line">    参数3:用于比较的旧值</span><br><span class="line">返回结果如果CAS成功则返回期望值(参数3)</span><br><span class="line">  CAS失败则返回要改变的值(参数1)</span><br></pre></td></tr></table></div></figure>        <h3 id="③匿名偏向锁"   >          <a href="#③匿名偏向锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#③匿名偏向锁" class="headerlink" title="③匿名偏向锁"></a>③匿名偏向锁</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230802211243380.png"  alt="匿名偏向锁">      </p>        <h3 id="④轻量级锁"   >          <a href="#④轻量级锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#④轻量级锁" class="headerlink" title="④轻量级锁"></a>④轻量级锁</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230802211843053.png"  alt="轻量级锁">      </p>        <h3 id="⑤偏向锁加锁流程图"   >          <a href="#⑤偏向锁加锁流程图" class="heading-link"><i class="fas fa-link"></i></a><a href="#⑤偏向锁加锁流程图" class="headerlink" title="⑤偏向锁加锁流程图"></a>⑤偏向锁加锁流程图</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230802203659004.png"  alt="偏向锁加锁流程">      </p>        <h2 id="锁膨胀-InterpreterRuntime-monitorenter"   >          <a href="#锁膨胀-InterpreterRuntime-monitorenter" class="heading-link"><i class="fas fa-link"></i></a><a href="#锁膨胀-InterpreterRuntime-monitorenter" class="headerlink" title="锁膨胀(InterpreterRuntime::monitorenter)"></a>锁膨胀(InterpreterRuntime::monitorenter)</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Synchronization</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The interpreter&#x27;s synchronization code is factored out so that it can</span></span><br><span class="line"><span class="comment">// be shared by method invocation and synchronized blocks.</span></span><br><span class="line"><span class="comment">//%note synchronization_3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//%note monitor_1</span></span><br><span class="line"><span class="built_in">IRT_ENTRY_NO_ASYNC</span>(<span class="type">void</span>, InterpreterRuntime::<span class="built_in">monitorenter</span>(JavaThread* thread, BasicObjectLock* elem))</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ASSERT</span></span><br><span class="line">  thread-&gt;<span class="built_in">last_frame</span>().<span class="built_in">interpreter_frame_verify_monitor</span>(elem);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  <span class="keyword">if</span> (PrintBiasedLockingStatistics) &#123;</span><br><span class="line">    Atomic::<span class="built_in">inc</span>(BiasedLocking::<span class="built_in">slow_path_entry_count_addr</span>());</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 将thread和 BasicObjectLock封装到h_obj中</span></span><br><span class="line">  <span class="function">Handle <span class="title">h_obj</span><span class="params">(thread, elem-&gt;obj())</span></span>;</span><br><span class="line">  <span class="built_in">assert</span>(Universe::<span class="built_in">heap</span>()-&gt;<span class="built_in">is_in_reserved_or_null</span>(<span class="built_in">h_obj</span>()),</span><br><span class="line">         <span class="string">&quot;must be NULL or an object&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否使用了偏向锁</span></span><br><span class="line">  <span class="keyword">if</span> (UseBiasedLocking) &#123;</span><br><span class="line">    <span class="comment">// Retry fast entry if bias is revoked to avoid unnecessary inflation</span></span><br><span class="line">      <span class="comment">//是使用了偏向锁，所以要撤销偏向锁，走到fast_entry中</span></span><br><span class="line">    ObjectSynchronizer::<span class="built_in">fast_enter</span>(h_obj, elem-&gt;<span class="built_in">lock</span>(), <span class="literal">true</span>, CHECK);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//没有使用偏向锁，进入Slow_enter</span></span><br><span class="line">    ObjectSynchronizer::<span class="built_in">slow_enter</span>(h_obj, elem-&gt;<span class="built_in">lock</span>(), CHECK);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">assert</span>(Universe::<span class="built_in">heap</span>()-&gt;<span class="built_in">is_in_reserved_or_null</span>(elem-&gt;<span class="built_in">obj</span>()),</span><br><span class="line">         <span class="string">&quot;must be NULL or an object&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ASSERT</span></span><br><span class="line">  thread-&gt;<span class="built_in">last_frame</span>().<span class="built_in">interpreter_frame_verify_monitor</span>(elem);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">IRT_END</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="fast-entry"   >          <a href="#fast-entry" class="heading-link"><i class="fas fa-link"></i></a><a href="#fast-entry" class="headerlink" title="fast_entry"></a>fast_entry</h3>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">传入参数1：obj ：(封装有线程ID和BasicObjectLock)</span></span><br><span class="line"><span class="comment">    参数2：lock ：BaiscObjectLock中的Lock</span></span><br><span class="line"><span class="comment">参数3：attempt_rebias : True,先不用管</span></span><br><span class="line"><span class="comment">参数4：TRAPS: check</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ObjectSynchronizer::fast_enter</span><span class="params">(Handle obj, BasicLock* lock, <span class="type">bool</span> attempt_rebias, TRAPS)</span> </span>&#123;</span><br><span class="line"> <span class="comment">//是否用了偏向锁</span></span><br><span class="line">    <span class="keyword">if</span> (UseBiasedLocking) &#123;</span><br><span class="line">    <span class="comment">//用了偏向锁，是否到达线程安全点</span></span><br><span class="line">    <span class="keyword">if</span> (!SafepointSynchronize::<span class="built_in">is_at_safepoint</span>()) &#123;</span><br><span class="line">        <span class="comment">//没到达线程安全点，调用方法revoke_and_rebias撤销锁并且重偏向</span></span><br><span class="line">      BiasedLocking::Condition cond = BiasedLocking::<span class="built_in">revoke_and_rebias</span>(obj, attempt_rebias, THREAD);</span><br><span class="line">        </span><br><span class="line">      <span class="keyword">if</span> (cond == BiasedLocking::BIAS_REVOKED_AND_REBIASED) &#123;</span><br><span class="line">          <span class="comment">//如果撤销锁了并且重偏向了直接return</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//到达了线程安全点</span></span><br><span class="line">      <span class="built_in">assert</span>(!attempt_rebias, <span class="string">&quot;can not rebias toward VM thread&quot;</span>);</span><br><span class="line">        <span class="comment">//线程安全点撤销偏向锁</span></span><br><span class="line">      BiasedLocking::<span class="built_in">revoke_at_safepoint</span>(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">assert</span>(!obj-&gt;<span class="built_in">mark</span>()-&gt;<span class="built_in">has_bias_pattern</span>(), <span class="string">&quot;biases should be revoked by now&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//进入Slow_enter方法</span></span><br><span class="line"> <span class="built_in">slow_enter</span> (obj, lock, THREAD) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="revoke-and-rebias"   >          <a href="#revoke-and-rebias" class="heading-link"><i class="fas fa-link"></i></a><a href="#revoke-and-rebias" class="headerlink" title="revoke_and_rebias"></a>revoke_and_rebias</h3>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">参数1：obj ：封装有线程ID和BasicObjectLock)</span></span><br><span class="line"><span class="comment">参数2：attempt_rebias，传入的True</span></span><br><span class="line"><span class="comment">参数3：TRAPS: check</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">BiasedLocking::Condition <span class="title">BiasedLocking::revoke_and_rebias</span><span class="params">(Handle obj, <span class="type">bool</span> attempt_rebias, TRAPS)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">assert</span>(!SafepointSynchronize::<span class="built_in">is_at_safepoint</span>(), <span class="string">&quot;must not be called while at safepoint&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We can revoke the biases of anonymously-biased objects</span></span><br><span class="line">  <span class="comment">// efficiently enough that we should not cause these revocations to</span></span><br><span class="line">  <span class="comment">// update the heuristics because doing so may cause unwanted bulk</span></span><br><span class="line">  <span class="comment">// revocations (which are expensive) to occur.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获得头信息</span></span><br><span class="line">  markOop mark = obj-&gt;<span class="built_in">mark</span>();</span><br><span class="line">    <span class="comment">//因为attempt_rebias==true，所以这个判断可以不走</span></span><br><span class="line">  <span class="keyword">if</span> (mark-&gt;<span class="built_in">is_biased_anonymously</span>() &amp;&amp; !attempt_rebias) &#123;</span><br><span class="line">      <span class="comment">//判断这个锁是否是匿名偏向，如果是匿名偏向且不需要重偏向则撤销偏向锁</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">// We are probably trying to revoke the bias of this object due to</span></span><br><span class="line">    <span class="comment">// an identity hash code computation. Try to revoke the bias</span></span><br><span class="line">    <span class="comment">// without a safepoint. This is possible if we can successfully</span></span><br><span class="line">    <span class="comment">// compare-and-exchange an unbiased header into the mark word of</span></span><br><span class="line">    <span class="comment">// the object, meaning that no other thread has raced to acquire</span></span><br><span class="line">    <span class="comment">// the bias of the object.</span></span><br><span class="line">    markOop biased_value       = mark;</span><br><span class="line">    markOop unbiased_prototype = markOopDesc::<span class="built_in">prototype</span>()-&gt;<span class="built_in">set_age</span>(mark-&gt;<span class="built_in">age</span>());</span><br><span class="line">    markOop res_mark = (markOop) Atomic::<span class="built_in">cmpxchg_ptr</span>(unbiased_prototype, obj-&gt;<span class="built_in">mark_addr</span>(), mark);</span><br><span class="line">    <span class="keyword">if</span> (res_mark == biased_value) &#123;</span><br><span class="line">      <span class="keyword">return</span> BIAS_REVOKED;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//直接进入下面的判断中，判断是否是偏向锁</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mark-&gt;<span class="built_in">has_bias_pattern</span>()) &#123;</span><br><span class="line">      <span class="comment">//是偏向锁</span></span><br><span class="line">      <span class="comment">//取到Klass 为k</span></span><br><span class="line">      <span class="comment">//k取到纯净的头信息</span></span><br><span class="line">    Klass* k = obj-&gt;<span class="built_in">klass</span>();</span><br><span class="line">    markOop prototype_header = k-&gt;<span class="built_in">prototype_header</span>();</span><br><span class="line">    <span class="keyword">if</span> (!prototype_header-&gt;<span class="built_in">has_bias_pattern</span>()) &#123;</span><br><span class="line">        <span class="comment">//如果原始的头是不是偏向锁</span></span><br><span class="line">        </span><br><span class="line">      <span class="comment">// This object has a stale bias from before the bulk revocation</span></span><br><span class="line">      <span class="comment">// for this data type occurred. It&#x27;s pointless to update the</span></span><br><span class="line">      <span class="comment">// heuristics at this point so simply update the header with a</span></span><br><span class="line">      <span class="comment">// CAS. If we fail this race, the object&#x27;s bias has been revoked</span></span><br><span class="line">      <span class="comment">// by another thread so we simply return and let the caller deal</span></span><br><span class="line">      <span class="comment">// with it.</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将锁头Lock改成无锁状态，然后返回BIAS_REVOKED状态(已经撤销偏向)</span></span><br><span class="line">      markOop biased_value       = mark;</span><br><span class="line">      markOop res_mark = (markOop) Atomic::<span class="built_in">cmpxchg_ptr</span>(prototype_header, obj-&gt;<span class="built_in">mark_addr</span>(), mark);</span><br><span class="line">      <span class="built_in">assert</span>(!(*(obj-&gt;<span class="built_in">mark_addr</span>()))-&gt;<span class="built_in">has_bias_pattern</span>(), <span class="string">&quot;even if we raced, should still be revoked&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> BIAS_REVOKED;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prototype_header-&gt;<span class="built_in">bias_epoch</span>() != mark-&gt;<span class="built_in">bias_epoch</span>()) &#123;</span><br><span class="line">        <span class="comment">//判断这个Epoch数据，判断是否被其他线程修改过，如果修改过那么这个偏向锁无效(过期)</span></span><br><span class="line">        </span><br><span class="line">      <span class="comment">// The epoch of this biasing has expired indicating that the</span></span><br><span class="line">      <span class="comment">// object is effectively unbiased. Depending on whether we need</span></span><br><span class="line">      <span class="comment">// to rebias or revoke the bias of this object we can do it</span></span><br><span class="line">      <span class="comment">// efficiently enough with a CAS that we shouldn&#x27;t update the</span></span><br><span class="line">      <span class="comment">// heuristics. This is normally done in the assembly code but we</span></span><br><span class="line">      <span class="comment">// can reach this point due to various points in the runtime</span></span><br><span class="line">      <span class="comment">// needing to revoke biases.</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//是否需要重偏向，我们这传入的数据是true所以需要重偏向</span></span><br><span class="line">      <span class="keyword">if</span> (attempt_rebias) &#123;</span><br><span class="line">        <span class="built_in">assert</span>(THREAD-&gt;<span class="built_in">is_Java_thread</span>(), <span class="string">&quot;&quot;</span>);</span><br><span class="line">        markOop biased_value       = mark;</span><br><span class="line">        markOop rebiased_prototype = markOopDesc::<span class="built_in">encode</span>((JavaThread*) THREAD, mark-&gt;<span class="built_in">age</span>(), prototype_header-&gt;<span class="built_in">bias_epoch</span>());</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//CAS操作将锁重新偏向</span></span><br><span class="line">        markOop res_mark = (markOop) Atomic::<span class="built_in">cmpxchg_ptr</span>(rebiased_prototype, obj-&gt;<span class="built_in">mark_addr</span>(), mark);</span><br><span class="line">        <span class="keyword">if</span> (res_mark == biased_value) &#123;</span><br><span class="line">            <span class="comment">//撤销后且重新偏向成功 返回BIAS_REVOKED_AND_REBIASED</span></span><br><span class="line">          <span class="keyword">return</span> BIAS_REVOKED_AND_REBIASED;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//这不需要重新偏向</span></span><br><span class="line">        markOop biased_value       = mark;</span><br><span class="line">        markOop unbiased_prototype = markOopDesc::<span class="built_in">prototype</span>()-&gt;<span class="built_in">set_age</span>(mark-&gt;<span class="built_in">age</span>());</span><br><span class="line">          <span class="comment">//CAS将头信息设置为无锁状态</span></span><br><span class="line">        markOop res_mark = (markOop) Atomic::<span class="built_in">cmpxchg_ptr</span>(unbiased_prototype, obj-&gt;<span class="built_in">mark_addr</span>(), mark);</span><br><span class="line">        <span class="keyword">if</span> (res_mark == biased_value) &#123;</span><br><span class="line">            <span class="comment">//将锁头Lock改成无锁状态，然后返回BIAS_REVOKED状态(已经撤销偏向)</span></span><br><span class="line">          <span class="keyword">return</span> BIAS_REVOKED;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//走到这里说明不是匿名偏向、偏向锁撤销且重偏向撤销失败、偏向锁撤销失败</span></span><br><span class="line"> HeuristicsResult heuristics = <span class="built_in">update_heuristics</span>(<span class="built_in">obj</span>(), attempt_rebias);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断这个锁是否是偏向状态</span></span><br><span class="line">  <span class="keyword">if</span> (heuristics == HR_NOT_BIASED) &#123;</span><br><span class="line">      <span class="comment">//这个锁不是偏向状态</span></span><br><span class="line">    <span class="keyword">return</span> NOT_BIASED;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (heuristics == HR_SINGLE_REVOKE) &#123;</span><br><span class="line">      <span class="comment">//反之 这个锁是个偏向锁，判断是否单例撤销</span></span><br><span class="line">    Klass *k = obj-&gt;<span class="built_in">klass</span>();</span><br><span class="line">    markOop prototype_header = k-&gt;<span class="built_in">prototype_header</span>();</span><br><span class="line">    <span class="keyword">if</span> (mark-&gt;<span class="built_in">biased_locker</span>() == THREAD &amp;&amp;</span><br><span class="line">        prototype_header-&gt;<span class="built_in">bias_epoch</span>() == mark-&gt;<span class="built_in">bias_epoch</span>()) &#123;</span><br><span class="line">      <span class="comment">// A thread is trying to revoke the bias of an object biased</span></span><br><span class="line">      <span class="comment">// toward it, again likely due to an identity hash code</span></span><br><span class="line">      <span class="comment">// computation. We can again avoid a safepoint in this case</span></span><br><span class="line">      <span class="comment">// since we are only going to walk our own stack. There are no</span></span><br><span class="line">      <span class="comment">// races with revocations occurring in other threads because we</span></span><br><span class="line">      <span class="comment">// reach no safepoints in the revocation path.</span></span><br><span class="line">      <span class="comment">// Also check the epoch because even if threads match, another thread</span></span><br><span class="line">      <span class="comment">// can come in with a CAS to steal the bias of an object that has a</span></span><br><span class="line">      <span class="comment">// stale epoch.</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//判断是否是当前持锁线程进行锁撤销</span></span><br><span class="line">      ResourceMark rm;</span><br><span class="line">      <span class="keyword">if</span> (TraceBiasedLocking) &#123;</span><br><span class="line">        tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;Revoking bias by walking my own stack:&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用revoke_bias方法进行撤销锁 返回一个cond(撤销的状态字)</span></span><br><span class="line">      BiasedLocking::Condition cond = <span class="built_in">revoke_bias</span>(<span class="built_in">obj</span>(), <span class="literal">false</span>, <span class="literal">false</span>, (JavaThread*) THREAD);</span><br><span class="line">      ((JavaThread*) THREAD)-&gt;<span class="built_in">set_cached_monitor_info</span>(<span class="literal">NULL</span>);</span><br><span class="line">      <span class="built_in">assert</span>(cond == BIAS_REVOKED, <span class="string">&quot;why not?&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> cond;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//当前线程已经死了</span></span><br><span class="line">        <span class="comment">//交给虚拟机去进行一个锁撤销</span></span><br><span class="line">      VM_RevokeBias <span class="built_in">revoke</span>(&amp;obj, (JavaThread*) THREAD);</span><br><span class="line">      VMThread::<span class="built_in">execute</span>(&amp;revoke);</span><br><span class="line">      <span class="keyword">return</span> revoke.<span class="built_in">status_code</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//走到这里说明需要进行一个批量撤销</span></span><br><span class="line">  <span class="built_in">assert</span>((heuristics == HR_BULK_REVOKE) ||</span><br><span class="line">         (heuristics == HR_BULK_REBIAS), <span class="string">&quot;?&quot;</span>);</span><br><span class="line">  <span class="function">VM_BulkRevokeBias <span class="title">bulk_revoke</span><span class="params">(&amp;obj, (JavaThread*) THREAD,</span></span></span><br><span class="line"><span class="params"><span class="function">                                (heuristics == HR_BULK_REBIAS),</span></span></span><br><span class="line"><span class="params"><span class="function">                                attempt_rebias)</span></span>;</span><br><span class="line">  VMThread::<span class="built_in">execute</span>(&amp;bulk_revoke);</span><br><span class="line">  <span class="keyword">return</span> bulk_revoke.<span class="built_in">status_code</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="revoke-bias"   >          <a href="#revoke-bias" class="heading-link"><i class="fas fa-link"></i></a><a href="#revoke-bias" class="headerlink" title="revoke_bias"></a>revoke_bias</h3>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">传入 参数1：obj ：(封装有线程ID和BasicObjectLock)</span></span><br><span class="line"><span class="comment">参数2：是否允  许重偏向，False</span></span><br><span class="line"><span class="comment">参数3：是否是批处理，False</span></span><br><span class="line"><span class="comment">参数4：线程</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> BiasedLocking::Condition <span class="title">revoke_bias</span><span class="params">(oop obj, <span class="type">bool</span> allow_rebias, <span class="type">bool</span> is_bulk, JavaThread* requesting_thread)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获得对象头信息</span></span><br><span class="line">  markOop mark = obj-&gt;<span class="built_in">mark</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断是否是偏向状态</span></span><br><span class="line">  <span class="keyword">if</span> (!mark-&gt;<span class="built_in">has_bias_pattern</span>()) &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//如果允许跟踪偏向锁 我们默认是false就不走这个</span></span><br><span class="line">    <span class="keyword">if</span> (TraceBiasedLocking) &#123;</span><br><span class="line">      ResourceMark rm;</span><br><span class="line">      tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;  (Skipping revocation of object of type %s because it&#x27;s no longer biased)&quot;</span>,</span><br><span class="line">                    obj-&gt;<span class="built_in">klass</span>()-&gt;<span class="built_in">external_name</span>());</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">//到这里说明没有偏向直接返回NOT_BIASED</span></span><br><span class="line">    <span class="keyword">return</span> BiasedLocking::NOT_BIASED;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">//获得锁的年龄</span></span><br><span class="line">  uint age = mark-&gt;<span class="built_in">age</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获得一个锁的对象头</span></span><br><span class="line">  markOop   biased_prototype = markOopDesc::<span class="built_in">biased_locking_prototype</span>()-&gt;<span class="built_in">set_age</span>(age);</span><br><span class="line">    <span class="comment">//获得一个无锁的对象头</span></span><br><span class="line">  markOop unbiased_prototype = markOopDesc::<span class="built_in">prototype</span>()-&gt;<span class="built_in">set_age</span>(age);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//同上默认不允许跟踪偏向锁</span></span><br><span class="line">  <span class="keyword">if</span> (TraceBiasedLocking &amp;&amp; (Verbose || !is_bulk)) &#123;</span><br><span class="line">    ResourceMark rm;</span><br><span class="line">    tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;Revoking bias of object &quot;</span> INTPTR_FORMAT <span class="string">&quot; , mark &quot;</span> INTPTR_FORMAT <span class="string">&quot; , type %s , prototype header &quot;</span> INTPTR_FORMAT <span class="string">&quot; , allow rebias %d , requesting thread &quot;</span> INTPTR_FORMAT,</span><br><span class="line">                  <span class="built_in">p2i</span>((<span class="type">void</span> *)obj), (<span class="type">intptr_t</span>) mark, obj-&gt;<span class="built_in">klass</span>()-&gt;<span class="built_in">external_name</span>(), (<span class="type">intptr_t</span>) obj-&gt;<span class="built_in">klass</span>()-&gt;<span class="built_in">prototype_header</span>(), (allow_rebias ? <span class="number">1</span> : <span class="number">0</span>), (<span class="type">intptr_t</span>) requesting_thread);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取对象头的偏向线程</span></span><br><span class="line">  JavaThread* biased_thread = mark-&gt;<span class="built_in">biased_locker</span>();</span><br><span class="line">  <span class="keyword">if</span> (biased_thread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="comment">//如果偏向线程为空说明是一个匿名偏向锁</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">// Object is anonymously biased. We can get here if, for</span></span><br><span class="line">    <span class="comment">// example, we revoke the bias due to an identity hash code</span></span><br><span class="line">    <span class="comment">// being computed for an object.</span></span><br><span class="line">    <span class="keyword">if</span> (!allow_rebias) &#123;</span><br><span class="line">        <span class="comment">//如果不允许重偏向，则设置为无锁状态</span></span><br><span class="line">      obj-&gt;<span class="built_in">set_mark</span>(unbiased_prototype);</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">//默认不进</span></span><br><span class="line">    <span class="keyword">if</span> (TraceBiasedLocking &amp;&amp; (Verbose || !is_bulk)) &#123;</span><br><span class="line">      tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;  Revoked bias of anonymously-biased object&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">//返回已经撤销偏向</span></span><br><span class="line">    <span class="keyword">return</span> BiasedLocking::BIAS_REVOKED;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Handle case where the thread toward which the object was biased has exited</span></span><br><span class="line">    <span class="comment">//设置一个状态 记录持锁线程是否还活着</span></span><br><span class="line">  <span class="type">bool</span> thread_is_alive = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (requesting_thread == biased_thread) &#123;</span><br><span class="line">      <span class="comment">//如果请求线程和偏向线程相等则说明持锁线程还活着</span></span><br><span class="line">    thread_is_alive = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//遍历线程 然后找到持锁线程，如果持锁线程还存在 则将状态置为True</span></span><br><span class="line">    <span class="keyword">for</span> (JavaThread* cur_thread = Threads::<span class="built_in">first</span>(); cur_thread != <span class="literal">NULL</span>; cur_thread = cur_thread-&gt;<span class="built_in">next</span>()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (cur_thread == biased_thread) &#123;</span><br><span class="line">        thread_is_alive = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">//运行到这 Thread_is_alive依然是false 说明持锁线程已经死了</span></span><br><span class="line">  <span class="keyword">if</span> (!thread_is_alive) &#123;</span><br><span class="line">    <span class="keyword">if</span> (allow_rebias) &#123;</span><br><span class="line">        <span class="comment">//如果允许重偏向则设置为匿名偏向锁状态，我们传入的是False</span></span><br><span class="line">      obj-&gt;<span class="built_in">set_mark</span>(biased_prototype);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//反之设为无锁状态</span></span><br><span class="line">      obj-&gt;<span class="built_in">set_mark</span>(unbiased_prototype);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (TraceBiasedLocking &amp;&amp; (Verbose || !is_bulk)) &#123;</span><br><span class="line">      tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;  Revoked bias of object biased toward dead thread&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="comment">//返回已经撤销偏向</span></span><br><span class="line">    <span class="keyword">return</span> BiasedLocking::BIAS_REVOKED;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Thread owning bias is alive.</span></span><br><span class="line">  <span class="comment">// Check to see whether it currently owns the lock and, if so,</span></span><br><span class="line">  <span class="comment">// write down the needed displaced headers to the thread&#x27;s stack.</span></span><br><span class="line">  <span class="comment">// Otherwise, restore the object&#x27;s header either to the unlocked</span></span><br><span class="line">  <span class="comment">// or unbiased state.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断锁偏向线程是否还在，检查他是否拥有锁，如果有则写入线程堆栈中反之解锁或者解除偏向</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取一个Monitor列表</span></span><br><span class="line">  GrowableArray&lt;MonitorInfo*&gt;* cached_monitor_info = <span class="built_in">get_or_compute_monitor_info</span>(biased_thread);</span><br><span class="line">  BasicLock* highest_lock = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//遍历列表</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cached_monitor_info-&gt;<span class="built_in">length</span>(); i++) &#123;</span><br><span class="line">    MonitorInfo* mon_info = cached_monitor_info-&gt;<span class="built_in">at</span>(i);</span><br><span class="line">    <span class="keyword">if</span> (mon_info-&gt;<span class="built_in">owner</span>() == obj) &#123;</span><br><span class="line">        <span class="comment">//这个owner指向的是不是当前的锁(重入的时候只有第一个进来的持有锁的地址)</span></span><br><span class="line">      <span class="keyword">if</span> (TraceBiasedLocking &amp;&amp; Verbose) &#123;</span><br><span class="line">        tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;   mon_info-&gt;owner (&quot;</span> PTR_FORMAT <span class="string">&quot;) == obj (&quot;</span> PTR_FORMAT <span class="string">&quot;)&quot;</span>,</span><br><span class="line">                      <span class="built_in">p2i</span>((<span class="type">void</span> *) mon_info-&gt;<span class="built_in">owner</span>()),</span><br><span class="line">                      <span class="built_in">p2i</span>((<span class="type">void</span> *) obj));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Assume recursive case and fix up highest lock later</span></span><br><span class="line">        <span class="comment">//获取一个NULL 设置为mark</span></span><br><span class="line">      markOop mark = markOopDesc::<span class="built_in">encode</span>((BasicLock*) <span class="literal">NULL</span>);</span><br><span class="line">        </span><br><span class="line">       <span class="comment">//将Highest指向这个锁对象</span></span><br><span class="line">      highest_lock = mon_info-&gt;<span class="built_in">lock</span>();</span><br><span class="line">        <span class="comment">//将obj的Mark设为Null</span></span><br><span class="line">      highest_lock-&gt;<span class="built_in">set_displaced_header</span>(mark);</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (TraceBiasedLocking &amp;&amp; Verbose) &#123;</span><br><span class="line">        tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;   mon_info-&gt;owner (&quot;</span> PTR_FORMAT <span class="string">&quot;) != obj (&quot;</span> PTR_FORMAT <span class="string">&quot;)&quot;</span>,</span><br><span class="line">                      <span class="built_in">p2i</span>((<span class="type">void</span> *) mon_info-&gt;<span class="built_in">owner</span>()),</span><br><span class="line">                      <span class="built_in">p2i</span>((<span class="type">void</span> *) obj));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> (highest_lock != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="comment">//遍历结束之后Highest不为空说明找到了可重入锁的第一个锁头</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">// Fix up highest lock to contain displaced header and point</span></span><br><span class="line">    <span class="comment">// object at it</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//将表头设置为无锁状态</span></span><br><span class="line">    highest_lock-&gt;<span class="built_in">set_displaced_header</span>(unbiased_prototype);</span><br><span class="line">    <span class="comment">// Reset object header to point to displaced mark.</span></span><br><span class="line">    <span class="comment">// Must release storing the lock address for platforms without TSO</span></span><br><span class="line">    <span class="comment">// ordering (e.g. ppc).</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//将Obj的信息指向了高位锁，就是形成了一个轻量级锁</span></span><br><span class="line">    obj-&gt;<span class="built_in">release_set_mark</span>(markOopDesc::<span class="built_in">encode</span>(highest_lock));</span><br><span class="line">    <span class="built_in">assert</span>(!obj-&gt;<span class="built_in">mark</span>()-&gt;<span class="built_in">has_bias_pattern</span>(), <span class="string">&quot;illegal mark state: stack lock used bias bit&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (TraceBiasedLocking &amp;&amp; (Verbose || !is_bulk)) &#123;</span><br><span class="line">      tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;  Revoked bias of currently-locked object&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//反之Highest为空则说明没有线程持有锁</span></span><br><span class="line">    <span class="keyword">if</span> (TraceBiasedLocking &amp;&amp; (Verbose || !is_bulk)) &#123;</span><br><span class="line">      tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;  Revoked bias of currently-unlocked object&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (allow_rebias) &#123;</span><br><span class="line">        <span class="comment">//如果可以偏向则重新偏向 我们传入的是false</span></span><br><span class="line">      obj-&gt;<span class="built_in">set_mark</span>(biased_prototype);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Store the unlocked value into the object&#x27;s header.</span></span><br><span class="line">        <span class="comment">//将锁设为无锁状态</span></span><br><span class="line">      obj-&gt;<span class="built_in">set_mark</span>(unbiased_prototype);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//返回已经撤销锁信号</span></span><br><span class="line">  <span class="keyword">return</span> BiasedLocking::BIAS_REVOKED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="slow-enter"   >          <a href="#slow-enter" class="heading-link"><i class="fas fa-link"></i></a><a href="#slow-enter" class="headerlink" title="slow_enter"></a>slow_enter</h3>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ObjectSynchronizer::slow_enter</span><span class="params">(Handle obj, BasicLock* lock, TRAPS)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获得头信息</span></span><br><span class="line">  markOop mark = obj-&gt;<span class="built_in">mark</span>();</span><br><span class="line">  <span class="built_in">assert</span>(!mark-&gt;<span class="built_in">has_bias_pattern</span>(), <span class="string">&quot;should not see bias pattern here&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (mark-&gt;<span class="built_in">is_neutral</span>()) &#123;</span><br><span class="line">      <span class="comment">//如果记录是一个无锁状态</span></span><br><span class="line">    <span class="comment">// Anticipate successful CAS -- the ST of the displaced mark must</span></span><br><span class="line">    <span class="comment">// be visible &lt;= the ST performed by the CAS.</span></span><br><span class="line">      <span class="comment">//将锁设置成头信息</span></span><br><span class="line">    lock-&gt;<span class="built_in">set_displaced_header</span>(mark);</span><br><span class="line">    <span class="keyword">if</span> (mark == (markOop) Atomic::<span class="built_in">cmpxchg_ptr</span>(lock, <span class="built_in">obj</span>()-&gt;<span class="built_in">mark_addr</span>(), mark)) &#123;</span><br><span class="line">      <span class="comment">//CAS操作，成功即是轻量级锁</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">TEVENT</span> (slow_enter: release stacklock) ;</span><br><span class="line">      <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Fall through to inflate() ...</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mark-&gt;<span class="built_in">has_locker</span>() &amp;&amp; THREAD-&gt;<span class="built_in">is_lock_owned</span>((address)mark-&gt;<span class="built_in">locker</span>())) &#123;</span><br><span class="line">      <span class="comment">//反之锁已经有拥有者了，判断当前线程是否是持锁线程</span></span><br><span class="line">    <span class="built_in">assert</span>(lock != mark-&gt;<span class="built_in">locker</span>(), <span class="string">&quot;must not re-lock the same lock&quot;</span>);</span><br><span class="line">    <span class="built_in">assert</span>(lock != (BasicLock*)obj-&gt;<span class="built_in">mark</span>(), <span class="string">&quot;don&#x27;t relock with same BasicLock&quot;</span>);</span><br><span class="line">      <span class="comment">//如果是说明是轻量级锁的重入,将下一个Lock的头设为Null</span></span><br><span class="line">    lock-&gt;<span class="built_in">set_displaced_header</span>(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">  <span class="comment">// The following optimization isn&#x27;t particularly useful.</span></span><br><span class="line">  <span class="keyword">if</span> (mark-&gt;<span class="built_in">has_monitor</span>() &amp;&amp; mark-&gt;<span class="built_in">monitor</span>()-&gt;<span class="built_in">is_entered</span>(THREAD)) &#123; </span><br><span class="line">    lock-&gt;<span class="built_in">set_displaced_header</span> (<span class="literal">NULL</span>) ;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// The object header will never be displaced to this lock,</span></span><br><span class="line">  <span class="comment">// so it does not matter what the value is, except that it</span></span><br><span class="line">  <span class="comment">// must be non-zero to avoid looking like a re-entrant lock,</span></span><br><span class="line">  <span class="comment">// and must not look locked either.</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//以上是轻量级锁的膨胀过程，下面是重量级锁的过程</span></span><br><span class="line">  lock-&gt;<span class="built_in">set_displaced_header</span>(markOopDesc::<span class="built_in">unused_mark</span>());</span><br><span class="line">  ObjectSynchronizer::<span class="built_in">inflate</span>(THREAD, <span class="built_in">obj</span>())-&gt;<span class="built_in">enter</span>(THREAD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>这里是上面没有详细说到的东西</p>        <h3 id="①轻量级锁重入"   >          <a href="#①轻量级锁重入" class="heading-link"><i class="fas fa-link"></i></a><a href="#①轻量级锁重入" class="headerlink" title="①轻量级锁重入"></a>①轻量级锁重入</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230803012321008.png"  alt="轻量级锁重入">      </p>        <h3 id="②线程安全点"   >          <a href="#②线程安全点" class="heading-link"><i class="fas fa-link"></i></a><a href="#②线程安全点" class="headerlink" title="②线程安全点"></a>②线程安全点</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230803014810909.png"  alt="线程安全点">      </p>        <h3 id="③轻量级锁膨胀流程图"   >          <a href="#③轻量级锁膨胀流程图" class="heading-link"><i class="fas fa-link"></i></a><a href="#③轻量级锁膨胀流程图" class="headerlink" title="③轻量级锁膨胀流程图"></a>③轻量级锁膨胀流程图</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230803015339537.png"  alt="轻量级锁膨胀流程图">      </p>        <h3 id="④撤销偏向锁流程图"   >          <a href="#④撤销偏向锁流程图" class="heading-link"><i class="fas fa-link"></i></a><a href="#④撤销偏向锁流程图" class="headerlink" title="④撤销偏向锁流程图"></a>④撤销偏向锁流程图</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230803022234477.png"  alt="撤销偏向锁(1)">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230803022147767.png"  alt="撤销偏向锁(2)">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230803023201645.png"  alt="撤销偏向锁(3)">      </p>        <h2 id="重量级锁-ObjectSynchronizer-inflate"   >          <a href="#重量级锁-ObjectSynchronizer-inflate" class="heading-link"><i class="fas fa-link"></i></a><a href="#重量级锁-ObjectSynchronizer-inflate" class="headerlink" title="重量级锁(ObjectSynchronizer::inflate)"></a>重量级锁(ObjectSynchronizer::inflate)</h2>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ObjectMonitor * ATTR <span class="title">ObjectSynchronizer::inflate</span> <span class="params">(Thread * Self, oop object)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    参数一：线程</span></span><br><span class="line"><span class="comment">    参数二：持锁线程和BasicObjectLock</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">// Inflate mutates the heap ...</span></span><br><span class="line">  <span class="comment">// Relaxing assertion for bug 6320749.</span></span><br><span class="line">  <span class="built_in">assert</span> (Universe::<span class="built_in">verify_in_progress</span>() ||</span><br><span class="line">          !SafepointSynchronize::<span class="built_in">is_at_safepoint</span>(), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//死循环(自旋)</span></span><br><span class="line">  <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      <span class="comment">//获得头信息</span></span><br><span class="line">      <span class="type">const</span> markOop mark = object-&gt;<span class="built_in">mark</span>() ;</span><br><span class="line">      <span class="built_in">assert</span> (!mark-&gt;<span class="built_in">has_bias_pattern</span>(), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// The mark can be in one of the following states:</span></span><br><span class="line">      <span class="comment">// *  Inflated     - just return</span></span><br><span class="line">      <span class="comment">// *  Stack-locked - coerce it to inflated</span></span><br><span class="line">      <span class="comment">// *  INFLATING    - busy wait for conversion to complete</span></span><br><span class="line">      <span class="comment">// *  Neutral      - aggressively inflate the object.</span></span><br><span class="line">      <span class="comment">// *  BIASED       - Illegal.  We should never see this</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//情况1：已经是一个重量级锁</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// CASE: inflated</span></span><br><span class="line">      <span class="keyword">if</span> (mark-&gt;<span class="built_in">has_monitor</span>()) &#123;</span><br><span class="line">          <span class="comment">//has_monitor方法调用之后如果有的话返回True 说明这把锁已经是重量级锁 </span></span><br><span class="line">          ObjectMonitor * inf = mark-&gt;<span class="built_in">monitor</span>() ;</span><br><span class="line">          <span class="built_in">assert</span> (inf-&gt;<span class="built_in">header</span>()-&gt;<span class="built_in">is_neutral</span>(), <span class="string">&quot;invariant&quot;</span>);</span><br><span class="line">          <span class="built_in">assert</span> (inf-&gt;<span class="built_in">object</span>() == object, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">          <span class="built_in">assert</span> (ObjectSynchronizer::<span class="built_in">verify_objmon_isinpool</span>(inf), <span class="string">&quot;monitor is invalid&quot;</span>);</span><br><span class="line">          <span class="comment">//将monitor返回</span></span><br><span class="line">          <span class="keyword">return</span> inf ;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//情况2:这把锁处于一个轻量级锁膨胀到重量级的中间态(正在膨胀没有完成)</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// CASE: inflation in progress - inflating over a stack-lock.</span></span><br><span class="line">      <span class="comment">// Some other thread is converting from stack-locked to inflated.</span></span><br><span class="line">      <span class="comment">// Only that thread can complete inflation -- other threads must wait.</span></span><br><span class="line">      <span class="comment">// The INFLATING value is transient.</span></span><br><span class="line">      <span class="comment">// Currently, we spin/yield/park and poll the markword, waiting for inflation to finish.</span></span><br><span class="line">      <span class="comment">// We could always eliminate polling by parking the thread on some auxiliary list.</span></span><br><span class="line">      <span class="keyword">if</span> (mark == markOopDesc::<span class="built_in">INFLATING</span>()) &#123;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//如果是中间态就让出CPU 然后continue重新判断是否处于中间状态</span></span><br><span class="line">          </span><br><span class="line">         <span class="built_in">TEVENT</span> (Inflate: spin <span class="keyword">while</span> INFLATING) ;</span><br><span class="line">         <span class="built_in">ReadStableMark</span>(object) ;</span><br><span class="line">         <span class="keyword">continue</span> ;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// CASE: stack-locked</span></span><br><span class="line">      <span class="comment">// Could be stack-locked either by this thread or by some other thread.</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// Note that we allocate the objectmonitor speculatively, _before_ attempting</span></span><br><span class="line">      <span class="comment">// to install INFLATING into the mark word.  We originally installed INFLATING,</span></span><br><span class="line">      <span class="comment">// allocated the objectmonitor, and then finally STed the address of the</span></span><br><span class="line">      <span class="comment">// objectmonitor into the mark.  This was correct, but artificially lengthened</span></span><br><span class="line">      <span class="comment">// the interval in which INFLATED appeared in the mark, thus increasing</span></span><br><span class="line">      <span class="comment">// the odds of inflation contention.</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// We now use per-thread private objectmonitor free lists.</span></span><br><span class="line">      <span class="comment">// These list are reprovisioned from the global free list outside the</span></span><br><span class="line">      <span class="comment">// critical INFLATING...ST interval.  A thread can transfer</span></span><br><span class="line">      <span class="comment">// multiple objectmonitors en-mass from the global free list to its local free list.</span></span><br><span class="line">      <span class="comment">// This reduces coherency traffic and lock contention on the global free list.</span></span><br><span class="line">      <span class="comment">// Using such local free lists, it doesn&#x27;t matter if the omAlloc() call appears</span></span><br><span class="line">      <span class="comment">// before or after the CAS(INFLATING) operation.</span></span><br><span class="line">      <span class="comment">// See the comments in omAlloc().</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//情况3：目前这把锁是一把轻量级锁，轻量级锁要膨胀到重量级锁</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (mark-&gt;<span class="built_in">has_locker</span>()) &#123;</span><br><span class="line">          <span class="comment">//omalloc申请一个monitor m</span></span><br><span class="line">          </span><br><span class="line">          ObjectMonitor * m = <span class="built_in">omAlloc</span> (Self) ;</span><br><span class="line">          <span class="comment">// Optimistically prepare the objectmonitor - anticipate successful CAS</span></span><br><span class="line">          <span class="comment">// We do this before the CAS in order to minimize the length of time</span></span><br><span class="line">          <span class="comment">// in which INFLATING appears in the mark.</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">//m的初始化</span></span><br><span class="line">          </span><br><span class="line">          m-&gt;<span class="built_in">Recycle</span>();</span><br><span class="line">          m-&gt;_Responsible  = <span class="literal">NULL</span> ;</span><br><span class="line">          m-&gt;OwnerIsThread = <span class="number">0</span> ;</span><br><span class="line">          m-&gt;_recursions   = <span class="number">0</span> ;</span><br><span class="line">          m-&gt;_SpinDuration = ObjectMonitor::Knob_SpinLimit ;   <span class="comment">// Consider: maintain by type/class</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">//CAS将这个监视器的信息设置为正在膨胀的中间态(情况2)</span></span><br><span class="line">          markOop cmp = (markOop) Atomic::<span class="built_in">cmpxchg_ptr</span> (markOopDesc::<span class="built_in">INFLATING</span>(), object-&gt;<span class="built_in">mark_addr</span>(), mark);</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//判断CAS操作是否成功</span></span><br><span class="line">          <span class="keyword">if</span> (cmp != mark) &#123;</span><br><span class="line">              <span class="comment">//CAS失败 释放监控器，然后continue重试</span></span><br><span class="line">             <span class="built_in">omRelease</span> (Self, m, <span class="literal">true</span>) ;</span><br><span class="line">             <span class="keyword">continue</span> ;       <span class="comment">// Interference -- just retry</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// We&#x27;ve successfully installed INFLATING (0) into the mark-word.</span></span><br><span class="line">          <span class="comment">// This is the only case where 0 will appear in a mark-work.</span></span><br><span class="line">          <span class="comment">// Only the singular thread that successfully swings the mark-word</span></span><br><span class="line">          <span class="comment">// to 0 can perform (or more precisely, complete) inflation.</span></span><br><span class="line">          <span class="comment">//</span></span><br><span class="line">          <span class="comment">// Why do we CAS a 0 into the mark-word instead of just CASing the</span></span><br><span class="line">          <span class="comment">// mark-word from the stack-locked value directly to the new inflated state?</span></span><br><span class="line">          <span class="comment">// Consider what happens when a thread unlocks a stack-locked object.</span></span><br><span class="line">          <span class="comment">// It attempts to use CAS to swing the displaced header value from the</span></span><br><span class="line">          <span class="comment">// on-stack basiclock back into the object header.  Recall also that the</span></span><br><span class="line">          <span class="comment">// header value (hashcode, etc) can reside in (a) the object header, or</span></span><br><span class="line">          <span class="comment">// (b) a displaced header associated with the stack-lock, or (c) a displaced</span></span><br><span class="line">          <span class="comment">// header in an objectMonitor.  The inflate() routine must copy the header</span></span><br><span class="line">          <span class="comment">// value from the basiclock on the owner&#x27;s stack to the objectMonitor, all</span></span><br><span class="line">          <span class="comment">// the while preserving the hashCode stability invariants.  If the owner</span></span><br><span class="line">          <span class="comment">// decides to release the lock while the value is 0, the unlock will fail</span></span><br><span class="line">          <span class="comment">// and control will eventually pass from slow_exit() to inflate.  The owner</span></span><br><span class="line">          <span class="comment">// will then spin, waiting for the 0 value to disappear.   Put another way,</span></span><br><span class="line">          <span class="comment">// the 0 causes the owner to stall if the owner happens to try to</span></span><br><span class="line">          <span class="comment">// drop the lock (restoring the header from the basiclock to the object)</span></span><br><span class="line">          <span class="comment">// while inflation is in-progress.  This protocol avoids races that might</span></span><br><span class="line">          <span class="comment">// would otherwise permit hashCode values to change or &quot;flicker&quot; for an object.</span></span><br><span class="line">          <span class="comment">// Critically, while object-&gt;mark is 0 mark-&gt;displaced_mark_helper() is stable.</span></span><br><span class="line">          <span class="comment">// 0 serves as a &quot;BUSY&quot; inflate-in-progress indicator.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          <span class="comment">// fetch the displaced mark from the owner&#x27;s stack.</span></span><br><span class="line">          <span class="comment">// The owner can&#x27;t die or unwind past the lock while our INFLATING</span></span><br><span class="line">          <span class="comment">// object is in the mark.  Furthermore the owner can&#x27;t complete</span></span><br><span class="line">          <span class="comment">// an unlock on the object, either.</span></span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          <span class="comment">//运行到这里锁是轻量级锁，并且已经将头信息标记成正在膨胀的状态 并且cas成功</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">//获取头信息</span></span><br><span class="line">          markOop dmw = mark-&gt;<span class="built_in">displaced_mark_helper</span>() ;</span><br><span class="line">          <span class="built_in">assert</span> (dmw-&gt;<span class="built_in">is_neutral</span>(), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Setup monitor fields to proper values -- prepare the monitor</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">//将监控器的头信息更新</span></span><br><span class="line">          m-&gt;<span class="built_in">set_header</span>(dmw) ;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Optimization: if the mark-&gt;locker stack address is associated</span></span><br><span class="line">          <span class="comment">// with this thread we could simply set m-&gt;_owner = Self and</span></span><br><span class="line">          <span class="comment">// m-&gt;OwnerIsThread = 1. Note that a thread can inflate an object</span></span><br><span class="line">          <span class="comment">// that it has stack-locked -- as might happen in wait() -- directly</span></span><br><span class="line">          <span class="comment">// with CAS.  That is, we can avoid the xchg-NULL .... ST idiom.</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">//监视器的owner指向头信息中的locker</span></span><br><span class="line">          </span><br><span class="line">          m-&gt;<span class="built_in">set_owner</span>(mark-&gt;<span class="built_in">locker</span>());</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//监视器的object设置成当前object</span></span><br><span class="line">          </span><br><span class="line">          m-&gt;<span class="built_in">set_object</span>(object);</span><br><span class="line">          <span class="comment">// TODO-<span class="doctag">FIXME:</span> assert BasicLock-&gt;dhw != 0.</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// Must preserve store ordering. The monitor state must</span></span><br><span class="line">          <span class="comment">// be stable at the time of publishing the monitor address.</span></span><br><span class="line">          <span class="built_in">guarantee</span> (object-&gt;<span class="built_in">mark</span>() == markOopDesc::<span class="built_in">INFLATING</span>(), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//更新object中的信息</span></span><br><span class="line">          object-&gt;<span class="built_in">release_set_mark</span>(markOopDesc::<span class="built_in">encode</span>(m));</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Hopefully the performance counters are allocated on distinct cache lines</span></span><br><span class="line">          <span class="comment">// to avoid false sharing on MP systems ...</span></span><br><span class="line">          <span class="comment">//将计数器分布到不同的缓存行中???</span></span><br><span class="line">          <span class="keyword">if</span> (ObjectMonitor::_sync_Inflations != <span class="literal">NULL</span>) ObjectMonitor::_sync_Inflations-&gt;<span class="built_in">inc</span>() ;</span><br><span class="line">          <span class="built_in">TEVENT</span>(Inflate: overwrite stacklock) ;</span><br><span class="line">          <span class="keyword">if</span> (TraceMonitorInflation) &#123;</span><br><span class="line">            <span class="keyword">if</span> (object-&gt;<span class="built_in">is_instance</span>()) &#123;</span><br><span class="line">              ResourceMark rm;</span><br><span class="line">              tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;Inflating object &quot;</span> INTPTR_FORMAT <span class="string">&quot; , mark &quot;</span> INTPTR_FORMAT <span class="string">&quot; , type %s&quot;</span>,</span><br><span class="line">                (<span class="type">void</span> *) object, (<span class="type">intptr_t</span>) object-&gt;<span class="built_in">mark</span>(),</span><br><span class="line">                object-&gt;<span class="built_in">klass</span>()-&gt;<span class="built_in">external_name</span>());</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//返回监视器</span></span><br><span class="line">          <span class="keyword">return</span> m ;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// CASE: neutral</span></span><br><span class="line">      <span class="comment">// TODO-<span class="doctag">FIXME:</span> for entry we currently inflate and then try to CAS _owner.</span></span><br><span class="line">      <span class="comment">// If we know we&#x27;re inflating for entry it&#x27;s better to inflate by swinging a</span></span><br><span class="line">      <span class="comment">// pre-locked objectMonitor pointer into the object header.   A successful</span></span><br><span class="line">      <span class="comment">// CAS inflates the object *and* confers ownership to the inflating thread.</span></span><br><span class="line">      <span class="comment">// In the current implementation we use a 2-step mechanism where we CAS()</span></span><br><span class="line">      <span class="comment">// to inflate and then CAS() again to try to swing _owner from NULL to Self.</span></span><br><span class="line">      <span class="comment">// An inflateTry() method that we could call from fast_enter() and slow_enter()</span></span><br><span class="line">      <span class="comment">// would be useful.</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//情况4：现在状态是个无锁状态</span></span><br><span class="line">      </span><br><span class="line">      <span class="built_in">assert</span> (mark-&gt;<span class="built_in">is_neutral</span>(), <span class="string">&quot;invariant&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//申请一个监视器</span></span><br><span class="line">      ObjectMonitor * m = <span class="built_in">omAlloc</span> (Self) ;</span><br><span class="line">      <span class="comment">// prepare m for installation - set monitor to initial state</span></span><br><span class="line">      m-&gt;<span class="built_in">Recycle</span>();</span><br><span class="line">      m-&gt;<span class="built_in">set_header</span>(mark);</span><br><span class="line">      m-&gt;<span class="built_in">set_owner</span>(<span class="literal">NULL</span>);</span><br><span class="line">      m-&gt;<span class="built_in">set_object</span>(object);  <span class="comment">//监视器监视当前Object</span></span><br><span class="line">      m-&gt;OwnerIsThread = <span class="number">1</span> ;  <span class="comment">//锁持有者设置为1</span></span><br><span class="line">      m-&gt;_recursions   = <span class="number">0</span> ;</span><br><span class="line">      m-&gt;_Responsible  = <span class="literal">NULL</span> ;</span><br><span class="line">      m-&gt;_SpinDuration = ObjectMonitor::Knob_SpinLimit ;       <span class="comment">// consider: keep metastats by type/class</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//CAS操作更新监视器信息</span></span><br><span class="line">      <span class="keyword">if</span> (Atomic::<span class="built_in">cmpxchg_ptr</span> (markOopDesc::<span class="built_in">encode</span>(m), object-&gt;<span class="built_in">mark_addr</span>(), mark) != mark) &#123;</span><br><span class="line">          <span class="comment">//如果更新，说明有竞争，然后释放当前监视器，重新循环</span></span><br><span class="line">          </span><br><span class="line">          m-&gt;<span class="built_in">set_object</span> (<span class="literal">NULL</span>) ;</span><br><span class="line">          m-&gt;<span class="built_in">set_owner</span>  (<span class="literal">NULL</span>) ;</span><br><span class="line">          m-&gt;OwnerIsThread = <span class="number">0</span> ;</span><br><span class="line">          m-&gt;<span class="built_in">Recycle</span>() ;</span><br><span class="line">          <span class="built_in">omRelease</span> (Self, m, <span class="literal">true</span>) ;</span><br><span class="line">          m = <span class="literal">NULL</span> ;</span><br><span class="line">          <span class="keyword">continue</span> ;</span><br><span class="line">          <span class="comment">// interference - the markword changed - just retry.</span></span><br><span class="line">          <span class="comment">// The state-transitions are one-way, so there&#x27;s no chance of</span></span><br><span class="line">          <span class="comment">// live-lock -- &quot;Inflated&quot; is an absorbing state.</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Hopefully the performance counters are allocated on distinct</span></span><br><span class="line">      <span class="comment">// cache lines to avoid false sharing on MP systems ...</span></span><br><span class="line">      <span class="keyword">if</span> (ObjectMonitor::_sync_Inflations != <span class="literal">NULL</span>) ObjectMonitor::_sync_Inflations-&gt;<span class="built_in">inc</span>() ;</span><br><span class="line">      <span class="built_in">TEVENT</span>(Inflate: overwrite neutral) ;</span><br><span class="line">      <span class="keyword">if</span> (TraceMonitorInflation) &#123;</span><br><span class="line">        <span class="keyword">if</span> (object-&gt;<span class="built_in">is_instance</span>()) &#123;</span><br><span class="line">          ResourceMark rm;</span><br><span class="line">          tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;Inflating object &quot;</span> INTPTR_FORMAT <span class="string">&quot; , mark &quot;</span> INTPTR_FORMAT <span class="string">&quot; , type %s&quot;</span>,</span><br><span class="line">            (<span class="type">void</span> *) object, (<span class="type">intptr_t</span>) object-&gt;<span class="built_in">mark</span>(),</span><br><span class="line">            object-&gt;<span class="built_in">klass</span>()-&gt;<span class="built_in">external_name</span>());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> m ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//膨胀过程本质上就是获取监视器，而具体的加锁要在Entry方法中</span></span><br></pre></td></tr></table></div></figure>        <h3 id="重量级锁加锁流程图-膨胀"   >          <a href="#重量级锁加锁流程图-膨胀" class="heading-link"><i class="fas fa-link"></i></a><a href="#重量级锁加锁流程图-膨胀" class="headerlink" title="重量级锁加锁流程图(膨胀)"></a>重量级锁加锁流程图(膨胀)</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230803172249972.png"  alt="重量级锁加锁流程图(膨胀)">      </p><p><em><strong>膨胀过程本质上就是获取一个监视器</strong>，返回监视器，而具体加锁在监视器中的Entry方法中</em></p><p><em>过程就是判断是否有可用的Monitor，如果没有创建一个公共可用的Monitor数组(1024个)，然后将指向的监视器放到当前线程下可用的监视器中，然后公共可用的Monitor减少一个，具体代码如下</em></p>        <h3 id="申请监视器"   >          <a href="#申请监视器" class="heading-link"><i class="fas fa-link"></i></a><a href="#申请监视器" class="headerlink" title="申请监视器"></a>申请监视器</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">ObjectMonitor * ATTR ObjectSynchronizer::omAlloc (Thread * Self) &#123;</span><br><span class="line">    <span class="comment">// A large MAXPRIVATE value reduces both list lock contention</span></span><br><span class="line">    <span class="comment">// and list coherency traffic, but also tends to increase the</span></span><br><span class="line">    <span class="comment">// number of objectMonitors in circulation as well as the STW</span></span><br><span class="line">    <span class="comment">// scavenge costs.  As usual, we lean toward time in space-time</span></span><br><span class="line">    <span class="comment">// tradeoffs.</span></span><br><span class="line">    const <span class="type">int</span> <span class="variable">MAXPRIVATE</span> <span class="operator">=</span> <span class="number">1024</span> ;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        ObjectMonitor * m ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1: try to allocate from the thread&#x27;s local omFreeList.</span></span><br><span class="line">        <span class="comment">// Threads will attempt to allocate first from their local list, then</span></span><br><span class="line">        <span class="comment">// from the global list, and only after those attempts fail will the thread</span></span><br><span class="line">        <span class="comment">// attempt to instantiate new monitors.   Thread-local free lists take</span></span><br><span class="line">        <span class="comment">// heat off the ListLock and improve allocation latency, as well as reducing</span></span><br><span class="line">        <span class="comment">// coherency traffic on the shared global list.</span></span><br><span class="line">        m = Self-&gt;omFreeList ;</span><br><span class="line">        <span class="keyword">if</span> (m != NULL) &#123;</span><br><span class="line">           Self-&gt;omFreeList = m-&gt;FreeNext ;</span><br><span class="line">           Self-&gt;omFreeCount -- ;</span><br><span class="line">           <span class="comment">// CONSIDER: set m-&gt;FreeNext = BAD -- diagnostic hygiene</span></span><br><span class="line">           guarantee (m-&gt;object() == NULL, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">           <span class="keyword">if</span> (MonitorInUseLists) &#123;</span><br><span class="line">             m-&gt;FreeNext = Self-&gt;omInUseList;</span><br><span class="line">             Self-&gt;omInUseList = m;</span><br><span class="line">             Self-&gt;omInUseCount ++;</span><br><span class="line">             <span class="comment">// verifyInUse(Self);</span></span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             m-&gt;FreeNext = NULL;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> m ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2: try to allocate from the global gFreeList</span></span><br><span class="line">        <span class="comment">// CONSIDER: use muxTry() instead of muxAcquire().</span></span><br><span class="line">        <span class="comment">// If the muxTry() fails then drop immediately into case 3.</span></span><br><span class="line">        <span class="comment">// If we&#x27;re using thread-local free lists then try</span></span><br><span class="line">        <span class="comment">// to reprovision the caller&#x27;s free list.</span></span><br><span class="line">        <span class="keyword">if</span> (gFreeList != NULL) &#123;</span><br><span class="line">            <span class="comment">// Reprovision the thread&#x27;s omFreeList.</span></span><br><span class="line">            <span class="comment">// Use bulk transfers to reduce the allocation rate and heat</span></span><br><span class="line">            <span class="comment">// on various locks.</span></span><br><span class="line">            Thread::muxAcquire (&amp;ListLock, <span class="string">&quot;omAlloc&quot;</span>) ;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Self-&gt;omFreeProvision; --i &gt;= <span class="number">0</span> &amp;&amp; gFreeList != NULL; ) &#123;</span><br><span class="line">                MonitorFreeCount --;</span><br><span class="line">                ObjectMonitor * take = gFreeList ;</span><br><span class="line">                gFreeList = take-&gt;FreeNext ;</span><br><span class="line">                guarantee (take-&gt;object() == NULL, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">                guarantee (!take-&gt;is_busy(), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">                take-&gt;Recycle() ;</span><br><span class="line">                omRelease (Self, take, <span class="literal">false</span>) ;</span><br><span class="line">            &#125;</span><br><span class="line">            Thread::muxRelease (&amp;ListLock) ;</span><br><span class="line">            Self-&gt;omFreeProvision += <span class="number">1</span> + (Self-&gt;omFreeProvision/<span class="number">2</span>) ;</span><br><span class="line">            <span class="keyword">if</span> (Self-&gt;omFreeProvision &gt; MAXPRIVATE ) Self-&gt;omFreeProvision = MAXPRIVATE ;</span><br><span class="line">            TEVENT (omFirst - reprovision) ;</span><br><span class="line"></span><br><span class="line">            const <span class="type">int</span> <span class="variable">mx</span> <span class="operator">=</span> MonitorBound ;</span><br><span class="line">            <span class="keyword">if</span> (mx &gt; <span class="number">0</span> &amp;&amp; (MonitorPopulation-MonitorFreeCount) &gt; mx) &#123;</span><br><span class="line">              <span class="comment">// We can&#x27;t safely induce a STW safepoint from omAlloc() as our thread</span></span><br><span class="line">              <span class="comment">// state may not be appropriate for such activities and callers may hold</span></span><br><span class="line">              <span class="comment">// naked oops, so instead we defer the action.</span></span><br><span class="line">              InduceScavenge (Self, <span class="string">&quot;omAlloc&quot;</span>) ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3: allocate a block of new ObjectMonitors</span></span><br><span class="line">        <span class="comment">// Both the local and global free lists are empty -- resort to malloc().</span></span><br><span class="line">        <span class="comment">// In the current implementation objectMonitors are TSM - immortal.</span></span><br><span class="line">        <span class="keyword">assert</span> (_BLOCKSIZE &gt; <span class="number">1</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        ObjectMonitor * temp = <span class="keyword">new</span> <span class="title class_">ObjectMonitor</span>[_BLOCKSIZE];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> (almost) no way to recover if allocation failed.</span></span><br><span class="line">        <span class="comment">// We might be able to induce a STW safepoint and scavenge enough</span></span><br><span class="line">        <span class="comment">// objectMonitors to permit progress.</span></span><br><span class="line">        <span class="keyword">if</span> (temp == NULL) &#123;</span><br><span class="line">            vm_exit_out_of_memory (sizeof (ObjectMonitor[_BLOCKSIZE]), OOM_MALLOC_ERROR,</span><br><span class="line">                                   <span class="string">&quot;Allocate ObjectMonitors&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Format the block.</span></span><br><span class="line">        <span class="comment">// initialize the linked list, each monitor points to its next</span></span><br><span class="line">        <span class="comment">// forming the single linked free list, the very first monitor</span></span><br><span class="line">        <span class="comment">// will points to next block, which forms the block list.</span></span><br><span class="line">        <span class="comment">// The trick of using the 1st element in the block as gBlockList</span></span><br><span class="line">        <span class="comment">// linkage should be reconsidered.  A better implementation would</span></span><br><span class="line">        <span class="comment">// look like: class Block &#123; Block * next; int N; ObjectMonitor Body [N] ; &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; _BLOCKSIZE ; i++) &#123;</span><br><span class="line">           temp[i].FreeNext = &amp;temp[i+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// terminate the last monitor as the end of list</span></span><br><span class="line">        temp[_BLOCKSIZE - <span class="number">1</span>].FreeNext = NULL ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Element [0] is reserved for global list linkage</span></span><br><span class="line">        temp[<span class="number">0</span>].set_object(CHAINMARKER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Consider carving out this thread&#x27;s current request from the</span></span><br><span class="line">        <span class="comment">// block in hand.  This avoids some lock traffic and redundant</span></span><br><span class="line">        <span class="comment">// list activity.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Acquire the ListLock to manipulate BlockList and FreeList.</span></span><br><span class="line">        <span class="comment">// An Oyama-Taura-Yonezawa scheme might be more efficient.</span></span><br><span class="line">        Thread::muxAcquire (&amp;ListLock, <span class="string">&quot;omAlloc [2]&quot;</span>) ;</span><br><span class="line">        MonitorPopulation += _BLOCKSIZE-<span class="number">1</span>;</span><br><span class="line">        MonitorFreeCount += _BLOCKSIZE-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the new block to the list of extant blocks (gBlockList).</span></span><br><span class="line">        <span class="comment">// The very first objectMonitor in a block is reserved and dedicated.</span></span><br><span class="line">        <span class="comment">// It serves as blocklist &quot;next&quot; linkage.</span></span><br><span class="line">        temp[<span class="number">0</span>].FreeNext = gBlockList;</span><br><span class="line">        gBlockList = temp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add the new string of objectMonitors to the global free list</span></span><br><span class="line">        temp[_BLOCKSIZE - <span class="number">1</span>].FreeNext = gFreeList ;</span><br><span class="line">        gFreeList = temp + <span class="number">1</span>;</span><br><span class="line">        Thread::muxRelease (&amp;ListLock) ;</span><br><span class="line">        TEVENT (Allocate block of monitors) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="重量级锁竞争"   >          <a href="#重量级锁竞争" class="heading-link"><i class="fas fa-link"></i></a><a href="#重量级锁竞争" class="headerlink" title="重量级锁竞争"></a>重量级锁竞争</h3>              <h4 id="ObjectMonitor-enter"   >          <a href="#ObjectMonitor-enter" class="heading-link"><i class="fas fa-link"></i></a><a href="#ObjectMonitor-enter" class="headerlink" title="ObjectMonitor::enter"></a>ObjectMonitor::enter</h4>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> ATTR <span class="title">ObjectMonitor::enter</span><span class="params">(TRAPS)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// The following code is ordered to check the most common cases first</span></span><br><span class="line">  <span class="comment">// and to reduce RTS-&gt;RTO cache line upgrades on SPARC and IA32 processors.</span></span><br><span class="line">  Thread * <span class="type">const</span> Self = THREAD ;</span><br><span class="line">  <span class="type">void</span> * cur ;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//记录当前线程，CUR记录CAS结果 </span></span><br><span class="line">  <span class="comment">//cas成功会返回null</span></span><br><span class="line">  cur = Atomic::<span class="built_in">cmpxchg_ptr</span> (Self, &amp;_owner, <span class="literal">NULL</span>) ;</span><br><span class="line">  <span class="keyword">if</span> (cur == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="comment">//CAS成功 即加锁成功</span></span><br><span class="line">      </span><br><span class="line">     <span class="comment">// Either ASSERT _recursions == 0 or explicitly set _recursions = 0.</span></span><br><span class="line">     <span class="built_in">assert</span> (_recursions == <span class="number">0</span>   , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">     <span class="built_in">assert</span> (_owner      == Self, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">     <span class="comment">// CONSIDER: set or assert OwnerIsThread == 1</span></span><br><span class="line">     <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (cur == Self) &#123;</span><br><span class="line">      <span class="comment">//判断是否是当前线程，如果是就是重量级锁重入</span></span><br><span class="line">     <span class="comment">// TODO-<span class="doctag">FIXME:</span> check for integer overflow!  BUGID 6557169.</span></span><br><span class="line">     _recursions ++ ;</span><br><span class="line">      <span class="comment">//重量级锁重入次数++</span></span><br><span class="line">     <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (Self-&gt;<span class="built_in">is_lock_owned</span> ((address)cur)) &#123;</span><br><span class="line">    <span class="comment">//判断持锁线程是不是地址值，就是当前拥有轻量级锁的重入</span></span><br><span class="line">     <span class="built_in">assert</span> (_recursions == <span class="number">0</span>, <span class="string">&quot;internal state error&quot;</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//将重量级锁重入次数设置为1</span></span><br><span class="line">    _recursions = <span class="number">1</span> ;</span><br><span class="line">    <span class="comment">// Commute owner from a thread-specific on-stack BasicLockObject address to</span></span><br><span class="line">    <span class="comment">// a full-fledged &quot;Thread *&quot;.</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">//将监视器的信息更新，锁变成重量级锁</span></span><br><span class="line">    _owner = Self ;</span><br><span class="line">    OwnerIsThread = <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We&#x27;ve encountered genuine contention.</span></span><br><span class="line">  <span class="built_in">assert</span> (Self-&gt;_Stalled == <span class="number">0</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  Self-&gt;_Stalled = <span class="built_in">intptr_t</span>(<span class="keyword">this</span>) ;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Try one round of spinning *before* enqueueing Self</span></span><br><span class="line">  <span class="comment">// and before going through the awkward and expensive state</span></span><br><span class="line">  <span class="comment">// transitions.  The following spin is strictly optional ...</span></span><br><span class="line">  <span class="comment">// Note that if we acquire the monitor from an initial spin</span></span><br><span class="line">  <span class="comment">// we forgo posting JVMTI events and firing DTRACE probes.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断环境变量是否能自旋，然后自适应自旋</span></span><br><span class="line">  <span class="keyword">if</span> (Knob_SpinEarly &amp;&amp; <span class="built_in">TrySpin</span> (Self) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="built_in">assert</span> (_owner == Self      , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">     <span class="built_in">assert</span> (_recursions == <span class="number">0</span>    , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">     <span class="built_in">assert</span> (((oop)(<span class="built_in">object</span>()))-&gt;<span class="built_in">mark</span>() == markOopDesc::<span class="built_in">encode</span>(<span class="keyword">this</span>), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">     Self-&gt;_Stalled = <span class="number">0</span> ;</span><br><span class="line">     <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">assert</span> (_owner != Self          , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  <span class="built_in">assert</span> (_succ  != Self          , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  <span class="built_in">assert</span> (Self-&gt;<span class="built_in">is_Java_thread</span>()  , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  JavaThread * jt = (JavaThread *) Self ;</span><br><span class="line">  <span class="built_in">assert</span> (!SafepointSynchronize::<span class="built_in">is_at_safepoint</span>(), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  <span class="built_in">assert</span> (jt-&gt;<span class="built_in">thread_state</span>() != _thread_blocked   , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  <span class="built_in">assert</span> (<span class="keyword">this</span>-&gt;<span class="built_in">object</span>() != <span class="literal">NULL</span>  , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  <span class="built_in">assert</span> (_count &gt;= <span class="number">0</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Prevent deflation at STW-time.  See deflate_idle_monitors() and is_busy().</span></span><br><span class="line">  <span class="comment">// Ensure the object-monitor relationship remains stable while there&#x27;s contention.</span></span><br><span class="line">  Atomic::<span class="built_in">inc_ptr</span>(&amp;_count);</span><br><span class="line"></span><br><span class="line">  EventJavaMonitorEnter event;</span><br><span class="line"></span><br><span class="line">  &#123; <span class="comment">// Change java thread status to indicate blocked on monitor enter.</span></span><br><span class="line">    <span class="function">JavaThreadBlockedOnMonitorEnterState <span class="title">jtbmes</span><span class="params">(jt, <span class="keyword">this</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DTRACE_MONITOR_PROBE</span>(contended__enter, <span class="keyword">this</span>, <span class="built_in">object</span>(), jt);</span><br><span class="line">    <span class="keyword">if</span> (JvmtiExport::<span class="built_in">should_post_monitor_contended_enter</span>()) &#123;</span><br><span class="line">      JvmtiExport::<span class="built_in">post_monitor_contended_enter</span>(jt, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// The current thread does not yet own the monitor and does not</span></span><br><span class="line">      <span class="comment">// yet appear on any queues that would get it made the successor.</span></span><br><span class="line">      <span class="comment">// This means that the JVMTI_EVENT_MONITOR_CONTENDED_ENTER event</span></span><br><span class="line">      <span class="comment">// handler cannot accidentally consume an unpark() meant for the</span></span><br><span class="line">      <span class="comment">// ParkEvent associated with this ObjectMonitor.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">OSThreadContendState <span class="title">osts</span><span class="params">(Self-&gt;osthread())</span></span>;</span><br><span class="line">    <span class="function">ThreadBlockInVM <span class="title">tbivm</span><span class="params">(jt)</span></span>;</span><br><span class="line"></span><br><span class="line">    Self-&gt;<span class="built_in">set_current_pending_monitor</span>(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO-<span class="doctag">FIXME:</span> change the following for(;;) loop to straight-line code.</span></span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      <span class="comment">//死循环(自旋) 进入EnterI,如果出现意外导致拿锁失败则退出 </span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      jt-&gt;<span class="built_in">set_suspend_equivalent</span>();</span><br><span class="line">      <span class="comment">// cleared by handle_special_suspend_equivalent_condition()</span></span><br><span class="line">      <span class="comment">// or java_suspend_self()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//进入EnterI方法</span></span><br><span class="line">      <span class="built_in">EnterI</span> (THREAD) ;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!<span class="built_in">ExitSuspendEquivalent</span>(jt)) <span class="keyword">break</span> ;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// We have acquired the contended monitor, but while we were</span></span><br><span class="line">      <span class="comment">// waiting another thread suspended us. We don&#x27;t want to enter</span></span><br><span class="line">      <span class="comment">// the monitor while suspended because that would surprise the</span></span><br><span class="line">      <span class="comment">// thread that suspended us.</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">          _recursions = <span class="number">0</span> ;</span><br><span class="line">      _succ = <span class="literal">NULL</span> ;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//出现意外导致拿锁失败了则结束</span></span><br><span class="line">      <span class="built_in">exit</span> (<span class="literal">false</span>, Self) ;</span><br><span class="line"></span><br><span class="line">      jt-&gt;<span class="built_in">java_suspend_self</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    Self-&gt;<span class="built_in">set_current_pending_monitor</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We cleared the pending monitor info since we&#x27;ve just gotten past</span></span><br><span class="line">    <span class="comment">// the enter-check-for-suspend dance and we now own the monitor free</span></span><br><span class="line">    <span class="comment">// and clear, i.e., it is no longer pending. The ThreadBlockInVM</span></span><br><span class="line">    <span class="comment">// destructor can go to a safepoint at the end of this block. If we</span></span><br><span class="line">    <span class="comment">// do a thread dump during that safepoint, then this thread will show</span></span><br><span class="line">    <span class="comment">// as having &quot;-locked&quot; the monitor, but the OS and java.lang.Thread</span></span><br><span class="line">    <span class="comment">// states will still report that the thread is blocked trying to</span></span><br><span class="line">    <span class="comment">// acquire it.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Atomic::<span class="built_in">dec_ptr</span>(&amp;_count);</span><br><span class="line">  <span class="built_in">assert</span> (_count &gt;= <span class="number">0</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  Self-&gt;_Stalled = <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Must either set _recursions = 0 or ASSERT _recursions == 0.</span></span><br><span class="line">  <span class="built_in">assert</span> (_recursions == <span class="number">0</span>     , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  <span class="built_in">assert</span> (_owner == Self       , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  <span class="built_in">assert</span> (_succ  != Self       , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  <span class="built_in">assert</span> (((oop)(<span class="built_in">object</span>()))-&gt;<span class="built_in">mark</span>() == markOopDesc::<span class="built_in">encode</span>(<span class="keyword">this</span>), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The thread -- now the owner -- is back in vm mode.</span></span><br><span class="line">  <span class="comment">// Report the glorious news via TI,DTrace and jvmstat.</span></span><br><span class="line">  <span class="comment">// The probe effect is non-trivial.  All the reportage occurs</span></span><br><span class="line">  <span class="comment">// while we hold the monitor, increasing the length of the critical</span></span><br><span class="line">  <span class="comment">// section.  Amdahl&#x27;s parallel speedup law comes vividly into play.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// Another option might be to aggregate the events (thread local or</span></span><br><span class="line">  <span class="comment">// per-monitor aggregation) and defer reporting until a more opportune</span></span><br><span class="line">  <span class="comment">// time -- such as next time some thread encounters contention but has</span></span><br><span class="line">  <span class="comment">// yet to acquire the lock.  While spinning that thread could</span></span><br><span class="line">  <span class="comment">// spinning we could increment JVMStat counters, etc.</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">DTRACE_MONITOR_PROBE</span>(contended__entered, <span class="keyword">this</span>, <span class="built_in">object</span>(), jt);</span><br><span class="line">  <span class="keyword">if</span> (JvmtiExport::<span class="built_in">should_post_monitor_contended_entered</span>()) &#123;</span><br><span class="line">    JvmtiExport::<span class="built_in">post_monitor_contended_entered</span>(jt, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The current thread already owns the monitor and is not going to</span></span><br><span class="line">    <span class="comment">// call park() for the remainder of the monitor enter protocol. So</span></span><br><span class="line">    <span class="comment">// it doesn&#x27;t matter if the JVMTI_EVENT_MONITOR_CONTENDED_ENTERED</span></span><br><span class="line">    <span class="comment">// event handler consumed an unpark() issued by the thread that</span></span><br><span class="line">    <span class="comment">// just exited the monitor.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (event.<span class="built_in">should_commit</span>()) &#123;</span><br><span class="line">    event.<span class="built_in">set_klass</span>(((oop)<span class="keyword">this</span>-&gt;<span class="built_in">object</span>())-&gt;<span class="built_in">klass</span>());</span><br><span class="line">    event.<span class="built_in">set_previousOwner</span>((TYPE_JAVALANGTHREAD)_previous_owner_tid);</span><br><span class="line">    event.<span class="built_in">set_address</span>((TYPE_ADDRESS)(<span class="type">uintptr_t</span>)(<span class="keyword">this</span>-&gt;<span class="built_in">object_addr</span>()));</span><br><span class="line">    event.<span class="built_in">commit</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ObjectMonitor::_sync_ContendedLockAttempts != <span class="literal">NULL</span>) &#123;</span><br><span class="line">     ObjectMonitor::_sync_ContendedLockAttempts-&gt;<span class="built_in">inc</span>() ;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="ObjectMonitor-entryI"   >          <a href="#ObjectMonitor-entryI" class="heading-link"><i class="fas fa-link"></i></a><a href="#ObjectMonitor-entryI" class="headerlink" title="ObjectMonitor::entryI"></a>ObjectMonitor::entryI</h4>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> ATTR <span class="title">ObjectMonitor::EnterI</span> <span class="params">(TRAPS)</span> </span>&#123;</span><br><span class="line">    Thread * Self = THREAD ;</span><br><span class="line">    <span class="built_in">assert</span> (Self-&gt;<span class="built_in">is_Java_thread</span>(), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">    <span class="built_in">assert</span> (((JavaThread *) Self)-&gt;<span class="built_in">thread_state</span>() == _thread_blocked   , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Try the lock - TATAS</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//TryLock方法</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">TryLock</span> (Self) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">assert</span> (_succ != Self              , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        <span class="built_in">assert</span> (_owner == Self             , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        <span class="built_in">assert</span> (_Responsible != Self       , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DeferredInitialize</span> () ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We try one round of spinning *before* enqueueing Self.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// If the _owner is ready but OFFPROC we could use a YieldTo()</span></span><br><span class="line">    <span class="comment">// operation to donate the remainder of this thread&#x27;s quantum</span></span><br><span class="line">    <span class="comment">// to the owner.  This has subtle but beneficial affinity</span></span><br><span class="line">    <span class="comment">// effects.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//尝试自旋拿锁</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">TrySpin</span> (Self) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">assert</span> (_owner == Self        , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        <span class="built_in">assert</span> (_succ != Self         , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        <span class="built_in">assert</span> (_Responsible != Self  , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The Spin failed -- Enqueue and park the thread ...</span></span><br><span class="line">    <span class="built_in">assert</span> (_succ  != Self            , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">    <span class="built_in">assert</span> (_owner != Self            , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">    <span class="built_in">assert</span> (_Responsible != Self      , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Enqueue &quot;Self&quot; on ObjectMonitor&#x27;s _cxq.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Node acts as a proxy for Self.</span></span><br><span class="line">    <span class="comment">// As an aside, if were to ever rewrite the synchronization code mostly</span></span><br><span class="line">    <span class="comment">// in Java, WaitNodes, ObjectMonitors, and Events would become 1st-class</span></span><br><span class="line">    <span class="comment">// Java objects.  This would avoid awkward lifecycle and liveness issues,</span></span><br><span class="line">    <span class="comment">// as well as eliminate a subset of ABA issues.</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> eliminate ObjectWaiter and enqueue either Threads or Events.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//自适应自旋拿不到锁 所以要入阻塞队列中</span></span><br><span class="line">    </span><br><span class="line">    <span class="function">ObjectWaiter <span class="title">node</span><span class="params">(Self)</span> </span>;</span><br><span class="line">    Self-&gt;_ParkEvent-&gt;<span class="built_in">reset</span>() ;</span><br><span class="line">    node._prev   = (ObjectWaiter *) <span class="number">0xBAD</span> ;</span><br><span class="line">    node.TState  = ObjectWaiter::TS_CXQ ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Push &quot;Self&quot; onto the front of the _cxq.</span></span><br><span class="line">    <span class="comment">// Once on cxq/EntryList, Self stays on-queue until it acquires the lock.</span></span><br><span class="line">    <span class="comment">// Note that spinning tends to reduce the rate at which threads</span></span><br><span class="line">    <span class="comment">// enqueue and dequeue on EntryList|cxq.</span></span><br><span class="line">    ObjectWaiter * nxt ;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//死循环</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">//获取cxq阻塞队列  node.next和nxt都指向这个阻塞队列</span></span><br><span class="line">        node._next = nxt = _cxq ;</span><br><span class="line">        <span class="comment">//CAS操作，如果成功说明这个ObjectWaiter进入了Monitor的阻塞队列中队列中</span></span><br><span class="line">        <span class="keyword">if</span> (Atomic::<span class="built_in">cmpxchg_ptr</span> (&amp;node, &amp;_cxq, nxt) == nxt) <span class="keyword">break</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Interference - the CAS failed because _cxq changed.  Just retry.</span></span><br><span class="line">        <span class="comment">// As an optional optimization we retry the lock.</span></span><br><span class="line">        <span class="comment">//尝试去获取锁，如果成功则返回1</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">TryLock</span> (Self) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">assert</span> (_succ != Self         , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">            <span class="built_in">assert</span> (_owner == Self        , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">            <span class="built_in">assert</span> (_Responsible != Self  , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check for cxq|EntryList edge transition to non-null.  This indicates</span></span><br><span class="line">    <span class="comment">// the onset of contention.  While contention persists exiting threads</span></span><br><span class="line">    <span class="comment">// will use a ST:MEMBAR:LD 1-1 exit protocol.  When contention abates exit</span></span><br><span class="line">    <span class="comment">// operations revert to the faster 1-0 mode.  This enter operation may interleave</span></span><br><span class="line">    <span class="comment">// (race) a concurrent 1-0 exit operation, resulting in stranding, so we</span></span><br><span class="line">    <span class="comment">// arrange for one of the contending thread to use a timed park() operations</span></span><br><span class="line">    <span class="comment">// to detect and recover from the race.  (Stranding is form of progress failure</span></span><br><span class="line">    <span class="comment">// where the monitor is unlocked but all the contending threads remain parked).</span></span><br><span class="line">    <span class="comment">// That is, at least one of the contended threads will periodically poll _owner.</span></span><br><span class="line">    <span class="comment">// One of the contending threads will become the designated &quot;Responsible&quot; thread.</span></span><br><span class="line">    <span class="comment">// The Responsible thread uses a timed park instead of a normal indefinite park</span></span><br><span class="line">    <span class="comment">// operation -- it periodically wakes and checks for and recovers from potential</span></span><br><span class="line">    <span class="comment">// strandings admitted by 1-0 exit operations.   We need at most one Responsible</span></span><br><span class="line">    <span class="comment">// thread per-monitor at any given moment.  Only threads on cxq|EntryList may</span></span><br><span class="line">    <span class="comment">// be responsible for a monitor.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Currently, one of the contended threads takes on the added role of &quot;Responsible&quot;.</span></span><br><span class="line">    <span class="comment">// A viable alternative would be to use a dedicated &quot;stranding checker&quot; thread</span></span><br><span class="line">    <span class="comment">// that periodically iterated over all the threads (or active monitors) and unparked</span></span><br><span class="line">    <span class="comment">// successors where there was risk of stranding.  This would help eliminate the</span></span><br><span class="line">    <span class="comment">// timer scalability issues we see on some platforms as we&#x27;d only have one thread</span></span><br><span class="line">    <span class="comment">// -- the checker -- parked on a timer.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//进行边界检查</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ((SyncFlags &amp; <span class="number">16</span>) == <span class="number">0</span> &amp;&amp; nxt == <span class="literal">NULL</span> &amp;&amp; _EntryList == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// Try to assume the role of responsible thread for the monitor.</span></span><br><span class="line">        <span class="comment">// CONSIDER:  ST vs CAS vs &#123; if (Responsible==null) Responsible=Self &#125;</span></span><br><span class="line">        Atomic::<span class="built_in">cmpxchg_ptr</span> (Self, &amp;_Responsible, <span class="literal">NULL</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The lock have been released while this thread was occupied queueing</span></span><br><span class="line">    <span class="comment">// itself onto _cxq.  To close the race and avoid &quot;stranding&quot; and</span></span><br><span class="line">    <span class="comment">// progress-liveness failure we must resample-retry _owner before parking.</span></span><br><span class="line">    <span class="comment">// Note the Dekker/Lamport duality: ST cxq; MEMBAR; LD Owner.</span></span><br><span class="line">    <span class="comment">// In this case the ST-MEMBAR is accomplished with CAS().</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Defer all thread state transitions until park-time.</span></span><br><span class="line">    <span class="comment">// Since state transitions are heavy and inefficient we&#x27;d like</span></span><br><span class="line">    <span class="comment">// to defer the state transitions until absolutely necessary,</span></span><br><span class="line">    <span class="comment">// and in doing so avoid some transitions ...</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">TEVENT</span> (Inflated enter - Contention) ;</span><br><span class="line">    <span class="type">int</span> nWakeups = <span class="number">0</span> ;</span><br><span class="line">    <span class="type">int</span> RecheckInterval = <span class="number">1</span> ;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//运行到这里说明已经进了阻塞队列中</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//尝试去获取锁，获取锁成功就跳出</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">TryLock</span> (Self) &gt; <span class="number">0</span>) <span class="keyword">break</span> ;</span><br><span class="line">        <span class="built_in">assert</span> (_owner != Self, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((SyncFlags &amp; <span class="number">2</span>) &amp;&amp; _Responsible == <span class="literal">NULL</span>) &#123;</span><br><span class="line">           Atomic::<span class="built_in">cmpxchg_ptr</span> (Self, &amp;_Responsible, <span class="literal">NULL</span>) ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//阻塞线程</span></span><br><span class="line">        <span class="comment">// park self</span></span><br><span class="line">        <span class="keyword">if</span> (_Responsible == Self || (SyncFlags &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="built_in">TEVENT</span> (Inflated enter - park TIMED) ;</span><br><span class="line">            Self-&gt;_ParkEvent-&gt;<span class="built_in">park</span> ((jlong) RecheckInterval) ;</span><br><span class="line">            <span class="comment">// Increase the RecheckInterval, but clamp the value.</span></span><br><span class="line">            RecheckInterval *= <span class="number">8</span> ;</span><br><span class="line">            <span class="keyword">if</span> (RecheckInterval &gt; <span class="number">1000</span>) RecheckInterval = <span class="number">1000</span> ;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">TEVENT</span> (Inflated enter - park UNTIMED) ;</span><br><span class="line">            Self-&gt;_ParkEvent-&gt;<span class="built_in">park</span>() ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取成功就跳出</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">TryLock</span>(Self) &gt; <span class="number">0</span>) <span class="keyword">break</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The lock is still contested.</span></span><br><span class="line">        <span class="comment">// Keep a tally of the # of futile wakeups.</span></span><br><span class="line">        <span class="comment">// Note that the counter is not protected by a lock or updated by atomics.</span></span><br><span class="line">        <span class="comment">// That is by design - we trade &quot;lossy&quot; counters which are exposed to</span></span><br><span class="line">        <span class="comment">// races during updates for a lower probe effect.</span></span><br><span class="line">        <span class="built_in">TEVENT</span> (Inflated enter - Futile wakeup) ;</span><br><span class="line">        <span class="keyword">if</span> (ObjectMonitor::_sync_FutileWakeups != <span class="literal">NULL</span>) &#123;</span><br><span class="line">           ObjectMonitor::_sync_FutileWakeups-&gt;<span class="built_in">inc</span>() ;</span><br><span class="line">        &#125;</span><br><span class="line">        ++ nWakeups ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Assuming this is not a spurious wakeup we&#x27;ll normally find _succ == Self.</span></span><br><span class="line">        <span class="comment">// We can defer clearing _succ until after the spin completes</span></span><br><span class="line">        <span class="comment">// TrySpin() must tolerate being called with _succ == Self.</span></span><br><span class="line">        <span class="comment">// Try yet another round of adaptive spinning.</span></span><br><span class="line">        <span class="keyword">if</span> ((Knob_SpinAfterFutile &amp; <span class="number">1</span>) &amp;&amp; <span class="built_in">TrySpin</span> (Self) &gt; <span class="number">0</span>) <span class="keyword">break</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We can find that we were unpark()ed and redesignated _succ while</span></span><br><span class="line">        <span class="comment">// we were spinning.  That&#x27;s harmless.  If we iterate and call park(),</span></span><br><span class="line">        <span class="comment">// park() will consume the event and return immediately and we&#x27;ll</span></span><br><span class="line">        <span class="comment">// just spin again.  This pattern can repeat, leaving _succ to simply</span></span><br><span class="line">        <span class="comment">// spin on a CPU.  Enable Knob_ResetEvent to clear pending unparks().</span></span><br><span class="line">        <span class="comment">// Alternately, we can sample fired() here, and if set, forgo spinning</span></span><br><span class="line">        <span class="comment">// in the next iteration.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((Knob_ResetEvent &amp; <span class="number">1</span>) &amp;&amp; Self-&gt;_ParkEvent-&gt;<span class="built_in">fired</span>()) &#123;</span><br><span class="line">           Self-&gt;_ParkEvent-&gt;<span class="built_in">reset</span>() ;</span><br><span class="line">           OrderAccess::<span class="built_in">fence</span>() ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (_succ == Self) _succ = <span class="literal">NULL</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Invariant: after clearing _succ a thread *must* retry _owner before parking.</span></span><br><span class="line">        OrderAccess::<span class="built_in">fence</span>() ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Egress :</span></span><br><span class="line">    <span class="comment">// Self has acquired the lock -- Unlink Self from the cxq or EntryList.</span></span><br><span class="line">    <span class="comment">// Normally we&#x27;ll find Self on the EntryList .</span></span><br><span class="line">    <span class="comment">// From the perspective of the lock owner (this thread), the</span></span><br><span class="line">    <span class="comment">// EntryList is stable and cxq is prepend-only.</span></span><br><span class="line">    <span class="comment">// The head of cxq is volatile but the interior is stable.</span></span><br><span class="line">    <span class="comment">// In addition, Self.TState is stable.</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert</span> (_owner == Self      , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">    <span class="built_in">assert</span> (<span class="built_in">object</span>() != <span class="literal">NULL</span>    , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">    <span class="comment">// I&#x27;d like to write:</span></span><br><span class="line">    <span class="comment">//   guarantee (((oop)(object()))-&gt;mark() == markOopDesc::encode(this), &quot;invariant&quot;) ;</span></span><br><span class="line">    <span class="comment">// but as we&#x27;re at a safepoint that&#x27;s not safe.</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">UnlinkAfterAcquire</span> (Self, &amp;node) ;</span><br><span class="line">    <span class="keyword">if</span> (_succ == Self) _succ = <span class="literal">NULL</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert</span> (_succ != Self, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">    <span class="keyword">if</span> (_Responsible == Self) &#123;</span><br><span class="line">        _Responsible = <span class="literal">NULL</span> ;</span><br><span class="line">        OrderAccess::<span class="built_in">fence</span>(); <span class="comment">// Dekker pivot-point</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// We may leave threads on cxq|EntryList without a designated</span></span><br><span class="line">        <span class="comment">// &quot;Responsible&quot; thread.  This is benign.  When this thread subsequently</span></span><br><span class="line">        <span class="comment">// exits the monitor it can &quot;see&quot; such preexisting &quot;old&quot; threads --</span></span><br><span class="line">        <span class="comment">// threads that arrived on the cxq|EntryList before the fence, above --</span></span><br><span class="line">        <span class="comment">// by LDing cxq|EntryList.  Newly arrived threads -- that is, threads</span></span><br><span class="line">        <span class="comment">// that arrive on cxq after the ST:MEMBAR, above -- will set Responsible</span></span><br><span class="line">        <span class="comment">// non-null and elect a new &quot;Responsible&quot; timer thread.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// This thread executes:</span></span><br><span class="line">        <span class="comment">//    ST Responsible=null; MEMBAR    (in enter epilog - here)</span></span><br><span class="line">        <span class="comment">//    LD cxq|EntryList               (in subsequent exit)</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Entering threads in the slow/contended path execute:</span></span><br><span class="line">        <span class="comment">//    ST cxq=nonnull; MEMBAR; LD Responsible (in enter prolog)</span></span><br><span class="line">        <span class="comment">//    The (ST cxq; MEMBAR) is accomplished with CAS().</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// The MEMBAR, above, prevents the LD of cxq|EntryList in the subsequent</span></span><br><span class="line">        <span class="comment">// exit operation from floating above the ST Responsible=null.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We&#x27;ve acquired ownership with CAS().</span></span><br><span class="line">    <span class="comment">// CAS is serializing -- it has MEMBAR/FENCE-equivalent semantics.</span></span><br><span class="line">    <span class="comment">// But since the CAS() this thread may have also stored into _succ,</span></span><br><span class="line">    <span class="comment">// EntryList, cxq or Responsible.  These meta-data updates must be</span></span><br><span class="line">    <span class="comment">// visible __before this thread subsequently drops the lock.</span></span><br><span class="line">    <span class="comment">// Consider what could occur if we didn&#x27;t enforce this constraint --</span></span><br><span class="line">    <span class="comment">// STs to monitor meta-data and user-data could reorder with (become</span></span><br><span class="line">    <span class="comment">// visible after) the ST in exit that drops ownership of the lock.</span></span><br><span class="line">    <span class="comment">// Some other thread could then acquire the lock, but observe inconsistent</span></span><br><span class="line">    <span class="comment">// or old monitor meta-data and heap data.  That violates the JMM.</span></span><br><span class="line">    <span class="comment">// To that end, the 1-0 exit() operation must have at least STST|LDST</span></span><br><span class="line">    <span class="comment">// &quot;release&quot; barrier semantics.  Specifically, there must be at least a</span></span><br><span class="line">    <span class="comment">// STST|LDST barrier in exit() before the ST of null into _owner that drops</span></span><br><span class="line">    <span class="comment">// the lock.   The barrier ensures that changes to monitor meta-data and data</span></span><br><span class="line">    <span class="comment">// protected by the lock will be visible before we release the lock, and</span></span><br><span class="line">    <span class="comment">// therefore before some other thread (CPU) has a chance to acquire the lock.</span></span><br><span class="line">    <span class="comment">// See also: http://gee.cs.oswego.edu/dl/jmm/cookbook.html.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Critically, any prior STs to _succ or EntryList must be visible before</span></span><br><span class="line">    <span class="comment">// the ST of null into _owner in the *subsequent* (following) corresponding</span></span><br><span class="line">    <span class="comment">// monitorexit.  Recall too, that in 1-0 mode monitorexit does not necessarily</span></span><br><span class="line">    <span class="comment">// execute a serializing instruction.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SyncFlags &amp; <span class="number">8</span>) &#123;</span><br><span class="line">       OrderAccess::<span class="built_in">fence</span>() ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="TryLock"   >          <a href="#TryLock" class="heading-link"><i class="fas fa-link"></i></a><a href="#TryLock" class="headerlink" title="TryLock"></a>TryLock</h4>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ObjectMonitor::TryLock</span> <span class="params">(Thread * Self)</span> </span>&#123;</span><br><span class="line"><span class="comment">//自旋</span></span><br><span class="line">   <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">   <span class="comment">//获取锁的持有者</span></span><br><span class="line">      <span class="type">void</span> * own = _owner ;</span><br><span class="line">       <span class="comment">//如果是有锁则返回0</span></span><br><span class="line">      <span class="keyword">if</span> (own != <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">      <span class="comment">//如果加锁成功了就返回1</span></span><br><span class="line">      <span class="keyword">if</span> (Atomic::<span class="built_in">cmpxchg_ptr</span> (Self, &amp;_owner, <span class="literal">NULL</span>) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">         </span><br><span class="line">         <span class="comment">// Either guarantee _recursions == 0 or set _recursions = 0.</span></span><br><span class="line">         <span class="built_in">assert</span> (_recursions == <span class="number">0</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">         <span class="built_in">assert</span> (_owner == Self, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">         <span class="comment">// CONSIDER: set or assert that OwnerIsThread == 1</span></span><br><span class="line">         <span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// The lock had been free momentarily, but we lost the race to the lock.</span></span><br><span class="line">      <span class="comment">// Interference -- the CAS failed.</span></span><br><span class="line">      <span class="comment">// We can either return -1 or retry.</span></span><br><span class="line">      <span class="comment">// Retry doesn&#x27;t make as much sense because the lock was just acquired.</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//锁没有主人但是竞争的时候失败了就返回-1</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="literal">true</span>) <span class="keyword">return</span> <span class="number">-1</span> ;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="自适应自旋"   >          <a href="#自适应自旋" class="heading-link"><i class="fas fa-link"></i></a><a href="#自适应自旋" class="headerlink" title="自适应自旋"></a>自适应自旋</h4>      <p>自适应自旋是指:如果上一次自旋获取到了那就会将自选次数添加，认为你能获取锁，如果上一次自旋之后还没有获取到，那就认为你获取不到锁，自旋次数就会减少，这个是一个很复杂的一个过程。具体代码如下</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">ObjectMonitor::TrySpin_VaryDuration</span> <span class="params">(Thread * Self)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Dumb, brutal spin.  Good for comparative measurements against adaptive spinning.</span></span><br><span class="line">    <span class="type">int</span> ctr = Knob_FixedSpin ;</span><br><span class="line">    <span class="keyword">if</span> (ctr != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (--ctr &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">TryLock</span> (Self) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">            <span class="built_in">SpinPause</span> () ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (ctr = Knob_PreSpin + <span class="number">1</span>; --ctr &gt;= <span class="number">0</span> ; ) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">TryLock</span>(Self) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Increase _SpinDuration ...</span></span><br><span class="line">        <span class="comment">// Note that we don&#x27;t clamp SpinDuration precisely at SpinLimit.</span></span><br><span class="line">        <span class="comment">// Raising _SpurDuration to the poverty line is key.</span></span><br><span class="line">        <span class="type">int</span> x = _SpinDuration ;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; Knob_SpinLimit) &#123;</span><br><span class="line">           <span class="keyword">if</span> (x &lt; Knob_Poverty) x = Knob_Poverty ;</span><br><span class="line">           _SpinDuration = x + Knob_BonusB ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">SpinPause</span> () ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Admission control - verify preconditions for spinning</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// We always spin a little bit, just to prevent _SpinDuration == 0 from</span></span><br><span class="line">    <span class="comment">// becoming an absorbing state.  Put another way, we spin briefly to</span></span><br><span class="line">    <span class="comment">// sample, just in case the system load, parallelism, contention, or lock</span></span><br><span class="line">    <span class="comment">// modality changed.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// Consider the following alternative:</span></span><br><span class="line">    <span class="comment">// Periodically set _SpinDuration = _SpinLimit and try a long/full</span></span><br><span class="line">    <span class="comment">// spin attempt.  &quot;Periodically&quot; might mean after a tally of</span></span><br><span class="line">    <span class="comment">// the # of failed spin attempts (or iterations) reaches some threshold.</span></span><br><span class="line">    <span class="comment">// This takes us into the realm of 1-out-of-N spinning, where we</span></span><br><span class="line">    <span class="comment">// hold the duration constant but vary the frequency.</span></span><br><span class="line"></span><br><span class="line">    ctr = _SpinDuration  ;</span><br><span class="line">    <span class="keyword">if</span> (ctr &lt; Knob_SpinBase) ctr = Knob_SpinBase ;</span><br><span class="line">    <span class="keyword">if</span> (ctr &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Knob_SuccRestrict &amp;&amp; _succ != <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">if</span> (Knob_OState &amp;&amp; <span class="built_in">NotRunnable</span> (Self, (Thread *) _owner)) &#123;</span><br><span class="line">       <span class="built_in">TEVENT</span> (Spin abort - notrunnable [TOP]);</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> MaxSpin = Knob_MaxSpinners ;</span><br><span class="line">    <span class="keyword">if</span> (MaxSpin &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="keyword">if</span> (_Spinner &gt; MaxSpin) &#123;</span><br><span class="line">          <span class="built_in">TEVENT</span> (Spin abort -- too many spinners) ;</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// Slighty racy, but benign ...</span></span><br><span class="line">       <span class="built_in">Adjust</span> (&amp;_Spinner, <span class="number">1</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We&#x27;re good to spin ... spin ingress.</span></span><br><span class="line">    <span class="comment">// CONSIDER: use Prefetch::write() to avoid RTS-&gt;RTO upgrades</span></span><br><span class="line">    <span class="comment">// when preparing to LD...CAS _owner, etc and the CAS is likely</span></span><br><span class="line">    <span class="comment">// to succeed.</span></span><br><span class="line">    <span class="type">int</span> hits    = <span class="number">0</span> ;</span><br><span class="line">    <span class="type">int</span> msk     = <span class="number">0</span> ;</span><br><span class="line">    <span class="type">int</span> caspty  = Knob_CASPenalty ;</span><br><span class="line">    <span class="type">int</span> oxpty   = Knob_OXPenalty ;</span><br><span class="line">    <span class="type">int</span> sss     = Knob_SpinSetSucc ;</span><br><span class="line">    <span class="keyword">if</span> (sss &amp;&amp; _succ == <span class="literal">NULL</span> ) _succ = Self ;</span><br><span class="line">    Thread * prv = <span class="literal">NULL</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// There are three ways to exit the following loop:</span></span><br><span class="line">    <span class="comment">// 1.  A successful spin where this thread has acquired the lock.</span></span><br><span class="line">    <span class="comment">// 2.  Spin failure with prejudice</span></span><br><span class="line">    <span class="comment">// 3.  Spin failure without prejudice</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (--ctr &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Periodic polling -- Check for pending GC</span></span><br><span class="line">      <span class="comment">// Threads may spin while they&#x27;re unsafe.</span></span><br><span class="line">      <span class="comment">// We don&#x27;t want spinning threads to delay the JVM from reaching</span></span><br><span class="line">      <span class="comment">// a stop-the-world safepoint or to steal cycles from GC.</span></span><br><span class="line">      <span class="comment">// If we detect a pending safepoint we abort in order that</span></span><br><span class="line">      <span class="comment">// (a) this thread, if unsafe, doesn&#x27;t delay the safepoint, and (b)</span></span><br><span class="line">      <span class="comment">// this thread, if safe, doesn&#x27;t steal cycles from GC.</span></span><br><span class="line">      <span class="comment">// This is in keeping with the &quot;no loitering in runtime&quot; rule.</span></span><br><span class="line">      <span class="comment">// We periodically check to see if there&#x27;s a safepoint pending.</span></span><br><span class="line">      <span class="keyword">if</span> ((ctr &amp; <span class="number">0xFF</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (SafepointSynchronize::<span class="built_in">do_call_back</span>()) &#123;</span><br><span class="line">            <span class="built_in">TEVENT</span> (Spin: safepoint) ;</span><br><span class="line">            <span class="keyword">goto</span> Abort ;           <span class="comment">// abrupt spin egress</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span> (Knob_UsePause &amp; <span class="number">1</span>) <span class="built_in">SpinPause</span> () ;</span><br><span class="line"></span><br><span class="line">         <span class="built_in">int</span> (*scb)(<span class="type">intptr_t</span>,<span class="type">int</span>) = SpinCallbackFunction ;</span><br><span class="line">         <span class="keyword">if</span> (hits &gt; <span class="number">50</span> &amp;&amp; scb != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="type">int</span> abend = (*scb)(SpinCallbackArgument, <span class="number">0</span>) ;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (Knob_UsePause &amp; <span class="number">2</span>) <span class="built_in">SpinPause</span>() ;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Exponential back-off ...  Stay off the bus to reduce coherency traffic.</span></span><br><span class="line">      <span class="comment">// This is useful on classic SMP systems, but is of less utility on</span></span><br><span class="line">      <span class="comment">// N1-style CMT platforms.</span></span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">      <span class="comment">// Trade-off: lock acquisition latency vs coherency bandwidth.</span></span><br><span class="line">      <span class="comment">// Lock hold times are typically short.  A histogram</span></span><br><span class="line">      <span class="comment">// of successful spin attempts shows that we usually acquire</span></span><br><span class="line">      <span class="comment">// the lock early in the spin.  That suggests we want to</span></span><br><span class="line">      <span class="comment">// sample _owner frequently in the early phase of the spin,</span></span><br><span class="line">      <span class="comment">// but then back-off and sample less frequently as the spin</span></span><br><span class="line">      <span class="comment">// progresses.  The back-off makes a good citizen on SMP big</span></span><br><span class="line">      <span class="comment">// SMP systems.  Oversampling _owner can consume excessive</span></span><br><span class="line">      <span class="comment">// coherency bandwidth.  Relatedly, if we _oversample _owner we</span></span><br><span class="line">      <span class="comment">// can inadvertently interfere with the the ST m-&gt;owner=null.</span></span><br><span class="line">      <span class="comment">// executed by the lock owner.</span></span><br><span class="line">      <span class="keyword">if</span> (ctr &amp; msk) <span class="keyword">continue</span> ;</span><br><span class="line">      ++hits ;</span><br><span class="line">      <span class="keyword">if</span> ((hits &amp; <span class="number">0xF</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// The 0xF, above, corresponds to the exponent.</span></span><br><span class="line">        <span class="comment">// Consider: (msk+1)|msk</span></span><br><span class="line">        msk = ((msk &lt;&lt; <span class="number">2</span>)|<span class="number">3</span>) &amp; BackOffMask ;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Probe _owner with TATAS</span></span><br><span class="line">      <span class="comment">// If this thread observes the monitor transition or flicker</span></span><br><span class="line">      <span class="comment">// from locked to unlocked to locked, then the odds that this</span></span><br><span class="line">      <span class="comment">// thread will acquire the lock in this spin attempt go down</span></span><br><span class="line">      <span class="comment">// considerably.  The same argument applies if the CAS fails</span></span><br><span class="line">      <span class="comment">// or if we observe _owner change from one non-null value to</span></span><br><span class="line">      <span class="comment">// another non-null value.   In such cases we might abort</span></span><br><span class="line">      <span class="comment">// the spin without prejudice or apply a &quot;penalty&quot; to the</span></span><br><span class="line">      <span class="comment">// spin count-down variable &quot;ctr&quot;, reducing it by 100, say.</span></span><br><span class="line"></span><br><span class="line">      Thread * ox = (Thread *) _owner ;</span><br><span class="line">      <span class="keyword">if</span> (ox == <span class="literal">NULL</span>) &#123;</span><br><span class="line">         ox = (Thread *) Atomic::<span class="built_in">cmpxchg_ptr</span> (Self, &amp;_owner, <span class="literal">NULL</span>) ;</span><br><span class="line">         <span class="keyword">if</span> (ox == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="comment">// The CAS succeeded -- this thread acquired ownership</span></span><br><span class="line">            <span class="comment">// Take care of some bookkeeping to exit spin state.</span></span><br><span class="line">            <span class="keyword">if</span> (sss &amp;&amp; _succ == Self) &#123;</span><br><span class="line">               _succ = <span class="literal">NULL</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (MaxSpin &gt; <span class="number">0</span>) <span class="built_in">Adjust</span> (&amp;_Spinner, <span class="number">-1</span>) ;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Increase _SpinDuration :</span></span><br><span class="line">            <span class="comment">// The spin was successful (profitable) so we tend toward</span></span><br><span class="line">            <span class="comment">// longer spin attempts in the future.</span></span><br><span class="line">            <span class="comment">// CONSIDER: factor &quot;ctr&quot; into the _SpinDuration adjustment.</span></span><br><span class="line">            <span class="comment">// If we acquired the lock early in the spin cycle it</span></span><br><span class="line">            <span class="comment">// makes sense to increase _SpinDuration proportionally.</span></span><br><span class="line">            <span class="comment">// Note that we don&#x27;t clamp SpinDuration precisely at SpinLimit.</span></span><br><span class="line">            <span class="type">int</span> x = _SpinDuration ;</span><br><span class="line">            <span class="keyword">if</span> (x &lt; Knob_SpinLimit) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x &lt; Knob_Poverty) x = Knob_Poverty ;</span><br><span class="line">                _SpinDuration = x + Knob_Bonus ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// The CAS failed ... we can take any of the following actions:</span></span><br><span class="line">         <span class="comment">// * penalize: ctr -= Knob_CASPenalty</span></span><br><span class="line">         <span class="comment">// * exit spin with prejudice -- goto Abort;</span></span><br><span class="line">         <span class="comment">// * exit spin without prejudice.</span></span><br><span class="line">         <span class="comment">// * Since CAS is high-latency, retry again immediately.</span></span><br><span class="line">         prv = ox ;</span><br><span class="line">         <span class="built_in">TEVENT</span> (Spin: cas failed) ;</span><br><span class="line">         <span class="keyword">if</span> (caspty == <span class="number">-2</span>) <span class="keyword">break</span> ;</span><br><span class="line">         <span class="keyword">if</span> (caspty == <span class="number">-1</span>) <span class="keyword">goto</span> Abort ;</span><br><span class="line">         ctr -= caspty ;</span><br><span class="line">         <span class="keyword">continue</span> ;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Did lock ownership change hands ?</span></span><br><span class="line">      <span class="keyword">if</span> (ox != prv &amp;&amp; prv != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">          <span class="built_in">TEVENT</span> (spin: Owner changed)</span><br><span class="line">          <span class="keyword">if</span> (oxpty == <span class="number">-2</span>) <span class="keyword">break</span> ;</span><br><span class="line">          <span class="keyword">if</span> (oxpty == <span class="number">-1</span>) <span class="keyword">goto</span> Abort ;</span><br><span class="line">          ctr -= oxpty ;</span><br><span class="line">      &#125;</span><br><span class="line">      prv = ox ;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Abort the spin if the owner is not executing.</span></span><br><span class="line">      <span class="comment">// The owner must be executing in order to drop the lock.</span></span><br><span class="line">      <span class="comment">// Spinning while the owner is OFFPROC is idiocy.</span></span><br><span class="line">      <span class="comment">// Consider: ctr -= RunnablePenalty ;</span></span><br><span class="line">      <span class="keyword">if</span> (Knob_OState &amp;&amp; <span class="built_in">NotRunnable</span> (Self, ox)) &#123;</span><br><span class="line">         <span class="built_in">TEVENT</span> (Spin abort - notrunnable);</span><br><span class="line">         <span class="keyword">goto</span> Abort ;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (sss &amp;&amp; _succ == <span class="literal">NULL</span> ) _succ = Self ;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Spin failed with prejudice -- reduce _SpinDuration.</span></span><br><span class="line">   <span class="comment">// <span class="doctag">TODO:</span> Use an AIMD-like policy to adjust _SpinDuration.</span></span><br><span class="line">   <span class="comment">// AIMD is globally stable.</span></span><br><span class="line">   <span class="built_in">TEVENT</span> (Spin failure) ;</span><br><span class="line">   &#123;</span><br><span class="line">     <span class="type">int</span> x = _SpinDuration ;</span><br><span class="line">     <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Consider an AIMD scheme like: x -= (x &gt;&gt; 3) + 100</span></span><br><span class="line">        <span class="comment">// This is globally sample and tends to damp the response.</span></span><br><span class="line">        x -= Knob_Penalty ;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span>) x = <span class="number">0</span> ;</span><br><span class="line">        _SpinDuration = x ;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> Abort:</span><br><span class="line">   <span class="keyword">if</span> (MaxSpin &gt;= <span class="number">0</span>) <span class="built_in">Adjust</span> (&amp;_Spinner, <span class="number">-1</span>) ;</span><br><span class="line">   <span class="keyword">if</span> (sss &amp;&amp; _succ == Self) &#123;</span><br><span class="line">      _succ = <span class="literal">NULL</span> ;</span><br><span class="line">      <span class="comment">// Invariant: after setting succ=null a contending thread</span></span><br><span class="line">      <span class="comment">// must recheck-retry _owner before parking.  This usually happens</span></span><br><span class="line">      <span class="comment">// in the normal usage of TrySpin(), but it&#x27;s safest</span></span><br><span class="line">      <span class="comment">// to make TrySpin() as foolproof as possible.</span></span><br><span class="line">      OrderAccess::<span class="built_in">fence</span>() ;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">TryLock</span>(Self) &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="阻塞队列图解"   >          <a href="#阻塞队列图解" class="heading-link"><i class="fas fa-link"></i></a><a href="#阻塞队列图解" class="headerlink" title="阻塞队列图解"></a>阻塞队列图解</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230803184039161.png"  alt="阻塞队列图解">      </p>        <h3 id="重量级锁竞争流程图"   >          <a href="#重量级锁竞争流程图" class="heading-link"><i class="fas fa-link"></i></a><a href="#重量级锁竞争流程图" class="headerlink" title="重量级锁竞争流程图"></a>重量级锁竞争流程图</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230803182841184.png"  alt="重量级锁竞争流程图">      </p>        <h2 id="锁释放"   >          <a href="#锁释放" class="heading-link"><i class="fas fa-link"></i></a><a href="#锁释放" class="headerlink" title="锁释放"></a>锁释放</h2>              <h3 id="轻量级锁释放-monitorexit"   >          <a href="#轻量级锁释放-monitorexit" class="heading-link"><i class="fas fa-link"></i></a><a href="#轻量级锁释放-monitorexit" class="headerlink" title="轻量级锁释放(monitorexit)"></a>轻量级锁释放(monitorexit)</h3>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CASE</span>(_monitorexit): &#123;</span><br><span class="line">    <span class="comment">//从栈中获取对象</span></span><br><span class="line">        oop lockee = <span class="built_in">STACK_OBJECT</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//对lockee判空</span></span><br><span class="line">        <span class="built_in">CHECK_NULL</span>(lockee);</span><br><span class="line">        <span class="comment">// derefing&#x27;s lockee ought to provoke implicit null check</span></span><br><span class="line">        <span class="comment">// find our monitor slot</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//指向栈顶的监视器</span></span><br><span class="line">        BasicObjectLock* limit = istate-&gt;<span class="built_in">monitor_base</span>();</span><br><span class="line">    <span class="comment">//指向栈底的监视器</span></span><br><span class="line">        BasicObjectLock* most_recent = (BasicObjectLock*) istate-&gt;<span class="built_in">stack_base</span>();</span><br><span class="line">    <span class="comment">//循环，当栈底和栈顶不指向同一个监视器时</span></span><br><span class="line">        <span class="keyword">while</span> (most_recent != limit ) &#123;</span><br><span class="line">            <span class="comment">//如果找到监视器监视的lockee是指向当前锁</span></span><br><span class="line">          <span class="keyword">if</span> ((most_recent)-&gt;<span class="built_in">obj</span>() == lockee) &#123;</span><br><span class="line">            BasicLock* lock = most_recent-&gt;<span class="built_in">lock</span>();</span><br><span class="line">            markOop header = lock-&gt;<span class="built_in">displaced_header</span>();</span><br><span class="line">              <span class="comment">//将监视器指向的obj设为空</span></span><br><span class="line">            most_recent-&gt;<span class="built_in">set_obj</span>(<span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">if</span> (!lockee-&gt;<span class="built_in">mark</span>()-&gt;<span class="built_in">has_bias_pattern</span>()) &#123;</span><br><span class="line">                <span class="comment">//如果这个锁不是偏向锁</span></span><br><span class="line">              <span class="type">bool</span> call_vm = UseHeavyMonitors;</span><br><span class="line">                <span class="comment">//获取环境变量是否禁用偏向锁和轻量级锁，默认是false</span></span><br><span class="line">              <span class="comment">// If it isn&#x27;t recursive we either must swap old header or call the runtime</span></span><br><span class="line">                <span class="comment">//判断头是否为空，因为头为空说明是一个重入锁，就不进这个判断，目的是找到第一个锁头</span></span><br><span class="line">              <span class="keyword">if</span> (header != <span class="literal">NULL</span> || call_vm) &#123;</span><br><span class="line">                  <span class="comment">//如果监视器的头不为空，那么CAS操作将锁的lock更新为无锁状态</span></span><br><span class="line">                <span class="keyword">if</span> (call_vm || Atomic::<span class="built_in">cmpxchg_ptr</span>(header, lockee-&gt;<span class="built_in">mark_addr</span>(), lock) != lock) &#123;</span><br><span class="line">                    <span class="comment">//如果失败则进入竞争锁的释放</span></span><br><span class="line">                  <span class="comment">// restore object for the slow case</span></span><br><span class="line">                  most_recent-&gt;<span class="built_in">set_obj</span>(lockee);</span><br><span class="line">                  <span class="built_in">CALL_VM</span>(InterpreterRuntime::<span class="built_in">monitorexit</span>(THREAD, most_recent), handle_exception);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">              <span class="comment">//运行到这里说明锁是偏向锁，偏向锁就不做任何处理，只更新PC计数器</span></span><br><span class="line">            <span class="built_in">UPDATE_PC_AND_TOS_AND_CONTINUE</span>(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          most_recent++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Need to throw illegal monitor state exception</span></span><br><span class="line">        <span class="built_in">CALL_VM</span>(InterpreterRuntime::<span class="built_in">throw_illegal_monitor_state_exception</span>(THREAD), handle_exception);</span><br><span class="line">        <span class="built_in">ShouldNotReachHere</span>();</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="①InterpreterRuntime-monitorexit"   >          <a href="#①InterpreterRuntime-monitorexit" class="heading-link"><i class="fas fa-link"></i></a><a href="#①InterpreterRuntime-monitorexit" class="headerlink" title="①InterpreterRuntime::monitorexit"></a>①InterpreterRuntime::monitorexit</h4>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">IRT_ENTRY_NO_ASYNC</span>(<span class="type">void</span>, InterpreterRuntime::<span class="built_in">monitorexit</span>(JavaThread* thread, BasicObjectLock* elem))</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ASSERT</span></span><br><span class="line">  thread-&gt;<span class="built_in">last_frame</span>().<span class="built_in">interpreter_frame_verify_monitor</span>(elem);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//封装了线程和Object</span></span><br><span class="line">  <span class="function">Handle <span class="title">h_obj</span><span class="params">(thread, elem-&gt;obj())</span></span>;</span><br><span class="line">  <span class="built_in">assert</span>(Universe::<span class="built_in">heap</span>()-&gt;<span class="built_in">is_in_reserved_or_null</span>(<span class="built_in">h_obj</span>()),</span><br><span class="line">         <span class="string">&quot;must be NULL or an object&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (elem == <span class="literal">NULL</span> || <span class="built_in">h_obj</span>()-&gt;<span class="built_in">is_unlocked</span>()) &#123;</span><br><span class="line">    <span class="built_in">THROW</span>(vmSymbols::<span class="built_in">java_lang_IllegalMonitorStateException</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入Slow_exit</span></span><br><span class="line">  ObjectSynchronizer::<span class="built_in">slow_exit</span>(<span class="built_in">h_obj</span>(), elem-&gt;<span class="built_in">lock</span>(), thread);</span><br><span class="line">  <span class="comment">// Free entry. This must be done here, since a pending exception might be installed on</span></span><br><span class="line">  <span class="comment">// exit. If it is not cleared, the exception handling code will try to unlock the monitor again.</span></span><br><span class="line">  elem-&gt;<span class="built_in">set_obj</span>(<span class="literal">NULL</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ASSERT</span></span><br><span class="line">  thread-&gt;<span class="built_in">last_frame</span>().<span class="built_in">interpreter_frame_verify_monitor</span>(elem);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">IRT_END</span><br></pre></td></tr></table></div></figure>        <h4 id="②slow-exit"   >          <a href="#②slow-exit" class="heading-link"><i class="fas fa-link"></i></a><a href="#②slow-exit" class="headerlink" title="②slow_exit"></a>②slow_exit</h4>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ObjectSynchronizer::slow_exit</span><span class="params">(oop object, BasicLock* lock, TRAPS)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//进入fast_exit</span></span><br><span class="line">  <span class="built_in">fast_exit</span> (object, lock, THREAD) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="③fast-exit"   >          <a href="#③fast-exit" class="heading-link"><i class="fas fa-link"></i></a><a href="#③fast-exit" class="headerlink" title="③fast_exit"></a>③fast_exit</h4>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ObjectSynchronizer::fast_exit</span><span class="params">(oop object, BasicLock* lock, TRAPS)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">assert</span>(!object-&gt;<span class="built_in">mark</span>()-&gt;<span class="built_in">has_bias_pattern</span>(), <span class="string">&quot;should not see bias pattern here&quot;</span>);</span><br><span class="line">  <span class="comment">// if displaced header is null, the previous enter is recursive enter, no-op</span></span><br><span class="line">    <span class="comment">//获得锁头信息</span></span><br><span class="line">  markOop dhw = lock-&gt;<span class="built_in">displaced_header</span>();</span><br><span class="line">  markOop mark ;</span><br><span class="line">    <span class="comment">//如果lockee的头是null说明是一个重入</span></span><br><span class="line">  <span class="keyword">if</span> (dhw == <span class="literal">NULL</span>) &#123;</span><br><span class="line">     <span class="comment">// Recursive stack-lock.</span></span><br><span class="line">     <span class="comment">// Diagnostics -- Could be: stack-locked, inflating, inflated.</span></span><br><span class="line">     mark = object-&gt;<span class="built_in">mark</span>() ;</span><br><span class="line">     <span class="built_in">assert</span> (!mark-&gt;<span class="built_in">is_neutral</span>(), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">     <span class="keyword">if</span> (mark-&gt;<span class="built_in">has_locker</span>() &amp;&amp; mark != markOopDesc::<span class="built_in">INFLATING</span>()) &#123;</span><br><span class="line">        <span class="built_in">assert</span>(THREAD-&gt;<span class="built_in">is_lock_owned</span>((address)mark-&gt;<span class="built_in">locker</span>()), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (mark-&gt;<span class="built_in">has_monitor</span>()) &#123;</span><br><span class="line">        ObjectMonitor * m = mark-&gt;<span class="built_in">monitor</span>() ;</span><br><span class="line">        <span class="built_in">assert</span>(((oop)(m-&gt;<span class="built_in">object</span>()))-&gt;<span class="built_in">mark</span>() == mark, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">        <span class="built_in">assert</span>(m-&gt;<span class="built_in">is_entered</span>(THREAD), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取BasicObjectLock头信息</span></span><br><span class="line">  mark = object-&gt;<span class="built_in">mark</span>() ;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If the object is stack-locked by the current thread, try to</span></span><br><span class="line">  <span class="comment">// swing the displaced header from the box back to the mark.</span></span><br><span class="line">  <span class="keyword">if</span> (mark == (markOop) lock) &#123;</span><br><span class="line">      <span class="comment">//如果这两个地址相同，说明是一个轻量级锁</span></span><br><span class="line">     <span class="built_in">assert</span> (dhw-&gt;<span class="built_in">is_neutral</span>(), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">      <span class="comment">//CAS操作将栈中的BasicObjectLock的头信息改成dhw</span></span><br><span class="line">     <span class="keyword">if</span> ((markOop) Atomic::<span class="built_in">cmpxchg_ptr</span> (dhw, object-&gt;<span class="built_in">mark_addr</span>(), mark) == mark) &#123;</span><br><span class="line">         <span class="comment">//如果CAS成功说明轻量级锁释放</span></span><br><span class="line">        <span class="built_in">TEVENT</span> (fast_exit: release stacklock) ;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//没有进入上面轻量级锁的释放说明在mark中的数据改变了，说明是重量级锁的释放</span></span><br><span class="line">    <span class="comment">//调用下面方法膨胀锁获取监视器对象，通过监视器的方法来释放锁</span></span><br><span class="line">  ObjectSynchronizer::<span class="built_in">inflate</span>(THREAD, object)-&gt;<span class="built_in">exit</span> (<span class="literal">true</span>, THREAD) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="重量级锁释放-ObjectMonitor-exit"   >          <a href="#重量级锁释放-ObjectMonitor-exit" class="heading-link"><i class="fas fa-link"></i></a><a href="#重量级锁释放-ObjectMonitor-exit" class="headerlink" title="重量级锁释放(ObjectMonitor::exit)"></a>重量级锁释放(ObjectMonitor::exit)</h3>      <figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> ATTR <span class="title">ObjectMonitor::exit</span><span class="params">(<span class="type">bool</span> not_suspended, TRAPS)</span> </span>&#123;</span><br><span class="line">   Thread * Self = THREAD ;</span><br><span class="line">    <span class="comment">//判断当前线程是否是持锁线程，目的是将当前线程指向持锁线程</span></span><br><span class="line">   <span class="keyword">if</span> (THREAD != _owner) &#123;</span><br><span class="line">       <span class="comment">//如果当前线程不是持锁线程.那么从栈中找到持锁线程地址交给Thread</span></span><br><span class="line">     <span class="keyword">if</span> (THREAD-&gt;<span class="built_in">is_lock_owned</span>((address) _owner)) &#123;</span><br><span class="line">       <span class="comment">// Transmute _owner from a BasicLock pointer to a Thread address.</span></span><br><span class="line">       <span class="comment">// We don&#x27;t need to hold _mutex for this transition.</span></span><br><span class="line">       <span class="comment">// Non-null to Non-null is safe as long as all readers can</span></span><br><span class="line">       <span class="comment">// tolerate either flavor.</span></span><br><span class="line">       <span class="built_in">assert</span> (_recursions == <span class="number">0</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">       _owner = THREAD ;</span><br><span class="line">       _recursions = <span class="number">0</span> ;</span><br><span class="line">       OwnerIsThread = <span class="number">1</span> ;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// <span class="doctag">NOTE:</span> we need to handle unbalanced monitor enter/exit</span></span><br><span class="line">       <span class="comment">// in native code by throwing an exception.</span></span><br><span class="line">       <span class="comment">// <span class="doctag">TODO:</span> Throw an IllegalMonitorStateException ?</span></span><br><span class="line">       <span class="built_in">TEVENT</span> (Exit - Throw IMSX) ;</span><br><span class="line">       <span class="built_in">assert</span>(<span class="literal">false</span>, <span class="string">&quot;Non-balanced monitor enter/exit!&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">          <span class="built_in">THROW</span>(vmSymbols::<span class="built_in">java_lang_IllegalMonitorStateException</span>());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//运行到这里已经找到了持锁线程</span></span><br><span class="line"><span class="comment">//判断重入次数，如果不为0说明是重量级锁重入的释放</span></span><br><span class="line">   <span class="keyword">if</span> (_recursions != <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="comment">//重入次数-1然后结束方法</span></span><br><span class="line">     _recursions--;        <span class="comment">// this is simple recursive enter</span></span><br><span class="line">     <span class="built_in">TEVENT</span> (Inflated exit - recursive) ;</span><br><span class="line">     <span class="keyword">return</span> ;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Invariant: after setting Responsible=null an thread must execute</span></span><br><span class="line">   <span class="comment">// a MEMBAR or other serializing instruction before fetching EntryList|cxq.</span></span><br><span class="line">   <span class="keyword">if</span> ((SyncFlags &amp; <span class="number">4</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">      _Responsible = <span class="literal">NULL</span> ;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> INCLUDE_TRACE</span></span><br><span class="line">   <span class="comment">// get the owner&#x27;s thread id for the MonitorEnter event</span></span><br><span class="line">   <span class="comment">// if it is enabled and the thread isn&#x27;t suspended</span></span><br><span class="line">   <span class="keyword">if</span> (not_suspended &amp;&amp; Tracing::<span class="built_in">is_event_enabled</span>(TraceJavaMonitorEnterEvent)) &#123;</span><br><span class="line">     _previous_owner_tid = SharedRuntime::<span class="built_in">get_java_tid</span>(Self);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//自旋</span></span><br><span class="line">   <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      <span class="built_in">assert</span> (THREAD == _owner, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (Knob_ExitPolicy == <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="comment">// release semantics: prior loads and stores from within the critical section</span></span><br><span class="line">         <span class="comment">// must not float (reorder) past the following store that drops the lock.</span></span><br><span class="line">         <span class="comment">// On SPARC that requires MEMBAR #loadstore|#storestore.</span></span><br><span class="line">         <span class="comment">// But of course in TSO #loadstore|#storestore is not required.</span></span><br><span class="line">         <span class="comment">// I&#x27;d like to write one of the following:</span></span><br><span class="line">         <span class="comment">// A.  OrderAccess::release() ; _owner = NULL</span></span><br><span class="line">         <span class="comment">// B.  OrderAccess::loadstore(); OrderAccess::storestore(); _owner = NULL;</span></span><br><span class="line">         <span class="comment">// Unfortunately OrderAccess::release() and OrderAccess::loadstore() both</span></span><br><span class="line">         <span class="comment">// store into a _dummy variable.  That store is not needed, but can result</span></span><br><span class="line">         <span class="comment">// in massive wasteful coherency traffic on classic SMP systems.</span></span><br><span class="line">         <span class="comment">// Instead, I use release_store(), which is implemented as just a simple</span></span><br><span class="line">         <span class="comment">// ST on x64, x86 and SPARC.</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">//设置ObjectMonitor的Owner为NUll</span></span><br><span class="line">         OrderAccess::<span class="built_in">release_store_ptr</span> (&amp;_owner, <span class="literal">NULL</span>) ;   <span class="comment">// drop the lock</span></span><br><span class="line">         OrderAccess::<span class="built_in">storeload</span>() ;                         <span class="comment">// See if we need to wake a successor</span></span><br><span class="line">         </span><br><span class="line">          <span class="comment">//判断cxq阻塞队列和唤醒线程是否为空，如果为空就说明释放结束</span></span><br><span class="line">          <span class="keyword">if</span> ((<span class="built_in">intptr_t</span>(_EntryList)|<span class="built_in">intptr_t</span>(_cxq)) == <span class="number">0</span> || _succ != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">TEVENT</span> (Inflated exit - simple egress) ;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">TEVENT</span> (Inflated exit - complex egress) ;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Normally the exiting thread is responsible for ensuring succession,</span></span><br><span class="line">         <span class="comment">// but if other successors are ready or other entering threads are spinning</span></span><br><span class="line">         <span class="comment">// then this thread can simply store NULL into _owner and exit without</span></span><br><span class="line">         <span class="comment">// waking a successor.  The existence of spinners or ready successors</span></span><br><span class="line">         <span class="comment">// guarantees proper succession (liveness).  Responsibility passes to the</span></span><br><span class="line">         <span class="comment">// ready or running successors.  The exiting thread delegates the duty.</span></span><br><span class="line">         <span class="comment">// More precisely, if a successor already exists this thread is absolved</span></span><br><span class="line">         <span class="comment">// of the responsibility of waking (unparking) one.</span></span><br><span class="line">         <span class="comment">//</span></span><br><span class="line">         <span class="comment">// The _succ variable is critical to reducing futile wakeup frequency.</span></span><br><span class="line">         <span class="comment">// _succ identifies the &quot;heir presumptive&quot; thread that has been made</span></span><br><span class="line">         <span class="comment">// ready (unparked) but that has not yet run.  We need only one such</span></span><br><span class="line">         <span class="comment">// successor thread to guarantee progress.</span></span><br><span class="line">         <span class="comment">// See http://www.usenix.org/events/jvm01/full_papers/dice/dice.pdf</span></span><br><span class="line">         <span class="comment">// section 3.3 &quot;Futile Wakeup Throttling&quot; for details.</span></span><br><span class="line">         <span class="comment">//</span></span><br><span class="line">         <span class="comment">// Note that spinners in Enter() also set _succ non-null.</span></span><br><span class="line">         <span class="comment">// In the current implementation spinners opportunistically set</span></span><br><span class="line">         <span class="comment">// _succ so that exiting threads might avoid waking a successor.</span></span><br><span class="line">         <span class="comment">// Another less appealing alternative would be for the exiting thread</span></span><br><span class="line">         <span class="comment">// to drop the lock and then spin briefly to see if a spinner managed</span></span><br><span class="line">         <span class="comment">// to acquire the lock.  If so, the exiting thread could exit</span></span><br><span class="line">         <span class="comment">// immediately without waking a successor, otherwise the exiting</span></span><br><span class="line">         <span class="comment">// thread would need to dequeue and wake a successor.</span></span><br><span class="line">         <span class="comment">// (Note that we&#x27;d need to make the post-drop spin short, but no</span></span><br><span class="line">         <span class="comment">// shorter than the worst-case round-trip cache-line migration time.</span></span><br><span class="line">         <span class="comment">// The dropped lock needs to become visible to the spinner, and then</span></span><br><span class="line">         <span class="comment">// the acquisition of the lock by the spinner must become visible to</span></span><br><span class="line">         <span class="comment">// the exiting thread).</span></span><br><span class="line">         <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">// It appears that an heir-presumptive (successor) must be made ready.</span></span><br><span class="line">         <span class="comment">// Only the current lock owner can manipulate the EntryList or</span></span><br><span class="line">         <span class="comment">// drain _cxq, so we need to reacquire the lock.  If we fail</span></span><br><span class="line">         <span class="comment">// to reacquire the lock the responsibility for ensuring succession</span></span><br><span class="line">         <span class="comment">// falls to the new owner.</span></span><br><span class="line">         <span class="comment">//</span></span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          <span class="comment">//运行到这里说明线程的阻塞队列或者唤醒队列有线程等待</span></span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          <span class="comment">//CAS操作重新获取一把锁，将监视器指向持锁线程，说明唤醒线程操作只能由持锁线程进行</span></span><br><span class="line">         <span class="keyword">if</span> (Atomic::<span class="built_in">cmpxchg_ptr</span> (THREAD, &amp;_owner, <span class="literal">NULL</span>) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">             <span class="comment">//获取锁失败则返回</span></span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="built_in">TEVENT</span> (Exit - Reacquired) ;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          </span><br><span class="line">          <span class="comment">//判断cxq阻塞队列和唤醒线程是否为空，如果为空就说明释放结束</span></span><br><span class="line">         <span class="keyword">if</span> ((<span class="built_in">intptr_t</span>(_EntryList)|<span class="built_in">intptr_t</span>(_cxq)) == <span class="number">0</span> || _succ != <span class="literal">NULL</span>) &#123;</span><br><span class="line">             </span><br><span class="line">             <span class="comment">//设置ObjectMonitor的Owner为NUll</span></span><br><span class="line">            OrderAccess::<span class="built_in">release_store_ptr</span> (&amp;_owner, <span class="literal">NULL</span>) ;   <span class="comment">// drop the lock</span></span><br><span class="line">            OrderAccess::<span class="built_in">storeload</span>() ;</span><br><span class="line">            <span class="comment">// Ratify the previously observed values.</span></span><br><span class="line">             </span><br><span class="line">             <span class="comment">//如果cxq为空 则结束</span></span><br><span class="line">            <span class="keyword">if</span> (_cxq == <span class="literal">NULL</span> || _succ != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="built_in">TEVENT</span> (Inflated exit - simple egress) ;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// inopportune interleaving -- the exiting thread (this thread)</span></span><br><span class="line">            <span class="comment">// in the fast-exit path raced an entering thread in the slow-enter</span></span><br><span class="line">            <span class="comment">// path.</span></span><br><span class="line">            <span class="comment">// We have two choices:</span></span><br><span class="line">            <span class="comment">// A.  Try to reacquire the lock.</span></span><br><span class="line">            <span class="comment">//     If the CAS() fails return immediately, otherwise</span></span><br><span class="line">            <span class="comment">//     we either restart/rerun the exit operation, or simply</span></span><br><span class="line">            <span class="comment">//     fall-through into the code below which wakes a successor.</span></span><br><span class="line">            <span class="comment">// B.  If the elements forming the EntryList|cxq are TSM</span></span><br><span class="line">            <span class="comment">//     we could simply unpark() the lead thread and return</span></span><br><span class="line">            <span class="comment">//     without having set _succ.</span></span><br><span class="line">             </span><br><span class="line">             </span><br><span class="line">             <span class="comment">//运行到这里说明cxq不为空，将持锁线程重新交给监视器的ONWER</span></span><br><span class="line">            <span class="keyword">if</span> (Atomic::<span class="built_in">cmpxchg_ptr</span> (THREAD, &amp;_owner, <span class="literal">NULL</span>) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="comment">//cas失败则加锁失败返回</span></span><br><span class="line">               <span class="built_in">TEVENT</span> (Inflated exit - reacquired succeeded) ;</span><br><span class="line">               <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">            <span class="built_in">TEVENT</span> (Inflated exit - reacquired failed) ;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">TEVENT</span> (Inflated exit - complex egress) ;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//接下来是唤醒等待队列线程的操作 通过Qmode来判断唤醒操作</span></span><br><span class="line">      <span class="built_in">guarantee</span> (_owner == THREAD, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">      ObjectWaiter * w = <span class="literal">NULL</span> ;</span><br><span class="line">      <span class="type">int</span> QMode = Knob_QMode ;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (QMode == <span class="number">2</span> &amp;&amp; _cxq != <span class="literal">NULL</span>) &#123;</span><br><span class="line">          <span class="comment">// QMode == 2 : cxq has precedence over EntryList.</span></span><br><span class="line">          <span class="comment">// Try to directly wake a successor from the cxq.</span></span><br><span class="line">          <span class="comment">// If successful, the successor will need to unlink itself from cxq.</span></span><br><span class="line">          w = _cxq ;</span><br><span class="line">          <span class="built_in">assert</span> (w != <span class="literal">NULL</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">          <span class="built_in">assert</span> (w-&gt;TState == ObjectWaiter::TS_CXQ, <span class="string">&quot;Invariant&quot;</span>) ;</span><br><span class="line">          <span class="built_in">ExitEpilog</span> (Self, w) ;</span><br><span class="line">          <span class="keyword">return</span> ;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (QMode == <span class="number">3</span> &amp;&amp; _cxq != <span class="literal">NULL</span>) &#123;</span><br><span class="line">          <span class="comment">// Aggressively drain cxq into EntryList at the first opportunity.</span></span><br><span class="line">          <span class="comment">// This policy ensure that recently-run threads live at the head of EntryList.</span></span><br><span class="line">          <span class="comment">// Drain _cxq into EntryList - bulk transfer.</span></span><br><span class="line">          <span class="comment">// First, detach _cxq.</span></span><br><span class="line">          <span class="comment">// The following loop is tantamount to: w = swap (&amp;cxq, NULL)</span></span><br><span class="line">          w = _cxq ;</span><br><span class="line">          <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">             <span class="built_in">assert</span> (w != <span class="literal">NULL</span>, <span class="string">&quot;Invariant&quot;</span>) ;</span><br><span class="line">             ObjectWaiter * u = (ObjectWaiter *) Atomic::<span class="built_in">cmpxchg_ptr</span> (<span class="literal">NULL</span>, &amp;_cxq, w) ;</span><br><span class="line">             <span class="keyword">if</span> (u == w) <span class="keyword">break</span> ;</span><br><span class="line">             w = u ;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">assert</span> (w != <span class="literal">NULL</span>              , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">          ObjectWaiter * q = <span class="literal">NULL</span> ;</span><br><span class="line">          ObjectWaiter * p ;</span><br><span class="line">          <span class="keyword">for</span> (p = w ; p != <span class="literal">NULL</span> ; p = p-&gt;_next) &#123;</span><br><span class="line">              <span class="built_in">guarantee</span> (p-&gt;TState == ObjectWaiter::TS_CXQ, <span class="string">&quot;Invariant&quot;</span>) ;</span><br><span class="line">              p-&gt;TState = ObjectWaiter::TS_ENTER ;</span><br><span class="line">              p-&gt;_prev = q ;</span><br><span class="line">              q = p ;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Append the RATs to the EntryList</span></span><br><span class="line">          <span class="comment">// <span class="doctag">TODO:</span> organize EntryList as a CDLL so we can locate the tail in constant-time.</span></span><br><span class="line">          ObjectWaiter * Tail ;</span><br><span class="line">          <span class="keyword">for</span> (Tail = _EntryList ; Tail != <span class="literal">NULL</span> &amp;&amp; Tail-&gt;_next != <span class="literal">NULL</span> ; Tail = Tail-&gt;_next) ;</span><br><span class="line">          <span class="keyword">if</span> (Tail == <span class="literal">NULL</span>) &#123;</span><br><span class="line">              _EntryList = w ;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              Tail-&gt;_next = w ;</span><br><span class="line">              w-&gt;_prev = Tail ;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Fall thru into code that tries to wake a successor from EntryList</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (QMode == <span class="number">4</span> &amp;&amp; _cxq != <span class="literal">NULL</span>) &#123;</span><br><span class="line">          <span class="comment">// Aggressively drain cxq into EntryList at the first opportunity.</span></span><br><span class="line">          <span class="comment">// This policy ensure that recently-run threads live at the head of EntryList.</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// Drain _cxq into EntryList - bulk transfer.</span></span><br><span class="line">          <span class="comment">// First, detach _cxq.</span></span><br><span class="line">          <span class="comment">// The following loop is tantamount to: w = swap (&amp;cxq, NULL)</span></span><br><span class="line">          w = _cxq ;</span><br><span class="line">          <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">             <span class="built_in">assert</span> (w != <span class="literal">NULL</span>, <span class="string">&quot;Invariant&quot;</span>) ;</span><br><span class="line">             ObjectWaiter * u = (ObjectWaiter *) Atomic::<span class="built_in">cmpxchg_ptr</span> (<span class="literal">NULL</span>, &amp;_cxq, w) ;</span><br><span class="line">             <span class="keyword">if</span> (u == w) <span class="keyword">break</span> ;</span><br><span class="line">             w = u ;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">assert</span> (w != <span class="literal">NULL</span>              , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">          ObjectWaiter * q = <span class="literal">NULL</span> ;</span><br><span class="line">          ObjectWaiter * p ;</span><br><span class="line">          <span class="keyword">for</span> (p = w ; p != <span class="literal">NULL</span> ; p = p-&gt;_next) &#123;</span><br><span class="line">              <span class="built_in">guarantee</span> (p-&gt;TState == ObjectWaiter::TS_CXQ, <span class="string">&quot;Invariant&quot;</span>) ;</span><br><span class="line">              p-&gt;TState = ObjectWaiter::TS_ENTER ;</span><br><span class="line">              p-&gt;_prev = q ;</span><br><span class="line">              q = p ;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Prepend the RATs to the EntryList</span></span><br><span class="line">          <span class="keyword">if</span> (_EntryList != <span class="literal">NULL</span>) &#123;</span><br><span class="line">              q-&gt;_next = _EntryList ;</span><br><span class="line">              _EntryList-&gt;_prev = q ;</span><br><span class="line">          &#125;</span><br><span class="line">          _EntryList = w ;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// Fall thru into code that tries to wake a successor from EntryList</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      w = _EntryList  ;</span><br><span class="line">      <span class="keyword">if</span> (w != <span class="literal">NULL</span>) &#123;</span><br><span class="line">          <span class="comment">// I&#x27;d like to write: guarantee (w-&gt;_thread != Self).</span></span><br><span class="line">          <span class="comment">// But in practice an exiting thread may find itself on the EntryList.</span></span><br><span class="line">          <span class="comment">// Lets say thread T1 calls O.wait().  Wait() enqueues T1 on O&#x27;s waitset and</span></span><br><span class="line">          <span class="comment">// then calls exit().  Exit release the lock by setting O._owner to NULL.</span></span><br><span class="line">          <span class="comment">// Lets say T1 then stalls.  T2 acquires O and calls O.notify().  The</span></span><br><span class="line">          <span class="comment">// notify() operation moves T1 from O&#x27;s waitset to O&#x27;s EntryList. T2 then</span></span><br><span class="line">          <span class="comment">// release the lock &quot;O&quot;.  T2 resumes immediately after the ST of null into</span></span><br><span class="line">          <span class="comment">// _owner, above.  T2 notices that the EntryList is populated, so it</span></span><br><span class="line">          <span class="comment">// reacquires the lock and then finds itself on the EntryList.</span></span><br><span class="line">          <span class="comment">// Given all that, we have to tolerate the circumstance where &quot;w&quot; is</span></span><br><span class="line">          <span class="comment">// associated with Self.</span></span><br><span class="line">          <span class="built_in">assert</span> (w-&gt;TState == ObjectWaiter::TS_ENTER, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">          <span class="built_in">ExitEpilog</span> (Self, w) ;</span><br><span class="line">          <span class="keyword">return</span> ;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// If we find that both _cxq and EntryList are null then just</span></span><br><span class="line">      <span class="comment">// re-run the exit protocol from the top.</span></span><br><span class="line">      w = _cxq ;</span><br><span class="line">      <span class="keyword">if</span> (w == <span class="literal">NULL</span>) <span class="keyword">continue</span> ;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Drain _cxq into EntryList - bulk transfer.</span></span><br><span class="line">      <span class="comment">// First, detach _cxq.</span></span><br><span class="line">      <span class="comment">// The following loop is tantamount to: w = swap (&amp;cxq, NULL)</span></span><br><span class="line">      <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">          <span class="built_in">assert</span> (w != <span class="literal">NULL</span>, <span class="string">&quot;Invariant&quot;</span>) ;</span><br><span class="line">          ObjectWaiter * u = (ObjectWaiter *) Atomic::<span class="built_in">cmpxchg_ptr</span> (<span class="literal">NULL</span>, &amp;_cxq, w) ;</span><br><span class="line">          <span class="keyword">if</span> (u == w) <span class="keyword">break</span> ;</span><br><span class="line">          w = u ;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">TEVENT</span> (Inflated exit - drain cxq into EntryList) ;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">assert</span> (w != <span class="literal">NULL</span>              , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">      <span class="built_in">assert</span> (_EntryList  == <span class="literal">NULL</span>    , <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Convert the LIFO SLL anchored by _cxq into a DLL.</span></span><br><span class="line">      <span class="comment">// The list reorganization step operates in O(LENGTH(w)) time.</span></span><br><span class="line">      <span class="comment">// It&#x27;s critical that this step operate quickly as</span></span><br><span class="line">      <span class="comment">// &quot;Self&quot; still holds the outer-lock, restricting parallelism</span></span><br><span class="line">      <span class="comment">// and effectively lengthening the critical section.</span></span><br><span class="line">      <span class="comment">// Invariant: s chases t chases u.</span></span><br><span class="line">      <span class="comment">// TODO-<span class="doctag">FIXME:</span> consider changing EntryList from a DLL to a CDLL so</span></span><br><span class="line">      <span class="comment">// we have faster access to the tail.</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (QMode == <span class="number">1</span>) &#123;</span><br><span class="line">         <span class="comment">// QMode == 1 : drain cxq to EntryList, reversing order</span></span><br><span class="line">         <span class="comment">// We also reverse the order of the list.</span></span><br><span class="line">         ObjectWaiter * s = <span class="literal">NULL</span> ;</span><br><span class="line">         ObjectWaiter * t = w ;</span><br><span class="line">         ObjectWaiter * u = <span class="literal">NULL</span> ;</span><br><span class="line">         <span class="keyword">while</span> (t != <span class="literal">NULL</span>) &#123;</span><br><span class="line">             <span class="built_in">guarantee</span> (t-&gt;TState == ObjectWaiter::TS_CXQ, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">             t-&gt;TState = ObjectWaiter::TS_ENTER ;</span><br><span class="line">             u = t-&gt;_next ;</span><br><span class="line">             t-&gt;_prev = u ;</span><br><span class="line">             t-&gt;_next = s ;</span><br><span class="line">             s = t;</span><br><span class="line">             t = u ;</span><br><span class="line">         &#125;</span><br><span class="line">         _EntryList  = s ;</span><br><span class="line">         <span class="built_in">assert</span> (s != <span class="literal">NULL</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// QMode == 0 or QMode == 2</span></span><br><span class="line">         _EntryList = w ;</span><br><span class="line">         ObjectWaiter * q = <span class="literal">NULL</span> ;</span><br><span class="line">         ObjectWaiter * p ;</span><br><span class="line">         <span class="keyword">for</span> (p = w ; p != <span class="literal">NULL</span> ; p = p-&gt;_next) &#123;</span><br><span class="line">             <span class="built_in">guarantee</span> (p-&gt;TState == ObjectWaiter::TS_CXQ, <span class="string">&quot;Invariant&quot;</span>) ;</span><br><span class="line">             p-&gt;TState = ObjectWaiter::TS_ENTER ;</span><br><span class="line">             p-&gt;_prev = q ;</span><br><span class="line">             q = p ;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// In 1-0 mode we need: ST EntryList; MEMBAR #storestore; ST _owner = NULL</span></span><br><span class="line">      <span class="comment">// The MEMBAR is satisfied by the release_store() operation in ExitEpilog().</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// See if we can abdicate to a spinner instead of waking a thread.</span></span><br><span class="line">      <span class="comment">// A primary goal of the implementation is to reduce the</span></span><br><span class="line">      <span class="comment">// context-switch rate.</span></span><br><span class="line">      <span class="keyword">if</span> (_succ != <span class="literal">NULL</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      w = _EntryList  ;</span><br><span class="line">      <span class="keyword">if</span> (w != <span class="literal">NULL</span>) &#123;</span><br><span class="line">          <span class="built_in">guarantee</span> (w-&gt;TState == ObjectWaiter::TS_ENTER, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">          <span class="built_in">ExitEpilog</span> (Self, w) ;</span><br><span class="line">          <span class="keyword">return</span> ;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="锁释放流程图"   >          <a href="#锁释放流程图" class="heading-link"><i class="fas fa-link"></i></a><a href="#锁释放流程图" class="headerlink" title="锁释放流程图"></a>锁释放流程图</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230803194242527.png"  alt="锁释放流程图">      </p>        <h2 id="锁的降级"   >          <a href="#锁的降级" class="heading-link"><i class="fas fa-link"></i></a><a href="#锁的降级" class="headerlink" title="锁的降级"></a>锁的降级</h2>      <p>我们在前面的偏向锁加锁和撤销偏向锁、轻量级锁膨胀、重量级锁膨胀、以及最后的锁的释放过程好像只是把锁头信息给改正，但是好像没有看到锁降级的过程，而锁降级确实是提供了一个方法</p><p><strong>即锁在虚拟机的全局安全点会检查是否有闲置的监控器</strong>，<strong>如果有会进行一个锁降级</strong></p><p>锁降级方法：在JVM的STW状态进行一个锁的降级</p><figure class="highlight cpp"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ObjectSynchronizer::deflate_monitor</span><span class="params">(ObjectMonitor* mid, oop obj,</span></span></span><br><span class="line"><span class="params"><span class="function">                                         ObjectMonitor** FreeHeadp, ObjectMonitor** FreeTailp)</span> </span>&#123;</span><br><span class="line">  <span class="type">bool</span> deflated;</span><br><span class="line">  <span class="comment">// Normal case ... The monitor is associated with obj.</span></span><br><span class="line">  <span class="built_in">guarantee</span> (obj-&gt;<span class="built_in">mark</span>() == markOopDesc::<span class="built_in">encode</span>(mid), <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line">  <span class="built_in">guarantee</span> (mid == obj-&gt;<span class="built_in">mark</span>()-&gt;<span class="built_in">monitor</span>(), <span class="string">&quot;invariant&quot;</span>);</span><br><span class="line">  <span class="built_in">guarantee</span> (mid-&gt;<span class="built_in">header</span>()-&gt;<span class="built_in">is_neutral</span>(), <span class="string">&quot;invariant&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (mid-&gt;<span class="built_in">is_busy</span>()) &#123;</span><br><span class="line">     <span class="keyword">if</span> (ClearResponsibleAtSTW) mid-&gt;_Responsible = <span class="literal">NULL</span> ;</span><br><span class="line">     deflated = <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">// Deflate the monitor if it is no longer being used</span></span><br><span class="line">     <span class="comment">// It&#x27;s idle - scavenge and return to the global free list</span></span><br><span class="line">     <span class="comment">// plain old deflation ...</span></span><br><span class="line">     <span class="built_in">TEVENT</span> (deflate_idle_monitors - scavenge1) ;</span><br><span class="line">     <span class="keyword">if</span> (TraceMonitorInflation) &#123;</span><br><span class="line">       <span class="keyword">if</span> (obj-&gt;<span class="built_in">is_instance</span>()) &#123;</span><br><span class="line">         ResourceMark rm;</span><br><span class="line">           tty-&gt;<span class="built_in">print_cr</span>(<span class="string">&quot;Deflating object &quot;</span> INTPTR_FORMAT <span class="string">&quot; , mark &quot;</span> INTPTR_FORMAT <span class="string">&quot; , type %s&quot;</span>,</span><br><span class="line">                (<span class="type">void</span> *) obj, (<span class="type">intptr_t</span>) obj-&gt;<span class="built_in">mark</span>(), obj-&gt;<span class="built_in">klass</span>()-&gt;<span class="built_in">external_name</span>());</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Restore the header back to obj</span></span><br><span class="line">     obj-&gt;<span class="built_in">release_set_mark</span>(mid-&gt;<span class="built_in">header</span>());</span><br><span class="line">     mid-&gt;<span class="built_in">clear</span>();</span><br><span class="line"></span><br><span class="line">     <span class="built_in">assert</span> (mid-&gt;<span class="built_in">object</span>() == <span class="literal">NULL</span>, <span class="string">&quot;invariant&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// Move the object to the working free list defined by FreeHead,FreeTail.</span></span><br><span class="line">     <span class="keyword">if</span> (*FreeHeadp == <span class="literal">NULL</span>) *FreeHeadp = mid;</span><br><span class="line">     <span class="keyword">if</span> (*FreeTailp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">       ObjectMonitor * prevtail = *FreeTailp;</span><br><span class="line">       <span class="built_in">assert</span>(prevtail-&gt;FreeNext == <span class="literal">NULL</span>, <span class="string">&quot;cleaned up deflated?&quot;</span>); <span class="comment">// TODO KK</span></span><br><span class="line">       prevtail-&gt;FreeNext = mid;</span><br><span class="line">      &#125;</span><br><span class="line">     *FreeTailp = mid;</span><br><span class="line">     deflated = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> deflated;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入剖析并发编程-JUC篇[1-JUC并发编程基础]</title>
      <link href="/2023/08/01/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-JUC%E7%AF%87%5B1-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%5D/"/>
      <url>/2023/08/01/%E6%B7%B1%E5%85%A5%E5%89%96%E6%9E%90%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-JUC%E7%AF%87%5B1-JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%5D/</url>
      
        <content type="html"><![CDATA[<p><strong>JUC并发编程基础</strong></p><hr><ul><li>第一篇是JUC并发编程基础</li><li>第二篇是JMM、Volatile关键字、synchronize锁详解</li><li>第三篇是CAS机制原理、Unsafe魔法类、LockSupport工具类、ThreadLocal线程变量</li><li>第四篇是Atomic原子包源码详解</li><li>第五篇是AQS源码以及机制详解</li></ul><hr>        <h1 id="冯诺依曼体系结构"   >          <a href="#冯诺依曼体系结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#冯诺依曼体系结构" class="headerlink" title="冯诺依曼体系结构"></a>冯诺依曼体系结构</h1>      <p>首先，我们要了解并发过程中为什么会导致数据会出错</p><p>冯·诺依曼机（von Neumann machine），又称冯·诺依曼计算机，根据<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E5%86%AF%C2%B7%E8%AF%BA%E4%BE%9D%E6%9B%BC/388909?fromModule=lemma_inlink" >冯·诺依曼</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>提出的<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E7%A8%8B%E5%BA%8F/8800242?fromModule=lemma_inlink" >存储程序</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span><span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E6%A6%82%E5%BF%B5%E8%AE%BE%E8%AE%A1/1200478?fromModule=lemma_inlink" >概念设计</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>的<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA/140338?fromModule=lemma_inlink" >计算机</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。主要特征是：指令与<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E9%83%BD/20348401?fromModule=lemma_inlink" >数据都</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>以<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6/361457?fromModule=lemma_inlink" >二进制</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>形式储存在<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E5%99%A8/1583185?fromModule=lemma_inlink" >存储器</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>里；指令根据其储存的<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C/332454?fromModule=lemma_inlink" >顺序执行</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。 <span class="exturl"><a class="exturl__link"   href="https://www.termonline.cn/word/54892/1#s1" >[1]</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p><span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E5%86%AF%C2%B7%E8%AF%BA%E4%BC%8A%E6%9B%BC%E7%BB%93%E6%9E%84/6688306?fromModule=lemma_inlink" >冯·诺伊曼结构</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>（von Neumann architecture），也称冯·诺伊曼模型（Von Neumann model）或普林斯顿结构（Princeton architecture），是一种将程序指令存储器和数据存储器合并在一起的计算机设计<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E6%A6%82%E5%BF%B5%E7%BB%93%E6%9E%84/22325298?fromModule=lemma_inlink" >概念结构</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>。依据冯·诺伊曼<span class="exturl"><a class="exturl__link"   href="https://baike.baidu.com/item/%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1/7481502?fromModule=lemma_inlink" >结构设计</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span>出的计算机称做冯.诺依曼计算机，又称存储程序计算机。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801161725875.png"  alt="冯诺依曼计算机结构图">      </p>        <h1 id="CPU模型"   >          <a href="#CPU模型" class="heading-link"><i class="fas fa-link"></i></a><a href="#CPU模型" class="headerlink" title="CPU模型"></a>CPU模型</h1>      <p>我们已知线程是CPU任务调度和执行的基本单位，而线程之间通信出现问题导致了数据的不一致性</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801163419744.png"  alt="CPU内存模型">      </p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">因为数据在高速缓存中，而线程之间的环境是隔离的</span><br><span class="line">每次只会获取自己线程的Cache，那么数据的不可见性最终导致数据的错误</span><br></pre></td></tr></table></div></figure>        <h1 id="缓存行"   >          <a href="#缓存行" class="heading-link"><i class="fas fa-link"></i></a><a href="#缓存行" class="headerlink" title="缓存行"></a>缓存行</h1>      <p>首先我们要引入一个缓存行的概念，数据在缓存中是怎么存放的</p><p>缓存行是数据中存放的单元，在现在主流CPU Cache中缓存行都是64位的，例如一个数据是int类型那么是32位 一个缓存行就能存放两个数据</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801165444126.png"  alt="缓存行">      </p><p>因此当线程想要获取数据A的时候会将A所在的缓存行刷入自己的Cache中，而当要获取数据B的时候直接从自己的缓存中读取即可，但这就引起了另外的一个问题：伪共享问题</p>        <h1 id="伪共享"   >          <a href="#伪共享" class="heading-link"><i class="fas fa-link"></i></a><a href="#伪共享" class="headerlink" title="伪共享"></a>伪共享</h1>      <p>因此有一个伪共享问题的存在，例如两个Int数据存放在缓存行C1中，而线程T1想要读取数据A，而线程T2想要读取数据B，他们都会从内存将C1刷入自己的Cache中</p><p>而当线程T1更新数据A，而线程T2的数据A没有更新，且会因为缓存一致性协议(MESI协议)，将其置为失效状态(I)</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801171236659.png"  alt="image-20230801171236659">      </p><p><em>而解决伪共享的解决方案有：</em></p><p>1.将变量对齐，使其填满一个缓存行</p><p>2.将不同线程操作的对象处于不同缓存行中</p>        <h1 id="缓存一致性协议"   >          <a href="#缓存一致性协议" class="heading-link"><i class="fas fa-link"></i></a><a href="#缓存一致性协议" class="headerlink" title="缓存一致性协议"></a>缓存一致性协议</h1>      <p>因为缓存的不一致导致数据出错，那么就有了缓存一致性的需求、</p><p>来达到缓存的一致性有两个方式</p>        <h2 id="给总线加锁"   >          <a href="#给总线加锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#给总线加锁" class="headerlink" title="给总线加锁"></a>给总线加锁</h2>      <p>当线程要获取数据的时候发起Lock将与主内存的总线加锁，这样其他线程要获取数据的时候就会被阻塞</p><p>这样当线程执行完毕之后写回给内存之后会UnLock解锁，唤醒其他线程</p><p>弊端：这样导致了线程的串行化，会造成性能影响。和我们多线程的意愿违背</p>        <h2 id="缓存一致性协议-MESI协议"   >          <a href="#缓存一致性协议-MESI协议" class="heading-link"><i class="fas fa-link"></i></a><a href="#缓存一致性协议-MESI协议" class="headerlink" title="缓存一致性协议(MESI协议)"></a>缓存一致性协议(MESI协议)</h2>      <p>缓存一致性协议有很多，而我们这里只谈MESI协议</p><p><strong>MESI协议</strong></p><p>M:修改(Modified) ， 意思是这个数据只在本线程独有，并且这个数据与主存的数据不一致，是修改过后的数据</p><p>E：  独享(Exclusive)， 意思是这个数据只有本线程独有，并且和主存的数据一致</p><p>S：  分享(Shared)，    意思是这个数据被多个线程持有，并且和主存的数据一致</p><p>I：   失效(invalid)，     意思是这个数据已经被其他线程修改而导致失效了，需要重新从主存中获取数据</p><p>Cache Line在高速缓存Cache中的状态就变成 高两位为信号位(用来存放MESI状态)，后面为数据位</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801172256181.png"  alt="缓存行在Cache中">      </p>        <h2 id="消息"   >          <a href="#消息" class="heading-link"><i class="fas fa-link"></i></a><a href="#消息" class="headerlink" title="消息"></a>消息</h2>      <p>MESI状态变换要通过消息来进行变换，而每次CPU在进行数据操作的时候都会有一个嗅探机制来处理信号并且在一定条件下响应信号</p><ul><li><p>Read 信号：表示要读取某个缓存行，会附带目标的物理地址</p></li><li><p>Read Response信号：反馈Read信号，内容就是Read信号的目标缓存行。Read Response信号可以由内存发出，也可以由其他CPU核心发出</p></li><li><p>Invalidate信号： 表示数据要被更新，告诉共享的CPU核数据已经失效了</p></li><li><p>Invalidate Acknowledge信号：表示知道数据已经失效，准备清空缓存数据</p></li><li><p>Read Invalidate信号：为Read+Invalidate，既要读取数据又要更新数据，让其他缓存行数据失效</p></li><li><p>Writeback信号：数据回写信号，在某一定条件下数据从Cache写回内存中</p></li></ul>        <h2 id="图解MESI的各种变幻状态"   >          <a href="#图解MESI的各种变幻状态" class="heading-link"><i class="fas fa-link"></i></a><a href="#图解MESI的各种变幻状态" class="headerlink" title="图解MESI的各种变幻状态"></a>图解MESI的各种变幻状态</h2>      <p>我们假设有两个线程来获取数据</p>        <h3 id="①线程A获取数据"   >          <a href="#①线程A获取数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#①线程A获取数据" class="headerlink" title="①线程A获取数据"></a>①线程A获取数据</h3>      <p>发起一个Read信号，想要读取内存中的数据放入到线程中Cache里</p><p>此时返回一个Read Response信号，此时Read Response信号来自内存，线程A中的缓存行状态为E态(独享)</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801171827789.png"  alt="仅线程A获取数据">      </p>        <h3 id="②线程B获取数据"   >          <a href="#②线程B获取数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#②线程B获取数据" class="headerlink" title="②线程B获取数据"></a>②线程B获取数据</h3>      <p>线程B也发起Read信号，返回一个Read Response信号,可能来自线程A中，将线程A中的缓存行状态改成S态(独享)</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801171947078.png"  alt="线程B也获取同一个数据">      </p>        <h3 id="③线程A更新数据"   >          <a href="#③线程A更新数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#③线程A更新数据" class="headerlink" title="③线程A更新数据"></a>③线程A更新数据</h3>      <p>发出Invalidate信号，将线程B中的数据更新成I态，此时线程A的缓存行状态为M态</p><p>线程B会返回一个Invalidate Acknowledge信号，表示自己已经知道数据失效了将要清空缓存</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801173716877.png"  alt="线程A更新数据">      </p>        <h3 id="④数据写回内存"   >          <a href="#④数据写回内存" class="heading-link"><i class="fas fa-link"></i></a><a href="#④数据写回内存" class="headerlink" title="④数据写回内存"></a>④数据写回内存</h3>      <p>发起WriteBack信号，写回数据，并将现场A缓存中数据置为E态</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801173940439.png"  alt="数据写回内存">      </p>        <h1 id="CPU空闲-–-引入Store-Buffer"   >          <a href="#CPU空闲-–-引入Store-Buffer" class="heading-link"><i class="fas fa-link"></i></a><a href="#CPU空闲-–-引入Store-Buffer" class="headerlink" title="CPU空闲 –&gt; 引入Store Buffer"></a>CPU空闲 –&gt; 引入Store Buffer</h1>      <p>当线程A发起写操作并且发起Invalidate信号必须要等其他线程返回Invalidate Acknowledge信号 那么就会有一个等待时间，而我们要的是CPU忙，让CPU空闲不是我们想要的</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801174606159.png"  alt="CPU空闲">      </p><p>所以引入了StoreBuffer，将修改之后的操作直接存入StoreBuffer中，而StoreBuffer以某种条件刷入到Cache中再去执行操作，这样就不会导致线程空闲。</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801175207579.png"  alt="引入StroeBuffer之后">      </p><p>当线程有执行操作之后直接写入到StoreBuffer中，而StoreBuffer是一个先进先出的队列，这样能保证数据刷出的有序性</p><p>而线程要读取数据的时候发现StoreBuffer中有的时候可以直接从StroeBuffer中获取数据</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801175913669.png"  alt="处理模型">      </p><p><em>引出的问题</em>：StoreBuffer会引起缓存的不一致性，当数据还没刷出到Cache中的时候就导致了数据的错误</p><p><strong>解决方案</strong></p><p>添加屏障(CPU屏障)：写屏障或者全屏障，当写操作之前，将StoreBuffer的数据刷入到Cache中</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801180536132.png"  alt="添加屏障，将StoreBuffer数据写到Cache中">      </p>        <h1 id="引入Invalidate-Queues"   >          <a href="#引入Invalidate-Queues" class="heading-link"><i class="fas fa-link"></i></a><a href="#引入Invalidate-Queues" class="headerlink" title="引入Invalidate Queues"></a>引入Invalidate Queues</h1>      <p>当StoreBuffer打满要刷新到Cache中或者因为其他原因要写到Cache中，多个Invalidate信号要等待Invalidate AcknowLedge信号而Invalidate AcknowLedge信号很慢，这段时间会空闲，所以引入了一个失效队列，当失效信号发出就发到失效队列中，这样就异步解决了这个问题</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801181326286.png"  alt="引入Invalidate Queues">      </p><p><em>引出的问题</em>：Invalidate会引起缓存的不一致性，当信号还没执行，就要读取数据了而此时数据没更新会导致数据的错误</p><p><strong>解决方案</strong></p><p>添加屏障(CPU屏障)：读屏障或者全屏障，当读操作之前，将InvalidateQueue中作用到Cache中</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230801181924213.png"  alt="添加屏障">      </p>        <h1 id="乱序问题"   >          <a href="#乱序问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#乱序问题" class="headerlink" title="乱序问题"></a>乱序问题</h1>      <p>因为指令在虚拟机执行可能会进行一个重排，导致一个不可见性，所以有可能出现乱序问题</p><ul><li><p>Load Load：有问题，线程A读取数据的时候第一次读取和第二次读取可能不一样(其他线程进行改动)</p></li><li><p>Load Store：没问题，线程A读取数据然后从写入数据到StoreBuffer中</p></li><li><p>Store Load：有问题，线程A写操作写入StoreBuffer而没有刷到主存中，线程B再读数据就会读到脏数据</p></li><li><p>Store Store：：没问题，线程A写入StoreBuffer中，因为StoreBuffer是先进先出的队列，只要保证Happens-before原则，那么执行的顺序就是有序的</p></li></ul><p>解决方案:利用屏障，将数据刷出在Cache中</p>        <h1 id="总结："   >          <a href="#总结：" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结：" class="headerlink" title="总结："></a>总结：</h1>      <p>以上是从硬件层面来讲JUC为什么并发会导致数据错误，我们真正要进入Java的世界中去探讨JUC并发编程的问题了</p><hr>        <h1 id="后记"   >          <a href="#后记" class="heading-link"><i class="fas fa-link"></i></a><a href="#后记" class="headerlink" title="后记"></a>后记</h1>      <p>我学JUC这块我很幸运我能在大概几百个点击的时候在B站看到J3Code老哥对JUC并发编程的视频，我没有选择尚硅谷、马士兵、黑马的视频，可能是在学JUC这块看到了一些差评的原因，而黑马是因为视频有点旧了，实际上我学的还是JDK8的，到现在为止视频应该是可以学习的。但是因为有些评论说是因为PPT讲师造就PPT程序员，是吧。所以看差评这块影响心态被拿捏的死死的</p><hr><p>总之，我还是非常感谢J3Code老哥可以免费分享出他深入JUC这块的成果，下面是他的CSDN地址</p><div class="table-container"><table><thead><tr><th>作者</th><th>CSDN主页地址</th></tr></thead><tbody><tr><td>J3code</td><td><span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/qq_40399646" >https://blog.csdn.net/qq_40399646</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> JUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MallChat项目学习</title>
      <link href="/2023/07/30/MallChat%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/07/30/MallChat%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[        <h1 id="先跑通项目"   >          <a href="#先跑通项目" class="heading-link"><i class="fas fa-link"></i></a><a href="#先跑通项目" class="headerlink" title="先跑通项目"></a>先跑通项目</h1>              <h2 id="尝试运行"   >          <a href="#尝试运行" class="heading-link"><i class="fas fa-link"></i></a><a href="#尝试运行" class="headerlink" title="尝试运行"></a>尝试运行</h2>              <h3 id="后端"   >          <a href="#后端" class="heading-link"><i class="fas fa-link"></i></a><a href="#后端" class="headerlink" title="后端:"></a>后端:</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230730100207953.png"  alt="image-20230730100207953">      </p><p>|INFO|2023-07-30 09:50:38.781|main||uid&#x3D;|Tomcat initialized with port(s): 8080 (http)|</p><p>找到内置的tomcat服务器端口号是8080</p>        <h3 id="前端"   >          <a href="#前端" class="heading-link"><i class="fas fa-link"></i></a><a href="#前端" class="headerlink" title="前端:"></a>前端:</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230730103826557.png"  alt="image-20230730103826557">      </p>        <h2 id="尝试进入Swagger"   >          <a href="#尝试进入Swagger" class="heading-link"><i class="fas fa-link"></i></a><a href="#尝试进入Swagger" class="headerlink" title="尝试进入Swagger"></a>尝试进入Swagger</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;</span><br><span class="line">    &lt;!--使用Swagger2--&gt;</span><br><span class="line">    &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.0</span><span class="number">.9</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></div></figure><p>因为找到了Swagger2依赖 所以项目中用了Swagger</p><p>尝试进入Swagger-ui页面</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230730100713827.png"  alt="image-20230730100713827">      </p><p>找到Swagger配置类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(value = &quot;defaultApi2&quot;)</span></span><br><span class="line">    Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                <span class="comment">//配置网站的基本信息</span></span><br><span class="line">                .apiInfo(<span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                        <span class="comment">//网站标题</span></span><br><span class="line">                        .title(<span class="string">&quot;mallchat接口文档&quot;</span>)</span><br><span class="line">                        <span class="comment">//标题后面的版本号</span></span><br><span class="line">                        .version(<span class="string">&quot;v1.0&quot;</span>)</span><br><span class="line">                        .description(<span class="string">&quot;mallchat接口文档&quot;</span>)</span><br><span class="line">                        <span class="comment">//联系人信息</span></span><br><span class="line">                        .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;阿斌&quot;</span>, <span class="string">&quot;http://www.mallchat.cn&quot;</span>, <span class="string">&quot;972627721@qq.com&quot;</span>))</span><br><span class="line">                        .build())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//指定接口的位置</span></span><br><span class="line">                .apis(RequestHandlerSelectors</span><br><span class="line">                        .withClassAnnotation(RestController.class)</span><br><span class="line">                )</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>通过mallchat文档中得知</p><p>SwaggerUI经过Knife4j优化之后URL变更了</p><p>从localhost:8080&#x2F;doc.html进入SwaggerUI中</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230730103929645.png"  alt="image-20230730103929645">      </p><p>获得了接口列表</p>        <h2 id="端口号分析"   >          <a href="#端口号分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#端口号分析" class="headerlink" title="端口号分析"></a>端口号分析</h2>      <p>3306: Mysql端口</p><p>6379: Redis端口</p><p>8080:本地tomcat端口</p><p>8090:内网穿透端口</p><p>9000:minio端口</p><p>9001:minio控制台端口</p><p>9988?</p>        <h2 id="进入前端界面尝试前后端联调"   >          <a href="#进入前端界面尝试前后端联调" class="heading-link"><i class="fas fa-link"></i></a><a href="#进入前端界面尝试前后端联调" class="headerlink" title="进入前端界面尝试前后端联调"></a>进入前端界面尝试前后端联调</h2>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230730161607692.png"  alt="image-20230730161607692">      </p>        <h2 id="申请测试号，来进行获取微信信息"   >          <a href="#申请测试号，来进行获取微信信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#申请测试号，来进行获取微信信息" class="headerlink" title="申请测试号，来进行获取微信信息"></a>申请测试号，来进行获取微信信息</h2>      <p>通过微信测试号可以获得登录的头像等微信信息</p>        <h2 id="通过测试号获取到登录信息之后进入前端页面进行测试"   >          <a href="#通过测试号获取到登录信息之后进入前端页面进行测试" class="heading-link"><i class="fas fa-link"></i></a><a href="#通过测试号获取到登录信息之后进入前端页面进行测试" class="headerlink" title="通过测试号获取到登录信息之后进入前端页面进行测试"></a>通过测试号获取到登录信息之后进入前端页面进行测试</h2>      <p>清除浏览器Session然后重新刷新页面抓到初始化请求</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230730225147538.png"  alt="image-20230730225147538">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230731101441566.png"  alt="image-20230731101441566">      </p><div class="table-container"><table><thead><tr><th>name</th><th>请求类型</th><th>URL</th></tr></thead><tbody><tr><td>page?pageSize&#x3D;20</td><td>GET请求</td><td><span class="exturl"><a class="exturl__link"   href="http://localhost:9988/capi/chat/public/member/page?pageSize=20" >http://localhost:9988/capi/chat/public/member/page?pageSize=20</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td>statistic</td><td>GET请求</td><td><span class="exturl"><a class="exturl__link"   href="http://localhost:9988/capi/chat/public/member/statistic" >http://localhost:9988/capi/chat/public/member/statistic</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td>badges</td><td>GET请求</td><td><span class="exturl"><a class="exturl__link"   href="http://localhost:9988/capi/user/badges" >http://localhost:9988/capi/user/badges</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td>page?pageSize&#x3D;20&amp;roomId&#x3D;1</td><td>GET请求</td><td><span class="exturl"><a class="exturl__link"   href="http://localhost:9988/capi/chat/public/msg/page?pageSize=20&roomId=1" >http://localhost:9988/capi/chat/public/msg/page?pageSize=20&amp;roomId=1</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td>list</td><td>GET请求</td><td><span class="exturl"><a class="exturl__link"   href="http://localhost:9988/capi/user/emoji/list" >http://localhost:9988/capi/user/emoji/list</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr></tbody></table></div><p>然后点击登录按钮</p><p>通过微信扫码登录到聊天室中</p><p>我们来看新增的两个请求</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230731100759932.png"  alt="image-20230731100759932">      </p><div class="table-container"><table><thead><tr><th>name</th><th>请求类型</th><th>URL</th></tr></thead><tbody><tr><td>userInfo</td><td>GET请求</td><td><span class="exturl"><a class="exturl__link"   href="http://localhost:9988/capi/user/userInfo" >http://localhost:9988/capi/user/userInfo</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr><tr><td>list?uid&#x3D;10003</td><td>GET请求</td><td><span class="exturl"><a class="exturl__link"   href="http://localhost:9988/capi/user/emoji/list?uid=10003" >http://localhost:9988/capi/user/emoji/list?uid=10003</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></td></tr></tbody></table></div><p>这个登录是通过VX扫码实现的，我们之后再看这个逻辑实现</p><p>先从用户模块开始看吧</p>        <h2 id="用户模块"   >          <a href="#用户模块" class="heading-link"><i class="fas fa-link"></i></a><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h2>      <p>从Swaager-ui发起测试请求，响应结果是未登录</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230731102513714.png"  alt="image-20230731102513714">      </p><p>可知URI被拦截器拦截</p><p>找到Token拦截器</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//获取用户登录token</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> getToken(request);</span><br><span class="line">    <span class="type">Long</span> <span class="variable">validUid</span> <span class="operator">=</span> loginService.getValidUid(token);</span><br><span class="line">    <span class="keyword">if</span> (Objects.nonNull(validUid)) &#123;<span class="comment">//有登录态</span></span><br><span class="line">        request.setAttribute(ATTRIBUTE_UID, validUid);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isPublicURI</span> <span class="operator">=</span> isPublicURI(request.getRequestURI());</span><br><span class="line">        <span class="keyword">if</span> (!isPublicURI) &#123;<span class="comment">//又没有登录态，又不是公开路径，直接401</span></span><br><span class="line">            HttpErrorEnum.ACCESS_DENIED.sendHttpError(response);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    MDC.put(MDCKey.UID, String.valueOf(validUid));</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>调用了一个isPublicURI方法 来判断是不是公开路径</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isPublicURI</span><span class="params">(String requestURI)</span> &#123;</span><br><span class="line">    String[] split = requestURI.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> split.length &gt; <span class="number">2</span> &amp;&amp; <span class="string">&quot;public&quot;</span>.equals(split[<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将请求通过&#x27;/&#x27;分割,当数组长度大于2并且第四块为public的时候说明是公开路径</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">例如 http://localhost:9988/capi/user/userInfo</span></span><br><span class="line"><span class="comment">通过&#x27;/&#x27;切割 </span></span><br><span class="line"><span class="comment">则</span></span><br><span class="line"><span class="comment">split[0],</span></span><br><span class="line"><span class="comment">split[1],capi</span></span><br><span class="line"><span class="comment">split[2],user</span></span><br><span class="line"><span class="comment">split[3],userInfo</span></span><br><span class="line"><span class="comment">例如 http://localhost:9988/capi/chat/public/member/page</span></span><br><span class="line"><span class="comment">则</span></span><br><span class="line"><span class="comment">split[0],</span></span><br><span class="line"><span class="comment">split[1],capi</span></span><br><span class="line"><span class="comment">split[2],chat</span></span><br><span class="line"><span class="comment">split[3],public</span></span><br><span class="line"><span class="comment">split[4],member</span></span><br><span class="line"><span class="comment">split[5],page</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>决定用通过登录之后的前端来进行测试</p>        <h3 id="获得用户信息"   >          <a href="#获得用户信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#获得用户信息" class="headerlink" title="获得用户信息"></a>获得用户信息</h3>      <div class="table-container"><table><thead><tr><th>访问uri</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;user&#x2F;userInfo</td><td>GET请求</td></tr></tbody></table></div>        <h4 id="Controller层"   >          <a href="#Controller层" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/userInfo&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;用户详情&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;UserInfoResp&gt; <span class="title function_">getUserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//通过获取请求的上下文获取uid调用userService.getUserInfo方法  传入具体的Uid</span></span><br><span class="line">    <span class="keyword">return</span> ApiResult.success(userService.getUserInfo(RequestHolder.get().getUid()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>调用getUserInfo方法</p><p>将返回结果封装成APIResult对象(统一返回类型)</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;基础返回体&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiResult</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;成功标识true or false&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean success;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;错误码&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer errCode;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;错误消息&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String errMsg;</span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;返回对象&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResult&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        ApiResult&lt;T&gt; result = <span class="keyword">new</span> <span class="title class_">ApiResult</span>&lt;T&gt;();</span><br><span class="line">        result.setData(data);</span><br><span class="line">        result.setSuccess(Boolean.TRUE);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传入的参数data是Controller层中的</span></span><br><span class="line"><span class="comment">//userService.getUserInfo(RequestHolder.get().getUid())</span></span><br></pre></td></tr></table></div></figure>        <h4 id="UserService层"   >          <a href="#UserService层" class="heading-link"><i class="fas fa-link"></i></a><a href="#UserService层" class="headerlink" title="UserService层"></a>UserService层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserInfoResp <span class="title function_">getUserInfo</span><span class="params">(Long uid)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> UserInfoResp <span class="title function_">getUserInfo</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">       <span class="comment">//查询缓存中有没有这个Uid,本质上调用map.get() 如果有则返回User 如果没有则返回null</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">userInfo</span> <span class="operator">=</span> userCache.getUserInfo(uid);</span><br><span class="line">       <span class="comment">//查询当前用户(Uid)的物品改名卡使用状态</span></span><br><span class="line">       <span class="type">Integer</span> <span class="variable">countByValidItemId</span> <span class="operator">=</span></span><br><span class="line">           userBackpackDao.getCountByValidItemId(uid, ItemEnum.MODIFY_NAME_CARD.getId());</span><br><span class="line">       <span class="keyword">return</span> UserAdapter.buildUserInfoResp(userInfo, countByValidItemId);</span><br><span class="line">       <span class="comment">//将缓存中的数据和当前用户改名卡状态发送到适配器中buildUserInfoResp中</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="getUserInfo"   >          <a href="#getUserInfo" class="heading-link"><i class="fas fa-link"></i></a><a href="#getUserInfo" class="headerlink" title="getUserInfo"></a>getUserInfo</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> User <span class="title function_">getUserInfo</span><span class="params">(Long uid)</span> &#123;<span class="comment">//todo 后期做二级缓存</span></span><br><span class="line"><span class="comment">//调用getUserInfoBatch获取一个Map&lt;Long,user&gt; 然后调用Map的get方法  如果有数据返回User,没有返回null</span></span><br><span class="line">       <span class="keyword">return</span> getUserInfoBatch(Collections.singleton(uid)).get(uid);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="getInfoBatch"   >          <a href="#getInfoBatch" class="heading-link"><i class="fas fa-link"></i></a><a href="#getInfoBatch" class="headerlink" title="getInfoBatch"></a>getInfoBatch</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;Long, User&gt; <span class="title function_">getUserInfoBatch</span><span class="params">(Set&lt;Long&gt; uids)</span> &#123;</span><br><span class="line">    <span class="comment">//将uids转换成流 然后调用RedisKey的封装类将其拼接成mallchat:userInfo:uid_%d的格式，然后转成List列表</span></span><br><span class="line">        List&lt;String&gt; keys = uids.stream().map(a -&gt; RedisKey.getKey(RedisKey.USER_INFO_STRING, a)).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//调用RedisUtils的mget方法，返回多个User放到List中</span></span><br><span class="line">        List&lt;User&gt; mget = RedisUtils.mget(keys, User.class);</span><br><span class="line">    <span class="comment">//过滤非空的对象，封装成Key为Uid,Value为User的map 这里的map是缓存中的map</span></span><br><span class="line">        Map&lt;Long, User&gt; map = mget.stream().filter(Objects::nonNull).collect(Collectors.toMap(User::getId, Function.identity()));</span><br><span class="line">        <span class="comment">//还需要load更新的uid</span></span><br><span class="line">    <span class="comment">//找到不包含在缓存中的uid放到needLoadUidList中</span></span><br><span class="line">        List&lt;Long&gt; needLoadUidList = uids.stream().filter(a -&gt; !map.containsKey(a)).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">//如果needLoadUidList非空则说明有新数据要写到缓存中</span></span><br><span class="line">        <span class="keyword">if</span> (CollUtil.isNotEmpty(needLoadUidList)) &#123;</span><br><span class="line">            <span class="comment">//调用userDao的查询方法 ，UserDao调用getBaseMapper().selectBatchIds(idList)获取数据库中的user用户列表</span></span><br><span class="line">            List&lt;User&gt; needLoadUserList = userDao.listByIds(needLoadUidList);</span><br><span class="line">            <span class="comment">//统一转换成key为mallchat:userInfo:uid_%d,value为User的格式 放到Map</span></span><br><span class="line">            Map&lt;String, User&gt; redisMap = needLoadUserList.stream().collect(Collectors.toMap(a -&gt; RedisKey.getKey(RedisKey.USER_INFO_STRING, a.getId()), Function.identity()));</span><br><span class="line">            <span class="comment">//调用RedisUtils.mset 统一写进缓存 参数一:要写进去的数据,参数二:过期时间5*60</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//将查询UserInfo的缓存设置为300s 即5分钟</span></span><br><span class="line">            RedisUtils.mset(redisMap, <span class="number">5</span> * <span class="number">60</span>);</span><br><span class="line">            <span class="comment">//将更新完到缓存的数据放回到map中，用于进行返回用户数据</span></span><br><span class="line">            map.putAll(needLoadUserList.stream().collect(Collectors.toMap(User::getId, Function.identity())));</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//返回map</span></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="UserBackPackDao"   >          <a href="#UserBackPackDao" class="heading-link"><i class="fas fa-link"></i></a><a href="#UserBackPackDao" class="headerlink" title="UserBackPackDao"></a>UserBackPackDao</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserBackpackDao</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserBackpackMapper, UserBackpack&gt; &#123;</span><br><span class="line"><span class="comment">//利用了MP</span></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getCountByValidItemId</span><span class="params">(Long uid, Long itemId)</span> &#123;</span><br><span class="line">        <span class="comment">//调用lambdaQuery方法</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//这个Select语句是 SELECT COUNT( 1 ) FROM user_backpack WHERE (uid = ? AND item_id = ? AND status = ?)</span></span><br><span class="line">        <span class="comment">//注入的参数是uid: 10004， itemId: 1 ,status =0</span></span><br><span class="line">        <span class="comment">//翻译过来是查询10004号用户，物品ID为1(改名卡),未被使用(0未使用,1已使用)</span></span><br><span class="line">        <span class="comment">//返回了1  即10004用户状态正如参数所示</span></span><br><span class="line">        <span class="keyword">return</span> lambdaQuery().eq(UserBackpack::getUid, uid)</span><br><span class="line">                .eq(UserBackpack::getItemId, itemId)</span><br><span class="line">                .eq(UserBackpack::getStatus, YesOrNoEnum.NO.getStatus())</span><br><span class="line">                .count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="流程"   >          <a href="#流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程" class="headerlink" title="流程"></a>流程</h4>      <p>①查询用户信息的时候，Controller调用service的查询userInfo的方法，传入请求中的uid 然后包装成APIResult返回前端</p><p>②serviceImpl 查询用户数据 直接查询缓存，如果查询到缓存则直接返回用户数据</p><p>③如果缓存中没有数据则通过userDao查询数据库，数据库返回到的数据先写回到Redis中设置过期时间为300秒</p><p>④将查询结果返回，然后查询用户物品使用信息 调用userBackpackDao的方法</p><p>⑤统一将用户详情信息、用户物品使用信息用userAdapter封装返回</p>        <h3 id="修改用户名"   >          <a href="#修改用户名" class="heading-link"><i class="fas fa-link"></i></a><a href="#修改用户名" class="headerlink" title="修改用户名"></a>修改用户名</h3>      <p>访问uil</p><div class="table-container"><table><thead><tr><th>访问uil</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;user&#x2F;name</td><td>PUT请求</td></tr></tbody></table></div>        <h4 id="Controller层-1"   >          <a href="#Controller层-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-1" class="headerlink" title="Controller层"></a>Controller层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping(&quot;/name&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;修改用户名&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;Void&gt; <span class="title function_">modifyName</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> ModifyNameReq req)</span> &#123;</span><br><span class="line">    userService.modifyName(RequestHolder.get().getUid(), req);</span><br><span class="line">    <span class="keyword">return</span> ApiResult.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>调用userService.modfiyName方法修改用户名</p><p>返回成功结果</p>        <h4 id="UserService层-1"   >          <a href="#UserService层-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#UserService层-1" class="headerlink" title="UserService层"></a>UserService层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">modifyName</span><span class="params">(Long uid, ModifyNameReq req)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modifyName</span><span class="params">(Long uid, ModifyNameReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//从请求中获取新的用户名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">newName</span> <span class="operator">=</span> req.getName();</span><br><span class="line">    <span class="comment">//检查用户名是否合法,如果不合法会抛出异常</span></span><br><span class="line">    AssertUtil.isFalse(sensitiveWordBs.hasSensitiveWord(newName), <span class="string">&quot;名字中包含敏感词，请重新输入&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//检查用户列表中有没有该用户使用这个用户名 如果有则会返回一个User</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">oldUser</span> <span class="operator">=</span> userDao.getByName(newName);</span><br><span class="line">    <span class="comment">//判断用户中有这个名字则抛出异常</span></span><br><span class="line">    AssertUtil.isEmpty(oldUser, <span class="string">&quot;名字已经被抢占了，请换一个哦~~&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断用户有没有改名机会，如果有改名机会则会返回一个UserBackpack 如果没有则会返回null</span></span><br><span class="line">    <span class="type">UserBackpack</span> <span class="variable">firstValidItem</span> <span class="operator">=</span> userBackpackDao.getFirstValidItem(uid, ItemEnum.MODIFY_NAME_CARD.getId());</span><br><span class="line">    <span class="comment">//如果没有改名卡则抛出异常</span></span><br><span class="line">    AssertUtil.isNotEmpty(firstValidItem, <span class="string">&quot;改名次数不够了，等后续活动送改名卡哦&quot;</span>);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//走到这里用户可以改名，然后判断有没有使用改名卡</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">useSuccess</span> <span class="operator">=</span> userBackpackDao.invalidItem(firstValidItem.getId());</span><br><span class="line">    <span class="comment">//采用乐观锁判断改名卡使用是否成功</span></span><br><span class="line">    <span class="keyword">if</span> (useSuccess) &#123;</span><br><span class="line">        <span class="comment">//如果用户改名成功，则进入条件判断中</span></span><br><span class="line">        <span class="comment">//改名</span></span><br><span class="line">        userDao.modifyName(uid, req.getName());</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//调用userInfoChange(uid) 删除缓存中用户信息并更新缓存数据物品使用信息</span></span><br><span class="line">        userCache.userInfoChange(uid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="getFirstValidItem"   >          <a href="#getFirstValidItem" class="heading-link"><i class="fas fa-link"></i></a><a href="#getFirstValidItem" class="headerlink" title="getFirstValidItem"></a>getFirstValidItem</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> UserBackpack <span class="title function_">getFirstValidItem</span><span class="params">(Long uid, Long itemId)</span> &#123;</span><br><span class="line">    <span class="comment">//调用LambdaQueryWrapper可以使用匿名类和lambda表达式进行查询条件的拼接</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//SELECT id,uid,item_id,status,idempotent,create_time,update_time FROM user_backpack </span></span><br><span class="line">    <span class="comment">//WHERE (uid = ? AND item_id = ? AND status = ?) limit 1</span></span><br><span class="line">    <span class="comment">//参数:10004(Long), 1(Long), 0(Integer)  </span></span><br><span class="line"> </span><br><span class="line">        LambdaQueryWrapper&lt;UserBackpack&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;UserBackpack&gt;().lambda()</span><br><span class="line">                .eq(UserBackpack::getUid, uid)   <span class="comment">//限制uid相等</span></span><br><span class="line">                .eq(UserBackpack::getItemId, itemId)  <span class="comment">//限制itemId相等</span></span><br><span class="line">                .eq(UserBackpack::getStatus, YesOrNoEnum.NO.getStatus())  <span class="comment">//限制物品使用情况，0即未使用</span></span><br><span class="line">                .last(<span class="string">&quot;limit 1&quot;</span>);  <span class="comment">//只能返回一个</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回一条查询结果</span></span><br><span class="line">        <span class="keyword">return</span> getOne(wrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="invaldItem"   >          <a href="#invaldItem" class="heading-link"><i class="fas fa-link"></i></a><a href="#invaldItem" class="headerlink" title="invaldItem"></a>invaldItem</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">invalidItem</span><span class="params">(Long id)</span> &#123;</span><br><span class="line"><span class="comment">//使用改名卡,修改用户物品信息表</span></span><br><span class="line">        <span class="type">UserBackpack</span> <span class="variable">update</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserBackpack</span>();</span><br><span class="line">        update.setId(id);</span><br><span class="line">        update.setStatus(YesOrNoEnum.YES.getStatus());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//UPDATE user_backpack SET status=? WHERE id=?</span></span><br><span class="line">    <span class="comment">//参数：1(Integer), 2(Long)</span></span><br><span class="line">    <span class="comment">//更新用户物品使用表，如果更新成功则返回true,如果更新失败则返回false</span></span><br><span class="line">        <span class="keyword">return</span> updateById(update);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="ModifyName"   >          <a href="#ModifyName" class="heading-link"><i class="fas fa-link"></i></a><a href="#ModifyName" class="headerlink" title="ModifyName"></a>ModifyName</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modifyName</span><span class="params">(Long uid, String name)</span> &#123;</span><br><span class="line">    <span class="comment">//更新用户表，用户使用了改名卡修改名字</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">update</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        update.setId(uid);</span><br><span class="line">        update.setName(name);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//更新用户信息</span></span><br><span class="line">    <span class="comment">//UPDATE user SET name=? WHERE id=?</span></span><br><span class="line">    <span class="comment">//参数：鱼鱼(String), 10004(Long)</span></span><br><span class="line">        updateById(update);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="userInfoChange"   >          <a href="#userInfoChange" class="heading-link"><i class="fas fa-link"></i></a><a href="#userInfoChange" class="headerlink" title="userInfoChange"></a>userInfoChange</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userInfoChange</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">    <span class="comment">//删除用户缓存</span></span><br><span class="line">        delUserInfo(uid);</span><br><span class="line">    <span class="comment">//更新缓存中用户物品使用时间</span></span><br><span class="line">        refreshUserModifyTime(uid);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="流程-1"   >          <a href="#流程-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程-1" class="headerlink" title="流程"></a>流程</h4>      <p>①调用Controller来处理改名请求，Controller调用service来进行改名操作</p><p>②判断用户名是否合法、用户名是否被占用、是否有改名次数，如果都有则进入改名阶段,如果有其一没有则抛出异常</p><p>③改名，先修改改名卡使用情况，如果修改成功则代表着改名成功，如果修改失败则说明有线程竞争</p><p>④改名成功，删除缓存中用户信息，缓存添加修改使用物品时间</p>        <h3 id="可选勋章预览"   >          <a href="#可选勋章预览" class="heading-link"><i class="fas fa-link"></i></a><a href="#可选勋章预览" class="headerlink" title="可选勋章预览"></a>可选勋章预览</h3>      <div class="table-container"><table><thead><tr><th>访问Uri</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;user&#x2F;badges</td><td>GET请求</td></tr></tbody></table></div>        <h4 id="Controller层-2"   >          <a href="#Controller层-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-2" class="headerlink" title="Controller层"></a>Controller层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/badges&quot;)</span></span><br><span class="line">   <span class="meta">@ApiOperation(&quot;可选徽章预览&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> ApiResult&lt;List&lt;BadgeResp&gt;&gt; <span class="title function_">badges</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> ApiResult.success(userService.badges(RequestHolder.get().getUid()));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure><p>调用Service层的badges方法 传入参数是请求中的uid</p>        <h4 id="Service层"   >          <a href="#Service层" class="heading-link"><i class="fas fa-link"></i></a><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;BadgeResp&gt; <span class="title function_">badges</span><span class="params">(Long uid)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;BadgeResp&gt; <span class="title function_">badges</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查询Cache中勋章列表   参数Type:2 表示勋章</span></span><br><span class="line">    List&lt;ItemConfig&gt; itemConfigs = itemCache.getByType(ItemTypeEnum.BADGE.getType());</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//查询uid下的可用勋章，然后返回一个List&lt;UserBackpack&gt;</span></span><br><span class="line">    List&lt;UserBackpack&gt; backpacks = userBackpackDao.getByItemIds(uid, itemConfigs.stream().map(ItemConfig::getId).collect(Collectors.toList()));</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//根据uid查询用户信息，获取当前用户佩戴的勋章</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.getById(uid);</span><br><span class="line">    <span class="comment">//将总勋章列表、用户可用勋章、当前用户佩戴勋章传入适配器中的buildBadgeResp中，然后返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> UserAdapter.buildBadgeResp(itemConfigs, backpacks, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="getByType"   >          <a href="#getByType" class="heading-link"><i class="fas fa-link"></i></a><a href="#getByType" class="headerlink" title="getByType"></a>getByType</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames = &quot;item&quot;, key = &quot;&#x27;itemsByType:&#x27;+#type&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ItemConfig&gt; <span class="title function_">getByType</span><span class="params">(Integer type)</span> &#123;</span><br><span class="line">        <span class="comment">//传入参数：2 表示勋章</span></span><br><span class="line">        <span class="comment">//调用itemConfigDao的方法 返回数据 写入缓存中</span></span><br><span class="line">        <span class="keyword">return</span> itemConfigDao.getByType(type);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;ItemConfig&gt; <span class="title function_">getByType</span><span class="params">(Integer type)</span> &#123;</span><br><span class="line">    <span class="comment">//返回list,list中装着ambdaQuery查询结果</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">//SELECT id,type,img,`describe`,create_time,update_time FROM item_config WHERE (type = ?) </span></span><br><span class="line">    <span class="comment">//限制Type==type,然后转化成list</span></span><br><span class="line">    <span class="keyword">return</span> lambdaQuery().eq(ItemConfig::getType, type).list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="getByItemId"   >          <a href="#getByItemId" class="heading-link"><i class="fas fa-link"></i></a><a href="#getByItemId" class="headerlink" title="getByItemId"></a>getByItemId</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;UserBackpack&gt; <span class="title function_">getByItemIds</span><span class="params">(Long uid, List&lt;Long&gt; itemIds)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Preparing: SELECT id,uid,item_id,status,idempotent,create_time,update_time </span></span><br><span class="line">    <span class="comment">//FROM user_backpack WHERE (uid = ? AND item_id IN (?,?,?,?,?) AND status = ?)</span></span><br><span class="line"><span class="comment">//==&gt; Parameters: 10004(Long), 2(Long), 3(Long), 4(Long), 5(Long), 6(Long), 0(Integer)</span></span><br><span class="line">    <span class="comment">//返回LambdaQuery结果</span></span><br><span class="line">    <span class="comment">//查询条件限制uid相等</span></span><br><span class="line">    <span class="keyword">return</span> lambdaQuery().eq(UserBackpack::getUid, uid)</span><br><span class="line">        <span class="comment">//在总勋章列表中的itemIds</span></span><br><span class="line">                .in(UserBackpack::getItemId, itemIds)</span><br><span class="line">            <span class="comment">//是否使用勋章</span></span><br><span class="line">                .eq(UserBackpack::getStatus, YesOrNoEnum.NO.getStatus())</span><br><span class="line">                .list();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个方法就是判断用户是否有拥有的勋章</span></span><br></pre></td></tr></table></div></figure>        <h4 id="userDao-getById"   >          <a href="#userDao-getById" class="heading-link"><i class="fas fa-link"></i></a><a href="#userDao-getById" class="headerlink" title="userDao.getById"></a>userDao.getById</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> T <span class="title function_">getById</span><span class="params">(Serializable id)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//SELECT id,name,avatar,sex,open_id,last_opt_time,ip_info,item_id,status,create_time,update_time //FROM user WHERE id=?</span></span><br><span class="line">    <span class="comment">//调用mp的方法，查询uid为id的用户信息，获取当前用户佩戴的勋章</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getBaseMapper().selectById(id);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="buildBadgeResp"   >          <a href="#buildBadgeResp" class="heading-link"><i class="fas fa-link"></i></a><a href="#buildBadgeResp" class="headerlink" title="buildBadgeResp"></a>buildBadgeResp</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;BadgeResp&gt; <span class="title function_">buildBadgeResp</span><span class="params">(List&lt;ItemConfig&gt; itemConfigs, List&lt;UserBackpack&gt; backpacks, User user)</span> &#123;</span><br><span class="line">    <span class="comment">//判断user是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (ObjectUtil.isNull(user)) &#123;</span><br><span class="line">            <span class="comment">// 这里 user 入参可能为空，防止 NPE 问题</span></span><br><span class="line">            <span class="comment">//如果为空则返回空集合</span></span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将用户的可用勋章方法哦obtianItemSet中</span></span><br><span class="line">        Set&lt;Long&gt; obtainItemSet = backpacks.stream().map(UserBackpack::getItemId).collect(Collectors.toSet());</span><br><span class="line">    <span class="comment">//利用总勋章列表放到流中</span></span><br><span class="line">        <span class="keyword">return</span> itemConfigs.stream().map(a -&gt; &#123;</span><br><span class="line">            <span class="comment">//new一个勋章返回类型</span></span><br><span class="line">            <span class="type">BadgeResp</span> <span class="variable">resp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadgeResp</span>();</span><br><span class="line">            <span class="comment">//将a的属性copy到resp中</span></span><br><span class="line">            BeanUtil.copyProperties(a, resp);</span><br><span class="line">            <span class="comment">//设置勋章ID，为了下一步与用户是否佩戴进行一个比较</span></span><br><span class="line">            resp.setObtain(obtainItemSet.contains(a.getId()) ? YesOrNoEnum.YES.getStatus() : YesOrNoEnum.NO.getStatus());</span><br><span class="line">            <span class="comment">//用户列表中是否有使用这个勋章，如果有则是佩戴勋章</span></span><br><span class="line">            resp.setWearing(ObjectUtil.equal(a.getId(), user.getItemId()) ? YesOrNoEnum.YES.getStatus() : YesOrNoEnum.NO.getStatus());</span><br><span class="line">            <span class="keyword">return</span> resp;</span><br><span class="line">            <span class="comment">//排序</span></span><br><span class="line">        &#125;).sorted(Comparator.comparing(BadgeResp::getWearing, Comparator.reverseOrder())</span><br><span class="line">                .thenComparing(BadgeResp::getObtain, Comparator.reverseOrder()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="流程-2"   >          <a href="#流程-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程-2" class="headerlink" title="流程"></a>流程</h4>      <p>①Controller调用Service中的方法，封装成APIResult返回</p><p>②Service中先获取总的勋章列表并写入缓存中，其次再获取用户可用的勋章列表，最后获取用户信息来判断佩戴的勋章</p><p>③将总勋章列表、可用勋章列表、用户佩戴勋章传入适配器，适配器进行一个buildBadgeResp方法返回前端</p>        <h3 id="佩戴勋章"   >          <a href="#佩戴勋章" class="heading-link"><i class="fas fa-link"></i></a><a href="#佩戴勋章" class="headerlink" title="佩戴勋章"></a>佩戴勋章</h3>      <div class="table-container"><table><thead><tr><th>访问URI</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;user&#x2F;badge</td><td>PUT请求</td></tr></tbody></table></div>        <h4 id="Controller层-3"   >          <a href="#Controller层-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-3" class="headerlink" title="Controller层"></a>Controller层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping(&quot;/badge&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;佩戴徽章&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;Void&gt; <span class="title function_">wearingBadge</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> WearingBadgeReq req)</span> &#123;</span><br><span class="line">    userService.wearingBadge(RequestHolder.get().getUid(), req);</span><br><span class="line">    <span class="keyword">return</span> ApiResult.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>从请求中获取uid和整个请求都传入给userService.wearingBadge</p>        <h4 id="Service层-1"   >          <a href="#Service层-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Service层-1" class="headerlink" title="Service层"></a>Service层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">wearingBadge</span><span class="params">(Long uid, WearingBadgeReq req)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wearingBadge</span><span class="params">(Long uid, WearingBadgeReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//判断用户是否有这个勋章</span></span><br><span class="line">    <span class="type">UserBackpack</span> <span class="variable">firstValidItem</span> <span class="operator">=</span> userBackpackDao.getFirstValidItem(uid, req.getBadgeId());</span><br><span class="line">    <span class="comment">//如果没有勋章则会返回为null，为null则抛出异常</span></span><br><span class="line">    AssertUtil.isNotEmpty(firstValidItem, <span class="string">&quot;您没有这个徽章哦，快去达成条件获取吧&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断这个是不是勋章</span></span><br><span class="line">    <span class="type">ItemConfig</span> <span class="variable">itemConfig</span> <span class="operator">=</span> itemConfigDao.getById(firstValidItem.getItemId());</span><br><span class="line">    <span class="comment">//如果返回字段中类型不是勋章则会抛出异常</span></span><br><span class="line">    AssertUtil.equal(itemConfig.getType(), ItemTypeEnum.BADGE.getType(), <span class="string">&quot;该徽章不可佩戴&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//佩戴勋章 更新用户表</span></span><br><span class="line">    userDao.wearingBadge(uid, req.getBadgeId());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    userCache.userInfoChange(uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>先调用getFirstValidItem方法 这里和使用改名卡那个方法是同一个，意义是确认是否拥有这个勋章如果有则会返回一条数据，如果没有则返回null</p>        <h4 id="getFirstValidItem-1"   >          <a href="#getFirstValidItem-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#getFirstValidItem-1" class="headerlink" title="getFirstValidItem"></a>getFirstValidItem</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> UserBackpack <span class="title function_">getFirstValidItem</span><span class="params">(Long uid, Long itemId)</span> &#123;</span><br><span class="line">    <span class="comment">//调用LambdaQueryWrapper可以使用匿名类和lambda表达式进行查询条件的拼接</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//SELECT id,uid,item_id,status,idempotent,create_time,update_time FROM user_backpack </span></span><br><span class="line">    <span class="comment">//WHERE (uid = ? AND item_id = ? AND status = ?) limit 1</span></span><br><span class="line">    <span class="comment">//参数:10004(Long), 2(Long), 0(Integer)  -0表示没有使用过 -1表示使用过  </span></span><br><span class="line"> </span><br><span class="line">        LambdaQueryWrapper&lt;UserBackpack&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;UserBackpack&gt;().lambda()</span><br><span class="line">                .eq(UserBackpack::getUid, uid)   <span class="comment">//限制uid相等</span></span><br><span class="line">                .eq(UserBackpack::getItemId, itemId)  <span class="comment">//限制itemId相等</span></span><br><span class="line">                .eq(UserBackpack::getStatus, YesOrNoEnum.NO.getStatus())  <span class="comment">//限制物品使用情况，0即未使用</span></span><br><span class="line">                .last(<span class="string">&quot;limit 1&quot;</span>);  <span class="comment">//只能返回一个</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回一条查询结果</span></span><br><span class="line">        <span class="keyword">return</span> getOne(wrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="itemConfigDao-getById"   >          <a href="#itemConfigDao-getById" class="heading-link"><i class="fas fa-link"></i></a><a href="#itemConfigDao-getById" class="headerlink" title="itemConfigDao.getById"></a>itemConfigDao.getById</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SELECT id,type,img,`describe`,create_time,update_time FROM item_config WHERE id=?</span></span><br><span class="line"><span class="comment">//Parameters: 2(Long)</span></span><br></pre></td></tr></table></div></figure><p>判断这个物品是不是勋章 ，查询结果会包含一个type字段，通过字段来判断是不是勋章</p>        <h4 id="wearingBadge"   >          <a href="#wearingBadge" class="heading-link"><i class="fas fa-link"></i></a><a href="#wearingBadge" class="headerlink" title="wearingBadge"></a>wearingBadge</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wearingBadge</span><span class="params">(Long uid, Long badgeId)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">update</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="comment">//设置Uid</span></span><br><span class="line">    update.setId(uid);</span><br><span class="line">    <span class="comment">//设置使用物品类型  即勋章类型</span></span><br><span class="line">    update.setItemId(badgeId);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//==&gt;  Preparing: UPDATE user SET item_id=? WHERE id=?</span></span><br><span class="line"><span class="comment">//==&gt; Parameters: 2(Long), 10004(Long)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//更新user表</span></span><br><span class="line">    updateById(update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="userInfoChange-1"   >          <a href="#userInfoChange-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#userInfoChange-1" class="headerlink" title="userInfoChange"></a>userInfoChange</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userInfoChange</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">    <span class="comment">//删除用户缓存</span></span><br><span class="line">        delUserInfo(uid);</span><br><span class="line">    <span class="comment">//更新缓存中用户物品使用时间</span></span><br><span class="line">        refreshUserModifyTime(uid);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="流程-3"   >          <a href="#流程-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程-3" class="headerlink" title="流程"></a>流程</h4>      <p>①先判断用户是否有这个物品。如果没有会抛出异常</p><p>②判断在合格物品是不是勋章。如果不是会抛出异常</p><p>③更新用户表信息，将Item_id设置为这个物品</p><p>④更新缓存，删除本地缓存删除Redis缓存</p>        <h3 id="黑名单"   >          <a href="#黑名单" class="heading-link"><i class="fas fa-link"></i></a><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h3>      <div class="table-container"><table><thead><tr><th>访问URI</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;user&#x2F;black</td><td>PUT请求</td></tr></tbody></table></div>        <h4 id="Controller层-4"   >          <a href="#Controller层-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-4" class="headerlink" title="Controller层"></a>Controller层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping(&quot;/black&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;拉黑用户&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;Void&gt; <span class="title function_">black</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> BlackReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//从请求上下文中获取拉黑用户uid</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">uid</span> <span class="operator">=</span> RequestHolder.get().getUid();</span><br><span class="line">    <span class="comment">//判断拉黑目标用户是否是管理员，如果是管理员返回true</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">hasPower</span> <span class="operator">=</span> iRoleService.hasPower(uid, RoleEnum.ADMIN);</span><br><span class="line">    <span class="comment">//如果是管理员则抛出异常没有权限拉黑</span></span><br><span class="line">    AssertUtil.isTrue(hasPower, <span class="string">&quot;没有权限&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//没有异常则可以运行到这里 说明有权限 调用Service方法来拉黑用户</span></span><br><span class="line">    userService.black(req);</span><br><span class="line">    <span class="keyword">return</span> ApiResult.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="Service层-2"   >          <a href="#Service层-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#Service层-2" class="headerlink" title="Service层"></a>Service层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">black</span><span class="params">(BlackReq req)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">black</span><span class="params">(BlackReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//从请求上下文中获取要拉黑用户Uid</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">uid</span> <span class="operator">=</span> req.getUid();</span><br><span class="line">    <span class="comment">//创建一个黑名单用户</span></span><br><span class="line">    <span class="type">Black</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Black</span>();</span><br><span class="line">    <span class="comment">//设置拉黑用户UID、拉黑类型为UID  还有一种拉黑是拉黑IP地址</span></span><br><span class="line">    user.setTarget(uid.toString());</span><br><span class="line">    user.setType(BlackTypeEnum.UID.getType());</span><br><span class="line">    <span class="comment">//调用blackDao中的save方法 插入一条用户数据到Black表中</span></span><br><span class="line">    </span><br><span class="line">    blackDao.save(user);</span><br><span class="line">    <span class="comment">//查询用户表中的UID用户 </span></span><br><span class="line">    <span class="type">User</span> <span class="variable">byId</span> <span class="operator">=</span> userDao.getById(uid);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//拉黑IP地址 一个是创建用户IP地址 一个是最后更新用户的IP地址 两个IP都拉黑</span></span><br><span class="line">    blackIp(byId.getIpInfo().getCreateIp());</span><br><span class="line">    blackIp(byId.getIpInfo().getUpdateIp());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//发布一条事件 一个用户拉黑事件</span></span><br><span class="line">    applicationEventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">UserBlackEvent</span>(<span class="built_in">this</span>, byId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="blackIp"   >          <a href="#blackIp" class="heading-link"><i class="fas fa-link"></i></a><a href="#blackIp" class="headerlink" title="blackIp"></a>blackIp</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">blackIp</span><span class="params">(String ip)</span> &#123;</span><br><span class="line">    <span class="comment">//判断IP是否为空，如果为空则直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isBlank(ip)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个拉黑用户</span></span><br><span class="line">        <span class="type">Black</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Black</span>();</span><br><span class="line">        <span class="comment">//设置IP地址</span></span><br><span class="line">        user.setTarget(ip);</span><br><span class="line">        user.setType(BlackTypeEnum.IP.getType());</span><br><span class="line">        <span class="comment">//更新黑名单表</span></span><br><span class="line">        blackDao.save(user);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;duplicate black ip:&#123;&#125;&quot;</span>, ip);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="hasPower"   >          <a href="#hasPower" class="heading-link"><i class="fas fa-link"></i></a><a href="#hasPower" class="headerlink" title="hasPower"></a>hasPower</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPower</span><span class="params">(Long uid, RoleEnum roleEnum)</span> &#123;<span class="comment">//超级管理员无敌的好吧，后期做成权限=》资源模式</span></span><br><span class="line">    Set&lt;Long&gt; roleSet = userCache.getRoleSet(uid);</span><br><span class="line">    <span class="keyword">return</span> isAdmin(roleSet) || roleSet.contains(roleEnum.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="getRoleSet"   >          <a href="#getRoleSet" class="heading-link"><i class="fas fa-link"></i></a><a href="#getRoleSet" class="headerlink" title="getRoleSet"></a>getRoleSet</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames = &quot;user&quot;, key = &quot;&#x27;roles&#x27;+#uid&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;Long&gt; <span class="title function_">getRoleSet</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">    <span class="comment">//查询数据库判断是否有管理员身份</span></span><br><span class="line">    List&lt;UserRole&gt; userRoles = userRoleDao.listByUid(uid);</span><br><span class="line">    <span class="comment">//将用户身份返回一个set</span></span><br><span class="line">    <span class="keyword">return</span> userRoles.stream()</span><br><span class="line">            .map(UserRole::getRoleId)</span><br><span class="line">            .collect(Collectors.toSet());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="listByUid"   >          <a href="#listByUid" class="heading-link"><i class="fas fa-link"></i></a><a href="#listByUid" class="headerlink" title="listByUid"></a>listByUid</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;UserRole&gt; <span class="title function_">listByUid</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">    <span class="comment">//查询user_role表 通过uid来查询身份 返回集合</span></span><br><span class="line">    <span class="keyword">return</span> lambdaQuery()</span><br><span class="line">            .eq(UserRole::getUid, Objects.requireNonNull(uid))</span><br><span class="line">            .list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="流程-4"   >          <a href="#流程-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程-4" class="headerlink" title="流程"></a>流程</h4>      <p>①判断目标拉黑用户是否是管理员，如果是管理员则没有权限拉黑抛出异常结束方法，如果不是管理员则继续拉黑操作</p><p>②插入一条拉黑用户信息到拉黑数据表中 先是拉黑UID</p><p>③再判断创造用户时IP是否存在，如果存在则插入一条创建IP地址的拉黑用户信息</p><p>④再判断更新用户时IP是否存在，如果存在则插入一条更新IP地址的拉黑用户信息</p><p>⑤发布一条事件，用户拉黑事件</p>        <h3 id="徽章聚合信息"   >          <a href="#徽章聚合信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#徽章聚合信息" class="headerlink" title="徽章聚合信息"></a>徽章聚合信息</h3>      <div class="table-container"><table><thead><tr><th>访问URI</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;user&#x2F;public&#x2F;badges&#x2F;batch</td><td>POST请求</td></tr></tbody></table></div>        <h4 id="Controller层-5"   >          <a href="#Controller层-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-5" class="headerlink" title="Controller层"></a>Controller层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/public/badges/batch&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;徽章聚合信息-返回的代表需要刷新的&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;List&lt;ItemInfoDTO&gt;&gt; <span class="title function_">getItemInfo</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> ItemInfoReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//调用service层中的getItemInfo方法</span></span><br><span class="line">    <span class="keyword">return</span> ApiResult.success(userService.getItemInfo(req));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="Service层-3"   >          <a href="#Service层-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#Service层-3" class="headerlink" title="Service层"></a>Service层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ItemInfoDTO&gt; <span class="title function_">getItemInfo</span><span class="params">(ItemInfoReq req)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;ItemInfoDTO&gt; <span class="title function_">getItemInfo</span><span class="params">(ItemInfoReq req)</span> &#123;<span class="comment">//简单做，更新时间可判断被修改</span></span><br><span class="line">    <span class="comment">//req.getReqList中包含itemId(物品id)，ItemModifyTime(修改时间)</span></span><br><span class="line">    <span class="keyword">return</span> req.getReqList().stream().map(a -&gt; &#123;</span><br><span class="line">        <span class="comment">//查询itemCache调用getById方法获取ItemConfig</span></span><br><span class="line">        <span class="type">ItemConfig</span> <span class="variable">itemConfig</span> <span class="operator">=</span> itemCache.getById(a.getItemId());</span><br><span class="line">        <span class="comment">//如果修改时间非空 并且最后修改时间要在物品更新时间之后 也即合法</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(a.getLastModifyTime()) &amp;&amp; a.getLastModifyTime() &gt;= itemConfig.getUpdateTime().getTime()) &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="keyword">return</span> ItemInfoDTO.skip(a.getItemId());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//修改时间为空或者修改时间不合法</span></span><br><span class="line">        <span class="type">ItemInfoDTO</span> <span class="variable">dto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ItemInfoDTO</span>();</span><br><span class="line">        <span class="comment">//设置ItemId，Img,Describe</span></span><br><span class="line">        dto.setItemId(itemConfig.getId());</span><br><span class="line">        dto.setImg(itemConfig.getImg());</span><br><span class="line">        dto.setDescribe(itemConfig.getDescribe());</span><br><span class="line">        <span class="comment">//封装成dto</span></span><br><span class="line">        <span class="keyword">return</span> dto;</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="getById"   >          <a href="#getById" class="heading-link"><i class="fas fa-link"></i></a><a href="#getById" class="headerlink" title="getById"></a>getById</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames = &quot;item&quot;, key = &quot;&#x27;item:&#x27;+#itemId&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ItemConfig <span class="title function_">getById</span><span class="params">(Long itemId)</span> &#123;</span><br><span class="line">    <span class="comment">//SELECT id,type,img,`describe`,create_time,update_time FROM item_config WHERE id=?</span></span><br><span class="line">    <span class="keyword">return</span> itemConfigDao.getById(itemId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="skip"   >          <a href="#skip" class="heading-link"><i class="fas fa-link"></i></a><a href="#skip" class="headerlink" title="skip"></a>skip</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ItemInfoDTO <span class="title function_">skip</span><span class="params">(Long itemId)</span> &#123;</span><br><span class="line">        <span class="type">ItemInfoDTO</span> <span class="variable">dto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ItemInfoDTO</span>();</span><br><span class="line">    <span class="comment">//设置ItemID，类型为不需要刷新类型</span></span><br><span class="line">        dto.setItemId(itemId);</span><br><span class="line">        dto.setNeedRefresh(Boolean.FALSE);</span><br><span class="line">        <span class="keyword">return</span> dto;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="用户聚合信息"   >          <a href="#用户聚合信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#用户聚合信息" class="headerlink" title="用户聚合信息"></a>用户聚合信息</h3>      <div class="table-container"><table><thead><tr><th>访问URI</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;public&#x2F;summary&#x2F;userInfo&#x2F;batc</td><td>POST请求</td></tr></tbody></table></div>        <h4 id="Controller层-6"   >          <a href="#Controller层-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-6" class="headerlink" title="Controller层"></a>Controller层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/public/summary/userInfo/batch&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;用户聚合信息-返回的代表需要刷新的&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;List&lt;SummeryInfoDTO&gt;&gt; <span class="title function_">getSummeryUserInfo</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> SummeryInfoReq req)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ApiResult.success(userService.getSummeryUserInfo(req));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="Service层-4"   >          <a href="#Service层-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#Service层-4" class="headerlink" title="Service层"></a>Service层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;SummeryInfoDTO&gt; <span class="title function_">getSummeryUserInfo</span><span class="params">(SummeryInfoReq req)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;SummeryInfoDTO&gt; <span class="title function_">getSummeryUserInfo</span><span class="params">(SummeryInfoReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//获取用户uidList</span></span><br><span class="line">    List&lt;Long&gt; uidList = getNeedSyncUidList(req.getReqList());</span><br><span class="line">    <span class="comment">//加载用户信息</span></span><br><span class="line">    Map&lt;Long, SummeryInfoDTO&gt; batch = userSummaryCache.getBatch(uidList);</span><br><span class="line">    <span class="comment">//返回数据</span></span><br><span class="line">    <span class="keyword">return</span> req.getReqList()</span><br><span class="line">            .stream()</span><br><span class="line">            .map(a -&gt; batch.containsKey(a.getUid()) ? batch.get(a.getUid():SummeryInfoDTO.skip(a.getUid()))</span><br><span class="line">                 <span class="comment">//判断cache中是否有uid如果有则直接调用cache的，如果没有则封装成dto返回</span></span><br><span class="line">            .filter(Objects::nonNull)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="skip-1"   >          <a href="#skip-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#skip-1" class="headerlink" title="skip"></a>skip</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SummeryInfoDTO <span class="title function_">skip</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">    <span class="type">SummeryInfoDTO</span> <span class="variable">dto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SummeryInfoDTO</span>();</span><br><span class="line">    dto.setUid(uid);</span><br><span class="line">    dto.setNeedRefresh(Boolean.FALSE);</span><br><span class="line">    <span class="keyword">return</span> dto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="总览"   >          <a href="#总览" class="heading-link"><i class="fas fa-link"></i></a><a href="#总览" class="headerlink" title="总览"></a>总览</h3>              <h4 id="UserController"   >          <a href="#UserController" class="heading-link"><i class="fas fa-link"></i></a><a href="#UserController" class="headerlink" title="UserController"></a>UserController</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/capi/user&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户管理相关接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IRoleService iRoleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/userInfo&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;用户详情&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;UserInfoResp&gt; <span class="title function_">getUserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResult.success(userService.getUserInfo(RequestHolder.get().getUid()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/public/summary/userInfo/batch&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;用户聚合信息-返回的代表需要刷新的&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;List&lt;SummeryInfoDTO&gt;&gt; <span class="title function_">getSummeryUserInfo</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> SummeryInfoReq req)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResult.success(userService.getSummeryUserInfo(req));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/public/badges/batch&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;徽章聚合信息-返回的代表需要刷新的&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;List&lt;ItemInfoDTO&gt;&gt; <span class="title function_">getItemInfo</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> ItemInfoReq req)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResult.success(userService.getItemInfo(req));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/name&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;修改用户名&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;Void&gt; <span class="title function_">modifyName</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> ModifyNameReq req)</span> &#123;</span><br><span class="line">        userService.modifyName(RequestHolder.get().getUid(), req);</span><br><span class="line">        <span class="keyword">return</span> ApiResult.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/badges&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;可选徽章预览&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;List&lt;BadgeResp&gt;&gt; <span class="title function_">badges</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResult.success(userService.badges(RequestHolder.get().getUid()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/badge&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;佩戴徽章&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;Void&gt; <span class="title function_">wearingBadge</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> WearingBadgeReq req)</span> &#123;</span><br><span class="line">        userService.wearingBadge(RequestHolder.get().getUid(), req);</span><br><span class="line">        <span class="keyword">return</span> ApiResult.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/black&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;拉黑用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;Void&gt; <span class="title function_">black</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> BlackReq req)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">uid</span> <span class="operator">=</span> RequestHolder.get().getUid();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasPower</span> <span class="operator">=</span> iRoleService.hasPower(uid, RoleEnum.ADMIN);</span><br><span class="line">        AssertUtil.isTrue(hasPower, <span class="string">&quot;没有权限&quot;</span>);</span><br><span class="line">        userService.black(req);</span><br><span class="line">        <span class="keyword">return</span> ApiResult.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="UserService"   >          <a href="#UserService" class="heading-link"><i class="fas fa-link"></i></a><a href="#UserService" class="headerlink" title="UserService"></a>UserService</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取前端展示信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UserInfoResp <span class="title function_">getUserInfo</span><span class="params">(Long uid)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">modifyName</span><span class="params">(Long uid, ModifyNameReq req)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户徽章列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;BadgeResp&gt; <span class="title function_">badges</span><span class="params">(Long uid)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 佩戴徽章</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">wearingBadge</span><span class="params">(Long uid, WearingBadgeReq req)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户注册</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> openId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String openId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">black</span><span class="params">(BlackReq req)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户汇总信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;SummeryInfoDTO&gt; <span class="title function_">getSummeryUserInfo</span><span class="params">(SummeryInfoReq req)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;ItemInfoDTO&gt; <span class="title function_">getItemInfo</span><span class="params">(ItemInfoReq req)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="UserServiceImpl"   >          <a href="#UserServiceImpl" class="heading-link"><i class="fas fa-link"></i></a><a href="#UserServiceImpl" class="headerlink" title="UserServiceImpl"></a>UserServiceImpl</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserCache userCache;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserBackpackDao userBackpackDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemConfigDao itemConfigDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ItemCache itemCache;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BlackDao blackDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserSummaryCache userSummaryCache;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SensitiveWordBs sensitiveWordBs;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserInfoResp <span class="title function_">getUserInfo</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">userInfo</span> <span class="operator">=</span> userCache.getUserInfo(uid);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">countByValidItemId</span> <span class="operator">=</span> userBackpackDao.getCountByValidItemId(uid, ItemEnum.MODIFY_NAME_CARD.getId());</span><br><span class="line">        <span class="keyword">return</span> UserAdapter.buildUserInfoResp(userInfo, countByValidItemId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modifyName</span><span class="params">(Long uid, ModifyNameReq req)</span> &#123;</span><br><span class="line">        <span class="comment">//判断名字是不是重复</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newName</span> <span class="operator">=</span> req.getName();</span><br><span class="line">        AssertUtil.isFalse(sensitiveWordBs.hasSensitiveWord(newName), <span class="string">&quot;名字中包含敏感词，请重新输入&quot;</span>); <span class="comment">// 判断名字中有没有敏感词</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">oldUser</span> <span class="operator">=</span> userDao.getByName(newName);</span><br><span class="line">        AssertUtil.isEmpty(oldUser, <span class="string">&quot;名字已经被抢占了，请换一个哦~~&quot;</span>);</span><br><span class="line">        <span class="comment">//判断改名卡够不够</span></span><br><span class="line">        <span class="type">UserBackpack</span> <span class="variable">firstValidItem</span> <span class="operator">=</span> userBackpackDao.getFirstValidItem(uid, ItemEnum.MODIFY_NAME_CARD.getId());</span><br><span class="line">        AssertUtil.isNotEmpty(firstValidItem, <span class="string">&quot;改名次数不够了，等后续活动送改名卡哦&quot;</span>);</span><br><span class="line">        <span class="comment">//使用改名卡</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">useSuccess</span> <span class="operator">=</span> userBackpackDao.invalidItem(firstValidItem.getId());</span><br><span class="line">        <span class="keyword">if</span> (useSuccess) &#123;<span class="comment">//用乐观锁，就不用分布式锁了</span></span><br><span class="line">            <span class="comment">//改名</span></span><br><span class="line">            userDao.modifyName(uid, req.getName());</span><br><span class="line">            <span class="comment">//删除缓存</span></span><br><span class="line">            userCache.userInfoChange(uid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;BadgeResp&gt; <span class="title function_">badges</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">        <span class="comment">//查询所有徽章</span></span><br><span class="line">        List&lt;ItemConfig&gt; itemConfigs = itemCache.getByType(ItemTypeEnum.BADGE.getType());</span><br><span class="line">        <span class="comment">//查询用户拥有的徽章</span></span><br><span class="line">        List&lt;UserBackpack&gt; backpacks = userBackpackDao.getByItemIds(uid, itemConfigs.stream().map(ItemConfig::getId).collect(Collectors.toList()));</span><br><span class="line">        <span class="comment">//查询用户当前佩戴的标签</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.getById(uid);</span><br><span class="line">        <span class="keyword">return</span> UserAdapter.buildBadgeResp(itemConfigs, backpacks, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wearingBadge</span><span class="params">(Long uid, WearingBadgeReq req)</span> &#123;</span><br><span class="line">        <span class="comment">//确保有这个徽章</span></span><br><span class="line">        <span class="type">UserBackpack</span> <span class="variable">firstValidItem</span> <span class="operator">=</span> userBackpackDao.getFirstValidItem(uid, req.getBadgeId());</span><br><span class="line">        AssertUtil.isNotEmpty(firstValidItem, <span class="string">&quot;您没有这个徽章哦，快去达成条件获取吧&quot;</span>);</span><br><span class="line">        <span class="comment">//确保物品类型是徽章</span></span><br><span class="line">        <span class="type">ItemConfig</span> <span class="variable">itemConfig</span> <span class="operator">=</span> itemConfigDao.getById(firstValidItem.getItemId());</span><br><span class="line">        AssertUtil.equal(itemConfig.getType(), ItemTypeEnum.BADGE.getType(), <span class="string">&quot;该徽章不可佩戴&quot;</span>);</span><br><span class="line">        <span class="comment">//佩戴徽章</span></span><br><span class="line">        userDao.wearingBadge(uid, req.getBadgeId());</span><br><span class="line">        <span class="comment">//删除用户缓存</span></span><br><span class="line">        userCache.userInfoChange(uid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String openId)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">insert</span> <span class="operator">=</span> User.builder().openId(openId).build();</span><br><span class="line">        userDao.save(insert);</span><br><span class="line">        applicationEventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">UserRegisterEvent</span>(<span class="built_in">this</span>, insert));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">black</span><span class="params">(BlackReq req)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">uid</span> <span class="operator">=</span> req.getUid();</span><br><span class="line">        <span class="type">Black</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Black</span>();</span><br><span class="line">        user.setTarget(uid.toString());</span><br><span class="line">        user.setType(BlackTypeEnum.UID.getType());</span><br><span class="line">        blackDao.save(user);</span><br><span class="line">        <span class="type">User</span> <span class="variable">byId</span> <span class="operator">=</span> userDao.getById(uid);</span><br><span class="line">        blackIp(byId.getIpInfo().getCreateIp());</span><br><span class="line">        blackIp(byId.getIpInfo().getUpdateIp());</span><br><span class="line">        applicationEventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">UserBlackEvent</span>(<span class="built_in">this</span>, byId));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;SummeryInfoDTO&gt; <span class="title function_">getSummeryUserInfo</span><span class="params">(SummeryInfoReq req)</span> &#123;</span><br><span class="line">        <span class="comment">//需要前端同步的uid</span></span><br><span class="line">        List&lt;Long&gt; uidList = getNeedSyncUidList(req.getReqList());</span><br><span class="line">        <span class="comment">//加载用户信息</span></span><br><span class="line">        Map&lt;Long, SummeryInfoDTO&gt; batch = userSummaryCache.getBatch(uidList);</span><br><span class="line">        <span class="keyword">return</span> req.getReqList()</span><br><span class="line">                .stream()</span><br><span class="line">                .map(a -&gt; batch.containsKey(a.getUid()) ? batch.get(a.getUid()) : SummeryInfoDTO.skip(a.getUid()))</span><br><span class="line">                .filter(Objects::nonNull)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ItemInfoDTO&gt; <span class="title function_">getItemInfo</span><span class="params">(ItemInfoReq req)</span> &#123;<span class="comment">//简单做，更新时间可判断被修改</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> req.getReqList().stream().map(a -&gt; &#123;</span><br><span class="line">            <span class="type">ItemConfig</span> <span class="variable">itemConfig</span> <span class="operator">=</span> itemCache.getById(a.getItemId());</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(a.getLastModifyTime()) &amp;&amp; a.getLastModifyTime() &gt;= itemConfig.getUpdateTime().getTime()) &#123;</span><br><span class="line">                <span class="keyword">return</span> ItemInfoDTO.skip(a.getItemId());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">ItemInfoDTO</span> <span class="variable">dto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ItemInfoDTO</span>();</span><br><span class="line">            dto.setItemId(itemConfig.getId());</span><br><span class="line">            dto.setImg(itemConfig.getImg());</span><br><span class="line">            dto.setDescribe(itemConfig.getDescribe());</span><br><span class="line">            <span class="keyword">return</span> dto;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; <span class="title function_">getNeedSyncUidList</span><span class="params">(List&lt;SummeryInfoReq.infoReq&gt; reqList)</span> &#123;</span><br><span class="line">        List&lt;Long&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Long&gt; userModifyTime = userCache.getUserModifyTime(reqList.stream().map(SummeryInfoReq.infoReq::getUid).collect(Collectors.toList()));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; reqList.size(); i++) &#123;</span><br><span class="line">            SummeryInfoReq.<span class="type">infoReq</span> <span class="variable">infoReq</span> <span class="operator">=</span> reqList.get(i);</span><br><span class="line">            <span class="type">Long</span> <span class="variable">modifyTime</span> <span class="operator">=</span> userModifyTime.get(i);</span><br><span class="line">            <span class="keyword">if</span> (Objects.isNull(infoReq.getLastModifyTime()) || (Objects.nonNull(modifyTime) &amp;&amp; modifyTime &gt; infoReq.getLastModifyTime())) &#123;</span><br><span class="line">                result.add(infoReq.getUid());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">blackIp</span><span class="params">(String ip)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(ip)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Black</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Black</span>();</span><br><span class="line">            user.setTarget(ip);</span><br><span class="line">            user.setType(BlackTypeEnum.IP.getType());</span><br><span class="line">            blackDao.save(user);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;duplicate black ip:&#123;&#125;&quot;</span>, ip);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="用户模块中的功能"   >          <a href="#用户模块中的功能" class="heading-link"><i class="fas fa-link"></i></a><a href="#用户模块中的功能" class="headerlink" title="用户模块中的功能"></a>用户模块中的功能</h4>              <h5 id="用户模块-1"   >          <a href="#用户模块-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#用户模块-1" class="headerlink" title="用户模块"></a>用户模块</h5>              <h5 id="黑名单模块"   >          <a href="#黑名单模块" class="heading-link"><i class="fas fa-link"></i></a><a href="#黑名单模块" class="headerlink" title="黑名单模块"></a>黑名单模块</h5>              <h5 id="徽章发放模块"   >          <a href="#徽章发放模块" class="heading-link"><i class="fas fa-link"></i></a><a href="#徽章发放模块" class="headerlink" title="徽章发放模块"></a>徽章发放模块</h5>              <h2 id="微信扫码登录"   >          <a href="#微信扫码登录" class="heading-link"><i class="fas fa-link"></i></a><a href="#微信扫码登录" class="headerlink" title="微信扫码登录"></a>微信扫码登录</h2>              <h3 id="WxPortalController层"   >          <a href="#WxPortalController层" class="heading-link"><i class="fas fa-link"></i></a><a href="#WxPortalController层" class="headerlink" title="WxPortalController层"></a>WxPortalController层</h3>              <h4 id="post"   >          <a href="#post" class="heading-link"><i class="fas fa-link"></i></a><a href="#post" class="headerlink" title="post"></a>post</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(produces = &quot;application/xml; charset=UTF-8&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">post</span><span class="params">(<span class="meta">@RequestBody</span> String requestBody,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(&quot;signature&quot;)</span> String signature,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(&quot;timestamp&quot;)</span> String timestamp,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(&quot;nonce&quot;)</span> String nonce,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(&quot;openid&quot;)</span> String openid,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(name = &quot;encrypt_type&quot;, required = false)</span> String encType,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(name = &quot;msg_signature&quot;, required = false)</span> String msgSignature)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;\n接收微信请求：[openid=[&#123;&#125;], [signature=[&#123;&#125;], encType=[&#123;&#125;], msgSignature=[&#123;&#125;],&quot;</span></span><br><span class="line">                        + <span class="string">&quot; timestamp=[&#123;&#125;], nonce=[&#123;&#125;], requestBody=[\n&#123;&#125;\n] &quot;</span>,</span><br><span class="line">                openid, signature, encType, msgSignature, timestamp, nonce, requestBody);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!wxService.checkSignature(timestamp, nonce, signature)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;非法请求，可能属于伪造的请求！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (encType == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 明文传输的消息</span></span><br><span class="line">            <span class="type">WxMpXmlMessage</span> <span class="variable">inMessage</span> <span class="operator">=</span> WxMpXmlMessage.fromXml(requestBody);</span><br><span class="line">            <span class="type">WxMpXmlOutMessage</span> <span class="variable">outMessage</span> <span class="operator">=</span> <span class="built_in">this</span>.route(inMessage);</span><br><span class="line">            <span class="keyword">if</span> (outMessage == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            out = outMessage.toXml();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;aes&quot;</span>.equalsIgnoreCase(encType)) &#123;</span><br><span class="line">            <span class="comment">// aes加密的消息</span></span><br><span class="line">            <span class="type">WxMpXmlMessage</span> <span class="variable">inMessage</span> <span class="operator">=</span> WxMpXmlMessage.fromEncryptedXml(requestBody, wxService.getWxMpConfigStorage(),</span><br><span class="line">                    timestamp, nonce, msgSignature);</span><br><span class="line">            log.debug(<span class="string">&quot;\n消息解密后内容为：\n&#123;&#125; &quot;</span>, inMessage.toString());</span><br><span class="line">            <span class="type">WxMpXmlOutMessage</span> <span class="variable">outMessage</span> <span class="operator">=</span> <span class="built_in">this</span>.route(inMessage);</span><br><span class="line">            <span class="keyword">if</span> (outMessage == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            out = outMessage.toEncryptedXml(wxService.getWxMpConfigStorage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;\n组装回复信息：&#123;&#125;&quot;</span>, out);</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="authGet"   >          <a href="#authGet" class="heading-link"><i class="fas fa-link"></i></a><a href="#authGet" class="headerlink" title="authGet"></a>authGet</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//这个方法用于微信服务器与自己内网的后端代码建立连接</span></span><br><span class="line"><span class="meta">@GetMapping(produces = &quot;text/plain;charset=utf-8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">authGet</span><span class="params">(<span class="meta">@RequestParam(name = &quot;signature&quot;, required = false)</span> String signature,</span></span><br><span class="line"><span class="params">                      <span class="meta">@RequestParam(name = &quot;timestamp&quot;, required = false)</span> String timestamp,</span></span><br><span class="line"><span class="params">                      <span class="meta">@RequestParam(name = &quot;nonce&quot;, required = false)</span> String nonce,</span></span><br><span class="line"><span class="params">                      <span class="meta">@RequestParam(name = &quot;echostr&quot;, required = false)</span> String echostr)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入参数1.微信加密签名 2.时间戳 3.随机数 4.随机字符串</span></span><br><span class="line">    log.info(<span class="string">&quot;\n接收到来自微信服务器的认证消息：[&#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;]&quot;</span>, signature,</span><br><span class="line">            timestamp, nonce, echostr);</span><br><span class="line">    <span class="comment">//如果为空则抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isAnyBlank(signature, timestamp, nonce, echostr)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;请求参数非法，请核实!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//微信校验</span></span><br><span class="line">    <span class="keyword">if</span> (wxService.checkSignature(timestamp, nonce, signature)) &#123;</span><br><span class="line">        <span class="keyword">return</span> echostr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;非法请求&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="callBack"   >          <a href="#callBack" class="heading-link"><i class="fas fa-link"></i></a><a href="#callBack" class="headerlink" title="callBack"></a>callBack</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//回调函数</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/callBack&quot;)</span></span><br><span class="line"><span class="keyword">public</span> RedirectView <span class="title function_">callBack</span><span class="params">(<span class="meta">@RequestParam</span> String code)</span> <span class="keyword">throws</span> WxErrorException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">WxOAuth2AccessToken</span> <span class="variable">accessToken</span> <span class="operator">=</span> wxService.getOAuth2Service().getAccessToken(code);</span><br><span class="line">        <span class="type">WxOAuth2UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> wxService.getOAuth2Service().getUserInfo(accessToken, <span class="string">&quot;zh_CN&quot;</span>);</span><br><span class="line">        wxMsgService.authorize(userInfo);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;callBack error&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重定向</span></span><br><span class="line">    <span class="type">RedirectView</span> <span class="variable">redirectView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedirectView</span>();</span><br><span class="line">    <span class="comment">//重定向uri</span></span><br><span class="line">    redirectView.setUrl(<span class="string">&quot;https://mp.weixin.qq.com/s/m1SRsBG96kLJW5mPe4AVGA&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> redirectView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="WxMsgService"   >          <a href="#WxMsgService" class="heading-link"><i class="fas fa-link"></i></a><a href="#WxMsgService" class="headerlink" title="WxMsgService"></a>WxMsgService</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxMsgService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户的openId和前端登录场景code的映射关系</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentHashMap&lt;String, Integer&gt; OPENID_EVENT_CODE_MAP = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;https://open.weixin.qq.com/connect/oauth2/authorize?appid=%s&amp;redirect_uri=%s&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=STATE#wechat_redirect&quot;</span>;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;wx.mp.callback&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String callback;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="keyword">private</span> WebSocketService webSocketService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginService loginService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ThreadPoolTaskExecutor threadPoolTaskExecutor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> WxMpXmlOutMessage <span class="title function_">scan</span><span class="params">(WxMpService wxMpService, WxMpXmlMessage wxMpXmlMessage)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fromUser</span> <span class="operator">=</span> wxMpXmlMessage.getFromUser();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">eventKey</span> <span class="operator">=</span> Integer.parseInt(getEventKey(wxMpXmlMessage));</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.getByOpenId(fromUser);</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(user) &amp;&amp; StringUtils.isNotEmpty(user.getAvatar())) &#123;</span><br><span class="line">            <span class="comment">//注册且已经授权的用户，直接登录成功</span></span><br><span class="line">            login(user.getId(), eventKey);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">            <span class="comment">//未注册的先注册</span></span><br><span class="line">            userService.register(fromUser);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//保存openid和场景code的关系，后续才能通知到前端</span></span><br><span class="line">        OPENID_EVENT_CODE_MAP.put(fromUser, eventKey);</span><br><span class="line">        <span class="comment">//授权流程,给用户发送授权消息，并且异步通知前端扫码成功</span></span><br><span class="line">        threadPoolTaskExecutor.execute(() -&gt; webSocketService.scanSuccess(eventKey));</span><br><span class="line">        <span class="type">String</span> <span class="variable">skipUrl</span> <span class="operator">=</span> String.format(URL, wxMpService.getWxMpConfigStorage().getAppId(), URLEncoder.encode(callback + <span class="string">&quot;/wx/portal/public/callBack&quot;</span>));</span><br><span class="line">        WxMpXmlOutMessage.TEXT().build();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TextBuilder</span>().build(<span class="string">&quot;请点击链接授权：&lt;a href=\&quot;&quot;</span> + skipUrl + <span class="string">&quot;\&quot;&gt;登录&lt;/a&gt;&quot;</span>, wxMpXmlMessage, wxMpService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getEventKey</span><span class="params">(WxMpXmlMessage wxMpXmlMessage)</span> &#123;</span><br><span class="line">        <span class="comment">//扫码关注的渠道事件有前缀，需要去除</span></span><br><span class="line">        <span class="keyword">return</span> wxMpXmlMessage.getEventKey().replace(<span class="string">&quot;qrscene_&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户授权</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userInfo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">authorize</span><span class="params">(WxOAuth2UserInfo userInfo)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.getByOpenId(userInfo.getOpenid());</span><br><span class="line">        <span class="comment">//更新用户信息</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(user.getName())) &#123;</span><br><span class="line">            fillUserInfo(user.getId(), userInfo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//触发用户登录成功操作</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">eventKey</span> <span class="operator">=</span> OPENID_EVENT_CODE_MAP.get(userInfo.getOpenid());</span><br><span class="line">        login(user.getId(), eventKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fillUserInfo</span><span class="params">(Long uid, WxOAuth2UserInfo userInfo)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">update</span> <span class="operator">=</span> UserAdapter.buildAuthorizeUser(uid, userInfo);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                userDao.updateById(update);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (DuplicateKeyException e) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;fill userInfo duplicate uid:&#123;&#125;,info:&#123;&#125;&quot;</span>, uid, userInfo);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;fill userInfo fail uid:&#123;&#125;,info:&#123;&#125;&quot;</span>, uid, userInfo);</span><br><span class="line">            &#125;</span><br><span class="line">            update.setName(<span class="string">&quot;名字重置&quot;</span> + RandomUtil.randomInt(<span class="number">100000</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(Long uid, Integer eventKey)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.getById(uid);</span><br><span class="line">        <span class="comment">//调用用户登录模块</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> loginService.login(uid);</span><br><span class="line">        <span class="comment">//推送前端登录成功</span></span><br><span class="line">        webSocketService.scanLoginSuccess(eventKey, user, token);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="流程-5"   >          <a href="#流程-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程-5" class="headerlink" title="流程"></a>流程</h3>              <h4 id="前端和后端建立一个WebSocket连接"   >          <a href="#前端和后端建立一个WebSocket连接" class="heading-link"><i class="fas fa-link"></i></a><a href="#前端和后端建立一个WebSocket连接" class="headerlink" title="前端和后端建立一个WebSocket连接"></a>前端和后端建立一个WebSocket连接</h4>      <p>前端新建一个WebSocket连接，端口号是8090，然后后端通过netty记录并且管理连接</p>        <h4 id="前端请求扫码登录"   >          <a href="#前端请求扫码登录" class="heading-link"><i class="fas fa-link"></i></a><a href="#前端请求扫码登录" class="headerlink" title="前端请求扫码登录"></a>前端请求扫码登录</h4>      <p><strong>后端</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoginReq</span><span class="params">(Channel channel)</span> &#123;</span><br><span class="line">        <span class="comment">//生成随机不重复的登录码</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> generateLoginCode(channel);</span><br><span class="line">        <span class="comment">//请求微信接口，获取登录码地址</span></span><br><span class="line">        <span class="type">WxMpQrCodeTicket</span> <span class="variable">wxMpQrCodeTicket</span> <span class="operator">=</span> wxMpService.getQrcodeService().qrCodeCreateTmpTicket(code, (<span class="type">int</span>) EXPIRE_TIME.getSeconds());</span><br><span class="line">        <span class="comment">//返回给前端</span></span><br><span class="line">        sendMsg(channel, WSAdapter.buildLoginResp(wxMpQrCodeTicket));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p><strong>generateLoginCode</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取不重复的登录的code，微信要求最大不超过int的存储极限</span></span><br><span class="line"><span class="comment"> * 防止并发，可以给方法加上synchronize，也可以使用cas乐观锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Integer <span class="title function_">generateLoginCode</span><span class="params">(Channel channel)</span> &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        CODE.getAndIncrement();</span><br><span class="line">    &#125; <span class="keyword">while</span> (WAIT_LOGIN_MAP.asMap().containsKey(CODE.get())</span><br><span class="line">            || Objects.isNull(WAIT_LOGIN_MAP.get(CODE.get(), c -&gt; channel)));</span><br><span class="line">    <span class="keyword">return</span> CODE.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>也即后端会生成一个随机的登录码，这个登录码会和这个channal相连</p><p>然后将登录码发送到微信获取一个登录二维码链接</p><p>返回给前端一个二维码链接转换成二维码图片</p><p><strong>这样前端就获取了一个带有登录码的二维码图片</strong></p>        <h4 id="用户扫码登录"   >          <a href="#用户扫码登录" class="heading-link"><i class="fas fa-link"></i></a><a href="#用户扫码登录" class="headerlink" title="用户扫码登录"></a>用户扫码登录</h4>      <p>用户扫码之后公众号会判断是关注还是扫码事件</p><p>无论是啥事件都会返回二维码参数，也就是登录码</p>        <h4 id="用户注册"   >          <a href="#用户注册" class="heading-link"><i class="fas fa-link"></i></a><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h4>      <p>用户注册也就是一开始未关注，然后关注公众号之后</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> WxMpXmlOutMessage <span class="title function_">scan</span><span class="params">(WxMpService wxMpService, WxMpXmlMessage wxMpXmlMessage)</span> &#123;</span><br><span class="line">    <span class="comment">//获取用户openid</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">fromUser</span> <span class="operator">=</span> wxMpXmlMessage.getFromUser();</span><br><span class="line">    <span class="comment">//获取登录码</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">eventKey</span> <span class="operator">=</span> Integer.parseInt(getEventKey(wxMpXmlMessage));</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.getByOpenId(fromUser);</span><br><span class="line">    <span class="keyword">if</span> (Objects.nonNull(user) &amp;&amp; StringUtils.isNotEmpty(user.getAvatar())) &#123;</span><br><span class="line">        <span class="comment">//注册且已经授权的用户，直接登录成功</span></span><br><span class="line">        login(user.getId(), eventKey);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">        <span class="comment">//未注册的先注册</span></span><br><span class="line">        userService.register(fromUser);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//保存openid和场景code的关系，后续才能通知到前端</span></span><br><span class="line">    OPENID_EVENT_CODE_MAP.put(fromUser, eventKey);</span><br><span class="line">    <span class="comment">//授权流程,给用户发送授权消息，并且异步通知前端扫码成功</span></span><br><span class="line">    threadPoolTaskExecutor.execute(() -&gt; webSocketService.scanSuccess(eventKey));</span><br><span class="line">    <span class="type">String</span> <span class="variable">skipUrl</span> <span class="operator">=</span> String.format(URL, wxMpService.getWxMpConfigStorage().getAppId(), URLEncoder.encode(callback + <span class="string">&quot;/wx/portal/public/callBack&quot;</span>));</span><br><span class="line">    WxMpXmlOutMessage.TEXT().build();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TextBuilder</span>().build(<span class="string">&quot;请点击链接授权：&lt;a href=\&quot;&quot;</span> + skipUrl + <span class="string">&quot;\&quot;&gt;登录&lt;/a&gt;&quot;</span>, wxMpXmlMessage, wxMpService);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p><strong>login登录</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(Long uid, Integer eventKey)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.getById(uid);</span><br><span class="line">    <span class="comment">//调用用户登录模块</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> loginService.login(uid);</span><br><span class="line">    <span class="comment">//推送前端登录成功</span></span><br><span class="line">    webSocketService.scanLoginSuccess(eventKey, user, token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">       <span class="comment">//拼接一个Key</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> RedisKey.getKey(RedisKey.USER_TOKEN_STRING, uid);</span><br><span class="line"><span class="comment">//查询Redis 这个UserToken </span></span><br><span class="line">       <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> RedisUtils.getStr(key);</span><br><span class="line">       <span class="comment">//如果Token非空 那么就直接返回Token</span></span><br><span class="line">       <span class="keyword">if</span> (StrUtil.isNotBlank(token)) &#123;</span><br><span class="line">           <span class="keyword">return</span> token;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//运行到这里说明Token为空</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//获取用户token</span></span><br><span class="line">       <span class="comment">//生成一个JWT令牌</span></span><br><span class="line">       token = jwtUtils.createToken(uid);</span><br><span class="line">       <span class="comment">//在Redis中设置这个token,初始化过期时间为5天</span></span><br><span class="line">       RedisUtils.set(key, token, TOKEN_EXPIRE_DAYS, TimeUnit.DAYS);<span class="comment">//token过期用redis中心化控制，初期采用5天过期，剩1天自动续期的方案。后续可以用双token实现</span></span><br><span class="line">       <span class="keyword">return</span> token;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure><p><strong>token续期操作</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Async</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">renewalTokenIfNecessary</span><span class="params">(String token)</span> &#123;</span><br><span class="line"><span class="comment">//从token中获取uid</span></span><br><span class="line">      <span class="type">Long</span> <span class="variable">uid</span> <span class="operator">=</span> jwtUtils.getUidOrNull(token);</span><br><span class="line">      <span class="comment">//如果uid为空 那么直接返回</span></span><br><span class="line">      <span class="keyword">if</span> (Objects.isNull(uid)) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//拼接一个key</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> RedisKey.getKey(RedisKey.USER_TOKEN_STRING, uid);</span><br><span class="line">      <span class="comment">//获取这个key对应的过期时间</span></span><br><span class="line">      <span class="type">long</span> <span class="variable">expireDays</span> <span class="operator">=</span> RedisUtils.getExpire(key, TimeUnit.DAYS);</span><br><span class="line">      <span class="comment">//如果过期时间为-2 说明不存在key</span></span><br><span class="line">      <span class="keyword">if</span> (expireDays == -<span class="number">2</span>) &#123;<span class="comment">//不存在的key</span></span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">//如果过期时间&lt;TOKEN_RENEWAL_DAYS  也即过期时间小于2 那么就要续期</span></span><br><span class="line">      <span class="keyword">if</span> (expireDays &lt; TOKEN_RENEWAL_DAYS ) &#123;<span class="comment">//小于二天的token帮忙续期</span></span><br><span class="line">          <span class="comment">//续期token 每次续期5天</span></span><br><span class="line">          RedisUtils.expire(key, TOKEN_EXPIRE_DAYS, TimeUnit.DAYS);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p><strong>regist注册</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String openId)</span> &#123;</span><br><span class="line">        <span class="comment">//将openid放入User表中的openid</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">insert</span> <span class="operator">=</span> User.builder().openId(openId).build();</span><br><span class="line">        <span class="comment">//插入到User表中用户数据</span></span><br><span class="line">        userDao.save(insert);</span><br><span class="line">        <span class="comment">//推送一条用户注册的事件</span></span><br><span class="line">        applicationEventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">UserRegisterEvent</span>(<span class="built_in">this</span>, insert));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>当用户注册完的时候，就会产生一个openid和登录码关联的临时关系</p>        <h4 id="授权用户信息"   >          <a href="#授权用户信息" class="heading-link"><i class="fas fa-link"></i></a><a href="#授权用户信息" class="headerlink" title="授权用户信息"></a>授权用户信息</h4>      <p>公众号会推送一条用户授权链接，当用户点击链接会触发callback函数</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/callBack&quot;)</span></span><br><span class="line"><span class="keyword">public</span> RedirectView <span class="title function_">callBack</span><span class="params">(<span class="meta">@RequestParam</span> String code)</span> <span class="keyword">throws</span> WxErrorException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">WxOAuth2AccessToken</span> <span class="variable">accessToken</span> <span class="operator">=</span> wxService.getOAuth2Service().getAccessToken(code);</span><br><span class="line">        <span class="type">WxOAuth2UserInfo</span> <span class="variable">userInfo</span> <span class="operator">=</span> wxService.getOAuth2Service().getUserInfo(accessToken, <span class="string">&quot;zh_CN&quot;</span>);</span><br><span class="line">        wxMsgService.authorize(userInfo);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;callBack error&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重定向uri</span></span><br><span class="line">    <span class="type">RedirectView</span> <span class="variable">redirectView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedirectView</span>();</span><br><span class="line">    redirectView.setUrl(<span class="string">&quot;https://mp.weixin.qq.com/s/m1SRsBG96kLJW5mPe4AVGA&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> redirectView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>我们通过回调函数获取userInfo  ，也即微信头像、昵称、openId等</p><p>获取用户授权信息之后再执行登录操作</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">authorize</span><span class="params">(WxOAuth2UserInfo userInfo)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.getByOpenId(userInfo.getOpenid());</span><br><span class="line">    <span class="comment">//更新用户信息</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(user.getName())) &#123;</span><br><span class="line">        fillUserInfo(user.getId(), userInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//触发用户登录成功操作</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">eventKey</span> <span class="operator">=</span> OPENID_EVENT_CODE_MAP.get(userInfo.getOpenid());</span><br><span class="line">    login(user.getId(), eventKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>那么因此就产生一个 uid对应一个Channal的关系</p><p>这个原因是可能一个微信可能pc和手机端同时登录mallchat，当两个设备都下线才能说明这个用户下线</p>        <h4 id="后端主动消息推送"   >          <a href="#后端主动消息推送" class="heading-link"><i class="fas fa-link"></i></a><a href="#后端主动消息推送" class="headerlink" title="后端主动消息推送"></a>后端主动消息推送</h4>      <p>当有消息发送需要推送给全部用户</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="meta">@TransactionalEventListener(classes = MessageSendEvent.class, fallbackExecution = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyAllOnline</span><span class="params">(MessageSendEvent event)</span> &#123;</span><br><span class="line">    <span class="comment">//获取消息</span></span><br><span class="line">    <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> messageDao.getById(event.getMsgId());</span><br><span class="line">    <span class="comment">//判断这个消息接收到的uid， null说明为全部用户</span></span><br><span class="line">    <span class="type">ChatMessageResp</span> <span class="variable">msgResp</span> <span class="operator">=</span> chatService.getMsgResp(message, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//调用sendToAllOnline发送给所有在线用户(除了自己)</span></span><br><span class="line">    webSocketService.sendToAllOnline(WSAdapter.buildMsgSend(msgResp), message.getFromUid());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>sendToAllOnline</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//entrySet的值不是快照数据,但是它支持遍历，所以无所谓了，不用快照也行。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToAllOnline</span><span class="params">(WSBaseResp&lt;?&gt; wsBaseResp, Long skipUid)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        ONLINE_WS_MAP.forEach((channel, ext) -&gt; &#123;</span><br><span class="line">            <span class="comment">//判断这个uid是不是需要跳过的uid，发送消息的uid就不需要推送给自己</span></span><br><span class="line">            <span class="keyword">if</span> (ObjectUtil.equal(ext.getUid(), skipUid)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//调用异步线程池发送消息</span></span><br><span class="line">            threadPoolTaskExecutor.execute(() -&gt; sendMsg(channel, wsBaseResp));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="总览-1"   >          <a href="#总览-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#总览-1" class="headerlink" title="总览"></a>总览</h3>      <p><strong>消息的异步推送</strong></p><p>利用异步线程池来推送消息给全体用户</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threadPoolTaskExecutor.execute(() -&gt; sendMsg(channel, wsBaseResp));</span><br></pre></td></tr></table></div></figure><p><strong>登录码的防重</strong></p><p>利用原子类生成一个code，这个code必须在Caffeine中没有并且能有channel与其关联，也即这个code不能重复</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoginReq</span><span class="params">(Channel channel)</span> &#123;</span><br><span class="line">        <span class="comment">//生成随机不重复的登录码</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> generateLoginCode(channel);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Integer <span class="title function_">generateLoginCode</span><span class="params">(Channel channel)</span> &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">//利用AtomicInteger获取一个code</span></span><br><span class="line">        CODE.getAndIncrement();</span><br><span class="line">    &#125; <span class="keyword">while</span> (</span><br><span class="line">        <span class="comment">//必须要Caffeine中没有 并且 能有Channael与Code关联</span></span><br><span class="line">        WAIT_LOGIN_MAP.asMap().containsKey(CODE.get())||</span><br><span class="line">        Objects.isNull(WAIT_LOGIN_MAP.get(CODE.get(), c -&gt; channel))</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> CODE.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">CODE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Cache&lt;Integer, Channel&gt; WAIT_LOGIN_MAP = Caffeine.newBuilder()</span><br><span class="line">        .expireAfterWrite(EXPIRE_TIME)</span><br><span class="line">        .maximumSize(MAX_MUM_SIZE)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></div></figure><p><strong>登录二维码内存泄漏</strong></p><p>因为登录的时候会申请一个code和二维码相关联，如果一个用户申请了二维码就会将临时二维码和code做映射，只有当注册或者登录用户的时候才会将映射删除</p><p>但是迟迟没有扫码登录，那么这个code会一直存在内存中，并且其他用户在申请code的时候可能会造成code碰撞会不断申请</p><p><em>解决方案</em></p><p>利用Caffeine来最大容量和过期时间</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Cache&lt;Integer, Channel&gt; WAIT_LOGIN_MAP = Caffeine.newBuilder()</span><br><span class="line">        .expireAfterWrite(EXPIRE_TIME) <span class="comment">//设置过期时间为1h</span></span><br><span class="line">        .maximumSize(MAX_MUM_SIZE)<span class="comment">//设置最大容量为10000</span></span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Duration</span> <span class="variable">EXPIRE_TIME</span> <span class="operator">=</span> Duration.ofHours(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">MAX_MUM_SIZE</span> <span class="operator">=</span> <span class="number">10000L</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">CODE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>利用原子类自增来解决code冲突的问题</p>        <h2 id="表情包模块"   >          <a href="#表情包模块" class="heading-link"><i class="fas fa-link"></i></a><a href="#表情包模块" class="headerlink" title="表情包模块"></a>表情包模块</h2>              <h3 id="表情包列表"   >          <a href="#表情包列表" class="heading-link"><i class="fas fa-link"></i></a><a href="#表情包列表" class="headerlink" title="表情包列表"></a>表情包列表</h3>      <div class="table-container"><table><thead><tr><th>URI</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;user&#x2F;emoji&#x2F;list</td><td>GET请求</td></tr></tbody></table></div>        <h4 id="Controller层-7"   >          <a href="#Controller层-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-7" class="headerlink" title="Controller层"></a>Controller层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;表情包列表&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;List&lt;UserEmojiResp&gt;&gt; <span class="title function_">getEmojisPage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ApiResult.success(emojiService.list(RequestHolder.get().getUid()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="Service层-5"   >          <a href="#Service层-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#Service层-5" class="headerlink" title="Service层"></a>Service层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserEmojiResp&gt; <span class="title function_">list</span><span class="params">(Long uid)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;UserEmojiResp&gt; <span class="title function_">list</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userEmojiDao.listByUid(uid).</span><br><span class="line">            stream()</span><br><span class="line">            .map(a -&gt; UserEmojiResp.builder()</span><br><span class="line">                    .id(a.getId())<span class="comment">//设置表情id</span></span><br><span class="line">                    .expressionUrl(a.getExpressionUrl())<span class="comment">//设置表情uil</span></span><br><span class="line">                    .build())</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="listByUid-1"   >          <a href="#listByUid-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#listByUid-1" class="headerlink" title="listByUid"></a>listByUid</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据uid查询uid下的表情包</span></span><br><span class="line"><span class="keyword">public</span> List&lt;UserEmoji&gt; <span class="title function_">listByUid</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">    <span class="comment">//SELECT id,uid,expression_url,delete_status,create_time,update_time </span></span><br><span class="line">    <span class="comment">//FROM user_emoji </span></span><br><span class="line">    <span class="comment">//WHERE delete_status=0 AND (uid = ?)     delete_status为0说明是正常 为1是删除  即逻辑删除</span></span><br><span class="line">    <span class="keyword">return</span> lambdaQuery().eq(UserEmoji::getUid, uid).list();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="流程-6"   >          <a href="#流程-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程-6" class="headerlink" title="流程"></a>流程</h4>      <p>查询Controller 传入Uid查询list，也即查询Uid下的表情包(自己拥有)</p>        <h3 id="添加表情"   >          <a href="#添加表情" class="heading-link"><i class="fas fa-link"></i></a><a href="#添加表情" class="headerlink" title="添加表情"></a>添加表情</h3>      <div class="table-container"><table><thead><tr><th>URI</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;user&#x2F;emoji</td><td>POST请求</td></tr></tbody></table></div>        <h4 id="Controller层-8"   >          <a href="#Controller层-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-8" class="headerlink" title="Controller层"></a>Controller层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping()</span></span><br><span class="line">   <span class="meta">@ApiOperation(&quot;新增表情包&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> ApiResult&lt;IdRespVO&gt; <span class="title function_">insertEmojis</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> UserEmojiReq req)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> emojiService.insert(req, RequestHolder.get().getUid());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="Service层-6"   >          <a href="#Service层-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#Service层-6" class="headerlink" title="Service层"></a>Service层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApiResult&lt;IdRespVO&gt; <span class="title function_">insert</span><span class="params">(UserEmojiReq emojis, Long uid)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@RedissonLock(key = &quot;#uid&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;IdRespVO&gt; <span class="title function_">insert</span><span class="params">(UserEmojiReq req, Long uid)</span> &#123;</span><br><span class="line">    <span class="comment">//校验表情数量是否超过30</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> userEmojiDao.countByUid(uid);</span><br><span class="line">    AssertUtil.isFalse(count &gt; <span class="number">30</span>, <span class="string">&quot;最多只能添加30个表情哦~~&quot;</span>);</span><br><span class="line">    <span class="comment">//校验表情是否存在</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">existsCount</span> <span class="operator">=</span> userEmojiDao.lambdaQuery()</span><br><span class="line">            .eq(UserEmoji::getExpressionUrl, req.getExpressionUrl())</span><br><span class="line">            .eq(UserEmoji::getUid, uid)</span><br><span class="line">            .count();</span><br><span class="line">    AssertUtil.isFalse(existsCount &gt; <span class="number">0</span>, <span class="string">&quot;当前表情已存在哦~~&quot;</span>);</span><br><span class="line">    <span class="type">UserEmoji</span> <span class="variable">insert</span> <span class="operator">=</span> UserEmoji.builder().uid(uid).expressionUrl(req.getExpressionUrl()).build();</span><br><span class="line">    <span class="comment">//插入表情</span></span><br><span class="line">    userEmojiDao.save(insert);</span><br><span class="line">    <span class="keyword">return</span> ApiResult.success(IdRespVO.id(insert.getId()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="流程-7"   >          <a href="#流程-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程-7" class="headerlink" title="流程"></a>流程</h4>      <p>添加表情先检验表情包数量是否超过30</p><p>超过30无法添加，如果不超过则检验表情是否重复</p><p>如果表情不重复并且表情包数量小于30 则插入User_emoji中新增表情包  添加表情包URL</p>        <h3 id="删除表情"   >          <a href="#删除表情" class="heading-link"><i class="fas fa-link"></i></a><a href="#删除表情" class="headerlink" title="删除表情"></a>删除表情</h3>      <div class="table-container"><table><thead><tr><th>URI</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;user&#x2F;emoji</td><td>DELETE请求</td></tr></tbody></table></div>        <h4 id="Controller层-9"   >          <a href="#Controller层-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-9" class="headerlink" title="Controller层"></a>Controller层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping()</span></span><br><span class="line">   <span class="meta">@ApiOperation(&quot;删除表情包&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> ApiResult&lt;Void&gt; <span class="title function_">deleteEmojis</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> IdReqVO reqVO)</span> &#123;</span><br><span class="line">       emojiService.remove(reqVO.getId(), RequestHolder.get().getUid());</span><br><span class="line">       <span class="keyword">return</span> ApiResult.success();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="Service层-7"   >          <a href="#Service层-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#Service层-7" class="headerlink" title="Service层"></a>Service层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id, Long uid)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long id, Long uid)</span> &#123;</span><br><span class="line">    <span class="comment">//获取要删除的表情包</span></span><br><span class="line">    <span class="type">UserEmoji</span> <span class="variable">userEmoji</span> <span class="operator">=</span> userEmojiDao.getById(id);</span><br><span class="line">    <span class="comment">//如果表情为空</span></span><br><span class="line">    AssertUtil.isNotEmpty(userEmoji, <span class="string">&quot;表情不能为空&quot;</span>);</span><br><span class="line">    <span class="comment">//如果表情不是自己的</span></span><br><span class="line">    AssertUtil.equal(userEmoji.getUid(), uid, <span class="string">&quot;小黑子，别人表情不是你能删的&quot;</span>);</span><br><span class="line"><span class="comment">//删除表情 将逻辑删除改为1</span></span><br><span class="line">    userEmojiDao.removeById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="流程-8"   >          <a href="#流程-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程-8" class="headerlink" title="流程"></a>流程</h4>      <p>判断表情包是否为空，如果不为空判断表情包是否是自己的</p><p>如果不为空且是自己的表情，则将逻辑删除改成1，代表表情包已经被删除</p>        <h2 id="上传文件模块"   >          <a href="#上传文件模块" class="heading-link"><i class="fas fa-link"></i></a><a href="#上传文件模块" class="headerlink" title="上传文件模块"></a>上传文件模块</h2>              <h3 id="Controller层-10"   >          <a href="#Controller层-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-10" class="headerlink" title="Controller层"></a>Controller层</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/capi/oss&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;oss相关接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OssService ossService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/upload/url&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取临时上传链接&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;OssResp&gt; <span class="title function_">getUploadUrl</span><span class="params">(<span class="meta">@Valid</span> UploadUrlReq req)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ApiResult.success(ossService.getUploadUrl(RequestHolder.get().getUid(), req));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="Service层-8"   >          <a href="#Service层-8" class="heading-link"><i class="fas fa-link"></i></a><a href="#Service层-8" class="headerlink" title="Service层"></a>Service层</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OssResp <span class="title function_">getUploadUrl</span><span class="params">(Long uid, UploadUrlReq req)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> OssResp <span class="title function_">getUploadUrl</span><span class="params">(Long uid, UploadUrlReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//判断上传的类型 1为聊天内容 2为表情包</span></span><br><span class="line">    <span class="type">OssSceneEnum</span> <span class="variable">sceneEnum</span> <span class="operator">=</span> OssSceneEnum.of(req.getScene());</span><br><span class="line">    AssertUtil.isNotEmpty(sceneEnum, <span class="string">&quot;场景有误&quot;</span>);</span><br><span class="line">    <span class="type">OssReq</span> <span class="variable">ossReq</span> <span class="operator">=</span> OssReq.builder()</span><br><span class="line">            .fileName(req.getFileName())<span class="comment">//添加文件名</span></span><br><span class="line">            .filePath(sceneEnum.getPath())<span class="comment">//添加Path</span></span><br><span class="line">            .uid(uid)<span class="comment">//添加uid</span></span><br><span class="line">            .build();</span><br><span class="line">    <span class="keyword">return</span> minIOTemplate.getPreSignedObjectUrl(ossReq); <span class="comment">//上传到MinIo中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="getPreSignedObjectUrl"   >          <a href="#getPreSignedObjectUrl" class="heading-link"><i class="fas fa-link"></i></a><a href="#getPreSignedObjectUrl" class="headerlink" title="getPreSignedObjectUrl"></a>getPreSignedObjectUrl</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="keyword">public</span> OssResp <span class="title function_">getPreSignedObjectUrl</span><span class="params">(OssReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//获取一个文件名，如果是自动路径则获取一个随机文件路径，反之拼接文件路径+&#x27;/&#x27;+文件名作为文件名 </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">absolutePath</span> <span class="operator">=</span> req.isAutoPath() ? generateAutoPath(req) : req.getFilePath() + StrUtil.SLASH + req.getFileName();</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> minioClient.getPresignedObjectUrl(</span><br><span class="line">            GetPresignedObjectUrlArgs.builder()</span><br><span class="line">                    .method(Method.PUT)  <span class="comment">//设置为Put方法</span></span><br><span class="line">                    .bucket(ossProperties.getBucketName()) <span class="comment">//获取桶名</span></span><br><span class="line">                    .object(absolutePath)</span><br><span class="line">                    .expiry(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>) <span class="comment">//获取过期时间为一天</span></span><br><span class="line">                    .build());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//上传到MinIo中</span></span><br><span class="line">    <span class="keyword">return</span> OssResp.builder()</span><br><span class="line">            .uploadUrl(url)</span><br><span class="line">            .downloadUrl(getDownloadUrl(ossProperties.getBucketName(), absolutePath))</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="聊天室模块"   >          <a href="#聊天室模块" class="heading-link"><i class="fas fa-link"></i></a><a href="#聊天室模块" class="headerlink" title="聊天室模块"></a>聊天室模块</h2>      <p>聊天室模块分为三块 1.会话的列表 2.群成员模块 3.消息模块</p>        <h3 id="会话列表"   >          <a href="#会话列表" class="heading-link"><i class="fas fa-link"></i></a><a href="#会话列表" class="headerlink" title="会话列表"></a>会话列表</h3>      <div class="table-container"><table><thead><tr><th>URI</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;chat&#x2F;public&#x2F;room&#x2F;page</td><td>GET请求</td></tr></tbody></table></div>        <h4 id="Controller层-11"   >          <a href="#Controller层-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-11" class="headerlink" title="Controller层"></a>Controller层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/public/room/page&quot;)</span></span><br><span class="line">   <span class="meta">@ApiOperation(&quot;会话列表&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> ApiResult&lt;CursorPageBaseResp&lt;ChatRoomResp&gt;&gt; <span class="title function_">getRoomPage</span><span class="params">(<span class="meta">@Valid</span> CursorPageBaseReq request)</span> &#123;</span><br><span class="line">       <span class="comment">//调用Service中的方法  传入参数1.游标 2.页面大小</span></span><br><span class="line">       <span class="keyword">return</span> ApiResult.success(chatService.getRoomPage(request, RequestHolder.get().getUid()));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="Service层-9"   >          <a href="#Service层-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#Service层-9" class="headerlink" title="Service层"></a>Service层</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CursorPageBaseResp&lt;ChatRoomResp&gt; <span class="title function_">getRoomPage</span><span class="params">(CursorPageBaseReq request, Long uid)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传入参数1.游标位置(起始为NUll),2.页面大小</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> CursorPageBaseResp&lt;ChatRoomResp&gt; <span class="title function_">getRoomPage</span><span class="params">(CursorPageBaseReq request, Long uid)</span> &#123;</span><br><span class="line">    <span class="comment">//获取游标位置分页</span></span><br><span class="line">    CursorPageBaseResp&lt;Room&gt; cursorPage = roomDao.getCursorPage(request);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取群聊列表 </span></span><br><span class="line">    ArrayList&lt;Room&gt; rooms = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(cursorPage.getList());</span><br><span class="line">    <span class="keyword">if</span> (request.isFirstPage()) &#123;</span><br><span class="line">        <span class="comment">//第一页插入置顶的大群聊</span></span><br><span class="line">        <span class="comment">//根据ID查询房间 long ROOM_GROUP_ID = 1L;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Select * from room where id=?</span></span><br><span class="line">        <span class="type">Room</span> <span class="variable">group</span> <span class="operator">=</span> roomDao.getById(ROOM_GROUP_ID);</span><br><span class="line">        rooms.add(<span class="number">0</span>, group);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> CursorPageBaseResp.init(cursorPage, RoomAdapter.buildResp(rooms));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="getCursorPage"   >          <a href="#getCursorPage" class="heading-link"><i class="fas fa-link"></i></a><a href="#getCursorPage" class="headerlink" title="getCursorPage"></a>getCursorPage</h4>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public CursorPageBaseResp&lt;Room&gt; getCursorPage(CursorPageBaseReq request) &#123;</span><br><span class="line">    return cursorUtils.getCursorPageByMysql(this, request, wrapper -&gt; &#123;</span><br><span class="line">        wrapper.ne(Room::getType, RoomTypeEnum.GROUP.getStatus());</span><br><span class="line">    &#125;, Room::getActiveTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="getCursorPageByMysql"   >          <a href="#getCursorPageByMysql" class="heading-link"><i class="fas fa-link"></i></a><a href="#getCursorPageByMysql" class="headerlink" title="getCursorPageByMysql"></a>getCursorPageByMysql</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*传入参数1.Iservice&lt;Room&gt; mapper 操作room数据库的mapper</span></span><br><span class="line"><span class="comment"> 2.游标</span></span><br><span class="line"><span class="comment">         3.条件查询器  条件1).房间类型 2)房间状态</span></span><br><span class="line"><span class="comment">         4.房间最后活动时间</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; CursorPageBaseResp&lt;T&gt; <span class="title function_">getCursorPageByMysql</span><span class="params">(IService&lt;T&gt; mapper, CursorPageBaseReq request, Consumer&lt;LambdaQueryWrapper&lt;T&gt;&gt; initWrapper, SFunction&lt;T, ?&gt; cursorColumn)</span> &#123;</span><br><span class="line">    <span class="comment">//lambdaQueryWrapper </span></span><br><span class="line">    LambdaQueryWrapper&lt;T&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//初始化wrapper</span></span><br><span class="line">    initWrapper.accept(wrapper);</span><br><span class="line">    <span class="comment">//如果游标不为空 获取游标位置</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(request.getCursor())) &#123;</span><br><span class="line">        <span class="comment">//添加条件 游标要小于请求游标位置</span></span><br><span class="line">        wrapper.lt(cursorColumn, request.getCursor());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据最后请求位置 倒排</span></span><br><span class="line">    wrapper.orderByDesc(cursorColumn);</span><br><span class="line">    <span class="comment">//获取分页，一次十条 从游标位置开始倒排</span></span><br><span class="line">    Page&lt;T&gt; page = mapper.page(request.plusPage(), wrapper);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取一个游标 </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">cursor</span> <span class="operator">=</span> Optional.ofNullable(CollectionUtil.getLast(page.getRecords()))</span><br><span class="line">            .map(cursorColumn)</span><br><span class="line">            .map(String::valueOf)</span><br><span class="line">            .orElse(<span class="literal">null</span>);</span><br><span class="line">    <span class="comment">//判断是不是最后一页</span></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">isLast</span> <span class="operator">=</span> page.getRecords().size() != request.getPageSize();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CursorPageBaseResp</span>&lt;&gt;(cursor, isLast, page.getRecords());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="init"   >          <a href="#init" class="heading-link"><i class="fas fa-link"></i></a><a href="#init" class="headerlink" title="init"></a>init</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; CursorPageBaseResp&lt;T&gt; <span class="title function_">init</span><span class="params">(CursorPageBaseResp cursorPage, List&lt;T&gt; list)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    CursorPageBaseResp&lt;T&gt; cursorPageBaseResp = <span class="keyword">new</span> <span class="title class_">CursorPageBaseResp</span>&lt;T&gt;();</span><br><span class="line">    <span class="comment">//设置是否是最后一页</span></span><br><span class="line">    cursorPageBaseResp.setIsLast(cursorPage.getIsLast());</span><br><span class="line">    <span class="comment">//设置list数据列表</span></span><br><span class="line">    cursorPageBaseResp.setList(list);</span><br><span class="line">    <span class="comment">//设置游标</span></span><br><span class="line">    cursorPageBaseResp.setCursor(cursorPage.getCursor());</span><br><span class="line">    <span class="keyword">return</span> cursorPageBaseResp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="流程-9"   >          <a href="#流程-9" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程-9" class="headerlink" title="流程"></a>流程</h4>      <p>①获取所有的会话 (因为此时只有一个群聊所以不根据UID查询)</p><p>②获取一个返回游标及分页对象，默认游标是NULL，消息页数为10条</p><p>③init初始化会话和消息列表，返回</p>        <h3 id="群成员模块"   >          <a href="#群成员模块" class="heading-link"><i class="fas fa-link"></i></a><a href="#群成员模块" class="headerlink" title="群成员模块"></a>群成员模块</h3>              <h4 id="群成员-在线人数统计"   >          <a href="#群成员-在线人数统计" class="heading-link"><i class="fas fa-link"></i></a><a href="#群成员-在线人数统计" class="headerlink" title="群成员+在线人数统计"></a>群成员+在线人数统计</h4>      <div class="table-container"><table><thead><tr><th>URI</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;chat&#x2F;public&#x2F;member&#x2F;statistic</td><td>GET请求</td></tr></tbody></table></div>        <h5 id="Controller层-12"   >          <a href="#Controller层-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-12" class="headerlink" title="Controller层"></a>Controller层</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;public/member/statistic&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;群成员人数统计&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;ChatMemberStatisticResp&gt; <span class="title function_">getMemberStatistic</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ApiResult.success(chatService.getMemberStatistic());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="Service层-10"   >          <a href="#Service层-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#Service层-10" class="headerlink" title="Service层"></a>Service层</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ChatMemberStatisticResp <span class="title function_">getMemberStatistic</span><span class="params">()</span>;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ChatMemberStatisticResp <span class="title function_">getMemberStatistic</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">     <span class="comment">//查询userCache.getOnlinenum获得在线总人数</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">onlineNum</span> <span class="operator">=</span> userCache.getOnlineNum();</span><br><span class="line">        <span class="comment">//离线人数</span></span><br><span class="line"><span class="comment">//        Long offlineNum = userCache.getOfflineNum();不展示总人数</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取一个返回对象</span></span><br><span class="line">        <span class="type">ChatMemberStatisticResp</span> <span class="variable">resp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChatMemberStatisticResp</span>();</span><br><span class="line">        <span class="comment">//设置在线人数</span></span><br><span class="line">        resp.setOnlineNum(onlineNum);</span><br><span class="line">        <span class="comment">//设置总人数</span></span><br><span class="line"><span class="comment">//        resp.setTotalNum(onlineNum + offlineNum);</span></span><br><span class="line">        <span class="keyword">return</span> resp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="getOnlineNum"   >          <a href="#getOnlineNum" class="heading-link"><i class="fas fa-link"></i></a><a href="#getOnlineNum" class="headerlink" title="getOnlineNum"></a>getOnlineNum</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Long <span class="title function_">getOnlineNum</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//拼接一个Key: String ONLINE_UID_ZET = &quot;online&quot;;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">onlineKey</span> <span class="operator">=</span> RedisKey.getKey(RedisKey.ONLINE_UID_ZET);</span><br><span class="line">    <span class="comment">//调用zCard方法将key传入</span></span><br><span class="line">    <span class="keyword">return</span> RedisUtils.zCard(onlineKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="zCard"   >          <a href="#zCard" class="heading-link"><i class="fas fa-link"></i></a><a href="#zCard" class="headerlink" title="zCard"></a>zCard</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ublic <span class="keyword">static</span> Long <span class="title function_">zCard</span><span class="params">(String key)</span> &#123;</span><br><span class="line">  <span class="comment">//通过Zset将Online个数传回来</span></span><br><span class="line">    <span class="keyword">return</span> stringRedisTemplate.opsForZSet().zCard(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="流程-10"   >          <a href="#流程-10" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程-10" class="headerlink" title="流程"></a>流程</h5>      <p>调用Redis 通过zset的Zset命令获取Key为MallChat:online的个数，然后返回给前端显示在线总人数</p><p>如果要做总人数的统计，可以通过key为MallChat:offLine的个数与MallChat:online的个数进行累加，这样就知道了总人数</p>        <h4 id="上线下线推送"   >          <a href="#上线下线推送" class="heading-link"><i class="fas fa-link"></i></a><a href="#上线下线推送" class="headerlink" title="上线下线推送"></a>上线下线推送</h4>              <h5 id="主动更新成员列表"   >          <a href="#主动更新成员列表" class="heading-link"><i class="fas fa-link"></i></a><a href="#主动更新成员列表" class="headerlink" title="主动更新成员列表"></a>主动更新成员列表</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> CursorPageBaseResp&lt;ChatMemberResp&gt; <span class="title function_">getMemberPage</span><span class="params">(CursorPageBaseReq request)</span> &#123;</span><br><span class="line">    Pair&lt;ChatActiveStatusEnum, String&gt; pair = ChatMemberHelper.getCursorPair(request.getCursor());</span><br><span class="line">    <span class="type">ChatActiveStatusEnum</span> <span class="variable">activeStatusEnum</span> <span class="operator">=</span> pair.getKey();</span><br><span class="line">    <span class="type">String</span> <span class="variable">timeCursor</span> <span class="operator">=</span> pair.getValue();</span><br><span class="line">    List&lt;ChatMemberResp&gt; resultList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//最终列表</span></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">isLast</span> <span class="operator">=</span> Boolean.FALSE;</span><br><span class="line">    <span class="keyword">if</span> (activeStatusEnum == ChatActiveStatusEnum.ONLINE) &#123;<span class="comment">//在线列表</span></span><br><span class="line">        CursorPageBaseResp&lt;Pair&lt;Long, Double&gt;&gt; cursorPage = userCache.getOnlineCursorPage(<span class="keyword">new</span> <span class="title class_">CursorPageBaseReq</span>(request.getPageSize(), timeCursor));</span><br><span class="line">        resultList.addAll(memberAdapter.buildMember(cursorPage.getList(), ChatActiveStatusEnum.ONLINE));<span class="comment">//添加在线列表</span></span><br><span class="line">        <span class="keyword">if</span> (cursorPage.getIsLast()) &#123;<span class="comment">//如果是最后一页,从离线列表再补点数据</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">leftSize</span> <span class="operator">=</span> request.getPageSize() - cursorPage.getList().size();</span><br><span class="line">            cursorPage = userCache.getOfflineCursorPage(<span class="keyword">new</span> <span class="title class_">CursorPageBaseReq</span>(leftSize, <span class="literal">null</span>));</span><br><span class="line">            resultList.addAll(memberAdapter.buildMember(cursorPage.getList(), ChatActiveStatusEnum.OFFLINE));<span class="comment">//添加离线线列表</span></span><br><span class="line">            activeStatusEnum = ChatActiveStatusEnum.OFFLINE;</span><br><span class="line">        &#125;</span><br><span class="line">        timeCursor = cursorPage.getCursor();</span><br><span class="line">        isLast = cursorPage.getIsLast();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (activeStatusEnum == ChatActiveStatusEnum.OFFLINE) &#123;<span class="comment">//离线列表</span></span><br><span class="line">        CursorPageBaseResp&lt;Pair&lt;Long, Double&gt;&gt; cursorPage = userCache.getOfflineCursorPage(<span class="keyword">new</span> <span class="title class_">CursorPageBaseReq</span>(request.getPageSize(), timeCursor));</span><br><span class="line">        resultList.addAll(memberAdapter.buildMember(cursorPage.getList(), ChatActiveStatusEnum.OFFLINE));<span class="comment">//添加离线线列表</span></span><br><span class="line">        timeCursor = cursorPage.getCursor();</span><br><span class="line">        isLast = cursorPage.getIsLast();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//组装结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CursorPageBaseResp</span>&lt;&gt;(ChatMemberHelper.generateCursor(activeStatusEnum, timeCursor), isLast, resultList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="后台推送"   >          <a href="#后台推送" class="heading-link"><i class="fas fa-link"></i></a><a href="#后台推送" class="headerlink" title="后台推送"></a>后台推送</h5>              <h6 id="用户上线"   >          <a href="#用户上线" class="heading-link"><i class="fas fa-link"></i></a><a href="#用户上线" class="headerlink" title="用户上线"></a>用户上线</h6>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">loginSuccess</span><span class="params">(Channel channel, User user, String token)</span> &#123;</span><br><span class="line">        <span class="comment">//更新上线列表</span></span><br><span class="line">        online(channel, user.getId());</span><br><span class="line">        <span class="comment">//返回给用户登录成功</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasPower</span> <span class="operator">=</span> iRoleService.hasPower(user.getId(), RoleEnum.CHAT_MANAGER);</span><br><span class="line">        sendMsg(channel, WSAdapter.buildLoginSuccessResp(user, token, hasPower));</span><br><span class="line">        <span class="comment">//发送用户上线事件</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查询cache中发现Oniine中没有这个用户ID说明用户刚刚上线</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">online</span> <span class="operator">=</span> userCache.isOnline(user.getId());</span><br><span class="line">        <span class="keyword">if</span> (!online) &#123;</span><br><span class="line">            user.setLastOptTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">            user.refreshIp(NettyUtil.getAttr(channel, NettyUtil.IP));</span><br><span class="line">            <span class="comment">//发布用户上线事件</span></span><br><span class="line">            applicationEventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">UserOnlineEvent</span>(<span class="built_in">this</span>, user));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="用户下线"   >          <a href="#用户下线" class="heading-link"><i class="fas fa-link"></i></a><a href="#用户下线" class="headerlink" title="用户下线"></a>用户下线</h6>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removed</span><span class="params">(Channel channel)</span> &#123;</span><br><span class="line">    <span class="comment">//获取channel</span></span><br><span class="line">    <span class="type">WSChannelExtraDTO</span> <span class="variable">wsChannelExtraDTO</span> <span class="operator">=</span> ONLINE_WS_MAP.get(channel);</span><br><span class="line">    Optional&lt;Long&gt; uidOptional = Optional.ofNullable(wsChannelExtraDTO)</span><br><span class="line">            .map(WSChannelExtraDTO::getUid);</span><br><span class="line"> <span class="comment">//判断这个channel所对应的用户是否全部下线</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">offlineAll</span> <span class="operator">=</span> offline(channel, uidOptional);</span><br><span class="line">    <span class="keyword">if</span> (uidOptional.isPresent() &amp;&amp; offlineAll) &#123;<span class="comment">//已登录用户断连,并且全下线成功</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(uidOptional.get());</span><br><span class="line">        user.setLastOptTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">//发布下线事件</span></span><br><span class="line">        applicationEventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">UserOfflineEvent</span>(<span class="built_in">this</span>, user));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="流程-11"   >          <a href="#流程-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程-11" class="headerlink" title="流程"></a>流程</h5>      <p>用户上线和下线主要靠主动的游标翻页更新成员列表以及后台的推送完成</p><p>1.成员上线 发布上线事件，判断游标类型对在线列表进行更新</p><p>2.成员下线 发布下线事件，更新在线列表以及离线列表</p>        <h4 id="群成员Zset游标翻页"   >          <a href="#群成员Zset游标翻页" class="heading-link"><i class="fas fa-link"></i></a><a href="#群成员Zset游标翻页" class="headerlink" title="群成员Zset游标翻页"></a>群成员Zset游标翻页</h4>              <h5 id="群成员列表的翻页"   >          <a href="#群成员列表的翻页" class="heading-link"><i class="fas fa-link"></i></a><a href="#群成员列表的翻页" class="headerlink" title="群成员列表的翻页"></a>群成员列表的翻页</h5>      <div class="table-container"><table><thead><tr><th>URI</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;chat&#x2F;public&#x2F;member&#x2F;page</td><td>GET请求</td></tr></tbody></table></div>        <h6 id="Controller层-13"   >          <a href="#Controller层-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-13" class="headerlink" title="Controller层"></a>Controller层</h6>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/public/member/page&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;群成员列表&quot;)</span></span><br><span class="line"><span class="comment">//频控</span></span><br><span class="line">    <span class="meta">@FrequencyControl(time = 120, count = 20, target = FrequencyControl.Target.IP)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;CursorPageBaseResp&lt;ChatMemberResp&gt;&gt; <span class="title function_">getMemberPage</span><span class="params">(<span class="meta">@Valid</span> CursorPageBaseReq request)</span> &#123;</span><br><span class="line"><span class="comment">//        black(request);</span></span><br><span class="line">        </span><br><span class="line">        CursorPageBaseResp&lt;ChatMemberResp&gt; memberPage = chatService.getMemberPage(request);</span><br><span class="line">        <span class="comment">//过滤黑名单用户</span></span><br><span class="line">        filterBlackMember(memberPage);</span><br><span class="line">        <span class="keyword">return</span> ApiResult.success(memberPage);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="Service层-11"   >          <a href="#Service层-11" class="heading-link"><i class="fas fa-link"></i></a><a href="#Service层-11" class="headerlink" title="Service层"></a>Service层</h6>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CursorPageBaseResp&lt;ChatMemberResp&gt; <span class="title function_">getMemberPage</span><span class="params">(CursorPageBaseReq request)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> CursorPageBaseResp&lt;ChatMemberResp&gt; <span class="title function_">getMemberPage</span><span class="params">(CursorPageBaseReq request)</span> &#123;</span><br><span class="line">    <span class="comment">//根据游标位置获取一个pair页</span></span><br><span class="line">    Pair&lt;ChatActiveStatusEnum, String&gt; pair = ChatMemberHelper.getCursorPair(request.getCursor());</span><br><span class="line">    <span class="comment">//页获取在线状态 Key:Online/offLine</span></span><br><span class="line">    <span class="type">ChatActiveStatusEnum</span> <span class="variable">activeStatusEnum</span> <span class="operator">=</span> pair.getKey();</span><br><span class="line">    <span class="comment">//游标的当前位置</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">timeCursor</span> <span class="operator">=</span> pair.getValue();</span><br><span class="line">    List&lt;ChatMemberResp&gt; resultList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//最终列表</span></span><br><span class="line">    <span class="comment">//判断是否是最后一页，默认不是</span></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">isLast</span> <span class="operator">=</span> Boolean.FALSE;</span><br><span class="line">    <span class="keyword">if</span> (activeStatusEnum == ChatActiveStatusEnum.ONLINE) &#123;<span class="comment">//在线列表</span></span><br><span class="line">        CursorPageBaseResp&lt;Pair&lt;Long, Double&gt;&gt; cursorPage = userCache.getOnlineCursorPage(<span class="keyword">new</span> <span class="title class_">CursorPageBaseReq</span>(request.getPageSize(), timeCursor));</span><br><span class="line">        resultList.addAll(memberAdapter.buildMember(cursorPage.getList(), ChatActiveStatusEnum.ONLINE));<span class="comment">//添加在线列表</span></span><br><span class="line">        <span class="keyword">if</span> (cursorPage.getIsLast()) &#123;<span class="comment">//如果是最后一页,从离线列表再补点数据</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">leftSize</span> <span class="operator">=</span> request.getPageSize() - cursorPage.getList().size();</span><br><span class="line">            cursorPage = userCache.getOfflineCursorPage(<span class="keyword">new</span> <span class="title class_">CursorPageBaseReq</span>(leftSize, <span class="literal">null</span>));</span><br><span class="line">            resultList.addAll(memberAdapter.buildMember(cursorPage.getList(), ChatActiveStatusEnum.OFFLINE));<span class="comment">//添加离线线列表</span></span><br><span class="line">            activeStatusEnum = ChatActiveStatusEnum.OFFLINE;</span><br><span class="line">        &#125;</span><br><span class="line">        timeCursor = cursorPage.getCursor();</span><br><span class="line">        isLast = cursorPage.getIsLast();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (activeStatusEnum == ChatActiveStatusEnum.OFFLINE) &#123;<span class="comment">//离线列表</span></span><br><span class="line">        CursorPageBaseResp&lt;Pair&lt;Long, Double&gt;&gt; cursorPage = userCache.getOfflineCursorPage(<span class="keyword">new</span> <span class="title class_">CursorPageBaseReq</span>(request.getPageSize(), timeCursor));</span><br><span class="line">        resultList.addAll(memberAdapter.buildMember(cursorPage.getList(), ChatActiveStatusEnum.OFFLINE));<span class="comment">//添加离线线列表</span></span><br><span class="line">        timeCursor = cursorPage.getCursor();</span><br><span class="line">        isLast = cursorPage.getIsLast();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//组装结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CursorPageBaseResp</span>&lt;&gt;(ChatMemberHelper.generateCursor(activeStatusEnum, timeCursor), isLast, resultList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="getCurOrPageByRedis"   >          <a href="#getCurOrPageByRedis" class="heading-link"><i class="fas fa-link"></i></a><a href="#getCurOrPageByRedis" class="headerlink" title="getCurOrPageByRedis"></a>getCurOrPageByRedis</h6>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; CursorPageBaseResp&lt;Pair&lt;T, Double&gt;&gt; <span class="title function_">getCursorPageByRedis</span><span class="params">(CursorPageBaseReq cursorPageBaseReq, String redisKey, Function&lt;String, T&gt; typeConvert)</span> &#123;</span><br><span class="line">    Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; typedTuples;</span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isBlank(cursorPageBaseReq.getCursor())) &#123;<span class="comment">//第一次</span></span><br><span class="line">        typedTuples = RedisUtils.zReverseRangeWithScores(redisKey, cursorPageBaseReq.getPageSize());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        typedTuples = RedisUtils.zReverseRangeByScoreWithScores(redisKey, Double.parseDouble(cursorPageBaseReq.getCursor()), cursorPageBaseReq.getPageSize());</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Pair&lt;T, Double&gt;&gt; result = typedTuples</span><br><span class="line">            .stream()</span><br><span class="line">            .map(t -&gt; Pair.of(typeConvert.apply(t.getValue()), t.getScore()))</span><br><span class="line">            .sorted((o1, o2) -&gt; o2.getValue().compareTo(o1.getValue()))</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line">    <span class="type">String</span> <span class="variable">cursor</span> <span class="operator">=</span> Optional.ofNullable(CollectionUtil.getLast(result))</span><br><span class="line">            .map(Pair::getValue)</span><br><span class="line">            .map(String::valueOf)</span><br><span class="line">            .orElse(<span class="literal">null</span>);</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">isLast</span> <span class="operator">=</span> result.size() != cursorPageBaseReq.getPageSize();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CursorPageBaseResp</span>&lt;&gt;(cursor, isLast, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="流程-12"   >          <a href="#流程-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程-12" class="headerlink" title="流程"></a>流程</h6>      <p><strong>利用Zset的属性</strong>  </p><p><em>Redis命令  Zrange  key min max 天然具有分页属性</em></p><p>①获取一个游标分页，然后判断是不是在线状态，是不是在线状态最后一页</p><p>②如果是在线状态且不是最后一页，那从UserCache中找在线状态用户缓存添加到返回列表，更新游标位置</p><p>③如果是在线状态且是最后一页，那从UserCache中找在线用户缓存，然后判断用户数够不够，不够从离线用户中补一部分数据，更新游标位置</p><p>④如果是离线，从UserCache中找离线用户缓存</p><p>⑤最后过滤黑名单用户 返回给前端</p>        <h5 id="的群成员列表"   >          <a href="#的群成员列表" class="heading-link"><i class="fas fa-link"></i></a><a href="#的群成员列表" class="headerlink" title="@的群成员列表"></a>@的群成员列表</h5>      <div class="table-container"><table><thead><tr><th>URI</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;chat&#x2F;member&#x2F;list</td><td>GET请求</td></tr></tbody></table></div>        <h6 id="Controller层-14"   >          <a href="#Controller层-14" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-14" class="headerlink" title="Controller层"></a>Controller层</h6>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GetMapping(<span class="string">&quot;/member/list&quot;</span>)</span><br><span class="line"><span class="meta">@ApiOperation(&quot;房间内的所有群成员列表-@专用&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;List&lt;ChatMemberListResp&gt;&gt; <span class="title function_">getMemberList</span><span class="params">(<span class="meta">@Valid</span> ChatMessageMemberReq chatMessageMemberReq)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ApiResult.success(chatService.getMemberList(chatMessageMemberReq));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="Service层-12"   >          <a href="#Service层-12" class="heading-link"><i class="fas fa-link"></i></a><a href="#Service层-12" class="headerlink" title="Service层"></a>Service层</h6>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ChatMemberListResp&gt; <span class="title function_">getMemberList</span><span class="params">(ChatMessageMemberReq chatMessageMemberReq)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Cacheable(cacheNames = &quot;member&quot;, key = &quot;&#x27;memberList.&#x27;+#req.roomId&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;ChatMemberListResp&gt; <span class="title function_">getMemberList</span><span class="params">(ChatMessageMemberReq req)</span> &#123;</span><br><span class="line">    <span class="comment">//判断房间号和请求房间ID是否相同</span></span><br><span class="line">    <span class="keyword">if</span> (Objects.equals(<span class="number">1L</span>, req.getRoomId())) &#123;<span class="comment">//大群聊可看见所有人</span></span><br><span class="line">        <span class="keyword">return</span> userDao.getMemberList()</span><br><span class="line">                .stream()</span><br><span class="line">                .map(a -&gt; &#123;</span><br><span class="line">                    <span class="type">ChatMemberListResp</span> <span class="variable">resp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChatMemberListResp</span>();</span><br><span class="line">                    BeanUtils.copyProperties(a, resp);</span><br><span class="line">                    resp.setUid(a.getId());</span><br><span class="line">                    <span class="keyword">return</span> resp;</span><br><span class="line">                &#125;).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="getMemberList"   >          <a href="#getMemberList" class="heading-link"><i class="fas fa-link"></i></a><a href="#getMemberList" class="headerlink" title="getMemberList"></a>getMemberList</h6>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询用户状态正常，然后按照活跃时间倒数排列的1000人列表，select ID，name，和头像 以列表返回</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getMemberList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lambdaQuery()</span><br><span class="line">            .eq(User::getStatus, NormalOrNoEnum.NORMAL.getStatus())</span><br><span class="line">            .orderByDesc(User::getUpdateTime)<span class="comment">//最近活跃的1000个人，可以用lastOptTime字段，但是该字段没索引，updateTime可平替</span></span><br><span class="line">            .last(<span class="string">&quot;limit 1000&quot;</span>)<span class="comment">//毕竟是大群聊，人数需要做个限制</span></span><br><span class="line">            .select(User::getId, User::getName, User::getAvatar)</span><br><span class="line">            .list();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="流程-13"   >          <a href="#流程-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程-13" class="headerlink" title="流程"></a>流程</h6>      <p>1.判断是不是公共群聊</p><p>2.如果是则查询活跃的1000人的头像，id，昵称且以活跃时间倒序排序</p><p><strong>@用户没有用到游标</strong></p>        <h3 id="消息模块"   >          <a href="#消息模块" class="heading-link"><i class="fas fa-link"></i></a><a href="#消息模块" class="headerlink" title="消息模块"></a>消息模块</h3>              <h4 id="消息列表"   >          <a href="#消息列表" class="heading-link"><i class="fas fa-link"></i></a><a href="#消息列表" class="headerlink" title="消息列表"></a>消息列表</h4>      <div class="table-container"><table><thead><tr><th>URI</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;chat&#x2F;public&#x2F;msg&#x2F;page</td><td>GET请求</td></tr></tbody></table></div>        <h5 id="Controller层-15"   >          <a href="#Controller层-15" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-15" class="headerlink" title="Controller层"></a>Controller层</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/public/msg/page&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;消息列表&quot;)</span></span><br><span class="line">    <span class="meta">@FrequencyControl(time = 120, count = 20, target = FrequencyControl.Target.IP)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;CursorPageBaseResp&lt;ChatMessageResp&gt;&gt; <span class="title function_">getMsgPage</span><span class="params">(<span class="meta">@Valid</span> ChatMessagePageReq request)</span> &#123;</span><br><span class="line"><span class="comment">//        black(request);</span></span><br><span class="line">        CursorPageBaseResp&lt;ChatMessageResp&gt; msgPage = chatService.getMsgPage(request, RequestHolder.get().getUid());</span><br><span class="line">        <span class="comment">//过滤空消息</span></span><br><span class="line">        filterBlackMsg(msgPage);</span><br><span class="line">        <span class="keyword">return</span> ApiResult.success(msgPage);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="service层"   >          <a href="#service层" class="heading-link"><i class="fas fa-link"></i></a><a href="#service层" class="headerlink" title="service层"></a>service层</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CursorPageBaseResp&lt;ChatMessageResp&gt; <span class="title function_">getMsgPage</span><span class="params">(ChatMessagePageReq request, <span class="meta">@Nullable</span> Long receiveUid)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> CursorPageBaseResp&lt;ChatMessageResp&gt; <span class="title function_">getMsgPage</span><span class="params">(ChatMessagePageReq request, Long receiveUid)</span> &#123;</span><br><span class="line">    CursorPageBaseResp&lt;Message&gt; cursorPage = messageDao.getCursorPage(request.getRoomId(), request);</span><br><span class="line">    <span class="comment">//判断返回页是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (cursorPage.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">//抛出异常</span></span><br><span class="line">        <span class="keyword">return</span> CursorPageBaseResp.empty();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">return</span> CursorPageBaseResp.init(cursorPage, getMsgRespBatch(cursorPage.getList(), receiveUid));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="getCursorPage-1"   >          <a href="#getCursorPage-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#getCursorPage-1" class="headerlink" title="getCursorPage"></a>getCursorPage</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> CursorPageBaseResp&lt;Message&gt; <span class="title function_">getCursorPage</span><span class="params">(Long roomId, CursorPageBaseReq request)</span> &#123;</span><br><span class="line">    <span class="comment">//传入参数1.RoomId 2.游标翻页请求</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//拼接查询条件 roomid==room_id,消息status(正常)==status</span></span><br><span class="line">    <span class="comment">//SELECT COUNT(1) FROM message WHERE (room_id = ? AND status = ?)</span></span><br><span class="line">    <span class="keyword">return</span> cursorUtils.getCursorPageByMysql(<span class="built_in">this</span>, request, wrapper -&gt; &#123;</span><br><span class="line">            wrapper.eq(Message::getRoomId, roomId);</span><br><span class="line">            wrapper.eq(Message::getStatus, MessageStatusEnum.NORMAL.getStatus());</span><br><span class="line">        &#125;, Message::getId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="getCursorPageByMysql-1"   >          <a href="#getCursorPageByMysql-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#getCursorPageByMysql-1" class="headerlink" title="getCursorPageByMysql"></a>getCursorPageByMysql</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据游标位置倒序查找Mysql</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; CursorPageBaseResp&lt;T&gt; <span class="title function_">getCursorPageByMysql</span><span class="params">(IService&lt;T&gt; mapper, CursorPageBaseReq request, Consumer&lt;LambdaQueryWrapper&lt;T&gt;&gt; initWrapper, SFunction&lt;T, ?&gt; cursorColumn)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;T&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        initWrapper.accept(wrapper);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(request.getCursor())) &#123;</span><br><span class="line">            wrapper.lt(cursorColumn, request.getCursor());</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据id倒叙排序 </span></span><br><span class="line">        wrapper.orderByDesc(cursorColumn);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据规定页10条</span></span><br><span class="line">        Page&lt;T&gt; page = mapper.page(request.plusPage(), wrapper);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cursor</span> <span class="operator">=</span> Optional.ofNullable(CollectionUtil.getLast(page.getRecords()))</span><br><span class="line">                .map(cursorColumn)</span><br><span class="line">                .map(String::valueOf)</span><br><span class="line">                .orElse(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">isLast</span> <span class="operator">=</span> page.getRecords().size() != request.getPageSize();</span><br><span class="line">    <span class="comment">//返回游标，是否为最终页，数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CursorPageBaseResp</span>&lt;&gt;(cursor, isLast, page.getRecords());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="流程-14"   >          <a href="#流程-14" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程-14" class="headerlink" title="流程"></a>流程</h5>      <p>利用游标思想，每次移动10条，然后返回给前端消息</p>        <h4 id="发送消息"   >          <a href="#发送消息" class="heading-link"><i class="fas fa-link"></i></a><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4>      <div class="table-container"><table><thead><tr><th>URI</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;chat&#x2F;msg</td><td>POST请求</td></tr></tbody></table></div>        <h5 id="Controller层-16"   >          <a href="#Controller层-16" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-16" class="headerlink" title="Controller层"></a>Controller层</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/msg&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;发送消息&quot;)</span></span><br><span class="line"><span class="meta">@FrequencyControl(time = 5, count = 3, target = FrequencyControl.Target.UID)</span></span><br><span class="line"><span class="meta">@FrequencyControl(time = 30, count = 5, target = FrequencyControl.Target.UID)</span></span><br><span class="line"><span class="meta">@FrequencyControl(time = 60, count = 10, target = FrequencyControl.Target.UID)</span></span><br><span class="line"><span class="keyword">public</span> ApiResult&lt;ChatMessageResp&gt; <span class="title function_">sendMsg</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> ChatMessageReq request)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">msgId</span> <span class="operator">=</span> chatService.sendMsg(request, RequestHolder.get().getUid());</span><br><span class="line">    <span class="comment">//返回完整消息格式，方便前端展示</span></span><br><span class="line">    <span class="keyword">return</span> ApiResult.success(chatService.getMsgResp(msgId, RequestHolder.get().getUid()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="Service层-13"   >          <a href="#Service层-13" class="heading-link"><i class="fas fa-link"></i></a><a href="#Service层-13" class="headerlink" title="Service层"></a>Service层</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Long <span class="title function_">sendMsg</span><span class="params">(ChatMessageReq request, Long uid)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Long <span class="title function_">sendMsg</span><span class="params">(ChatMessageReq request, Long uid)</span> &#123;</span><br><span class="line">    <span class="type">AbstractMsgHandler</span> <span class="variable">msgHandler</span> <span class="operator">=</span> MsgHandlerFactory.getStrategyNoNull(request.getMsgType());<span class="comment">//todo 这里先不扩展，后续再改</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//检查消息体和uid</span></span><br><span class="line">    msgHandler.checkMsg(request, uid);</span><br><span class="line">    <span class="comment">//同步获取消息的跳转链接标题</span></span><br><span class="line">    <span class="type">Message</span> <span class="variable">insert</span> <span class="operator">=</span> MessageAdapter.buildMsgSave(request, uid);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//保存到数据库中 </span></span><br><span class="line">    <span class="comment">//Preparing: INSERT INTO message ( room_id, from_uid, status, type ) VALUES ( ?, ?, ?, ? )</span></span><br><span class="line">    messageDao.save(insert);</span><br><span class="line">    </span><br><span class="line">    msgHandler.saveMsg(insert, request);</span><br><span class="line">    <span class="comment">//发布消息发送事件</span></span><br><span class="line">    applicationEventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">MessageSendEvent</span>(<span class="built_in">this</span>, insert.getId()));</span><br><span class="line">    <span class="comment">//返回消息ID</span></span><br><span class="line">    <span class="keyword">return</span> insert.getId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="流程-15"   >          <a href="#流程-15" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程-15" class="headerlink" title="流程"></a>流程</h5>      <p>①检查消息请求和uid</p><p>②新增一条消息记录存放到消息库中<del>Message</del></p><p>③发布消息发送事件</p>        <h4 id="标记消息"   >          <a href="#标记消息" class="heading-link"><i class="fas fa-link"></i></a><a href="#标记消息" class="headerlink" title="标记消息"></a>标记消息</h4>      <div class="table-container"><table><thead><tr><th>URI</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;chat&#x2F;msg&#x2F;mark</td><td></td></tr></tbody></table></div>        <h5 id="Controller层-17"   >          <a href="#Controller层-17" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-17" class="headerlink" title="Controller层"></a>Controller层</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping(&quot;/msg/mark&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;消息标记&quot;)</span></span><br><span class="line">    <span class="meta">@FrequencyControl(time = 10, count = 5, target = FrequencyControl.Target.UID)</span></span><br><span class="line">    <span class="keyword">public</span> ApiResult&lt;Void&gt; <span class="title function_">setMsgMark</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> ChatMessageMarkReq request)</span> &#123;</span><br><span class="line">        chatService.setMsgMark(RequestHolder.get().getUid(), request);</span><br><span class="line">        <span class="keyword">return</span> ApiResult.success();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="Service层-14"   >          <a href="#Service层-14" class="heading-link"><i class="fas fa-link"></i></a><a href="#Service层-14" class="headerlink" title="Service层"></a>Service层</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">setMsgMark</span><span class="params">(Long uid, ChatMessageMarkReq request)</span>;</span><br></pre></td></tr></table></div></figure><p>实现类中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@RedissonLock(key = &quot;#uid&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsgMark</span><span class="params">(Long uid, ChatMessageMarkReq request)</span> &#123;</span><br><span class="line">    <span class="comment">//private Integer markType; 1为点赞2为举报</span></span><br><span class="line">    <span class="type">AbstractMsgMarkStrategy</span> <span class="variable">strategy</span> <span class="operator">=</span> MsgMarkFactory.getStrategyNoNull(request.getMarkType());</span><br><span class="line">    <span class="comment">//判断请求的动作类型标记</span></span><br><span class="line">    <span class="keyword">switch</span> (MessageMarkActTypeEnum.of(request.getActType())) &#123;</span><br><span class="line">         <span class="comment">//SELECT COUNT( 1 ) FROM message_mark WHERE (msg_id = ? AND type = ? AND status = ?)</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment">//确认标记</span></span><br><span class="line">        <span class="keyword">case</span> MARK:</span><br><span class="line">            strategy.mark(uid, request.getMsgId());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//取消标记</span></span><br><span class="line">        <span class="keyword">case</span> UN_MARK:</span><br><span class="line">            strategy.unMark(uid, request.getMsgId());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="mark"   >          <a href="#mark" class="heading-link"><i class="fas fa-link"></i></a><a href="#mark" class="headerlink" title="mark"></a>mark</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mark</span><span class="params">(Long uid, Long msgId)</span> &#123;</span><br><span class="line"> <span class="comment">//传入uid,msgId 且因为是mark 所以是确认标记类型</span></span><br><span class="line">    doMark(uid, msgId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="doMark"   >          <a href="#doMark" class="heading-link"><i class="fas fa-link"></i></a><a href="#doMark" class="headerlink" title="doMark"></a>doMark</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doMark</span><span class="params">(Long uid, Long msgId)</span> &#123;</span><br><span class="line"> <span class="comment">//传入用户uid,msgId,标记类型</span></span><br><span class="line">    exec(uid, msgId, MessageMarkActTypeEnum.MARK);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="exec"   >          <a href="#exec" class="heading-link"><i class="fas fa-link"></i></a><a href="#exec" class="headerlink" title="exec"></a>exec</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">exec</span><span class="params">(Long uid, Long msgId, MessageMarkActTypeEnum actTypeEnum)</span> &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">markType</span> <span class="operator">=</span> getTypeEnum().getType();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">actType</span> <span class="operator">=</span> actTypeEnum.getType();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查询老的mark</span></span><br><span class="line">    <span class="comment">//SELECT COUNT( 1 ) FROM message_mark WHERE (msg_id = ? AND type = ? AND status = ?)</span></span><br><span class="line">    <span class="type">MessageMark</span> <span class="variable">oldMark</span> <span class="operator">=</span> messageMarkDao.get(uid, msgId, markType);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(oldMark) &amp;&amp; actTypeEnum == MessageMarkActTypeEnum.UN_MARK) &#123;</span><br><span class="line">        <span class="comment">//取消的类型，数据库一定有记录，没有就直接跳过操作</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入一条新消息,或者修改一条消息</span></span><br><span class="line">    <span class="type">MessageMark</span> <span class="variable">insertOrUpdate</span> <span class="operator">=</span> MessageMark.builder()</span><br><span class="line">            .id(Optional.ofNullable(oldMark).map(MessageMark::getId).orElse(<span class="literal">null</span>))</span><br><span class="line">            .uid(uid)</span><br><span class="line">            .msgId(msgId)</span><br><span class="line">            .type(markType)</span><br><span class="line">            .status(transformAct(actType))</span><br><span class="line">            .build();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//UPDATE message_mark SET msg_id=?, uid=?, type=?, status=? WHERE id=?</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">modify</span> <span class="operator">=</span> messageMarkDao.saveOrUpdate(insertOrUpdate);</span><br><span class="line">    <span class="keyword">if</span> (modify) &#123;</span><br><span class="line">        <span class="comment">//修改成功才发布消息标记事件</span></span><br><span class="line">        <span class="type">ChatMessageMarkDTO</span> <span class="variable">dto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChatMessageMarkDTO</span>(uid, msgId, markType, actType);</span><br><span class="line">        applicationEventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">MessageMarkEvent</span>(<span class="built_in">this</span>, dto));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="流程-16"   >          <a href="#流程-16" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程-16" class="headerlink" title="流程"></a>流程</h5>      <p>①获取消息标记的种类(点赞&#x2F;举报)</p><p>②判断执行标记消息的动作(添加、移除)</p><p>③执行相应的动作</p><ul><li>添加标记 则插入一条记录到消息标记库<del>Message_Mark</del>，包含消息标记的种类以及uid，状态等</li><li>删除标记 先判断消息标记库中是否有这条对应的添加消息的记录，如果不存在直接返回，如果存在则修改消息标记的状态</li></ul><p>④执行完修改消息库标记库之后，再发布标记消息事件</p>        <h4 id="撤回消息"   >          <a href="#撤回消息" class="heading-link"><i class="fas fa-link"></i></a><a href="#撤回消息" class="headerlink" title="撤回消息"></a>撤回消息</h4>      <div class="table-container"><table><thead><tr><th>URI</th><th>请求类型</th></tr></thead><tbody><tr><td>&#x2F;capi&#x2F;chat&#x2F;msg&#x2F;recall</td><td>PUT请求</td></tr></tbody></table></div>        <h5 id="Controller层-18"   >          <a href="#Controller层-18" class="heading-link"><i class="fas fa-link"></i></a><a href="#Controller层-18" class="headerlink" title="Controller层"></a>Controller层</h5>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@PutMapping(&quot;/msg/recall&quot;)</span><br><span class="line">   @ApiOperation(&quot;撤回消息&quot;)</span><br><span class="line">   @FrequencyControl(time = 20, count = 3, target = FrequencyControl.Target.UID)</span><br><span class="line">   public ApiResult&lt;Void&gt; recallMsg(@Valid @RequestBody ChatMessageBaseReq request) &#123;</span><br><span class="line">       chatService.recallMsg(RequestHolder.get().getUid(), request);</span><br><span class="line">       return ApiResult.success();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="Service层-15"   >          <a href="#Service层-15" class="heading-link"><i class="fas fa-link"></i></a><a href="#Service层-15" class="headerlink" title="Service层"></a>Service层</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">recallMsg</span><span class="params">(Long uid, ChatMessageBaseReq request)</span>;</span><br></pre></td></tr></table></div></figure><p><strong>实现类中</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recallMsg</span><span class="params">(Long uid, ChatMessageBaseReq request)</span> &#123;</span><br><span class="line">    <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> messageDao.getById(request.getMsgId());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//校验能不能执行撤回    </span></span><br><span class="line">    <span class="comment">//SELECT id,room_id,from_uid,content,reply_msg_id,status,gap_count,type,extra,create_time,update_time FROM message WHERE id=?</span></span><br><span class="line">    checkRecall(uid, message);</span><br><span class="line">    <span class="comment">//执行消息撤回</span></span><br><span class="line">    recallMsgHandler.recall(uid, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="checkRecall"   >          <a href="#checkRecall" class="heading-link"><i class="fas fa-link"></i></a><a href="#checkRecall" class="headerlink" title="checkRecall"></a>checkRecall</h5>      <p> <strong>检验消息的撤回权限</strong></p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkRecall</span><span class="params">(Long uid, Message message)</span> &#123;</span><br><span class="line">    AssertUtil.isNotEmpty(message, <span class="string">&quot;消息有误&quot;</span>);</span><br><span class="line">    AssertUtil.notEqual(message.getType(), MessageTypeEnum.RECALL, <span class="string">&quot;消息无法撤回&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果不是超级管理员不能撤回</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">hasPower</span> <span class="operator">=</span> iRoleService.hasPower(uid, RoleEnum.CHAT_MANAGER);</span><br><span class="line">    <span class="keyword">if</span> (hasPower) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//运行到这里！hasPower即不是超级管理员用户</span></span><br><span class="line">    <span class="comment">//判断self 即这个消息是不是当前uid发送</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">self</span> <span class="operator">=</span> Objects.equals(uid, message.getFromUid());</span><br><span class="line"> <span class="comment">//为false说明不是当前用户发送 </span></span><br><span class="line">    AssertUtil.isTrue(self, <span class="string">&quot;抱歉,您没有权限&quot;</span>);</span><br><span class="line">    <span class="comment">//判断修改时间和当前时间差距是不是两分钟内</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">between</span> <span class="operator">=</span> DateUtil.between(message.getCreateTime(), <span class="keyword">new</span> <span class="title class_">Date</span>(), DateUnit.MINUTE);</span><br><span class="line">    AssertUtil.isTrue(between &lt; <span class="number">2</span>, <span class="string">&quot;覆水难收，超过2分钟的消息不能撤回哦~~&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="recall"   >          <a href="#recall" class="heading-link"><i class="fas fa-link"></i></a><a href="#recall" class="headerlink" title="recall"></a>recall</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recall</span><span class="params">(Long recallUid, Message message)</span> &#123;<span class="comment">//todo 消息覆盖问题用版本号解决</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获得扩展字段</span></span><br><span class="line">    <span class="type">MessageExtra</span> <span class="variable">extra</span> <span class="operator">=</span> message.getExtra();</span><br><span class="line">        extra.setRecall(<span class="keyword">new</span> <span class="title class_">MsgRecall</span>(recallUid, <span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br><span class="line">    </span><br><span class="line">        <span class="type">Message</span> <span class="variable">update</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>();</span><br><span class="line">    <span class="comment">//设置Id，设置更新类型为撤回类型</span></span><br><span class="line">    update.setId(message.getId());</span><br><span class="line">        <span class="comment">//UPDATE message SET type=?, extra=? WHERE id=?  </span></span><br><span class="line">    <span class="comment">//注入撤回消息类型、消息中的扩展字段</span></span><br><span class="line">        update.setType(MessageTypeEnum.RECALL.getType());</span><br><span class="line">        update.setExtra(extra);</span><br><span class="line">    <span class="comment">//更新消息表</span></span><br><span class="line">        messageDao.updateById(update);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//发布撤回消息事件</span></span><br><span class="line">        applicationEventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">MessageRecallEvent</span>(<span class="built_in">this</span>, <span class="keyword">new</span> <span class="title class_">ChatMsgRecallDTO</span>(message.getId(), message.getRoomId(), recallUid)));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="流程-17"   >          <a href="#流程-17" class="heading-link"><i class="fas fa-link"></i></a><a href="#流程-17" class="headerlink" title="流程"></a>流程</h5>      <p>①检验消息能否被撤回  </p><p><em>判断条件</em></p><ul><li>1)如果是超级管理员则有权限撤回 </li><li>2)如果不是超级管理员判断是否为当前UID用户发送的消息，如果不是则不能撤回</li><li>3)不是超级管理员且是当前用户发送消息，判断发送时间是否超过两分钟，如果是则不能撤回</li></ul><p>②执行消息撤回</p><p>将消息的类型设置为Recall类型，也即撤回消息类型 </p><p>③发布消息撤回事件</p>        <h2 id="监听器"   >          <a href="#监听器" class="heading-link"><i class="fas fa-link"></i></a><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2>      <p>我们先统计一下前面的模块究竟发布了哪些事件用于被监听呢?我们用一张表格来总结</p><div class="table-container"><table><thead><tr><th>模块</th><th>事件</th></tr></thead><tbody><tr><td>User</td><td>用户拉黑事件</td></tr><tr><td>User</td><td>用户上线事件</td></tr><tr><td>User</td><td>用户下线事件</td></tr><tr><td>User</td><td>用户注册事件</td></tr><tr><td>Message</td><td>消息发送事件</td></tr><tr><td>Message</td><td>消息标记事件</td></tr><tr><td>Message</td><td>消息撤回事件</td></tr><tr><td>UserItem</td><td>物品发放事件</td></tr></tbody></table></div><p>暂且也就这些，所以接下来我要从两个模块开始分析这个监听器究竟做了什么事</p>        <h3 id="User模块"   >          <a href="#User模块" class="heading-link"><i class="fas fa-link"></i></a><a href="#User模块" class="headerlink" title="User模块"></a>User模块</h3>              <h4 id="用户拉黑事件"   >          <a href="#用户拉黑事件" class="heading-link"><i class="fas fa-link"></i></a><a href="#用户拉黑事件" class="headerlink" title="用户拉黑事件"></a>用户拉黑事件</h4>              <h5 id="刷新缓存-Tomcat和Redis"   >          <a href="#刷新缓存-Tomcat和Redis" class="heading-link"><i class="fas fa-link"></i></a><a href="#刷新缓存-Tomcat和Redis" class="headerlink" title="刷新缓存(Tomcat和Redis)"></a>刷新缓存(Tomcat和Redis)</h5>      <p>刷新Caffeine和Redis中的用户信息缓存</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步执行</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="meta">@EventListener(classes = UserBlackEvent.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refreshRedis</span><span class="params">(UserBlackEvent event)</span> &#123;</span><br><span class="line">    userCache.evictBlackMap();</span><br><span class="line">    userCache.remove(event.getUser().getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="evictBlackMap"   >          <a href="#evictBlackMap" class="heading-link"><i class="fas fa-link"></i></a><a href="#evictBlackMap" class="headerlink" title="evictBlackMap"></a>evictBlackMap</h6>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除Caffeine中的用户数据</span></span><br><span class="line"><span class="meta">@CacheEvict(cacheNames = &quot;user&quot;, key = &quot;&#x27;blackList&#x27;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Integer, Set&lt;String&gt;&gt; <span class="title function_">evictBlackMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="remove"   >          <a href="#remove" class="heading-link"><i class="fas fa-link"></i></a><a href="#remove" class="headerlink" title="remove"></a>remove</h6>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除Redis缓存中的用户数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">onlineKey</span> <span class="operator">=</span> RedisKey.getKey(RedisKey.ONLINE_UID_ZET);</span><br><span class="line">        <span class="type">String</span> <span class="variable">offlineKey</span> <span class="operator">=</span> RedisKey.getKey(RedisKey.OFFLINE_UID_ZET);</span><br><span class="line">        <span class="comment">//移除离线表</span></span><br><span class="line">        RedisUtils.zRemove(offlineKey, uid);</span><br><span class="line">        <span class="comment">//移除上线表</span></span><br><span class="line">        RedisUtils.zRemove(onlineKey, uid);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="删除消息"   >          <a href="#删除消息" class="heading-link"><i class="fas fa-link"></i></a><a href="#删除消息" class="headerlink" title="删除消息"></a>删除消息</h5>      <p>删除该uid的所有消息</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span> <span class="comment">//表示异步</span></span><br><span class="line">   <span class="meta">@EventListener(classes = UserBlackEvent.class)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteMsg</span><span class="params">(UserBlackEvent event)</span> &#123;</span><br><span class="line">       messageDao.invalidByUid(event.getUser().getId());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="deleteMsg"   >          <a href="#deleteMsg" class="heading-link"><i class="fas fa-link"></i></a><a href="#deleteMsg" class="headerlink" title="deleteMsg"></a>deleteMsg</h6>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将拉黑用户的消息类型置为删除状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invalidByUid</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">        lambdaUpdate()</span><br><span class="line">                .eq(Message::getFromUid, uid)</span><br><span class="line">                .set(Message::getStatus, MessageStatusEnum.DELETE.getStatus())</span><br><span class="line">                .update();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="推送拉黑"   >          <a href="#推送拉黑" class="heading-link"><i class="fas fa-link"></i></a><a href="#推送拉黑" class="headerlink" title="推送拉黑"></a>推送拉黑</h5>      <p>推送给所有在线用户，该uid的用户已经被拉黑</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="meta">@EventListener(classes = UserBlackEvent.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendPush</span><span class="params">(UserBlackEvent event)</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">uid</span> <span class="operator">=</span> event.getUser().getId();</span><br><span class="line">    WSBaseResp&lt;WSBlack&gt; resp = <span class="keyword">new</span> <span class="title class_">WSBaseResp</span>&lt;&gt;();</span><br><span class="line">    <span class="type">WSBlack</span> <span class="variable">black</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WSBlack</span>(uid);</span><br><span class="line">    resp.setData(black);</span><br><span class="line">    resp.setType(WSRespTypeEnum.BLACK.getType());</span><br><span class="line">    webSocketService.sendToAllOnline(resp, uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="用户上线事件"   >          <a href="#用户上线事件" class="heading-link"><i class="fas fa-link"></i></a><a href="#用户上线事件" class="headerlink" title="用户上线事件"></a>用户上线事件</h4>              <h5 id="更新缓存以及上线推送"   >          <a href="#更新缓存以及上线推送" class="heading-link"><i class="fas fa-link"></i></a><a href="#更新缓存以及上线推送" class="headerlink" title="更新缓存以及上线推送"></a>更新缓存以及上线推送</h5>      <p>更新Redis中的用户表，推送给所有在线用户该用户登录</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line">   <span class="meta">@EventListener(classes = UserOnlineEvent.class)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveRedisAndPush</span><span class="params">(UserOnlineEvent event)</span> &#123;</span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> event.getUser();</span><br><span class="line">       userCache.online(user.getId(), user.getLastOptTime());</span><br><span class="line">       <span class="comment">//推送给所有在线用户，该用户登录成功</span></span><br><span class="line">       webSocketService.sendToAllOnline(wsAdapter.buildOnlineNotifyResp(event.getUser()));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="online"   >          <a href="#online" class="heading-link"><i class="fas fa-link"></i></a><a href="#online" class="headerlink" title="online"></a>online</h6>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户上线</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">online</span><span class="params">(Long uid, Date optTime)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">onlineKey</span> <span class="operator">=</span> RedisKey.getKey(RedisKey.ONLINE_UID_ZET);</span><br><span class="line">       <span class="type">String</span> <span class="variable">offlineKey</span> <span class="operator">=</span> RedisKey.getKey(RedisKey.OFFLINE_UID_ZET);</span><br><span class="line">       <span class="comment">//移除离线表</span></span><br><span class="line">       RedisUtils.zRemove(offlineKey, uid);</span><br><span class="line">       <span class="comment">//更新上线表</span></span><br><span class="line">       RedisUtils.zAdd(onlineKey, uid, optTime.getTime());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="持久化"   >          <a href="#持久化" class="heading-link"><i class="fas fa-link"></i></a><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h5>      <p>持久化到数据库，更新IP地址以及操作时间</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="meta">@EventListener(classes = UserOnlineEvent.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveDB</span><span class="params">(UserOnlineEvent event)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> event.getUser();</span><br><span class="line">    <span class="type">User</span> <span class="variable">update</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    update.setId(user.getId());</span><br><span class="line">    update.setLastOptTime(user.getLastOptTime());</span><br><span class="line">    update.setIpInfo(user.getIpInfo());</span><br><span class="line">    userDao.updateById(update);</span><br><span class="line">    <span class="comment">//更新用户ip详情</span></span><br><span class="line">    ipService.refreshIpDetailAsync(user.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="refreshIpDetailAsync"   >          <a href="#refreshIpDetailAsync" class="heading-link"><i class="fas fa-link"></i></a><a href="#refreshIpDetailAsync" class="headerlink" title="refreshIpDetailAsync"></a>refreshIpDetailAsync</h6>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refreshIpDetailAsync</span><span class="params">(Long uid)</span> &#123;</span><br><span class="line">       EXECUTOR.execute(() -&gt; &#123;</span><br><span class="line">           <span class="comment">//获取用户数据</span></span><br><span class="line">           <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.getById(uid);</span><br><span class="line">           <span class="comment">//获取ip地址</span></span><br><span class="line">           <span class="type">IpInfo</span> <span class="variable">ipInfo</span> <span class="operator">=</span> user.getIpInfo();</span><br><span class="line">           <span class="comment">//判断ip是否为空</span></span><br><span class="line">           <span class="keyword">if</span> (Objects.isNull(ipInfo)) &#123;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           <span class="comment">//ip不为空判断是否是黑名单用户</span></span><br><span class="line">           <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> ipInfo.needRefreshIp();</span><br><span class="line">           <span class="keyword">if</span> (StrUtil.isBlank(ip)) &#123;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//ip不为空且不是黑名单用户 则更新缓存以及数据库中的Ip地址</span></span><br><span class="line">           <span class="type">IpDetail</span> <span class="variable">ipDetail</span> <span class="operator">=</span> TryGetIpDetailOrNullTreeTimes(ip);</span><br><span class="line">           <span class="keyword">if</span> (Objects.nonNull(ipDetail)) &#123;</span><br><span class="line">               ipInfo.refreshIpDetail(ipDetail);</span><br><span class="line">               <span class="type">User</span> <span class="variable">update</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">               update.setId(uid);</span><br><span class="line">               update.setIpInfo(ipInfo);</span><br><span class="line">               userDao.updateById(update);</span><br><span class="line">               userCache.userInfoChange(uid);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               log.error(<span class="string">&quot;get ip detail fail ip:&#123;&#125;,uid:&#123;&#125;&quot;</span>, ip, uid);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="用户下线事件"   >          <a href="#用户下线事件" class="heading-link"><i class="fas fa-link"></i></a><a href="#用户下线事件" class="headerlink" title="用户下线事件"></a>用户下线事件</h4>              <h5 id="更新缓存以及下线推送"   >          <a href="#更新缓存以及下线推送" class="heading-link"><i class="fas fa-link"></i></a><a href="#更新缓存以及下线推送" class="headerlink" title="更新缓存以及下线推送"></a>更新缓存以及下线推送</h5>      <p>用户下线与用户上线做的事情是一样的，所以这里不再赘述</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line">   <span class="meta">@EventListener(classes = UserOfflineEvent.class)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveRedisAndPush</span><span class="params">(UserOfflineEvent event)</span> &#123;</span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> event.getUser();</span><br><span class="line">       userCache.offline(user.getId(), user.getLastOptTime());</span><br><span class="line">       <span class="comment">//推送给所有在线用户，该用户下线</span></span><br><span class="line">       webSocketService.sendToAllOnline(wsAdapter.buildOfflineNotifyResp(event.getUser()), event.getUser().getId());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="持久化-1"   >          <a href="#持久化-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#持久化-1" class="headerlink" title="持久化"></a>持久化</h5>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line">   <span class="meta">@EventListener(classes = UserOfflineEvent.class)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveDB</span><span class="params">(UserOfflineEvent event)</span> &#123;</span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> event.getUser();</span><br><span class="line">       <span class="type">User</span> <span class="variable">update</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">       update.setId(user.getId());</span><br><span class="line">       update.setLastOptTime(user.getLastOptTime());</span><br><span class="line">       userDao.updateById(update);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="用户注册事件"   >          <a href="#用户注册事件" class="heading-link"><i class="fas fa-link"></i></a><a href="#用户注册事件" class="headerlink" title="用户注册事件"></a>用户注册事件</h4>              <h5 id="初始化用户背包"   >          <a href="#初始化用户背包" class="heading-link"><i class="fas fa-link"></i></a><a href="#初始化用户背包" class="headerlink" title="初始化用户背包"></a>初始化用户背包</h5>      <p>用户刚注册时候送了一张改名卡 可以用于改名</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Async</span><br><span class="line">   @EventListener(classes = UserRegisterEvent.class)</span><br><span class="line">   public void sendCard(UserRegisterEvent event) &#123;</span><br><span class="line">       User user = event.getUser();</span><br><span class="line">       //送一张改名卡</span><br><span class="line">       iUserBackpackService.acquireItem(user.getId(), ItemEnum.MODIFY_NAME_CARD.getId(), IdempotentEnum.UID, user.getId().toString());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="acquireItem"   >          <a href="#acquireItem" class="heading-link"><i class="fas fa-link"></i></a><a href="#acquireItem" class="headerlink" title="acquireItem"></a>acquireItem</h6>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发放改名卡  幂等号是为了防止多发以及消费时的不重复做保障  思路由三部分组成 1.物品ID 2.用户UID 3.订单号ID</span></span><br><span class="line">Override</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">acquireItem</span><span class="params">(Long uid, Long itemId, IdempotentEnum idempotentEnum, String businessId)</span> &#123;</span><br><span class="line">    <span class="comment">//组装幂等号 </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">idempotent</span> <span class="operator">=</span> getIdempotent(itemId, idempotentEnum, businessId);</span><br><span class="line">    userBackpackService.doAcquireItem(uid, itemId, idempotent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h6 id="doAcquireItem"   >          <a href="#doAcquireItem" class="heading-link"><i class="fas fa-link"></i></a><a href="#doAcquireItem" class="headerlink" title="doAcquireItem"></a>doAcquireItem</h6>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发放用户物品</span></span><br><span class="line"><span class="meta">@RedissonLock(key = &quot;#idempotent&quot;, waitTime = 5000)</span><span class="comment">//相同幂等如果同时发奖，需要排队等上一个执行完，取出之前数据返回</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAcquireItem</span><span class="params">(Long uid, Long itemId, String idempotent)</span> &#123;</span><br><span class="line">        <span class="type">UserBackpack</span> <span class="variable">userBackpack</span> <span class="operator">=</span> userBackpackDao.getByIdp(idempotent);</span><br><span class="line">        <span class="comment">//幂等检查</span></span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(userBackpack)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//业务检查</span></span><br><span class="line">        <span class="type">ItemConfig</span> <span class="variable">itemConfig</span> <span class="operator">=</span> itemCache.getById(itemId);</span><br><span class="line">        <span class="keyword">if</span> (ItemTypeEnum.BADGE.getType().equals(itemConfig.getType())) &#123;<span class="comment">//徽章类型做唯一性检查</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">countByValidItemId</span> <span class="operator">=</span> userBackpackDao.getCountByValidItemId(uid, itemId);</span><br><span class="line">            <span class="keyword">if</span> (countByValidItemId &gt; <span class="number">0</span>) &#123;<span class="comment">//已经有徽章了不发</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//发物品</span></span><br><span class="line">        <span class="type">UserBackpack</span> <span class="variable">insert</span> <span class="operator">=</span> UserBackpack.builder()</span><br><span class="line">                .uid(uid)</span><br><span class="line">                .itemId(itemId)</span><br><span class="line">                .status(YesOrNoEnum.NO.getStatus())</span><br><span class="line">                .idempotent(idempotent)</span><br><span class="line">                .build();</span><br><span class="line">        userBackpackDao.save(insert);</span><br><span class="line">        <span class="comment">//用户收到物品的事件</span></span><br><span class="line">        applicationEventPublisher.publishEvent(<span class="keyword">new</span> <span class="title class_">ItemReceiveEvent</span>(<span class="built_in">this</span>, insert));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>而这里多出来一个事件是物品发放事件，所以我们直接把它代码看了</p>        <h3 id="UserItem模块"   >          <a href="#UserItem模块" class="heading-link"><i class="fas fa-link"></i></a><a href="#UserItem模块" class="headerlink" title="UserItem模块"></a>UserItem模块</h3>              <h4 id="物品发放事件"   >          <a href="#物品发放事件" class="heading-link"><i class="fas fa-link"></i></a><a href="#物品发放事件" class="headerlink" title="物品发放事件"></a>物品发放事件</h4>      <p>发放之后直接默认佩戴，更新缓存以及数据库</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="meta">@EventListener(classes = ItemReceiveEvent.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">wear</span><span class="params">(ItemReceiveEvent event)</span> &#123;</span><br><span class="line">    <span class="type">UserBackpack</span> <span class="variable">userBackpack</span> <span class="operator">=</span> event.getUserBackpack();</span><br><span class="line">    <span class="type">ItemConfig</span> <span class="variable">itemConfig</span> <span class="operator">=</span> itemCache.getById(userBackpack.getItemId());</span><br><span class="line">    <span class="keyword">if</span> (ItemTypeEnum.BADGE.getType().equals(itemConfig.getType())) &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userDao.getById(userBackpack.getUid());</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(user.getItemId())) &#123;</span><br><span class="line">            userDao.wearingBadge(userBackpack.getUid(), userBackpack.getItemId());</span><br><span class="line">            userCache.userInfoChange(userBackpack.getUid());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="Message模块"   >          <a href="#Message模块" class="heading-link"><i class="fas fa-link"></i></a><a href="#Message模块" class="headerlink" title="Message模块"></a>Message模块</h3>              <h4 id="消息发送事件"   >          <a href="#消息发送事件" class="heading-link"><i class="fas fa-link"></i></a><a href="#消息发送事件" class="headerlink" title="消息发送事件"></a>消息发送事件</h4>              <h5 id="异步发送消息推送"   >          <a href="#异步发送消息推送" class="heading-link"><i class="fas fa-link"></i></a><a href="#异步发送消息推送" class="headerlink" title="异步发送消息推送"></a>异步发送消息推送</h5>      <p>当消息发送之后异步推送给全部在线用户</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span>  <span class="comment">//异步注解</span></span><br><span class="line">   <span class="meta">@TransactionalEventListener(classes = MessageSendEvent.class, fallbackExecution = true)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyAllOnline</span><span class="params">(MessageSendEvent event)</span> &#123;</span><br><span class="line">       <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> messageDao.getById(event.getMsgId());</span><br><span class="line">       <span class="type">ChatMessageResp</span> <span class="variable">msgResp</span> <span class="operator">=</span> chatService.getMsgResp(message, <span class="literal">null</span>);</span><br><span class="line">       webSocketService.sendToAllOnline(WSAdapter.buildMsgSend(msgResp), message.getFromUid());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="ChatGPT的接收与回复"   >          <a href="#ChatGPT的接收与回复" class="heading-link"><i class="fas fa-link"></i></a><a href="#ChatGPT的接收与回复" class="headerlink" title="ChatGPT的接收与回复"></a>ChatGPT的接收与回复</h5>      <p>消息发送给chatgpt，让其进行一个响应与回复</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TransactionalEventListener(classes = MessageSendEvent.class, fallbackExecution = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlerMsg</span><span class="params">(<span class="meta">@NotNull</span> MessageSendEvent event)</span> &#123;</span><br><span class="line">    <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> messageDao.getById(event.getMsgId());</span><br><span class="line">    openAIService.chat(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TransactionalEventListener(classes = MessageSendEvent.class, fallbackExecution = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publishChatToWechat</span><span class="params">(<span class="meta">@NotNull</span> MessageSendEvent event)</span> &#123;</span><br><span class="line">    <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> messageDao.getById(event.getMsgId());</span><br><span class="line">    <span class="keyword">if</span> (Objects.nonNull(message.getExtra().getAtUidList())) &#123;</span><br><span class="line">        weChatMsgOperationService.publishChatMsgToWeChatUser(message.getFromUid(), message.getExtra().getAtUidList(),</span><br><span class="line">                message.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="消息标记事件"   >          <a href="#消息标记事件" class="heading-link"><i class="fas fa-link"></i></a><a href="#消息标记事件" class="headerlink" title="消息标记事件"></a>消息标记事件</h4>              <h5 id="异步标记消息推送"   >          <a href="#异步标记消息推送" class="heading-link"><i class="fas fa-link"></i></a><a href="#异步标记消息推送" class="headerlink" title="异步标记消息推送"></a>异步标记消息推送</h5>      <p>将标记消息异步推送给所有在线用户</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="meta">@TransactionalEventListener(classes = MessageMarkEvent.class, fallbackExecution = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notifyAll</span><span class="params">(MessageMarkEvent event)</span> &#123;<span class="comment">//后续可做合并查询，目前异步影响不大</span></span><br><span class="line">    <span class="type">ChatMessageMarkDTO</span> <span class="variable">dto</span> <span class="operator">=</span> event.getDto();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">markCount</span> <span class="operator">=</span> messageMarkDao.getMarkCount(dto.getMsgId(), dto.getMarkType());</span><br><span class="line">    webSocketService.sendToAllOnline(WSAdapter.buildMsgMarkSend(dto, markCount), dto.getUid());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="统计消息被点赞次数"   >          <a href="#统计消息被点赞次数" class="heading-link"><i class="fas fa-link"></i></a><a href="#统计消息被点赞次数" class="headerlink" title="统计消息被点赞次数"></a>统计消息被点赞次数</h5>      <p>①判断消息的类型是否是普通消息类型</p><p>②如果是普通消息查询数据库<del>Message_Mark</del>中Msg_id对应的赞以及举报的条数</p><p>③如果点赞次数等于发放点赞勋章次数<del>10次</del>，那么尝试发放勋章</p><p>④因为勋章的幂等性和唯一性，所以能保证一个用户只能发放一张爆赞勋章</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line">   <span class="meta">@TransactionalEventListener(classes = MessageMarkEvent.class, fallbackExecution = true)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeMsgType</span><span class="params">(MessageMarkEvent event)</span> &#123;</span><br><span class="line">       <span class="type">ChatMessageMarkDTO</span> <span class="variable">dto</span> <span class="operator">=</span> event.getDto();</span><br><span class="line">       <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> messageDao.getById(dto.getMsgId());</span><br><span class="line">       <span class="keyword">if</span> (!Objects.equals(msg.getType(), MessageTypeEnum.TEXT.getType())) &#123;<span class="comment">//普通消息才需要升级</span></span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//消息被标记次数</span></span><br><span class="line">       <span class="type">Integer</span> <span class="variable">markCount</span> <span class="operator">=</span> messageMarkDao.getMarkCount(dto.getMsgId(), dto.getMarkType());</span><br><span class="line">       <span class="type">MessageMarkTypeEnum</span> <span class="variable">markTypeEnum</span> <span class="operator">=</span> MessageMarkTypeEnum.of(dto.getMarkType());</span><br><span class="line">       <span class="keyword">if</span> (markCount &lt; markTypeEnum.getRiseNum()) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (MessageMarkTypeEnum.LIKE.getType().equals(dto.getMarkType())) &#123;<span class="comment">//尝试给用户发送一张徽章</span></span><br><span class="line">           iUserBackpackService.acquireItem(msg.getFromUid(), ItemEnum.LIKE_BADGE.getId(), IdempotentEnum.MSG_ID, msg.getId().toString());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="消息撤回事件"   >          <a href="#消息撤回事件" class="heading-link"><i class="fas fa-link"></i></a><a href="#消息撤回事件" class="headerlink" title="消息撤回事件"></a>消息撤回事件</h4>              <h5 id="异步撤回消息推送"   >          <a href="#异步撤回消息推送" class="heading-link"><i class="fas fa-link"></i></a><a href="#异步撤回消息推送" class="headerlink" title="异步撤回消息推送"></a>异步撤回消息推送</h5>      <p>将撤回消息异步推送给所有在线用户</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="meta">@TransactionalEventListener(classes = MessageRecallEvent.class, fallbackExecution = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendToAll</span><span class="params">(MessageRecallEvent event)</span> &#123;</span><br><span class="line">    webSocketService.sendToAllOnline(WSAdapter.buildMsgRecall(event.getRecallDTO()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h5 id="更新消息缓存池"   >          <a href="#更新消息缓存池" class="heading-link"><i class="fas fa-link"></i></a><a href="#更新消息缓存池" class="headerlink" title="更新消息缓存池"></a>更新消息缓存池</h5>      <p>更新tomcat本地缓存，消息已经置为撤回状态</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@TransactionalEventListener(classes = MessageRecallEvent.class, fallbackExecution = true)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">evictMsg</span><span class="params">(MessageRecallEvent event)</span> &#123;</span><br><span class="line">        <span class="type">ChatMsgRecallDTO</span> <span class="variable">recallDTO</span> <span class="operator">=</span> event.getRecallDTO();</span><br><span class="line">        msgCache.evictMsg(recallDTO.getMsgId());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="亮点"   >          <a href="#亮点" class="heading-link"><i class="fas fa-link"></i></a><a href="#亮点" class="headerlink" title="亮点"></a>亮点</h1>              <h2 id="注解分布式锁"   >          <a href="#注解分布式锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#注解分布式锁" class="headerlink" title="注解分布式锁"></a>注解分布式锁</h2>      <p>通过注解的方式开发分布式锁</p><p><strong>优点</strong></p><ul><li>1.<strong>无侵入</strong>，Controller层或者Service层中没有具体加锁解锁的代码</li><li>2.<strong>锁的独有</strong>，加锁和释放锁只能同一个线程完成</li><li>3.<strong>支持多种方式获取传参Key</strong>，通过注解的指定参数名，通过反射，动态获取key</li></ul><p>主要的特点就是<strong>无侵入</strong>以及<strong>传参key可以通过反射获取</strong></p>        <h3 id="创建注解-RedissonLock"   >          <a href="#创建注解-RedissonLock" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建注解-RedissonLock" class="headerlink" title="创建注解@RedissonLock"></a>创建注解@RedissonLock</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="comment">//运行时生效</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span><span class="comment">//作用在方法上</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RedissonLock &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * key的前缀,默认取方法全限定名，除非我们在不同方法上对同一个资源做分布式锁，就自己指定</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> key的前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">prefixKey</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * springEl 表达式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">key</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待锁的时间，默认-1，不等待直接失败,redisson默认也是-1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 单位秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">waitTime</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待锁的时间单位，默认毫秒</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TimeUnit <span class="title function_">unit</span><span class="params">()</span> <span class="keyword">default</span> TimeUnit.MILLISECONDS;</span><br></pre></td></tr></table></div></figure><p>注解中的参数</p><p>prefixKey:key前缀 如果传入参数中prefix为空则是方法类名+方法名 否则则为传入的prefix </p><p>key:传入的key </p><p>waitTime:传入的等锁时间 如果不传入则默认为-1不会重试获取锁</p><p>unit:等待锁的时间单位 默认是毫秒</p>        <h3 id="AOP切面"   >          <a href="#AOP切面" class="heading-link"><i class="fas fa-link"></i></a><a href="#AOP切面" class="headerlink" title="AOP切面"></a>AOP切面</h3>      <p>AOP的意义在于每个不影响业务的相同非业务代码抽取出来形成一个对象，这样可以减少耦合</p><p>这个aop主要是拼接了prefix和key 然后调用lockService中的方法去调用RedisSonclient实行锁的加锁解锁</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(0)</span><span class="comment">//确保比事务注解先执行，分布式锁在事务外</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonLockAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LockService lockService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(com.abin.mallchat.common.common.annotation.RedissonLock)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ((MethodSignature) joinPoint.getSignature()).getMethod();</span><br><span class="line">        <span class="type">RedissonLock</span> <span class="variable">redissonLock</span> <span class="operator">=</span> method.getAnnotation(RedissonLock.class);</span><br><span class="line"> <span class="comment">//拼接前缀</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> StrUtil.isBlank(redissonLock.prefixKey()) ? SpElUtils.getMethodKey(method) : redissonLock.prefixKey();<span class="comment">//默认方法限定名+注解排名（可能多个）</span></span><br><span class="line">        <span class="comment">//获取key</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> SpElUtils.parseSpEl(method, joinPoint.getArgs(), redissonLock.key());</span><br><span class="line">        <span class="comment">//最终Redis中锁的key为拼接前缀+传参key 调用lockService中的方法</span></span><br><span class="line">        <span class="keyword">return</span> lockService.executeWithLockThrows(prefix + <span class="string">&quot;:&quot;</span> + key, redissonLock.waitTime(), redissonLock.unit(), joinPoint::proceed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="LockService"   >          <a href="#LockService" class="heading-link"><i class="fas fa-link"></i></a><a href="#LockService" class="headerlink" title="LockService"></a>LockService</h3>      <p>这个实现类中也就是使用RedissonClient进行一个加锁的操作，本质上就是Redisson的过程</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">executeWithLockThrows</span><span class="params">(String key, <span class="type">int</span> waitTime, TimeUnit unit, SupplierThrow&lt;T&gt; supplier)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(key);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">lockSuccess</span> <span class="operator">=</span> lock.tryLock(waitTime, unit);</span><br><span class="line">        <span class="keyword">if</span> (!lockSuccess) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(CommonErrorEnum.LOCK_LIMIT);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> supplier.get();<span class="comment">//执行锁内的代码逻辑</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lock.isLocked() &amp;&amp; lock.isHeldByCurrentThread()) &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">executeWithLock</span><span class="params">(String key, <span class="type">int</span> waitTime, TimeUnit unit, Supplier&lt;T&gt; supplier)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> executeWithLockThrows(key, waitTime, unit, supplier::get);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">executeWithLock</span><span class="params">(String key, Supplier&lt;T&gt; supplier)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> executeWithLock(key, -<span class="number">1</span>, TimeUnit.MILLISECONDS, supplier);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@FunctionalInterface</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SupplierThrow</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Gets a result.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> a result</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        T <span class="title function_">get</span><span class="params">()</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; sensitiveList = Arrays.asList(<span class="string">&quot;abcd&quot;</span>, <span class="string">&quot;abcbba&quot;</span>, <span class="string">&quot;adabca&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (String s : sensitiveList) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">hit</span> <span class="operator">=</span> text.contains(s);</span><br><span class="line">            System.out.println(hit);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="注解的使用"   >          <a href="#注解的使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#注解的使用" class="headerlink" title="注解的使用"></a>注解的使用</h3>      <p>使用范围是在方法上，利用el表达式来传参 反射获取方法名中的idempotent</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RedissonLock(key = &quot;#idempotent&quot;, waitTime = 5000)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAcquireItem</span><span class="params">(Long uid, Long itemId, String idempotent)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h2 id="频控注解"   >          <a href="#频控注解" class="heading-link"><i class="fas fa-link"></i></a><a href="#频控注解" class="headerlink" title="频控注解"></a>频控注解</h2>      <p>频控的使用地方</p><ul><li>1.发送消息规定5秒只能发两条，30秒发5条，60秒10条 为了防止一直刷屏</li><li>2.消息标记以及消息撤回的频控管理，防止一直瞎点</li><li>3.消息列表的获取</li><li>4.微信接口的限制，生成登录二维码的频控</li></ul>        <h3 id="创建注解-FrequencyControl"   >          <a href="#创建注解-FrequencyControl" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建注解-FrequencyControl" class="headerlink" title="创建注解@FrequencyControl"></a>创建注解@FrequencyControl</h3>      <p>这个关键注解在于@Repeatable 可重复注解使其可以多个相同注解加到同一个方法上</p><p>主要还是利用了Redis来实现一个频控，所以传入了Prefixkey、和el表达式 spel   两者拼接成为Redis中的key</p><p>time和unit是限制时间，count是统计次数，target是因为注解加到接口上可以通过上下文获取id和uid，如果是这两个的话就不用传入el表达式了</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repeatable(FrequencyControlContainer.class)</span><span class="comment">//可重复</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="comment">//运行时生效</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span><span class="comment">//作用在方法上</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FrequencyControl &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * key的前缀,默认取方法全限定名，除非我们在不同方法上对同一个资源做频控，就自己指定</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> key的前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">prefixKey</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 频控对象，默认el表达指定具体的频控对象</span></span><br><span class="line"><span class="comment">     * 对于ip 和uid模式，需要是http入口的对象，保证RequestHolder里有值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Target <span class="title function_">target</span><span class="params">()</span> <span class="keyword">default</span> Target.EL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * springEl 表达式，target=EL必填</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">spEl</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 频控时间范围，默认单位秒</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间范围</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">time</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 频控时间单位，默认秒</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 单位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TimeUnit <span class="title function_">unit</span><span class="params">()</span> <span class="keyword">default</span> TimeUnit.SECONDS;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单位时间内最大访问次数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">count</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">        UID, IP, EL</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="AOP切面-1"   >          <a href="#AOP切面-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#AOP切面-1" class="headerlink" title="AOP切面"></a>AOP切面</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FrequencyControlAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(com.abin.mallchat.common.common.annotation.FrequencyControl)||@annotation(com.abin.mallchat.common.common.annotation.FrequencyControlContainer)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ((MethodSignature) joinPoint.getSignature()).getMethod();</span><br><span class="line">        FrequencyControl[] annotationsByType = method.getAnnotationsByType(FrequencyControl.class);</span><br><span class="line">        Map&lt;String, FrequencyControl&gt; keyMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; annotationsByType.length; i++) &#123;</span><br><span class="line">            <span class="type">FrequencyControl</span> <span class="variable">frequencyControl</span> <span class="operator">=</span> annotationsByType[i];</span><br><span class="line">            <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> StrUtil.isBlank(frequencyControl.prefixKey()) ? SpElUtils.getMethodKey(method) + <span class="string">&quot;:index:&quot;</span> + i : frequencyControl.prefixKey();<span class="comment">//默认方法限定名+注解排名（可能多个）</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">switch</span> (frequencyControl.target()) &#123;</span><br><span class="line">                <span class="keyword">case</span> EL:</span><br><span class="line">                    key = SpElUtils.parseSpEl(method, joinPoint.getArgs(), frequencyControl.spEl());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> IP:</span><br><span class="line">                    key = RequestHolder.get().getIp();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> UID:</span><br><span class="line">                    key = RequestHolder.get().getUid().toString();</span><br><span class="line">            &#125;</span><br><span class="line">            keyMap.put(prefix + <span class="string">&quot;:&quot;</span> + key, frequencyControl);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将注解的参数转换为编程式调用需要的参数</span></span><br><span class="line">        List&lt;FrequencyControlDTO&gt; frequencyControlDTOS = keyMap.entrySet().stream().map(entrySet -&gt; buildFrequencyControlDTO(entrySet.getKey(), entrySet.getValue())).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 调用编程式注解</span></span><br><span class="line">        <span class="keyword">return</span> FrequencyControlUtil.executeWithFrequencyControlList(TOTAL_COUNT_WITH_IN_FIX_TIME_FREQUENCY_CONTROLLER, frequencyControlDTOS, joinPoint::proceed);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将注解参数转换为编程式调用所需要的参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key              频率控制Key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> frequencyControl 注解</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 编程式调用所需要的参数-FrequencyControlDTO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> FrequencyControlDTO <span class="title function_">buildFrequencyControlDTO</span><span class="params">(String key, FrequencyControl frequencyControl)</span> &#123;</span><br><span class="line">        <span class="type">FrequencyControlDTO</span> <span class="variable">frequencyControlDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FrequencyControlDTO</span>();</span><br><span class="line">        frequencyControlDTO.setCount(frequencyControl.count());</span><br><span class="line">        frequencyControlDTO.setTime(frequencyControl.time());</span><br><span class="line">        frequencyControlDTO.setUnit(frequencyControl.unit());</span><br><span class="line">        frequencyControlDTO.setKey(key);</span><br><span class="line">        <span class="keyword">return</span> frequencyControlDTO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>频控切面做了三件事</p>        <h4 id="拼接Key"   >          <a href="#拼接Key" class="heading-link"><i class="fas fa-link"></i></a><a href="#拼接Key" class="headerlink" title="拼接Key"></a>拼接Key</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ((MethodSignature) joinPoint.getSignature()).getMethod();</span><br><span class="line">        FrequencyControl[] annotationsByType = method.getAnnotationsByType(FrequencyControl.class);</span><br><span class="line">        Map&lt;String, FrequencyControl&gt; keyMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; annotationsByType.length; i++) &#123;</span><br><span class="line">            <span class="type">FrequencyControl</span> <span class="variable">frequencyControl</span> <span class="operator">=</span> annotationsByType[i];</span><br><span class="line">            <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> StrUtil.isBlank(frequencyControl.prefixKey()) ? SpElUtils.getMethodKey(method) + <span class="string">&quot;:index:&quot;</span> + i : frequencyControl.prefixKey();<span class="comment">//默认方法限定名+注解排名（可能多个）</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">switch</span> (frequencyControl.target()) &#123;</span><br><span class="line">                <span class="keyword">case</span> EL:</span><br><span class="line">                    key = SpElUtils.parseSpEl(method, joinPoint.getArgs(), frequencyControl.spEl());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> IP:</span><br><span class="line">                    key = RequestHolder.get().getIp();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> UID:</span><br><span class="line">                    key = RequestHolder.get().getUid().toString();</span><br><span class="line">            &#125;</span><br><span class="line">            keyMap.put(prefix + <span class="string">&quot;:&quot;</span> + key, frequencyControl);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="查询Redis中的key的次数，判断是否达到限制"   >          <a href="#查询Redis中的key的次数，判断是否达到限制" class="heading-link"><i class="fas fa-link"></i></a><a href="#查询Redis中的key的次数，判断是否达到限制" class="headerlink" title="查询Redis中的key的次数，判断是否达到限制"></a>查询Redis中的key的次数，判断是否达到限制</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">reachRateLimit</span><span class="params">(Map&lt;String, FrequencyControlDTO&gt; frequencyControlMap)</span> &#123;</span><br><span class="line">    <span class="comment">//批量获取redis统计的值</span></span><br><span class="line">    List&lt;String&gt; frequencyKeys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(frequencyControlMap.keySet());</span><br><span class="line">    List&lt;Integer&gt; countList = RedisUtils.mget(frequencyKeys, Integer.class);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; frequencyKeys.size(); i++) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> frequencyKeys.get(i);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> countList.get(i);</span><br><span class="line">        <span class="type">int</span> <span class="variable">frequencyControlCount</span> <span class="operator">=</span> frequencyControlMap.get(key).getCount();</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(count) &amp;&amp; count &gt;= frequencyControlCount) &#123;</span><br><span class="line">            <span class="comment">//频率超过了</span></span><br><span class="line">            log.warn(<span class="string">&quot;frequencyControl limit key:&#123;&#125;,count:&#123;&#125;&quot;</span>, key, count);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="无论是否达到限制都会统计次数并且设置过期时间"   >          <a href="#无论是否达到限制都会统计次数并且设置过期时间" class="heading-link"><i class="fas fa-link"></i></a><a href="#无论是否达到限制都会统计次数并且设置过期时间" class="headerlink" title="无论是否达到限制都会统计次数并且设置过期时间"></a>无论是否达到限制都会统计次数并且设置过期时间</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addFrequencyControlStatisticsCount</span><span class="params">(Map&lt;String, FrequencyControlDTO&gt; frequencyControlMap)</span> &#123;</span><br><span class="line">    frequencyControlMap.forEach((k, v) -&gt; RedisUtils.inc(k, v.getTime(), v.getUnit()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>利用lua脚本对key添加次数以及设置过期时间使其成为原子操作</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LUA_INCR_EXPIRE</span> <span class="operator">=</span></span><br><span class="line">            <span class="string">&quot;local key,ttl=KEYS[1],ARGV[1] \n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; \n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;if redis.call(&#x27;EXISTS&#x27;,key)==0 then   \n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;  redis.call(&#x27;SETEX&#x27;,key,ttl,1) \n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;  return 1 \n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;else \n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;  return tonumber(redis.call(&#x27;INCR&#x27;,key)) \n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;end &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">inc</span><span class="params">(String key, <span class="type">int</span> time, TimeUnit unit)</span> &#123;</span><br><span class="line">        RedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;(LUA_INCR_EXPIRE, Long.class);</span><br><span class="line">        <span class="keyword">return</span> stringRedisTemplate.execute(redisScript, Collections.singletonList(key), String.valueOf(unit.toSeconds(time)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h3>      <p>使用Redis的固定时间实现一个频控，频控注解中加了@Repeatable注解使其能在同一个方法中重复使用</p><p>在规定时间内达到次数就抛出异常不执行业务代码</p>        <h2 id="统一线程池管理"   >          <a href="#统一线程池管理" class="heading-link"><i class="fas fa-link"></i></a><a href="#统一线程池管理" class="headerlink" title="统一线程池管理"></a>统一线程池管理</h2>              <h3 id="创建线程池"   >          <a href="#创建线程池" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h3>      <p>创建线程池做了两件事 </p><ul><li>1.实现了AsyncConfigurer接口，这使其@Async注解也能使用自建的线程池</li><li>2.利用ThreadPoolTaskExecutor创建线程池</li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolConfig</span> <span class="keyword">implements</span> <span class="title class_">AsyncConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 项目共用线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MALLCHAT_EXECUTOR</span> <span class="operator">=</span> <span class="string">&quot;mallchatExecutor&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * websocket通信线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WS_EXECUTOR</span> <span class="operator">=</span> <span class="string">&quot;websocketExecutor&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AICHAT_EXECUTOR</span> <span class="operator">=</span> <span class="string">&quot;aichatExecutor&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">getAsyncExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mallchatExecutor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(MALLCHAT_EXECUTOR)</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">mallchatExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">200</span>);</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;mallchat-executor-&quot;</span>);</span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.CallerRunsPolicy());<span class="comment">//满了调用线程执行，认为重要任务</span></span><br><span class="line">        executor.setThreadFactory(<span class="keyword">new</span> <span class="title class_">MyThreadFactory</span>(executor));</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(WS_EXECUTOR)</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">websocketExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">16</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">16</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">1000</span>);<span class="comment">//支持同时推送1000人</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;websocket-executor-&quot;</span>);</span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardPolicy());<span class="comment">//满了直接丢弃，默认为不重要消息推送</span></span><br><span class="line">        executor.setThreadFactory(<span class="keyword">new</span> <span class="title class_">MyThreadFactory</span>(executor));</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(AICHAT_EXECUTOR)</span></span><br><span class="line">    <span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title function_">chatAiExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ThreadPoolTaskExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolTaskExecutor</span>();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setMaxPoolSize(<span class="number">10</span>);</span><br><span class="line">        executor.setQueueCapacity(<span class="number">15</span>);</span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;aichat-executor-&quot;</span>);</span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardPolicy());<span class="comment">//满了直接丢弃，默认为不重要消息推送</span></span><br><span class="line">        executor.setThreadFactory(<span class="keyword">new</span> <span class="title class_">MyThreadFactory</span>(executor));</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="线程池的停机销毁"   >          <a href="#线程池的停机销毁" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程池的停机销毁" class="headerlink" title="线程池的停机销毁"></a>线程池的停机销毁</h3>      <p>自建线程池是通过Spring来进行一个管理，所以当项目停机的时候就交给了Spring进行停机</p>        <h3 id="线程池的使用"   >          <a href="#线程池的使用" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程池的使用" class="headerlink" title="线程池的使用"></a>线程池的使用</h3>      <ul><li><p>1.利用Bean名字自动注入 </p><p><em>因为Caonfig中将线程池交给了Spring管理，要使用时注入即可</em></p></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Qualifier(ThreadPoolConfig.WS_EXECUTOR)</span></span><br><span class="line"><span class="keyword">private</span> ThreadPoolTaskExecutor threadPoolTaskExecutor;</span><br></pre></td></tr></table></div></figure><ul><li><p>2.利用@Async注解</p><p><em>在方法名前面加上@Async注解使其交给线程池处理</em></p></li></ul><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line">  <span class="meta">@EventListener(classes = UserOnlineEvent.class)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveRedisAndPush</span><span class="params">(UserOnlineEvent event)</span> &#123;</span><br><span class="line">      <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> event.getUser();</span><br><span class="line">      userCache.online(user.getId(), user.getLastOptTime());</span><br><span class="line">      <span class="comment">//推送给所有在线用户，该用户登录成功</span></span><br><span class="line">      webSocketService.sendToAllOnline(wsAdapter.buildOnlineNotifyResp(event.getUser()));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="异常捕获"   >          <a href="#异常捕获" class="heading-link"><i class="fas fa-link"></i></a><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h3>      <p>我们正常捕获异常</p><p>这有一段简单模拟捕获异常的代码</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;抛出异常&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;出错了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>运行结果</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">20:23:27.741 [Thread-1] INFO com.kkker1.TestThread - 1</span><br><span class="line">20:23:27.744 [Thread-1] ERROR com.kkker1.TestThread - 出错了</span><br></pre></td></tr></table></div></figure><p>捕获完异常，异常输出是以日志打印的方式输出</p><p><em>只会打印在控制台而不会输出到Error日志中，所以这是一个很危险的操作，不做处理可能会导致我们不能及时发现异常</em></p><p>所以我们需要将日志输出到Error日志中，要怎么操作</p><ul><li>自定义线程添加异常捕获器处理器，使其输出到Error日志中</li><li>线程池利用<strong>修饰器模式</strong>，保持原有Spring的工厂然后扩展异常捕获处理器</li></ul><p>例如项目中的操作</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">executor.setThreadFactory(<span class="keyword">new</span> <span class="title class_">MyThreadFactory</span>(executor));</span><br></pre></td></tr></table></div></figure><p>MyThreadFactory</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThreadFactory</span>  <span class="keyword">implements</span> <span class="title class_">ThreadFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ThreadFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span>factory.newThread(r);</span><br><span class="line">        thread.setUncaughtExceptionHandler(<span class="keyword">new</span> <span class="title class_">GlobalUncaughtExceptionHandler</span>());</span><br><span class="line">        <span class="keyword">return</span> thread;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>GlobalUncaughtExceptionHandler</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Slf4j</span><br><span class="line">public class GlobalUncaughtExceptionHandler  implements Thread.UncaughtExceptionHandler &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void uncaughtException(Thread t, Throwable e) &#123;</span><br><span class="line">        log.error(&quot;Exception in thread &#123;&#125; &quot;, t.getName(), e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="异常情况"   >          <a href="#异常情况" class="heading-link"><i class="fas fa-link"></i></a><a href="#异常情况" class="headerlink" title="异常情况"></a>异常情况</h1>      <p><strong>打上断点进行调试</strong></p>        <h2 id="异常在线用户数量，用户已经下线而显示还在线上中"   >          <a href="#异常在线用户数量，用户已经下线而显示还在线上中" class="heading-link"><i class="fas fa-link"></i></a><a href="#异常在线用户数量，用户已经下线而显示还在线上中" class="headerlink" title="异常在线用户数量，用户已经下线而显示还在线上中"></a>异常在线用户数量，用户已经下线而显示还在线上中</h2>              <h3 id="用户端1"   >          <a href="#用户端1" class="heading-link"><i class="fas fa-link"></i></a><a href="#用户端1" class="headerlink" title="用户端1"></a>用户端1</h3>      <p>未登录用户界面</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230804170246021.png"  alt="用戶端1">      </p><p>浏览器Cache</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230804170416313.png"  alt="未登录Cache">      </p>        <h3 id="用户端2"   >          <a href="#用户端2" class="heading-link"><i class="fas fa-link"></i></a><a href="#用户端2" class="headerlink" title="用户端2"></a>用户端2</h3>      <p>已登录用户用户端</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230804170527319.png"  alt="已登录用户端">      </p><p>浏览器Cache</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230804170656484.png"  alt="浏览器Cache">      </p>        <h3 id="退出用户端2"   >          <a href="#退出用户端2" class="heading-link"><i class="fas fa-link"></i></a><a href="#退出用户端2" class="headerlink" title="退出用户端2"></a>退出用户端2</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230804170829700.png"  alt="退出用户端2">      </p><p>正如用户端1客户端显示一样</p>        <h3 id="原因"   >          <a href="#原因" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因" class="headerlink" title="原因"></a>原因</h3>      <p>虚拟机关闭导致Redis关闭，而用户下线的事件要更新Redis时，连接关闭导致无法下线用户10003</p>        <h2 id="抛出InvalidDataAccessApiUsageException异常"   >          <a href="#抛出InvalidDataAccessApiUsageException异常" class="heading-link"><i class="fas fa-link"></i></a><a href="#抛出InvalidDataAccessApiUsageException异常" class="headerlink" title="抛出InvalidDataAccessApiUsageException异常"></a>抛出InvalidDataAccessApiUsageException异常</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">JDBC Connection [HikariProxyConnection@<span class="number">2146628671</span> wrapping com.mysql.cj.jdbc.ConnectionImpl@4cd7671d] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: UPDATE user SET last_opt_time=? WHERE id=?</span><br><span class="line">==&gt; Parameters: <span class="number">2023</span>-<span class="number">07</span>-<span class="number">30</span> <span class="number">17</span>:<span class="number">23</span>:<span class="number">43.267</span>(Timestamp), <span class="number">10003</span>(Long)</span><br><span class="line">|ERROR|<span class="number">2023</span>-<span class="number">07</span>-<span class="number">30</span> <span class="number">17</span>:<span class="number">23</span>:<span class="number">43.274</span>|mallchat-executor-<span class="number">7</span>||uid=|Unexpected exception occurred invoking async method: <span class="keyword">public</span> <span class="keyword">void</span> com.abin.mallchat.custom.common.event.listener.UserOfflineListener.saveRedisAndPush(com.abin.mallchat.common.common.event.UserOfflineEvent)|</span><br><span class="line">org.springframework.dao.InvalidDataAccessApiUsageException: Redisson is shutdown; nested exception is org.redisson.RedissonShutdownException: Redisson is shutdown</span><br><span class="line">at org.redisson.spring.data.connection.RedissonExceptionConverter.convert(RedissonExceptionConverter.java:<span class="number">52</span>)</span><br><span class="line">at org.redisson.spring.data.connection.RedissonExceptionConverter.convert(RedissonExceptionConverter.java:<span class="number">35</span>)</span><br><span class="line">at org.springframework.data.redis.PassThroughExceptionTranslationStrategy.translate(PassThroughExceptionTranslationStrategy.java:<span class="number">44</span>)</span><br><span class="line">at org.redisson.spring.data.connection.RedissonConnection.transform(RedissonConnection.java:<span class="number">200</span>)</span><br><span class="line">at org.redisson.spring.data.connection.RedissonConnection.syncFuture(RedissonConnection.java:<span class="number">195</span>)</span><br><span class="line">at org.redisson.spring.data.connection.RedissonConnection.sync(RedissonConnection.java:<span class="number">364</span>)</span><br><span class="line">at org.redisson.spring.data.connection.RedissonConnection.write(RedissonConnection.java:<span class="number">730</span>)</span><br><span class="line">at org.redisson.spring.data.connection.RedissonConnection.zRem(RedissonConnection.java:<span class="number">1021</span>)</span><br><span class="line">at org.springframework.data.redis.connection.DefaultStringRedisConnection.zRem(DefaultStringRedisConnection.java:<span class="number">1829</span>)</span><br><span class="line">at org.springframework.data.redis.core.DefaultZSetOperations.lambda$remove$<span class="number">27</span>(DefaultZSetOperations.java:<span class="number">444</span>)</span><br><span class="line">at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:<span class="number">223</span>)</span><br><span class="line">at org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:<span class="number">190</span>)</span><br><span class="line">at org.springframework.data.redis.core.AbstractOperations.execute(AbstractOperations.java:<span class="number">97</span>)</span><br><span class="line">at org.springframework.data.redis.core.DefaultZSetOperations.remove(DefaultZSetOperations.java:<span class="number">444</span>)</span><br><span class="line">at com.abin.mallchat.common.common.utils.RedisUtils.zRemove(RedisUtils.java:<span class="number">803</span>)</span><br><span class="line">at com.abin.mallchat.common.common.utils.RedisUtils.zRemove(RedisUtils.java:<span class="number">799</span>)</span><br><span class="line">at com.abin.mallchat.common.user.service.cache.UserCache.offline(UserCache.java:<span class="number">85</span>)</span><br><span class="line">at com.abin.mallchat.common.user.service.cache.UserCache$$FastClassBySpringCGLIB$$4d4b28eb.invoke(&lt;generated&gt;)</span><br><span class="line">at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:<span class="number">218</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy.invokeMethod(CglibAopProxy.java:<span class="number">386</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy.access$<span class="number">000</span>(CglibAopProxy.java:<span class="number">85</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:<span class="number">704</span>)</span><br><span class="line">at com.abin.mallchat.common.user.service.cache.UserCache$$EnhancerBySpringCGLIB$$6f823fec.offline(&lt;generated&gt;)</span><br><span class="line">at com.abin.mallchat.custom.common.event.listener.UserOfflineListener.saveRedisAndPush(UserOfflineListener.java:<span class="number">36</span>)</span><br><span class="line">at com.abin.mallchat.custom.common.event.listener.UserOfflineListener$$FastClassBySpringCGLIB$$c62500f3.invoke(&lt;generated&gt;)</span><br><span class="line">at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:<span class="number">218</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:<span class="number">793</span>)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:<span class="number">163</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:<span class="number">763</span>)</span><br><span class="line">at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$<span class="number">0</span>(AsyncExecutionInterceptor.java:<span class="number">115</span>)</span><br><span class="line">at java.util.concurrent.FutureTask.run(FutureTask.java:<span class="number">266</span>)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1149</span>)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">624</span>)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line">Caused by: org.redisson.RedissonShutdownException: Redisson is shutdown</span><br><span class="line">at org.redisson.command.RedisExecutor.execute(RedisExecutor.java:<span class="number">118</span>)</span><br><span class="line">at org.redisson.command.CommandAsyncService.async(CommandAsyncService.java:<span class="number">585</span>)</span><br><span class="line">at org.redisson.command.CommandAsyncService.writeAsync(CommandAsyncService.java:<span class="number">554</span>)</span><br><span class="line">at org.redisson.spring.data.connection.RedissonConnection.write(RedissonConnection.java:<span class="number">728</span>)</span><br><span class="line">... <span class="number">27</span> common frames omitted</span><br><span class="line">&lt;==    Updates: <span class="number">1</span></span><br></pre></td></tr></table></div></figure>        <h3 id="执行的SQL语句"   >          <a href="#执行的SQL语句" class="heading-link"><i class="fas fa-link"></i></a><a href="#执行的SQL语句" class="headerlink" title="执行的SQL语句"></a>执行的SQL语句</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">==&gt;Preparing: UPDATE user SET last_opt_time=? WHERE id=?</span><br><span class="line"><span class="comment">//更新user表 更新Last_opt_time(最后上下线时间) where id=?</span></span><br><span class="line">==&gt; Parameters: <span class="number">2023</span>-<span class="number">07</span>-<span class="number">30</span> <span class="number">17</span>:<span class="number">23</span>:<span class="number">43.267</span>(Timestamp), <span class="number">10003</span>(Long) </span><br><span class="line"><span class="comment">//传入时间戳和用户ID</span></span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line"><span class="comment">//报错RedisSon is shutdown;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">&lt;==    Updates: <span class="number">1</span></span><br><span class="line"><span class="comment">//更新成功</span></span><br></pre></td></tr></table></div></figure>        <h3 id="异常复现"   >          <a href="#异常复现" class="heading-link"><i class="fas fa-link"></i></a><a href="#异常复现" class="headerlink" title="异常复现"></a>异常复现</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">==&gt;  Preparing: UPDATE user SET last_opt_time=? WHERE id=?</span><br><span class="line">==&gt; Parameters: <span class="number">2023</span>-<span class="number">07</span>-<span class="number">30</span> <span class="number">17</span>:<span class="number">45</span>:<span class="number">46.053</span>(Timestamp), <span class="number">10003</span>(Long)</span><br><span class="line">|ERROR|<span class="number">2023</span>-<span class="number">07</span>-<span class="number">30</span> <span class="number">17</span>:<span class="number">45</span>:<span class="number">46.061</span>|mallchat-executor-<span class="number">9</span>||uid=|Unexpected exception occurred invoking async method: <span class="keyword">public</span> <span class="keyword">void</span> com.abin.mallchat.custom.common.event.listener.UserOfflineListener.saveRedisAndPush(com.abin.mallchat.common.common.event.UserOfflineEvent)|</span><br><span class="line">org.springframework.dao.InvalidDataAccessApiUsageException: Redisson is shutdown; </span><br><span class="line">....</span><br><span class="line">... <span class="number">27</span> common frames omitted</span><br><span class="line">&lt;==    Updates: <span class="number">1</span></span><br></pre></td></tr></table></div></figure>        <h3 id="分析原因"   >          <a href="#分析原因" class="heading-link"><i class="fas fa-link"></i></a><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h3>      <p>RedisSon is Shutdown 抛出的异常是因为后端的关闭，导致RedisSon实例关闭</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抛出异常</span></span><br><span class="line">InvalidDataAccessApiUsageException: Redisson is shutdown; </span><br><span class="line">nested exception is org.redisson.RedissonShutdownException: Redisson is shutdown</span><br><span class="line"></span><br><span class="line"><span class="comment">//表示Redisson已经关闭</span></span><br></pre></td></tr></table></div></figure>        <h3 id="处理"   >          <a href="#处理" class="heading-link"><i class="fas fa-link"></i></a><a href="#处理" class="headerlink" title="处理"></a>处理</h3>      <p>这里是后端代码池先关闭导致的，所以不做处理也没关系</p>        <h2 id="空指针异常"   >          <a href="#空指针异常" class="heading-link"><i class="fas fa-link"></i></a><a href="#空指针异常" class="headerlink" title="空指针异常"></a>空指针异常</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">|ERROR|<span class="number">2023</span>-<span class="number">07</span>-<span class="number">30</span> <span class="number">17</span>:<span class="number">21</span>:<span class="number">35.653</span>|http-nio-<span class="number">8080</span>-exec-<span class="number">7</span>|7c7b1d92-b364-4de5-bfe8-7896ec4f2c07|uid=<span class="number">10003</span>|system exception！The reason is：<span class="literal">null</span>|</span><br><span class="line">java.lang.reflect.UndeclaredThrowableException: <span class="literal">null</span></span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:<span class="number">780</span>)</span><br><span class="line">at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:<span class="number">89</span>)</span><br><span class="line">at com.abin.mallchat.custom.common.intecepter.WebLogAspect.around(WebLogAspect.java:<span class="number">63</span>)</span><br><span class="line">at sun.reflect.GeneratedMethodAccessor199.invoke(Unknown Source)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:<span class="number">634</span>)</span><br><span class="line">at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:<span class="number">624</span>)</span><br><span class="line">at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:<span class="number">72</span>)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:<span class="number">186</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:<span class="number">763</span>)</span><br><span class="line">at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:<span class="number">97</span>)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:<span class="number">186</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:<span class="number">763</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:<span class="number">708</span>)</span><br><span class="line">at com.abin.mallchat.custom.user.controller.OssController$$EnhancerBySpringCGLIB$$94c0c149.getUploadUrl(&lt;generated&gt;)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:<span class="number">205</span>)</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:<span class="number">150</span>)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:<span class="number">117</span>)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:<span class="number">895</span>)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:<span class="number">808</span>)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:<span class="number">87</span>)</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:<span class="number">1067</span>)</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:<span class="number">963</span>)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:<span class="number">1006</span>)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:<span class="number">898</span>)</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">655</span>)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:<span class="number">883</span>)</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">764</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">227</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:<span class="number">53</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at com.abin.mallchat.custom.common.intecepter.HttpTraceIdFilter.doFilter(HttpTraceIdFilter.java:<span class="number">25</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:<span class="number">100</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:<span class="number">93</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:<span class="number">96</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:<span class="number">201</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:<span class="number">197</span>)</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:<span class="number">97</span>)</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:<span class="number">541</span>)</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:<span class="number">135</span>)</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:<span class="number">92</span>)</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:<span class="number">78</span>)</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:<span class="number">360</span>)</span><br><span class="line">at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:<span class="number">399</span>)</span><br><span class="line">at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:<span class="number">65</span>)</span><br><span class="line">at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:<span class="number">890</span>)</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:<span class="number">1743</span>)</span><br><span class="line">at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:<span class="number">49</span>)</span><br><span class="line">at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1191</span>)</span><br><span class="line">at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">659</span>)</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:<span class="number">61</span>)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line">Caused by: io.minio.errors.ErrorResponseException: The specified bucket does not exist</span><br><span class="line">at io.minio.S3Base$<span class="number">1.</span>onResponse(S3Base.java:<span class="number">690</span>)</span><br><span class="line">at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:<span class="number">519</span>)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1149</span>)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">624</span>)</span><br><span class="line">... <span class="number">1</span> common frames omitted</span><br></pre></td></tr></table></div></figure>        <h3 id="原因-1"   >          <a href="#原因-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-1" class="headerlink" title="原因"></a>原因</h3>      <p>这里是Minio的docker未启动，然后发送语音的时候是存储对象，所以启动minio端口就不会出现这个空指针报错了</p>        <h2 id="未知异常"   >          <a href="#未知异常" class="heading-link"><i class="fas fa-link"></i></a><a href="#未知异常" class="headerlink" title="未知异常"></a>未知异常</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">|ERROR|<span class="number">2023</span>-<span class="number">07</span>-<span class="number">31</span> <span class="number">10</span>:09:<span class="number">45.932</span>|http-nio-<span class="number">8080</span>-exec-<span class="number">10</span>|fa45bbb3-e84d-<span class="number">422f</span>-<span class="number">9053</span>-df13233dae8e|uid=<span class="number">10003</span>|system exception！The reason is：<span class="literal">null</span>|</span><br><span class="line">java.lang.reflect.UndeclaredThrowableException: <span class="literal">null</span></span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:<span class="number">780</span>)</span><br><span class="line">at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:<span class="number">89</span>)</span><br><span class="line">at com.abin.mallchat.custom.common.intecepter.WebLogAspect.around(WebLogAspect.java:<span class="number">63</span>)</span><br><span class="line">at sun.reflect.GeneratedMethodAccessor226.invoke(Unknown Source)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:<span class="number">634</span>)</span><br><span class="line">at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:<span class="number">624</span>)</span><br><span class="line">at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:<span class="number">72</span>)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:<span class="number">186</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:<span class="number">763</span>)</span><br><span class="line">at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:<span class="number">97</span>)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:<span class="number">186</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:<span class="number">763</span>)</span><br><span class="line">at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:<span class="number">708</span>)</span><br><span class="line">at com.abin.mallchat.custom.user.controller.OssController$$EnhancerBySpringCGLIB$$94c0c149.getUploadUrl(&lt;generated&gt;)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:<span class="number">205</span>)</span><br><span class="line">at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:<span class="number">150</span>)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:<span class="number">117</span>)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:<span class="number">895</span>)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:<span class="number">808</span>)</span><br><span class="line">at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:<span class="number">87</span>)</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:<span class="number">1067</span>)</span><br><span class="line">at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:<span class="number">963</span>)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:<span class="number">1006</span>)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:<span class="number">898</span>)</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">655</span>)</span><br><span class="line">at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:<span class="number">883</span>)</span><br><span class="line">at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="number">764</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">227</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:<span class="number">53</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at com.abin.mallchat.custom.common.intecepter.HttpTraceIdFilter.doFilter(HttpTraceIdFilter.java:<span class="number">25</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:<span class="number">100</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:<span class="number">93</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:<span class="number">96</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:<span class="number">201</span>)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:<span class="number">117</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:<span class="number">189</span>)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:<span class="number">162</span>)</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:<span class="number">197</span>)</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:<span class="number">97</span>)</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:<span class="number">541</span>)</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:<span class="number">135</span>)</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:<span class="number">92</span>)</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:<span class="number">78</span>)</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:<span class="number">360</span>)</span><br><span class="line">at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:<span class="number">399</span>)</span><br><span class="line">at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:<span class="number">65</span>)</span><br><span class="line">at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:<span class="number">890</span>)</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:<span class="number">1743</span>)</span><br><span class="line">at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:<span class="number">49</span>)</span><br><span class="line">at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1191</span>)</span><br><span class="line">at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">659</span>)</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:<span class="number">61</span>)</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line">Caused by: java.net.ConnectException: Failed to connect to /<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">9000</span></span><br><span class="line">at okhttp3.internal.connection.RealConnection.connectSocket(RealConnection.kt:<span class="number">297</span>)</span><br><span class="line">at okhttp3.internal.connection.RealConnection.connect(RealConnection.kt:<span class="number">207</span>)</span><br><span class="line">at okhttp3.internal.connection.ExchangeFinder.findConnection(ExchangeFinder.kt:<span class="number">226</span>)</span><br><span class="line">at okhttp3.internal.connection.ExchangeFinder.findHealthyConnection(ExchangeFinder.kt:<span class="number">106</span>)</span><br><span class="line">at okhttp3.internal.connection.ExchangeFinder.find(ExchangeFinder.kt:<span class="number">74</span>)</span><br><span class="line">at okhttp3.internal.connection.RealCall.initExchange$okhttp(RealCall.kt:<span class="number">255</span>)</span><br><span class="line">at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.kt:<span class="number">32</span>)</span><br><span class="line">at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:<span class="number">109</span>)</span><br><span class="line">at okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.kt:<span class="number">95</span>)</span><br><span class="line">at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:<span class="number">109</span>)</span><br><span class="line">at okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.kt:<span class="number">83</span>)</span><br><span class="line">at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:<span class="number">109</span>)</span><br><span class="line">at okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.kt:<span class="number">76</span>)</span><br><span class="line">at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.kt:<span class="number">109</span>)</span><br><span class="line">at okhttp3.internal.connection.RealCall.getResponseWithInterceptorChain$okhttp(RealCall.kt:<span class="number">201</span>)</span><br><span class="line">at okhttp3.internal.connection.RealCall$AsyncCall.run(RealCall.kt:<span class="number">517</span>)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1149</span>)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">624</span>)</span><br><span class="line">... <span class="number">1</span> common frames omitted</span><br><span class="line">Caused by: java.net.ConnectException: Connection refused: connect</span><br><span class="line">at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)</span><br><span class="line">at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:<span class="number">81</span>)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:<span class="number">476</span>)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:<span class="number">218</span>)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:<span class="number">200</span>)</span><br><span class="line">at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:<span class="number">162</span>)</span><br><span class="line">at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:<span class="number">394</span>)</span><br><span class="line">at java.net.Socket.connect(Socket.java:<span class="number">606</span>)</span><br><span class="line">at okhttp3.internal.platform.Platform.connectSocket(Platform.kt:<span class="number">120</span>)</span><br><span class="line">at okhttp3.internal.connection.RealConnection.connectSocket(RealConnection.kt:<span class="number">295</span>)</span><br><span class="line">... <span class="number">18</span> common frames omitted</span><br></pre></td></tr></table></div></figure>        <h3 id="原因-2"   >          <a href="#原因-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#原因-2" class="headerlink" title="原因"></a>原因</h3>      <p>问题出现在127.0.0.1:9000端口，那么这个是Minio的异常，原因是无法连接到Minio</p>        <h1 id="总结-1"   >          <a href="#总结-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结-1" class="headerlink" title="总结"></a>总结</h1>      <p>整篇项目到目前为止的阶段还有ChatAI部分没能阅读，其余已经学习完毕</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> MallChat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud面试题</title>
      <link href="/2023/07/27/SpringCloud%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/07/27/SpringCloud%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[        <h1 id="SpringCloud常见组件有哪些"   >          <a href="#SpringCloud常见组件有哪些" class="heading-link"><i class="fas fa-link"></i></a><a href="#SpringCloud常见组件有哪些" class="headerlink" title="SpringCloud常见组件有哪些?"></a>SpringCloud常见组件有哪些?</h1>              <h1 id="Nacos的服务注册表结构是怎么样的？"   >          <a href="#Nacos的服务注册表结构是怎么样的？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Nacos的服务注册表结构是怎么样的？" class="headerlink" title="Nacos的服务注册表结构是怎么样的？"></a>Nacos的服务注册表结构是怎么样的？</h1>              <h1 id="Nacos如何支撑数十万服务注册压力？"   >          <a href="#Nacos如何支撑数十万服务注册压力？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Nacos如何支撑数十万服务注册压力？" class="headerlink" title="Nacos如何支撑数十万服务注册压力？"></a>Nacos如何支撑数十万服务注册压力？</h1>              <h1 id="Nacos如何避免读写并发冲突问题？"   >          <a href="#Nacos如何避免读写并发冲突问题？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Nacos如何避免读写并发冲突问题？" class="headerlink" title="Nacos如何避免读写并发冲突问题？"></a>Nacos如何避免读写并发冲突问题？</h1>              <h1 id="Nacos和Eureka的区别有哪些？"   >          <a href="#Nacos和Eureka的区别有哪些？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Nacos和Eureka的区别有哪些？" class="headerlink" title="Nacos和Eureka的区别有哪些？"></a>Nacos和Eureka的区别有哪些？</h1>      ]]></content>
      
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentinel-[SpringCloud篇]</title>
      <link href="/2023/07/27/Sentinel-SpringCloud%E7%AF%87/"/>
      <url>/2023/07/27/Sentinel-SpringCloud%E7%AF%87/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos-[SpringCloud篇]</title>
      <link href="/2023/07/27/Nacos-SpringCloud%E7%AF%87/"/>
      <url>/2023/07/27/Nacos-SpringCloud%E7%AF%87/</url>
      
        <content type="html"><![CDATA[        <h1 id="准备工作"   >          <a href="#准备工作" class="heading-link"><i class="fas fa-link"></i></a><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1>      <p>想要解析Nacos首先得把Nacos源码下载下来，这自然是第一，再是尝试在本地启动Nacos源码</p>        <h2 id="Proto编译"   >          <a href="#Proto编译" class="heading-link"><i class="fas fa-link"></i></a><a href="#Proto编译" class="headerlink" title="Proto编译"></a>Proto编译</h2>      <p>因为nacos会按照Protobuf对数据做序列化和反序列化处理，这也是nacos能在多个平台运行的原因，正因为数据按照protobuf序列化了才会不同的语言才能运行</p><p>我们要将proto文件编译成java文件</p>        <h3 id="protobuf"   >          <a href="#protobuf" class="heading-link"><i class="fas fa-link"></i></a><a href="#protobuf" class="headerlink" title="protobuf"></a>protobuf</h3>      <p>protobuf是Google公司提出的一种轻便高效的结构化数据存储格式，常用于结构化数据的序列化，具有语言无关、平台无关、可扩展性特性，常用于通讯协议、服务端数据交换场景</p><p>类似Json也是一种结构化存储格式</p>        <h3 id="安装protoc"   >          <a href="#安装protoc" class="heading-link"><i class="fas fa-link"></i></a><a href="#安装protoc" class="headerlink" title="安装protoc"></a>安装protoc</h3>      <p><strong>接下来我们要参考nacos的官网手册来对Nacos的服务注册、服务发现、心跳检测进行分析</strong></p><p><span class="exturl"><a class="exturl__link"   href="https://nacos.io/zh-cn/docs/open-api.html" >Nacos Open API</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p>        <h1 id="Nacos服务注册"   >          <a href="#Nacos服务注册" class="heading-link"><i class="fas fa-link"></i></a><a href="#Nacos服务注册" class="headerlink" title="Nacos服务注册"></a>Nacos服务注册</h1>              <h2 id="客户端"   >          <a href="#客户端" class="heading-link"><i class="fas fa-link"></i></a><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2>              <h2 id="服务端"   >          <a href="#服务端" class="heading-link"><i class="fas fa-link"></i></a><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2>      <p>对照Nacos Open API找到服务端服务注册</p><div class="table-container"><table><thead><tr><th>服务注册</th><th>请求路径</th></tr></thead><tbody><tr><td>POST请求</td><td>&#x2F;nacos&#x2F;v1&#x2F;ns&#x2F;instance</td></tr></tbody></table></div><p>通过UtilsAndCommons类找到</p><div class="table-container"><table><thead><tr><th>路径</th><th>常量</th></tr></thead><tbody><tr><td>&#x2F;nacos</td><td>NACOS_SERVER_CONTEXT</td></tr><tr><td>&#x2F;v1</td><td>NACOS_SERVER_VERSION</td></tr><tr><td>&#x2F;v1&#x2F;ns</td><td>DEFAULT_NACOS_NAMING_CONTEXT &#x3D; NACOS_SERVER_VERSION+ “&#x2F;ns”</td></tr></tbody></table></div><p>所以&#x2F;nacos&#x2F;v1&#x2F;ns就是NACOS_SERVER_CONTEXT +   DEFAULT_NACOS_NAMING_CONTEXT </p><p>我们的目标就是找到这个路径对应的Controller</p>        <h3 id="InstanceController"   >          <a href="#InstanceController" class="heading-link"><i class="fas fa-link"></i></a><a href="#InstanceController" class="headerlink" title="InstanceController"></a>InstanceController</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(UtilsAndCommons.NACOS_NAMING_CONTEXT + UtilsAndCommons.NACOS_NAMING_INSTANCE_CONTEXT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstanceController</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>从InstanceController找到Post请求对应的方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CanDistro</span></span><br><span class="line">   <span class="meta">@PostMapping</span></span><br><span class="line">   <span class="meta">@Secured(action = ActionTypes.WRITE)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">register</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//获取命名空间 namespaceId</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">String</span> <span class="variable">namespaceId</span> <span class="operator">=</span> WebUtils</span><br><span class="line">               .optional(request, CommonParams.NAMESPACE_ID, Constants.DEFAULT_NAMESPACE_ID);</span><br><span class="line">      </span><br><span class="line">       <span class="comment">//获取服务名称 servicename</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> WebUtils.required(request, CommonParams.SERVICE_NAME);</span><br><span class="line">       <span class="comment">//对seviceName做一个格式化检查</span></span><br><span class="line">       NamingUtils.checkServiceNameFormat(serviceName);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//创建一个实例对象，链式编程 创建一个实例(通过SwitchDomain.isDefaultInstanceEphemeral()判断是否是临时实例)</span></span><br><span class="line">       <span class="keyword">final</span> <span class="type">Instance</span> <span class="variable">instance</span> <span class="operator">=</span> HttpRequestInstanceBuilder.newBuilder()</span><br><span class="line">               .setDefaultInstanceEphemeral(switchDomain.isDefaultInstanceEphemeral()).setRequest(request).build();</span><br><span class="line">       <span class="comment">//上面创建一个临时实例或者是一个永久实例</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">//调用getInstanceOperator.reregisterInstance方法注册实例  传入命名空间、服务名称、实例对象</span></span><br><span class="line">       getInstanceOperator().registerInstance(namespaceId, serviceName, instance);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//发布一个事务 当前已经注册了实例</span></span><br><span class="line">       <span class="comment">//传入参数</span></span><br><span class="line">       NotifyCenter.publishEvent(<span class="keyword">new</span> <span class="title class_">RegisterInstanceTraceEvent</span>(System.currentTimeMillis(), <span class="string">&quot;&quot;</span>, <span class="literal">false</span>, namespaceId , NamingUtils.getGroupName(serviceName) , NamingUtils.getServiceName(serviceName), instance.getIp(),instance.getPort()));</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="registerInstance"   >          <a href="#registerInstance" class="heading-link"><i class="fas fa-link"></i></a><a href="#registerInstance" class="headerlink" title="registerInstance"></a>registerInstance</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerInstance</span><span class="params">(String namespaceId, String serviceName, Instance instance)</span> <span class="keyword">throws</span> NacosException &#123;</span><br><span class="line">    NamingUtils.checkInstanceIsLegal(instance);</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="variable">ephemeral</span> <span class="operator">=</span> instance.isEphemeral();</span><br><span class="line">    <span class="type">String</span> <span class="variable">clientId</span> <span class="operator">=</span> IpPortBasedClient.getClientId(instance.toInetAddr(), ephemeral);</span><br><span class="line">    createIpPortClientIfAbsent(clientId);</span><br><span class="line">    <span class="type">Service</span> <span class="variable">service</span> <span class="operator">=</span> getService(namespaceId, serviceName, ephemeral);</span><br><span class="line">    clientOperationService.registerInstance(service, instance, clientId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="RegisterInstanceTraceEvent"   >          <a href="#RegisterInstanceTraceEvent" class="heading-link"><i class="fas fa-link"></i></a><a href="#RegisterInstanceTraceEvent" class="headerlink" title="RegisterInstanceTraceEvent"></a>RegisterInstanceTraceEvent</h2>      <div class="table-container"><table><thead><tr><th>形参</th><th>传入参数</th><th></th></tr></thead><tbody><tr><td>eventTime</td><td>System.currentTimeMillis()</td><td>当前时间戳</td></tr><tr><td>clientIp</td><td>“”</td><td>注册实例的请求IP，传入空字符串</td></tr><tr><td>rpc</td><td>false</td><td>来源是否为gRPC，传入false</td></tr><tr><td>serviceNamespace</td><td>namespaceId</td><td>命名空间</td></tr><tr><td>serviceGroup</td><td>NamingUtils.getGroupName(serviceName)</td><td>服务分组</td></tr><tr><td>serviceName</td><td>NamingUtils.getServiceName(serviceName)</td><td>服务名称</td></tr><tr><td>instanceIp</td><td>instance.getIp()</td><td>注册实例的地址IP&#x2F;HOST</td></tr><tr><td>instancePort</td><td>instance.getPort()</td><td>注册实例的端口Port</td></tr></tbody></table></div><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">RegisterInstanceTraceEvent</span><span class="params">(<span class="type">long</span> eventTime, String clientIp, <span class="type">boolean</span> rpc, String serviceNamespace,</span></span><br><span class="line"><span class="params">        String serviceGroup, String serviceName, String instanceIp, <span class="type">int</span> instancePort)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(<span class="string">&quot;REGISTER_INSTANCE_TRACE_EVENT&quot;</span>, eventTime, serviceNamespace, serviceGroup, serviceName);</span><br><span class="line">    <span class="built_in">this</span>.clientIp = clientIp;</span><br><span class="line">    <span class="built_in">this</span>.rpc = rpc;</span><br><span class="line">    <span class="built_in">this</span>.instanceIp = instanceIp;</span><br><span class="line">    <span class="built_in">this</span>.instancePort = instancePort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="publishEvent"   >          <a href="#publishEvent" class="heading-link"><i class="fas fa-link"></i></a><a href="#publishEvent" class="headerlink" title="publishEvent"></a>publishEvent</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">publishEvent</span><span class="params">(<span class="keyword">final</span> Event event)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> publishEvent(event.getClass(), event);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        LOGGER.error(<span class="string">&quot;There was an exception to the message publishing : &quot;</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE基础【总结篇】</title>
      <link href="/2023/07/21/JavaSE%E5%9F%BA%E7%A1%80%E3%80%90%E6%80%BB%E7%BB%93%E7%AF%87%E3%80%91/"/>
      <url>/2023/07/21/JavaSE%E5%9F%BA%E7%A1%80%E3%80%90%E6%80%BB%E7%BB%93%E7%AF%87%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><p>这个文档记录的是JavaSE的基础，本着我学习的路线再进一步深化和理解，这个过程是一个必不可少的过程。</p><p><em>光学别人的是别人教的好而不是我学的好，想要真正掌握必须自己重新查一遍、看一遍</em></p><p>复盘和深化学习路线参考于Java从入门到精通(第六版)目录，这一块要重新学习的主要是最最最基础的内容</p><hr>        <h1 id="Java语言基础"   >          <a href="#Java语言基础" class="heading-link"><i class="fas fa-link"></i></a><a href="#Java语言基础" class="headerlink" title="Java语言基础"></a>Java语言基础</h1>              <h2 id="基本数据类型"   >          <a href="#基本数据类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2>      <p>一共八个基本数据类型</p><p>整型：byte,short,int,long</p><p>浮点型:float,double</p><p>布尔型:boolean</p><p>字符型:char</p><div class="table-container"><table><thead><tr><th></th><th>字节数</th><th>二进制位</th><th>范围</th></tr></thead><tbody><tr><td>byte</td><td>1字节</td><td>8</td><td>[-2^7,2^7-1]</td></tr><tr><td>short</td><td>2字节</td><td>16</td><td>[-2^15,2^15-1]</td></tr><tr><td>int</td><td>4字节</td><td>32</td><td>[-2^31,2^31-1]</td></tr><tr><td>long</td><td>8字节</td><td>64</td><td>[-2^63,2^63-1]</td></tr><tr><td>float(单精度)</td><td>4字节</td><td>32</td><td></td></tr><tr><td>double(双精度)</td><td>8字节</td><td>64</td><td></td></tr><tr><td>boolean</td><td>1字节</td><td>8</td><td></td></tr><tr><td>char</td><td>2字节</td><td>16</td><td>[0,2^16-1]</td></tr></tbody></table></div>        <h2 id="变量和常量"   >          <a href="#变量和常量" class="heading-link"><i class="fas fa-link"></i></a><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h2>      <p>变量:在程序运行过程中，可以发生变化的量</p><p>常量:在程序运行过程中，不会发生变化的量</p><p>常量一般用final关键字进行修饰，只能赋值一次</p><p>变量有成员变量、局部变量、静态变量、参数变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">成员变量：定义在类中、方法外的变量，可以被类中的方法调用，可以被权限修饰符修饰</span><br><span class="line">局部变量：定义在方法体、代码块中的变量，作用域仅限当前方法、代码块中，局部变量在使用前必须先声明，并且不能被权限修饰符修饰</span><br><span class="line">静态变量：定义在类中、方法外的变量，并且用<span class="keyword">static</span>关键字修饰，可以被权限修饰符修饰</span><br><span class="line">参数变量: 方法声明时的变量，作用域仅限于方法体中</span><br></pre></td></tr></table></div></figure>        <h2 id="运算符"   >          <a href="#运算符" class="heading-link"><i class="fas fa-link"></i></a><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2>      <p>&amp;符号和&amp;&amp;之间有什么区别？</p><p>&amp;是普通与，无论第一个条件如何都会进行第二个条件判断，&amp;&amp;是短路与，如果第一个条件为false就不会进入第二个条件判断</p><p>|符号和||之间有什么区别？</p><p>同理，|是普通或，无论第一个条件如何都会进行第二个条件判断，||是短路或，如果第一个条件为true就不会进入第二个条件判断</p>        <h2 id="数据类型转换"   >          <a href="#数据类型转换" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2>              <h2 id="关键字"   >          <a href="#关键字" class="heading-link"><i class="fas fa-link"></i></a><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2>              <h2 id="权限修饰符"   >          <a href="#权限修饰符" class="heading-link"><i class="fas fa-link"></i></a><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2>      <hr>        <h1 id="数组"   >          <a href="#数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#数组" class="headerlink" title="数组"></a>数组</h1>              <h2 id="一维数组"   >          <a href="#一维数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2>              <h2 id="二维数组"   >          <a href="#二维数组" class="heading-link"><i class="fas fa-link"></i></a><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2>              <h2 id="数组的基本操作"   >          <a href="#数组的基本操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#数组的基本操作" class="headerlink" title="数组的基本操作"></a>数组的基本操作</h2>      <hr>        <h1 id="类和对象"   >          <a href="#类和对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1>              <h2 id="对象"   >          <a href="#对象" class="heading-link"><i class="fas fa-link"></i></a><a href="#对象" class="headerlink" title="对象"></a>对象</h2>              <h2 id="类"   >          <a href="#类" class="heading-link"><i class="fas fa-link"></i></a><a href="#类" class="headerlink" title="类"></a>类</h2>              <h3 id="面向对象的操作"   >          <a href="#面向对象的操作" class="heading-link"><i class="fas fa-link"></i></a><a href="#面向对象的操作" class="headerlink" title="面向对象的操作"></a>面向对象的操作</h3>      <hr>        <h1 id="字符串"   >          <a href="#字符串" class="heading-link"><i class="fas fa-link"></i></a><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1>      <hr>        <h1 id="异常"   >          <a href="#异常" class="heading-link"><i class="fas fa-link"></i></a><a href="#异常" class="headerlink" title="异常"></a>异常</h1>      <hr>        <h1 id="枚举"   >          <a href="#枚举" class="heading-link"><i class="fas fa-link"></i></a><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1>      <hr>        <h1 id="反射与注解"   >          <a href="#反射与注解" class="heading-link"><i class="fas fa-link"></i></a><a href="#反射与注解" class="headerlink" title="反射与注解"></a>反射与注解</h1>      <hr>        <h1 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h1>      ]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> javaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE基础-锁【源码篇】</title>
      <link href="/2023/07/20/JavaSE%E5%9F%BA%E7%A1%80-%E9%94%81%E3%80%90%E6%BA%90%E7%A0%81%E7%AF%87%E3%80%91/"/>
      <url>/2023/07/20/JavaSE%E5%9F%BA%E7%A1%80-%E9%94%81%E3%80%90%E6%BA%90%E7%A0%81%E7%AF%87%E3%80%91/</url>
      
        <content type="html"><![CDATA[        <h1 id="Lock"   >          <a href="#Lock" class="heading-link"><i class="fas fa-link"></i></a><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h1>      <p>我们首先要看JUC标准中的Lock接口</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//获取锁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">除非当前线程被中断，否则获取锁</span></span><br><span class="line"><span class="comment">1.如果锁可用则直接获取锁</span></span><br><span class="line"><span class="comment">2.如果锁不可用，则当前线程会被禁用并处于休眠状态直到两钟情况产生</span></span><br><span class="line"><span class="comment">1).锁被当前线程获取</span></span><br><span class="line"><span class="comment">2).其他线程会中断当前线程，并且支持中断锁</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">只有锁是空闲的时候才能获取锁</span></span><br><span class="line"><span class="comment">1.如果锁可用则获取锁，返回true</span></span><br><span class="line"><span class="comment">2.如果锁不可用则返回false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当锁在规定时间内是空闲并且没有线程中断，那么获取锁</span></span><br><span class="line"><span class="comment">形参:  </span></span><br><span class="line"><span class="comment">1.规定锁的超时时间</span></span><br><span class="line"><span class="comment">2.规定时间单位</span></span><br><span class="line"><span class="comment">返回值：</span></span><br><span class="line"><span class="comment">1.true 获取锁成功</span></span><br><span class="line"><span class="comment">2.false 超时，获取锁失败</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//释放锁</span></span><br><span class="line"></span><br><span class="line">Condition <span class="title function_">newCondition</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//创建一个新的Condition实例</span></span><br></pre></td></tr></table></div></figure><p>我们接下来要看Lock的实现类</p>        <h2 id="1-ReentrantLock"   >          <a href="#1-ReentrantLock" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-ReentrantLock" class="headerlink" title="1.ReentrantLock"></a>1.ReentrantLock</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReentrantLock</span> <span class="keyword">implements</span> <span class="title class_">Lock</span>, java.io.Serializable &#123;</span><br><span class="line">    <span class="comment">/*一个可重入互斥锁</span></span><br><span class="line"><span class="comment">      当构造函数接收一个公平性参数，当设置为ture时，则下次获得锁的是等得最久的线程</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">7373984872572414699L</span>;</span><br><span class="line"><span class="comment">//串行化ID</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*提供所有实施机制的同步器 */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br></pre></td></tr></table></div></figure><p>内部类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;</span><br><span class="line">     </span><br><span class="line"> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span>;</span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">            acquire(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">NonfairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                acquire(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="构造方法"   >          <a href="#构造方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>无参构造</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReentrantLock</span><span class="params">()</span> &#123;</span><br><span class="line">        sync = <span class="keyword">new</span> <span class="title class_">NonfairSync</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建一个Reentrantlock实例，相当于ReentrantLock(false),创建了一个非公平可重入锁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*---有关的详细代码---</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">static final class NonfairSync extends Sync &#123;</span></span><br><span class="line"><span class="comment">        private static final long serialVersionUID = 7316153563782823691L;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        final void lock() &#123;</span></span><br><span class="line"><span class="comment">            if (compareAndSetState(0, 1))</span></span><br><span class="line"><span class="comment">                setExclusiveOwnerThread(Thread.currentThread());</span></span><br><span class="line"><span class="comment">            else</span></span><br><span class="line"><span class="comment">                acquire(1);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        protected final boolean tryAcquire(int acquires) &#123;</span></span><br><span class="line"><span class="comment">            return nonfairTryAcquire(acquires);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //因为NonfairSync类只有继承父类下的空参构造，所以会调用new Sync();</span></span><br><span class="line"><span class="comment">    abstract static class Sync extends AbstractQueuedSynchronizer &#123;</span></span><br><span class="line"><span class="comment">        abstract void lock();</span></span><br><span class="line"><span class="comment">        final boolean nonfairTryAcquire(int acquires) &#123;...&#125;</span></span><br><span class="line"><span class="comment">        protected final boolean tryRelease(int releases) &#123;...&#125;</span></span><br><span class="line"><span class="comment">       ...</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment">    //同理因为Sync类也没有空参构造，会调用父类的空参构造 即new AbstractQueuedSynchronizer();</span></span><br><span class="line"><span class="comment">    public abstract class AbstractQueuedSynchronizer extends AbstractOwnableSynchronizer</span></span><br><span class="line"><span class="comment">    implements java.io.Serializable &#123;</span></span><br><span class="line"><span class="comment">    protected AbstractQueuedSynchronizer() &#123; &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //同上，且因为abstract类是个抽象类</span></span><br><span class="line"><span class="comment">    //所以父类也是空参构造，那么这个方法最后调用的结果就是new AbstractOwnableSynchronizer()</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    //那么先暂时按官方说明的理解，调用了一个ReentrantLock(false),创建了一个非公平可重入锁</span></span><br><span class="line"><span class="comment">*/</span>    </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>有参构造</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReentrantLock</span><span class="params">(<span class="type">boolean</span> fair)</span> &#123;</span><br><span class="line">        sync = fair ? <span class="keyword">new</span> <span class="title class_">FairSync</span>() : <span class="keyword">new</span> <span class="title class_">NonfairSync</span>();</span><br><span class="line">    <span class="comment">//通过指定公平策略，创建一个实例ReentrantLock</span></span><br><span class="line">    <span class="comment">//当fair为true则创建FairSync反之创建NonfairSync();</span></span><br><span class="line">    <span class="comment">//默认情况下空参构造是创建一个非公平的可重入互斥锁</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="常用方法"   >          <a href="#常用方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3>              <h4 id="lock方法"   >          <a href="#lock方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#lock方法" class="headerlink" title="lock方法"></a>lock方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        sync.lock();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//sync.lock()</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//所以要去找sync的子类看具体的方法实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认情况下:创建一个NonfairSync</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//nonfairsync.lock()</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                acquire(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//锁状态从0更新到1则说明线程获取了互斥锁</span></span><br><span class="line">&#125;   </span><br><span class="line">    <span class="comment">/*-----详情代码----</span></span><br><span class="line"><span class="comment">    我们可以先通过判断成功与否来反推这个IF语句到底在干吗</span></span><br><span class="line"><span class="comment">    条件成立:</span></span><br><span class="line"><span class="comment">    protected final void setExclusiveOwnerThread(Thread thread) &#123;</span></span><br><span class="line"><span class="comment">        exclusiveOwnerThread = thread;</span></span><br><span class="line"><span class="comment">        //这个方法执行成功后，会获得互斥锁</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    private transient Thread exclusiveOwnerThread;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    条件不成立:</span></span><br><span class="line"><span class="comment">    public final void acquire(int arg) &#123;</span></span><br><span class="line"><span class="comment">        if (!tryAcquire(arg) &amp;&amp;acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span></span><br><span class="line"><span class="comment">        //当尝试获取锁失败并且添加到等待队列中，则会线程自己中断自己</span></span><br><span class="line"><span class="comment">            selfInterrupt();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //尝试获取锁</span></span><br><span class="line"><span class="comment">    protected boolean tryAcquire(int arg) &#123;</span></span><br><span class="line"><span class="comment">        throw new UnsupportedOperationException();</span></span><br><span class="line"><span class="comment">        //尝试获取锁，如果获取将使同步器处于非法操作则抛出异常</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    //给当前创建结点并且给一个标识表示当前线程正在抢夺互斥锁</span></span><br><span class="line"><span class="comment">    private Node addWaiter(Node mode) &#123;</span></span><br><span class="line"><span class="comment">        Node node = new Node(Thread.currentThread(), mode);</span></span><br><span class="line"><span class="comment">        //创建当前线程的结点</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        // Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line"><span class="comment">        Node pred = tail;</span></span><br><span class="line"><span class="comment">        if (pred != null) &#123;</span></span><br><span class="line"><span class="comment">            node.prev = pred;</span></span><br><span class="line"><span class="comment">            if (compareAndSetTail(pred, node)) &#123;</span></span><br><span class="line"><span class="comment">        //利用cas机制将当前线程结点添加到队尾，然后返回Node结束方法</span></span><br><span class="line"><span class="comment">                pred.next = node;</span></span><br><span class="line"><span class="comment">                return node;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        //运行到这里说明加入等待队尾失败        </span></span><br><span class="line"><span class="comment">        enq(node);</span></span><br><span class="line"><span class="comment">        //调用enq(node)</span></span><br><span class="line"><span class="comment">        return node;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    //enq为等待队列，这里会不断死循环直到数据插入到等待队列队尾</span></span><br><span class="line"><span class="comment">    private Node enq(final Node node) &#123;</span></span><br><span class="line"><span class="comment">        for (;;) &#123;</span></span><br><span class="line"><span class="comment">            Node t = tail;</span></span><br><span class="line"><span class="comment">            if (t == null) &#123; // Must initialize</span></span><br><span class="line"><span class="comment">            //如果队尾为空，说明该队列还没有创建，初始化</span></span><br><span class="line"><span class="comment">                if (compareAndSetHead(new Node()))</span></span><br><span class="line"><span class="comment">                //创建新结点插入队首，此时队伍只有队首一个元素,将尾结点指向第一个头结点</span></span><br><span class="line"><span class="comment">                    tail = head;</span></span><br><span class="line"><span class="comment">            &#125; else &#123;</span></span><br><span class="line"><span class="comment">            //队伍中有数据，那么将结点插入队伍</span></span><br><span class="line"><span class="comment">                node.prev = t;</span></span><br><span class="line"><span class="comment">                if (compareAndSetTail(t, node)) &#123;</span></span><br><span class="line"><span class="comment">                    t.next = node;</span></span><br><span class="line"><span class="comment">                    return t;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    因此我们大概可以知道如果状态从0置为1则说明获得了锁，失败了就会加入重试队伍中重试获取锁</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    判断条件:这里调用的是AbstractQueuedSynchronizer父类的方法</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    protected final boolean compareAndSetState(int expect, int update) &#123;</span></span><br><span class="line"><span class="comment">        return unsafe.compareAndSwapInt(this, stateOffset, expect, update);</span></span><br><span class="line"><span class="comment">        //参数1:调用的位置 参数2:偏移量 参数3:期待数  参数4:更新后的值</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    public final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    stateOffset = unsafe.objectFieldOffset (AbstractQueuedSynchronizer.class.getDeclaredField(&quot;state&quot;));0</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    public native long objectFieldOffset(Field var1);</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//创建了一个公平同步器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//FairSync.lock</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">            acquire(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//尝试获得互斥锁</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//尝试获取互斥锁，如果成立返回true,反之线程加入等待队伍</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquire</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">            selfInterrupt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="tryLock方法"   >          <a href="#tryLock方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#tryLock方法" class="headerlink" title="tryLock方法"></a>tryLock方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尝试获取锁，以非公平的方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.nonfairTryAcquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//尝试以非公平的方式获取锁</span></span><br><span class="line"><span class="comment">//如果锁是第一次获取则状态置为1</span></span><br><span class="line"><span class="comment">//如果锁已经被当前线程获取过，那么状态会是原来的状态+1</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">nonfairTryAcquire</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            <span class="comment">//获得当前线程</span></span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line">            <span class="comment">//获得当前状态</span></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">                <span class="comment">//如果用cas机制成功将0更新成参数</span></span><br><span class="line">                    setExclusiveOwnerThread(current);</span><br><span class="line">                    <span class="comment">//将该线程设置为互斥锁的获得者</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="comment">//返回true表示获得锁成功 锁的状态为1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">            <span class="comment">//如果当前线程已经是锁的获得者了</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">nextc</span> <span class="operator">=</span> c + acquires;</span><br><span class="line">                <span class="comment">//将c加入参数值然后交给下一个nextc变量</span></span><br><span class="line">                <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">                setState(nextc);</span><br><span class="line">                <span class="comment">//将nextc设置成锁的状态</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">//返回true表示获得锁成功，锁的状态为当前状态+1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//返回false表示获得锁失败</span></span><br><span class="line">        &#125;    </span><br><span class="line">    </span><br></pre></td></tr></table></div></figure>        <h4 id="unlock方法"   >          <a href="#unlock方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#unlock方法" class="headerlink" title="unlock方法"></a>unlock方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尝试解锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">release</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">            <span class="comment">//设置了状态-1 </span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">h</span> <span class="operator">=</span> head;</span><br><span class="line">            <span class="keyword">if</span> (h != <span class="literal">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">                <span class="comment">//如果队首不为空并且结点不是置于等待状态，调用unparkSuccessor()方法</span></span><br><span class="line">                unparkSuccessor(h);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//返回true表示解锁成功</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//返回false表示解锁失败</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//试图设置state状态来释放独占锁，如果解锁导致同步器非法，那么就抛出异常</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unparkSuccessor</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ws</span> <span class="operator">=</span> node.waitStatus;</span><br><span class="line">    <span class="comment">//获得结点的等待状态,此时传入的结点是队首元素</span></span><br><span class="line">        <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">            compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//如果ws小于0 那么用compareAndSetWaitStatus方法将node结点的等待状态置为0</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Node</span> <span class="variable">s</span> <span class="operator">=</span> node.next;</span><br><span class="line">    <span class="comment">//获得下一个结点</span></span><br><span class="line">        <span class="keyword">if</span> (s == <span class="literal">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//如果下一个结点为空或者下一个结点的等待状态大于0</span></span><br><span class="line">            s = <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//那么将下一个结点置为空</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail; t != <span class="literal">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">                <span class="comment">//从队尾结点开始循环，当尾结点不是当前结点并且非空的时候进入循环，每次循环结束t将指向前一个结点</span></span><br><span class="line">                <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="comment">//当t的状态字小于等于0的时候</span></span><br><span class="line">                    s = t;</span><br><span class="line">            <span class="comment">//将s置于t</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s != <span class="literal">null</span>)</span><br><span class="line">            <span class="comment">//如果s不为空</span></span><br><span class="line">            LockSupport.unpark(s.thread);</span><br><span class="line">    <span class="comment">//将下一个线程解除阻塞，即唤醒下一个等待线程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Makes available the permit for the given thread, if it was not already available. If the thread was blocked on park then it will unblock. Otherwise, its next call to park is guaranteed not to block. This operation is not guaranteed to have any effect at all if the given thread has not been started.</span></span><br><span class="line"><span class="comment">形参:</span></span><br><span class="line"><span class="comment">thread – the thread to unpark, or null, in which case this operation has no effect</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unpark</span><span class="params">(Thread thread)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (thread != <span class="literal">null</span>)</span><br><span class="line">            UNSAFE.unpark(thread);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">unpark</span><span class="params">(Object var1)</span>;</span><br></pre></td></tr></table></div></figure>        <h2 id="ReentrantReadWriteLock"   >          <a href="#ReentrantReadWriteLock" class="heading-link"><i class="fas fa-link"></i></a><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h2>      <p>变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">6992448646407690164L</span>;</span><br><span class="line"><span class="comment">//串行化ID</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock.ReadLock readerLock;</span><br><span class="line"><span class="comment">//内部类 读锁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock.WriteLock writerLock;</span><br><span class="line"><span class="comment">//内部类 写锁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Sync sync;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Unsafe mechanics</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> TID_OFFSET;</span><br></pre></td></tr></table></div></figure><p>内部类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FairSync</span> <span class="keyword">extends</span> <span class="title class_">Sync</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2274990926593161451L</span>;</span><br><span class="line">    <span class="comment">//串行化ID</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">writerShouldBlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hasQueuedPredecessors();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">readerShouldBlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hasQueuedPredecessors();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //如果当前线程前面有一个排队线程则返回true</span></span><br><span class="line"><span class="comment">    //当线程位于队首或者队列为空则返回false</span></span><br><span class="line"><span class="comment">    public final boolean hasQueuedPredecessors() &#123;</span></span><br><span class="line"><span class="comment">        // The correctness of this depends on head being initialized</span></span><br><span class="line"><span class="comment">        // before tail and on head.next being accurate if the current</span></span><br><span class="line"><span class="comment">        // thread is first in queue.</span></span><br><span class="line"><span class="comment">        Node t = tail; // Read fields in reverse initialization order</span></span><br><span class="line"><span class="comment">        Node h = head;</span></span><br><span class="line"><span class="comment">        Node s;</span></span><br><span class="line"><span class="comment">        return h != t &amp;&amp;</span></span><br><span class="line"><span class="comment">            ((s = h.next) == null || s.thread != Thread.currentThread());</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Read vs write count extraction constants and functions.</span></span><br><span class="line"><span class="comment">         * Lock state is logically divided into two unsigned shorts:</span></span><br><span class="line"><span class="comment">         * The lower one representing the exclusive (writer) lock hold count,</span></span><br><span class="line"><span class="comment">         * and the upper the shared (reader) hold count.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SHARED_SHIFT</span>   <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SHARED_UNIT</span>    <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; SHARED_SHIFT);</span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_COUNT</span>      <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EXCLUSIVE_MASK</span> <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">HoldCounter</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// Use id, not reference, to avoid garbage retention</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">tid</span> <span class="operator">=</span> getThreadId(Thread.currentThread());</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalHoldCounter</span></span><br><span class="line">            <span class="keyword">extends</span> <span class="title class_">ThreadLocal</span>&lt;HoldCounter&gt; &#123;</span><br><span class="line">            <span class="keyword">public</span> HoldCounter <span class="title function_">initialValue</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HoldCounter</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="构造方法-1"   >          <a href="#构造方法-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>空参构造</span><br><span class="line">    <span class="comment">//默认创建一个非公平的ReentrantReadWriteLock</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ReentrantReadWriteLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//调用ReentrantReadWriteLock(boolean fair) 方法 传入false参数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>有参构造</span><br><span class="line">    <span class="comment">//给定指定参数，创建相应的读锁写锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ReentrantReadWriteLock</span><span class="params">(<span class="type">boolean</span> fair)</span> &#123;</span><br><span class="line">        sync = fair ? <span class="keyword">new</span> <span class="title class_">FairSync</span>() : <span class="keyword">new</span> <span class="title class_">NonfairSync</span>();</span><br><span class="line">        readerLock = <span class="keyword">new</span> <span class="title class_">ReadLock</span>(<span class="built_in">this</span>);</span><br><span class="line">        writerLock = <span class="keyword">new</span> <span class="title class_">WriteLock</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="方法"   >          <a href="#方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#方法" class="headerlink" title="方法"></a>方法</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回写锁</span></span><br><span class="line"><span class="keyword">public</span> ReentrantReadWriteLock.WriteLock <span class="title function_">writeLock</span><span class="params">()</span> &#123; <span class="keyword">return</span> writerLock; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回读锁</span></span><br><span class="line"><span class="keyword">public</span> ReentrantReadWriteLock.ReadLock  <span class="title function_">readLock</span><span class="params">()</span>  &#123; <span class="keyword">return</span> readerLock; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回是否公平</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isFair</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync <span class="keyword">instanceof</span> FairSync;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回锁的拥有线程</span></span><br><span class="line"><span class="keyword">protected</span> Thread <span class="title function_">getOwner</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getOwner();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回读锁数量，用于监测系统状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getReadLockCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getReadLockCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询写锁是否空闲</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isWriteLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isWriteLocked();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询当前线程是否有写锁</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isWriteLockedByCurrentThread</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.isHeldExclusively();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询当前线程写锁的可重入数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getWriteHoldCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getWriteHoldCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询当前线程读锁的可重入数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getReadHoldCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.getReadHoldCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    </span><br></pre></td></tr></table></div></figure>        <h3 id="Sync常用方法"   >          <a href="#Sync常用方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#Sync常用方法" class="headerlink" title="Sync常用方法"></a>Sync常用方法</h3>              <h4 id="sync方法"   >          <a href="#sync方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#sync方法" class="headerlink" title="sync方法"></a>sync方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Sync() &#123;</span><br><span class="line">            readHolds = <span class="keyword">new</span> <span class="title class_">ThreadLocalHoldCounter</span>();</span><br><span class="line">            <span class="comment">//调用ThreadLocalHoldCounter()</span></span><br><span class="line">            </span><br><span class="line">            setState(getState()); <span class="comment">// ensures visibility of readHolds</span></span><br><span class="line">            <span class="comment">//设置状态字，确保readHolds的可见性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalHoldCounter</span> <span class="keyword">extends</span> <span class="title class_">ThreadLocal</span>&lt;HoldCounter&gt; &#123;</span><br><span class="line">            <span class="keyword">public</span> HoldCounter <span class="title function_">initialValue</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HoldCounter</span>();</span><br><span class="line">                <span class="comment">//调用方法 直接返回HoldCounter</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">HoldCounter</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//设置数量为0</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// Use id, not reference, to avoid garbage retention</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">tid</span> <span class="operator">=</span> getThreadId(Thread.currentThread());</span><br><span class="line">            <span class="comment">//获取当前线程id，使得被标记省的被垃圾回收</span></span><br><span class="line">        &#125;        </span><br><span class="line">    </span><br></pre></td></tr></table></div></figure>        <h4 id="tryAcquire方法"   >          <a href="#tryAcquire方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#tryAcquire方法" class="headerlink" title="tryAcquire方法"></a>tryAcquire方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            如果是可重入获取或者队列策略允许，则该线程有权利加锁，那么将更新锁的状态并且设置持有者为当前线程</span></span><br><span class="line"><span class="comment">         如果读或写计数器非0，且不是当前线程持有，则返回false</span></span><br><span class="line"><span class="comment">         如果计数器将达到上限，则返回false</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line">    <span class="comment">//获取锁的状态</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> exclusiveCount(c);</span><br><span class="line">    <span class="comment">//获取锁的可重入数计数</span></span><br><span class="line">            <span class="keyword">if</span> (c != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// (Note: if c != 0 and w == 0 then shared count != 0)</span></span><br><span class="line">                <span class="keyword">if</span> (w == <span class="number">0</span> || current != getExclusiveOwnerThread())</span><br><span class="line">                    <span class="comment">//如果可重入数计数为空或者锁非当前线程持有，那么返回false</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)</span><br><span class="line">                    <span class="comment">//如果可重入数大于最大数量，抛出异常</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">                <span class="comment">// Reentrant acquire</span></span><br><span class="line">                <span class="comment">//可重入锁加锁成功</span></span><br><span class="line">                <span class="comment">//将计数器设回状态中</span></span><br><span class="line">                setState(c + acquires);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="comment">// 能运行到这里也没有抛出异常 那么说明锁空闲</span></span><br><span class="line">            <span class="keyword">if</span> (writerShouldBlock() ||!compareAndSetState(c, c + acquires))</span><br><span class="line">                <span class="comment">//进行判断，如果写操作被阻塞或者CAS机制发现更新操作失败(即多线程情况下别人线程已经获取了锁)</span></span><br><span class="line">                <span class="comment">//加锁失败</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//将当前线程设置为锁的持有者，返回true</span></span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">exclusiveCount</span><span class="params">(<span class="type">int</span> c)</span> &#123; <span class="keyword">return</span> c &amp; EXCLUSIVE_MASK; &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="tryRelease方法"   >          <a href="#tryRelease方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#tryRelease方法" class="headerlink" title="tryRelease方法"></a>tryRelease方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> releases)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isHeldExclusively())</span><br><span class="line">                <span class="comment">//当锁不是当前线程持有，则抛出异常</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalMonitorStateException</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//运行到这里说明锁的持有者是当前线程</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">nextc</span> <span class="operator">=</span> getState() - releases;</span><br><span class="line">    <span class="comment">//将当前状态数减去1之后设置为更新后的状态数</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">free</span> <span class="operator">=</span> exclusiveCount(nextc) == <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//如果更新之后数据为0，那么说明锁空闲</span></span><br><span class="line">            <span class="keyword">if</span> (free) </span><br><span class="line">                <span class="comment">//锁空闲之后设置者为null</span></span><br><span class="line">                setExclusiveOwnerThread(<span class="literal">null</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置更新之后的状态字</span></span><br><span class="line">            setState(nextc);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回可重入次数</span></span><br><span class="line">            <span class="keyword">return</span> free;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isHeldExclusively</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// While we must in general read state before owner,</span></span><br><span class="line">            <span class="comment">// we don&#x27;t need to do so to check if current thread is owner</span></span><br><span class="line">            <span class="keyword">return</span> getExclusiveOwnerThread() == Thread.currentThread();</span><br><span class="line">    <span class="comment">//如果当前线程不是锁的持有者则返回false</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="tryWriteLock方法"   >          <a href="#tryWriteLock方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#tryWriteLock方法" class="headerlink" title="tryWriteLock方法"></a>tryWriteLock方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryWriteLock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//获取当前线程和锁的状态字</span></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//如果锁有持有者</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> exclusiveCount(c);</span><br><span class="line">                <span class="comment">//获取锁的可重入数</span></span><br><span class="line">                <span class="keyword">if</span> (w == <span class="number">0</span> || current != getExclusiveOwnerThread())</span><br><span class="line">                    <span class="comment">//如果锁并非当前线程持有，则加写锁失败</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (w == MAX_COUNT)</span><br><span class="line">                    <span class="comment">//如果锁的可重入数达到上限，则抛出异常</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="comment">//执行到这里还没有抛出异常说明可重入数未达到上限或者锁空闲</span></span><br><span class="line">            <span class="keyword">if</span> (!compareAndSetState(c, c + <span class="number">1</span>))</span><br><span class="line">                <span class="comment">//用CAS机制设置状态失败</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//返回false</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果加锁成功，那么将锁持有者设置为当前线程</span></span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="tryReadLock方法"   >          <a href="#tryReadLock方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#tryReadLock方法" class="headerlink" title="tryReadLock方法"></a>tryReadLock方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">对读锁使用tryLock()方法</span><br><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryReadLock</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">          <span class="comment">//获取当前线程</span></span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line">                <span class="comment">//获取锁的状态</span></span><br><span class="line">                <span class="keyword">if</span> (exclusiveCount(c) != <span class="number">0</span> &amp;&amp; getExclusiveOwnerThread() != current)</span><br><span class="line">                <span class="comment">//锁可重入数非空或者锁的持有者不是当前线程，则加锁失败</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> sharedCount(c);</span><br><span class="line">                <span class="comment">//获取分享状态字</span></span><br><span class="line">                <span class="keyword">if</span> (r == MAX_COUNT)</span><br><span class="line">                    <span class="comment">//如果分享数达到上限 抛出异常</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (compareAndSetState(c, c + SHARED_UNIT)) &#123;</span><br><span class="line">                    <span class="comment">//用CAS给状态c设置数据</span></span><br><span class="line">                    <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">//如果r为空</span></span><br><span class="line">                        firstReader = current;</span><br><span class="line">                        firstReaderHoldCount = <span class="number">1</span>;</span><br><span class="line">                        <span class="comment">//那么读锁持有数设置为1，第一头结点设置为当前线程</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">                        <span class="comment">//r非空，那么头结点获取线程数+1</span></span><br><span class="line">                        firstReaderHoldCount++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//缓冲区线程数设置为头结点线程数</span></span><br><span class="line">                        <span class="type">HoldCounter</span> <span class="variable">rh</span> <span class="operator">=</span> cachedHoldCounter;</span><br><span class="line">                        <span class="keyword">if</span> (rh == <span class="literal">null</span> || rh.tid != getThreadId(current))</span><br><span class="line">                            <span class="comment">//如果rh为空或者rh的线程id不等于当前线程id</span></span><br><span class="line">                            cachedHoldCounter = rh = readHolds.get();</span><br><span class="line">                        </span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                            readHolds.set(rh);</span><br><span class="line">                        rh.count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//加锁成功</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="tryAcquireShared方法"   >          <a href="#tryAcquireShared方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#tryAcquireShared方法" class="headerlink" title="tryAcquireShared方法"></a>tryAcquireShared方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tryAcquireShared</span><span class="params">(<span class="type">int</span> unused)</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            如果写锁被另一个线程持有，则失败</span></span><br><span class="line"><span class="comment">            如果当前线程能有资格持有写锁。询问队列策略是否应该被阻塞</span></span><br><span class="line"><span class="comment">            没有被阻塞，用CAS机制给锁更新状态和计数</span></span><br><span class="line"><span class="comment">            如果加锁失败，那么可能是线程不能持有写锁，或者CAS更新失败，或者计数器饱和</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line">            <span class="keyword">if</span> (exclusiveCount(c) != <span class="number">0</span> &amp;&amp;</span><br><span class="line">                getExclusiveOwnerThread() != current)</span><br><span class="line">                <span class="comment">//判断写锁是否被其他线程持有</span></span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> sharedCount(c);</span><br><span class="line">    <span class="comment">//将计数状态交给r</span></span><br><span class="line">            <span class="keyword">if</span> (!readerShouldBlock() &amp;&amp;</span><br><span class="line">                r &lt; MAX_COUNT &amp;&amp;</span><br><span class="line">                compareAndSetState(c, c + SHARED_UNIT)) &#123;</span><br><span class="line">                <span class="comment">//当不被阻塞,并且计数器小于最大值以及更新状态成功</span></span><br><span class="line">                <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//如果计数器为0 ，那么将当前线程设置为第一个顾客，可重入计数为1</span></span><br><span class="line">                    firstReader = current;</span><br><span class="line">                    firstReaderHoldCount = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">                    <span class="comment">//如果第一个获取锁的是当前线程，那么将计数器+1</span></span><br><span class="line">                    firstReaderHoldCount++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">HoldCounter</span> <span class="variable">rh</span> <span class="operator">=</span> cachedHoldCounter;</span><br><span class="line">                    <span class="keyword">if</span> (rh == <span class="literal">null</span> || rh.tid != getThreadId(current))</span><br><span class="line">                        cachedHoldCounter = rh = readHolds.get();</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                        readHolds.set(rh);</span><br><span class="line">                    rh.count++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> fullTryAcquireShared(current);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></div></figure>        <h1 id="synchronized关键字"   >          <a href="#synchronized关键字" class="heading-link"><i class="fas fa-link"></i></a><a href="#synchronized关键字" class="headerlink" title="synchronized关键字"></a>synchronized关键字</h1>      ]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sprng面试题</title>
      <link href="/2023/07/20/Sprng%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/07/20/Sprng%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[        <h1 id="Spring的事务传播行为"   >          <a href="#Spring的事务传播行为" class="heading-link"><i class="fas fa-link"></i></a><a href="#Spring的事务传播行为" class="headerlink" title="Spring的事务传播行为"></a>Spring的事务传播行为</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">事务有七种传播行为</span><br><span class="line"><span class="number">1.</span>REQUIRED:支持当前事务，当前有事务则直接加入该事务，当没有事务会创建一个新事务</span><br><span class="line"><span class="number">2.</span>SUPPORTS：支持当前事务，如果当前没事务就以非事务的方式进行</span><br><span class="line"><span class="number">3.</span>MANDATORY:支持当前事务，必须要有事务否则抛出异常</span><br><span class="line"><span class="number">4.</span>REQUIRES_NEW:不管有没有事务，都会开启新事务，会把当前事务挂起，当新事务执行结束老事务才会继续运行</span><br><span class="line"><span class="number">5.</span>NOT_SUPPORTED:以非事务的方式进行，如果有事务则把事务挂起</span><br><span class="line"><span class="number">6.</span>NEVER:不允许有事务，如果有事务则抛出异常</span><br><span class="line"><span class="number">7.</span>NESTED:如果当前有事务则嵌套在当前事务，如果没有会新建一个事务</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">REQUIRED和NESTED的区别:REQUIRED是同一个事务，子进程回滚也会导致父进程回滚，NESTED是嵌套事务，子事务回滚不会导致父事务回滚，</span><br></pre></td></tr></table></div></figure>        <h1 id="Spring事务什么时候会失效？"   >          <a href="#Spring事务什么时候会失效？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Spring事务什么时候会失效？" class="headerlink" title="Spring事务什么时候会失效？"></a>Spring事务什么时候会失效？</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.Bean对象没有被Spirng容器管理：自己new出来的bean对象而不是IOC中的Bean</span><br><span class="line">2.方法的访问权限不是Public，方法的访问权限是private也会失效</span><br><span class="line">3.数据库不支持事务，所以Spring的事务会失效</span><br><span class="line">4.异常被捕获了，导致本该回滚的数据没有回滚</span><br><span class="line">5.异常类型错误或者配置错误</span><br><span class="line">6.数据源没有配置事务管理器</span><br><span class="line">7.自身调用:本方法内调用本方法，那么就没有走aop的代理过程，所以会失效</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h1 id="Spring事务的本质？"   >          <a href="#Spring事务的本质？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Spring事务的本质？" class="headerlink" title="Spring事务的本质？"></a>Spring事务的本质？</h1>              <h1 id="说说你对IOC的理解"   >          <a href="#说说你对IOC的理解" class="heading-link"><i class="fas fa-link"></i></a><a href="#说说你对IOC的理解" class="headerlink" title="说说你对IOC的理解"></a>说说你对IOC的理解</h1>              <h1 id="说说你对AOP的理解"   >          <a href="#说说你对AOP的理解" class="heading-link"><i class="fas fa-link"></i></a><a href="#说说你对AOP的理解" class="headerlink" title="说说你对AOP的理解"></a>说说你对AOP的理解</h1>              <h1 id="AutoWired和Resource的区别"   >          <a href="#AutoWired和Resource的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#AutoWired和Resource的区别" class="headerlink" title="AutoWired和Resource的区别?"></a>AutoWired和Resource的区别?</h1>      ]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC面试题</title>
      <link href="/2023/07/20/SpringMVC%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/07/20/SpringMVC%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[        <h1 id="什么是SpringMVC"   >          <a href="#什么是SpringMVC" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是SpringMVC" class="headerlink" title="什么是SpringMVC"></a>什么是SpringMVC</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SpringMVC是Spring框架下的一个模块，用于处理web请求，基于MVC的web框架,而MVC是一种设计模式</span><br><span class="line">    M -model模型 </span><br><span class="line">   V -View 视图</span><br><span class="line">    C -controller控制器</span><br></pre></td></tr></table></div></figure>        <h1 id="能说说SpringMVC的工作流程吗？"   >          <a href="#能说说SpringMVC的工作流程吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#能说说SpringMVC的工作流程吗？" class="headerlink" title="能说说SpringMVC的工作流程吗？"></a>能说说SpringMVC的工作流程吗？</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>用户发送HTTP请求到前端控制器DispatcherServlet</span><br><span class="line"><span class="number">2.</span>DispatcherServlet调用handlerMapping(处理器映射器)找到映射器</span><br><span class="line"><span class="number">3.</span>handlerMapping通过url路径生成对应的处理器和拦截器，一起返回给DispatcherServlet</span><br><span class="line"><span class="number">4.</span>DispatcherServlet调用handlerAdapter(处理器适配器)</span><br><span class="line"><span class="number">5.</span>handlerApadter调用handler(处理器)[也就是我们写的Controller]</span><br><span class="line"><span class="number">6.</span>handler处理返回结果封装成ModelandView</span><br><span class="line"><span class="number">7.</span>handlerApadter将返回结果ModelandView返回给DispatcherServlet</span><br><span class="line"><span class="number">8.</span>DispatcherServlet将ModelandView发送给ViewReslover(视图解析器)</span><br><span class="line"><span class="number">9.</span>ViewReslover解析之后返回具体的View</span><br><span class="line"><span class="number">10.</span>DisPatcherServlet将View渲染</span><br><span class="line"><span class="number">11.</span>DisPatcherServlet相应用户</span><br><span class="line">    </span><br><span class="line">而面向接口编程有不同的工作流程</span><br><span class="line"><span class="number">1.</span>用户发送HTTP请求到前端控制器DispatcherServlet</span><br><span class="line"><span class="number">2.</span>DispatcherServlet调用handlerMapping(处理器映射器)找到映射器</span><br><span class="line"><span class="number">3.</span>handlerMapping通过url路径生成对应的处理器和拦截器，一起返回给DispatcherServlet</span><br><span class="line"><span class="number">4.</span>DispatcherServlet调用handlerAdapter(处理器适配器)</span><br><span class="line"><span class="number">5.</span>handlerApadter调用handler(处理器)[也就是我们写的Controller]</span><br><span class="line"><span class="number">6.</span>方法上添加ReSponseBody</span><br><span class="line"><span class="number">7.</span>通过HttpMessageConverter来返回结果转为Json格式并响应</span><br></pre></td></tr></table></div></figure>        <h1 id="SpringMVC的主要组件有哪些"   >          <a href="#SpringMVC的主要组件有哪些" class="heading-link"><i class="fas fa-link"></i></a><a href="#SpringMVC的主要组件有哪些" class="headerlink" title="SpringMVC的主要组件有哪些"></a>SpringMVC的主要组件有哪些</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">主要有五个组件:DisPatcherServlet、handlerMapping、handlerAdapter、handler、ViewReslover</span><br><span class="line"></span><br><span class="line">1.DisPatcherServlet:前端控制器    整个流程的控制中心，调用其他组件来处理网络请求</span><br><span class="line">2.handlerMapping   :处理器映射器  负责根据网络请求不同找到对应的处理器映射</span><br><span class="line">3.hander           :处理器       对具体的请求进行处理，通常是我们写的Controller</span><br><span class="line">4.handerAdapter    :处理器适配器  通过特定的规则去执行handler</span><br><span class="line">5.ViewReslover     :视图解析器    用于解析处理结果生成View</span><br></pre></td></tr></table></div></figure>        <h1 id="SpringMVC有哪些常用注解？"   >          <a href="#SpringMVC有哪些常用注解？" class="heading-link"><i class="fas fa-link"></i></a><a href="#SpringMVC有哪些常用注解？" class="headerlink" title="SpringMVC有哪些常用注解？"></a>SpringMVC有哪些常用注解？</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span> :用于处理请求url的注解，可用于类和方法上，用于类上则所有方法都需要有这个父地址</span><br><span class="line"><span class="meta">@RequestBody</span>    :实现接收网络请求中的JSON数据</span><br><span class="line"><span class="meta">@ResponseBody</span>   :用于返回Json格式的数据</span><br></pre></td></tr></table></div></figure>        <h1 id="Spring、SpringMVC、SpringBoot的区别"   >          <a href="#Spring、SpringMVC、SpringBoot的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#Spring、SpringMVC、SpringBoot的区别" class="headerlink" title="Spring、SpringMVC、SpringBoot的区别"></a>Spring、SpringMVC、SpringBoot的区别</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Spring是一个开发框架，核心的IOC和AOP</span><br><span class="line">SpringMVC是Spring的一个模块，用于处理网络请求的模块</span><br><span class="line">SpringBoot是基于Spring的一个脚手架，为开发Spring生态其他框架铺平道路</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某大厂的实习生线下面试</title>
      <link href="/2023/07/19/%E6%9F%90%E5%A4%A7%E5%8E%82%E7%9A%84%E5%AE%9E%E4%B9%A0%E7%94%9F%E7%BA%BF%E4%B8%8B%E9%9D%A2%E8%AF%95/"/>
      <url>/2023/07/19/%E6%9F%90%E5%A4%A7%E5%8E%82%E7%9A%84%E5%AE%9E%E4%B9%A0%E7%94%9F%E7%BA%BF%E4%B8%8B%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>一开始约的是两点面试，然后我是一点半就到了，搞来搞去变得直接上去在别人办公室里，等上一个哥们面试结束，然后直接就开始了。</p><h2 id=""><a href="#" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>1.简单介绍一下自己的家庭情况和学校的实习、学习情况，主修的课程、技能等</p><p>2.看你简历上有一个仿今日头条的项目?是出于什么目的进行开发的呢？</p><p>3.项目是几个人组成的小组?每个人的成员构成和职责是什么样的？</p><p>4.你负责的是哪个角色？</p><p>5.你应该也有在网上学习java，能说一下你在互联网是通过什么渠道学习的呢？</p><p>6.你了解前端开发吗？</p><p>7.有了解过集合吗？看过底层源码吗？</p><p>8.ArrayList底层是怎么进行创建和扩容的呢？</p><p>9.集合是怎么处理哈希碰撞的？</p><p>10.有了解过锁吗?Lock和Sychorized那些</p><p>11.final修饰符有学习过吗？它有什么使用场景</p><p>12.final修饰方法会怎么样？final修饰类会怎么样?</p><p>13.Integer和int能直接进行比较吗？</p><p>14.Integer底层有一个缓冲数组，在这个缓冲数组边界能直接使用吗？</p><p>15.&#x3D;&#x3D;和equals方法的区别</p><p>16.有了解过Volatile关键字吗？</p><p>17.说说SpringMVC的执行流程</p><p>18.说说你对Vue和H5的理解</p><p>19.V-show和V-if的使用场景</p><p>20.有了解过垃圾回收机制吗？</p><p>21.jdk1.8之后默认的GC是哪个？</p><p>22.有了解过主流的数据库吗？</p><p>23.说说你对Mysql优化的理解</p><p>24.有了解过范式和反范式吗？</p><p>25.你在项目中有使用过Redis，能说说你基于什么情况考虑使用的Redis呢?</p><p>26.Redis常用的数据类型有哪些？</p><p>27.你在Redis的环境下有没有开发部署过项目</p>        <h2 id="-1"   >          <a href="#-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#-1" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2>      <p>技术面部分结束了，然后hr问我有没有想对公司了解的情况</p><p>我当时问的是1.实习的时间段，是否支持转正</p><p>​2.上班工作的时间段</p><p>然后这个时候技术面试官追问了一条能不能接收996的情况</p><p>总结和复盘：</p><p>首先，我要感谢这个公司能给我一个这个时间段的一个技术线下面试，在目前我所在的阶段，这个机会是千载难逢的，这是不可否认的。</p><p>其次，我因为是第一次线下面试，经过这个技术面才能知道学习到的东西和当时在小房子里面能想起来的东西真的差距很大。</p><p>我进去脑子一片空白，和技术面试官大眼瞪小眼，你看着我我看着你，然后他问的东西有些其实我都知道也系统学习过看过源码，但是在当时的环境下，我脑子里面什么都不知道，所有的都是基于平常的理解再一点点一点点的复述出来。</p><p>第三，因为第一个问题就把我问爆了有点，我自己答得不对，甚至有可能是全错，这个面试官眉头一皱，我就知道这次其实噶了，但是万幸的是在这个时间段失败是可以接受的事，因为只有经过这次面试，我才知道在日常学习和真的面试中你能脑子里想出来的东西是不一样的，我得加强对面试情况的测试。</p><p>真得重新准备准备下EE的内容，因为基础有点忘记了搞得答出来很没有底气，我都不知道是对是错，等校招的时候好好发挥一下，在这个时间段就应该多投实习面试，去多尝试面试，锻炼面试经验</p><p>可以说很多准备的东西都没有问到，问到的都是偏向基础和底层，而这块确实是我现在目前尚未发现的问题。</p><p>输一场也不一定是坏事，是吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE基础-并发编程【源码篇】</title>
      <link href="/2023/07/19/JavaSE%E5%9F%BA%E7%A1%80-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%90%E6%BA%90%E7%A0%81%E7%AF%87%E3%80%91/"/>
      <url>/2023/07/19/JavaSE%E5%9F%BA%E7%A1%80-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E3%80%90%E6%BA%90%E7%A0%81%E7%AF%87%E3%80%91/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE基础-集合【源码篇】</title>
      <link href="/2023/07/15/JavaSE%E5%9F%BA%E7%A1%80-%E9%9B%86%E5%90%88%E3%80%90%E6%BA%90%E7%A0%81%E7%AF%87%E3%80%91/"/>
      <url>/2023/07/15/JavaSE%E5%9F%BA%E7%A1%80-%E9%9B%86%E5%90%88%E3%80%90%E6%BA%90%E7%A0%81%E7%AF%87%E3%80%91/</url>
      
        <content type="html"><![CDATA[        <h1 id="集合"   >          <a href="#集合" class="heading-link"><i class="fas fa-link"></i></a><a href="#集合" class="headerlink" title="集合"></a>集合</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">集合与数组的区别：1.集合的长度可变，而数组的长度不可变</span><br><span class="line">   2.集合只能存引用数据类型，而数组能存基本数据类型和引用数据类型</span><br><span class="line">   3.集合可以存放多种数据类型，而数组在定义是只能存放同一种的数据类型</span><br></pre></td></tr></table></div></figure><p>集合分为两种，一种是继承Collection的单列集合List和Set，另一种就是实现Map接口的双列集合</p>        <h2 id="Collection的子接口"   >          <a href="#Collection的子接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#Collection的子接口" class="headerlink" title="Collection的子接口"></a>Collection的子接口</h2>              <h3 id="1-List接口"   >          <a href="#1-List接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-List接口" class="headerlink" title="(1)List接口"></a>(1)List接口</h3>      <p>list的特性是：可重复、有序、有索引、可插入Null</p><p>实现List接口的实现类是ArrayList、LinkedList、Vector</p>        <h4 id="1、ArrayList"   >          <a href="#1、ArrayList" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、ArrayList" class="headerlink" title="1、ArrayList"></a>1、ArrayList</h4>      <p>ArrayList底层：</p><p>变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">8683452581122892189L</span>;</span><br><span class="line"><span class="comment">//序列化ID</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">//默认长度</span></span><br><span class="line">  </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"><span class="comment">//空数组</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"><span class="comment">//默认初始化情况下的空数组</span></span><br><span class="line">   <span class="keyword">transient</span> Object[] elementData; </span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> size;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">创建ArrayList的时候：</span><br><span class="line"><span class="number">1.</span>无参构造 </span><br><span class="line">    <span class="comment">//  Constructs an empty list with an initial capacity of ten. 构建一个空的list并且将初始容量为10</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    //  The array buffer into which the elements of the ArrayList are stored. 这个缓冲区被用于存储ArrayList对象</span></span><br><span class="line"><span class="comment">    //  The capacity of the ArrayList is the length of this array buffer.  ArrayList的容量取决于这个缓冲区长度</span></span><br><span class="line"><span class="comment">    //  Any empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA will be expanded to DEFAULT_CAPACITY when the first element is added. </span></span><br><span class="line"><span class="comment">    任何空的ArrayList当缓冲区等于空的地址与默认为空的实例相等时将会扩容默认的容量当第一次元素添加</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">transient Object[] elementData;   </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">//Shared empty array instance used for default sized empty instances.  用于默认大小的空实例的共享空数组实例。</span></span><br><span class="line"><span class="comment">//  We distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when first element is added.</span></span><br><span class="line"><span class="comment">我们将其与EMPTY_ELEMENTDATA区分开来，以了解添加第一个元素时要膨胀多少。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">总结 空参构造就是创建一个大小为<span class="number">0</span>的Object数组  它会当第一次元素添加的时候扩容</span><br><span class="line"><span class="number">2.</span>有参构造</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an empty list with the specified initial capacity. 构造一个指定大小容量的空List</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  initialCapacity  the initial capacity of the list   参数：这个List的容量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the specified initial capacity is negative</span></span><br><span class="line"><span class="comment">     抛出异常当这个指定的容量为负数时</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Shared empty array instance used for empty instances.</span></span><br><span class="line"><span class="comment">       共享一个空的数组实例用来代表空数组</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">       private static final Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;  <span class="comment">//传入参数：指定的容量</span></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">            <span class="comment">//如果这个参数大于0 则将创建一个这个参数大小的Object数组 并且赋值给缓冲区</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//如果这个参数等于0 则将空数组实例赋值给缓冲区</span></span><br><span class="line">            <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果这个参数为负数 则抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">总结 </span><br><span class="line">    参数大于<span class="number">0</span>的时候会创建一个这个参数大小的数组 </span><br><span class="line">    参数等于<span class="number">0</span>的时候会创建一个大小为<span class="number">0</span>的数组</span><br><span class="line">    参数小于<span class="number">0</span>的时候会抛出异常</span><br><span class="line">有参构造<span class="number">2</span>：</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a list containing the elements of the specified collection, in the order they are returned by the collection&#x27;s iterator.</span></span><br><span class="line"><span class="comment">     * 创建一个List，该List包含参数集合中的元素，按参数集合的迭代器返回的顺序排列。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c the collection whose elements are to be placed into this list  </span></span><br><span class="line"><span class="comment">       参数c是一个要被放入这个新list中的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment">       当参数集合是空集合的时候抛出空指针异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">    <span class="comment">//先将C数组化放到对象数组a中</span></span><br><span class="line">        <span class="keyword">if</span> ((size = a.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果数组a的长度不等于0的话，即这个传入进来的集合非空</span></span><br><span class="line">            <span class="keyword">if</span> (c.getClass() == ArrayList.class) &#123;</span><br><span class="line">        <span class="comment">//如果集合C也是一个ArrayList 就将a传入缓存区的指针中</span></span><br><span class="line">                elementData = a;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">//如果集合C不是ArrayList,就用Arrays.copy这个数组存入一个对象数组中，再传入ElementData中</span></span><br><span class="line">                elementData = Arrays.copyOf(a, size, Object[].class);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//当数组长度为0的时候，为空List</span></span><br><span class="line">            <span class="comment">// replace with empty array.</span></span><br><span class="line">            elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">总结：这个有参构造就是将集合的全部拷贝</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></div></figure><p>不仅如此，现在只是了解了ArrayList怎么创建的数组，但是空参构造会调用父类的构造方法，所以我们要看一下父类的构造方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>父类AbstractList</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractCollection</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">AbstractList</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="number">2.</span>父类AbstractCollection</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractCollection</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Collection</span>&lt;E&gt; &#123;</span><br><span class="line"> <span class="keyword">protected</span> <span class="title function_">AbstractCollection</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>但是问题来了，ArrayList已知创建一个大小为0的Object数组，并且提到会在第一次添加元素的时候进行扩容，这个扩容又是怎么处理的呢？我们重点要关注一下Add方法，且由于ArrayList的父类是抽象类，所以我们只要关注本身的Add方法即可</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Appends the specified element to the end of this list. 添加一个元素进入这个list的尾部</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e element to be appended to this list 参数：一个将要被添加到list中的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)  </span></span><br><span class="line"><span class="comment">   返回true </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The size of the ArrayList (the number of elements it contains).</span></span><br><span class="line"><span class="comment">   私有化一个size 用来表示这个ArrayList的长度(包含元素的个数)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">modCount</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">//用来记录集合操作的次数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ARRAY_SIZE</span> <span class="operator">=</span> Integer.MAX_VALUE - <span class="number">8</span>; 定义数组的最大长度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="comment">//调用ensureCapacityInternal() 方法 传入size(现在这个ArrayList元素个数)+1</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="comment">//将size自增后将E插入进这个Object数组(缓存区) ==&gt; 插入数组尾部</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//返回Ture</span></span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line"><span class="comment">//传入参数 minCapacity即需要的最小长度</span></span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">    <span class="comment">//先看参数calculateCapacity(elementData, minCapacity)   </span></span><br><span class="line">    <span class="comment">//这个calculateCapacity()方法会返回一个数据，即扩容的大小</span></span><br><span class="line">    <span class="comment">//调用 ensureExplicitCapacity()方法，将计算出的大小传入进去</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line"><span class="comment">//传入参数:是经过计算之后算出的长度(默认长度10或者是大于10且是需要的最小长度)</span></span><br><span class="line"></span><br><span class="line">    modCount++;  </span><br><span class="line">    <span class="comment">//modCount是用来记录集合被操作过的次数  自增</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="comment">//说明这段代码是考虑过溢出的</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="comment">//如果需要的长度减去数组长度&gt;0的话 触发生长函数</span></span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateCapacity</span><span class="params">(Object[] elementData, <span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">//将缓冲区数组和需要最小长度传入</span></span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">    <span class="comment">//如果这个缓冲区是等于默认的空数组实例 即空数组</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    <span class="comment">/*返回一个最大值(在默认大小和最小需要长度之间)</span></span><br><span class="line"><span class="comment">    已知默认长度为10，假如目前数组中有0个数据一次性插入12个数据</span></span><br><span class="line"><span class="comment">    那么minCapacity应该为12  最小长度为现在数组个数+需要插入个数</span></span><br><span class="line"><span class="comment">    于是最终返回12</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当缓存区数组是存在数据的，那么直接返回需要的最小集合长度</span></span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line"><span class="comment">//传入参数：默认10或者是大于10但是需要的最小长度</span></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">    <span class="comment">//定义一个变量 记录老数组的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义一个变量 记录新数组的长度  新数组的长度等于老数组的长度+老数组右移一位</span></span><br><span class="line"><span class="comment">    如： 老数组长度为10  则二进制是1010  右移一位就是101  ==&gt; 5</span></span><br><span class="line"><span class="comment">        所以新数组的长度是10+5  即新数组的长度是老数组的1.5倍  </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)  </span><br><span class="line">    <span class="comment">//如果新数组长度比需要的最小长度还小 则将新数组长度直接设为需要的最小长度</span></span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="comment">//如果新数组长度比数组最大长度还大 则调用hugeCapacity()方法</span></span><br><span class="line">    <span class="comment">//这个方法会1.抛出堆栈溢出错误2.返回定义的数组最大长度\整数的最大长度</span></span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    最后将老数组拷贝到新数组中，再赋值回老数组</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hugeCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line"><span class="comment">//传入需要的最小长度</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">    <span class="comment">//如果是小于0 则抛出异常  堆栈溢出</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">    <span class="comment">//如果最小长度比定义的最大数组长度还大，则直接返回整数的最大长度，否则返回定义的数组最大长度</span></span><br><span class="line">        Integer.MAX_VALUE : MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>所以关注子类的构造方法即可</p>        <h4 id="2、LinkedList"   >          <a href="#2、LinkedList" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、LinkedList" class="headerlink" title="2、LinkedList"></a>2、LinkedList</h4>      <p>linkedList底层:</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">结构:</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractSequentialList</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable&#123;</span><br><span class="line"><span class="keyword">transient</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first; <span class="comment">//定义LinkedList的首结点</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;  <span class="comment">//定义LinkedList的尾结点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里是Node的结构</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">        E item;</span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = element;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">            <span class="built_in">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></div></figure><p>因此我们可以得出LinkedList的Node结构示意图</p><div class="table-container"><table><thead><tr><th align="center">Node<E> prev</th><th align="center">element</th><th align="center">Node<E> next</th></tr></thead></table></div><p>并且LinkedList是一个双端链表，它记录了头结点和尾结点的位置</p><p>我们接下来也要探究一下构造方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>空参构造</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an empty list. 创建一个空list</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>有参构造</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a list containing the elements of the specified collection, in the order they are returned by the collection&#x27;s  iterator.</span></span><br><span class="line"><span class="comment">     创建一个list，新list包含传入参数集合的元素和构造器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  c the collection whose elements are to be placed into this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();   <span class="comment">//调用空参构造</span></span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> addAll(size, c); <span class="comment">//返回调用函数的结果</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        checkPositionIndex(index); </span><br><span class="line">        <span class="comment">//将LinkedList的容量传入</span></span><br><span class="line"></span><br><span class="line">        Object[] a = c.toArray();  <span class="comment">//将传入的集合C进行数组化</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">numNew</span> <span class="operator">=</span> a.length;     <span class="comment">//记录C中的元素个数</span></span><br><span class="line">        <span class="keyword">if</span> (numNew == <span class="number">0</span>)           <span class="comment">//如果C是空集合则返回false</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; pred, succ;        <span class="comment">//定义两个节点</span></span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;       <span class="comment">//如果index==size 即添加的位置在链表的尾部</span></span><br><span class="line">            succ = <span class="literal">null</span>;</span><br><span class="line">            pred = last;</span><br><span class="line">            <span class="comment">//设置index前结点为LinkedList的尾结点,尾结点设为空</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;   <span class="comment">//如果index!=size，说明添加的索引位置不在链表尾部，而是在队中</span></span><br><span class="line">            <span class="comment">//如果不位链表的尾部 </span></span><br><span class="line">            <span class="comment">//取出index结点的数据。</span></span><br><span class="line">            <span class="comment">//将succ置为index结点的数据，并将succ的前置结点信息交给pred，即pred指向index的前置结点</span></span><br><span class="line">            succ = node(index);</span><br><span class="line">            pred = succ.prev;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历数组a</span></span><br><span class="line">        <span class="keyword">for</span> (Object o : a) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E) o;</span><br><span class="line">            <span class="comment">//@SuppressWarnings(&quot;unchecked&quot;) 告诉编译器不要出现警告信息 E e =(E) o 强制类型转换成E</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//创建新结点newNode 将前驱结点设为pred 传入数据 尾结点置空 </span></span><br><span class="line">            Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(pred, e, <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">//如果前驱结点为空  则第一个节点就是newNode; 即这是链表第一个元素</span></span><br><span class="line">            <span class="keyword">if</span> (pred == <span class="literal">null</span>)</span><br><span class="line">                first = newNode;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            <span class="comment">//反之，前驱结点的后继结点设为新结点</span></span><br><span class="line">                pred.next = newNode;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//将前驱结点的指针往后移动到新节点上</span></span><br><span class="line">            pred = newNode;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//循环结束</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment">/*在循环开始之前,对index和size进行了判断</span></span><br><span class="line"><span class="comment">        如果index==size，说明这是链表尾部添加的数据。则将succ=null,pred=last即将pred置为链表尾部</span></span><br><span class="line"><span class="comment">        循环结束之后pred=newNode即说明pred指向的是新结点的位置</span></span><br><span class="line"><span class="comment">        如果index!=size，说明这不是尾部添加的数据，而是在链表中间添加的数据</span></span><br><span class="line"><span class="comment">        我们将index索引位置的结点取出来了并将其保存于succ中，前置结点的信息保存在pred中</span></span><br><span class="line"><span class="comment">        当循环结束之后pred中的位置指向新结点的位置</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (succ == <span class="literal">null</span>) &#123;</span><br><span class="line">            last = pred;</span><br><span class="line">            <span class="comment">//说明这是链表尾部添加的数据，当循环结束之后我们只要把last指针指向pred 即尾指针指向最后添加的结点即可</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//反之这是队中的数据</span></span><br><span class="line">            <span class="comment">//将新结点的后继结点置为succ 即置为原本index索引位置上的结点</span></span><br><span class="line">            <span class="comment">//将succ的前置结点设为新结点，保证双向链表的建立</span></span><br><span class="line">            pred.next = succ;</span><br><span class="line">            succ.prev = pred;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="comment">//将C中元素个数加入到size中</span></span><br><span class="line">        size += numNew;</span><br><span class="line">        <span class="comment">//modCount++ 指的是记录这个链表操作次数+1</span></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkPositionIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isPositionIndex(index))</span><br><span class="line">            <span class="comment">//如果返回False 则抛出异常</span></span><br><span class="line">            <span class="comment">//这个函数在有参构造时调用会返回True，不会进入IF语句中</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isPositionIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= size;</span><br><span class="line">        <span class="comment">/*当index大于等于0并且index小于等于size 时返回True   </span></span><br><span class="line"><span class="comment">           有参构造调用方法的时候传入的index==size，所以这个方法调用时会返回true</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>除了关注LinkedList本身的构造函数我们也要关注一下父类的构造</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>父类AbstractSequentialList</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractSequentialList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt; &#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">AbstractSequentialList</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2.</span>父类AbstractList</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractCollection</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">AbstractList</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="number">3.</span>父类AbstractCollection</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractCollection</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Collection</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AbstractCollection</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>所以关注子类的构造方法即可</p>        <h4 id="3、Vector"   >          <a href="#3、Vector" class="heading-link"><i class="fas fa-link"></i></a><a href="#3、Vector" class="headerlink" title="3、Vector"></a>3、Vector</h4>      <p>Vector属性:</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object[] elementData;    <span class="comment">//定义一个Object数组</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="type">int</span> elementCount;   <span class="comment">//定义变量记录元素个数</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> <span class="type">int</span> capacityIncrement;   <span class="comment">//定义容器应该增长时的数量</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2767605614048989439L</span>; <span class="comment">//序列化ID</span></span><br><span class="line">   </span><br></pre></td></tr></table></div></figure><p>Vector的添加方法:</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">addElement</span><span class="params">(E obj)</span> &#123;</span><br><span class="line">        modCount++;  </span><br><span class="line">        ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">        elementData[elementCount++] = obj;</span><br><span class="line">     <span class="comment">//记录操作数+1 确保容量大小 然后将数据存放到新的索引位置中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">        elementData[elementCount++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//记录操作数+1 确保容量大小 然后将数据存放到新的索引位置中 返回true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; elementCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArrayIndexOutOfBoundsException</span>(index);</span><br><span class="line"></span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">numNew</span> <span class="operator">=</span> a.length;</span><br><span class="line">        ensureCapacityHelper(elementCount + numNew);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> elementCount - index;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">                             numMoved);</span><br><span class="line"></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">        elementCount += numNew;</span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//记录操作数++  当index为负或者大于容量个数时抛出索引越界异常</span></span><br><span class="line">    <span class="comment">//扩容，拷贝原数组到扩容后的新数组</span></span><br><span class="line">    <span class="comment">//当参数中的集合元素不为0的时候返回true反之false</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>分析ArrayList、LinkedList和Vector的不同点某过于Vector方法中都带有Synchronized锁</p><p>即说明Vector是同步的，是线程安全的而ArrayList、LinkedList是不同步的，是线程不安全的</p>        <h3 id="2-Set接口"   >          <a href="#2-Set接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-Set接口" class="headerlink" title="(2)Set接口"></a>(2)Set接口</h3>      <p>Set的特性有:不可重复、无序、无索引、可以存NULL【只能存一个】</p>        <h4 id="1、HashSet"   >          <a href="#1、HashSet" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、HashSet" class="headerlink" title="1、HashSet"></a>1、HashSet</h4>      <p>基本变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">5024744406713321676L</span>; <span class="comment">//序列化ID</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map; <span class="comment">//HashMap</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();        <span class="comment">//一个Objectg对象</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>构造方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>无参构造</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has default initial capacity (16) and load factor (0.75).</span></span><br><span class="line"><span class="comment">     //构造一个空的set,HashMap初始容量为16并且负载因子0.75</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">即创建一个HashMap，容量为<span class="number">16</span>并且负载因子为<span class="number">0.75</span>    </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"><span class="number">2.</span>有参构造</span><br><span class="line">【<span class="number">1</span>】</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a new set containing the elements in the specified collection.</span></span><br><span class="line"><span class="comment">        The &lt;tt&gt;HashMap&lt;/tt&gt; is created with default load factor(0.75) and an initial capacity sufficient to contain the elements in the specified collection.</span></span><br><span class="line"><span class="comment"> //创建一个set包含了这个传入集合的元素，这个HashMap将是默认的负载因子0.75，创建的容量大小足够包含传入参数集合的元素</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c the collection whose elements are to be placed into this set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified collection is null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(Math.max((<span class="type">int</span>) (c.size()/<span class="number">.75f</span>) + <span class="number">1</span>, <span class="number">16</span>));</span><br><span class="line">    <span class="comment">//将会调用HashSet(int initialCapacity)方法  </span></span><br><span class="line">    <span class="comment">//调用方法传入参数为 c的大小/0.75后+1 与 16的最大值</span></span><br><span class="line">        addAll(c);  </span><br><span class="line">    <span class="comment">//调用父类的addAll()方法 传入指定集合</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">modified</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (E e : c)                      <span class="comment">//遍历集合的每一个元素</span></span><br><span class="line">            <span class="keyword">if</span> (add(e))</span><br><span class="line">                modified = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> modified;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">        <span class="comment">//这个方法返回True说明集合因此改变，如果集合由于任何原因而拒绝添加特定元素，而不是因为它已经包含该元素，那么它必须抛出异常（而不是返回false）。此实现总是抛出UnsupportedOperationException。</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">即创建一个HashMap，初始负载因子为<span class="number">0.75</span>,初始容量可以容下原本集合的元素或者<span class="number">16</span>个    </span><br><span class="line">【<span class="number">2</span>】</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has the specified initial capacity and the specified load factor.</span></span><br><span class="line"><span class="comment">     //构建一个HashMap,负载因子和容量都需要作为参数传入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>      initialCapacity   the initial capacity of the hash map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>      loadFactor        the load factor of the hash map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>     IllegalArgumentException if the initial capacity is less</span></span><br><span class="line"><span class="comment">     *             than zero, or if the load factor is nonpositive</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">    &#125;</span><br><span class="line">即创建一个HashMap，负载因子和容量都需要作为参数传入       </span><br><span class="line">【<span class="number">3</span>】</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has the specified initial capacity and default load factor (0.75).</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>      initialCapacity   the initial capacity of the hash table</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>     IllegalArgumentException if the initial capacity is less</span></span><br><span class="line"><span class="comment">     *             than zero</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">即创建一个HashMap，负载因子为<span class="number">0.75</span>，容量需要作为参数传入</span><br><span class="line">【<span class="number">4</span>】</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a new, empty linked hash set.  (This package private constructor is only used by LinkedHashSet.)</span></span><br><span class="line"><span class="comment">     //这个构造方法专属于LinkedHashSet</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     The backingHashMap instance is a LinkedHashMap with the specified initial capacity and the specified load factor.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>      initialCapacity   the initial capacity of the hash map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>      loadFactor        the load factor of the hash map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>      dummy             ignored (distinguishes this constructor from other int, float constructor.)</span></span><br><span class="line"><span class="comment">     //dummy参数表示被忽略(与其他构造函数相比)</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>     IllegalArgumentException if the initial capacity is less</span></span><br><span class="line"><span class="comment">     *             than zero, or if the load factor is nonpositive</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    HashSet(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor, <span class="type">boolean</span> dummy) &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">    &#125;</span><br><span class="line">即创建一个LinkedHashMap(多态的关系)</span><br><span class="line">    </span><br></pre></td></tr></table></div></figure><p>同时因为HashSet有父类，所以我们也要看一下父类的构造函数</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、父类AbstractSet</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractSet</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractCollection</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Set</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AbstractSet</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">2</span>、父类AbstractCollection</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractCollection</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Collection</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AbstractCollection</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></div></figure><p>所以关注子类的构造方法即可</p><p>所以HashSet底层都是创建了一个HashMap或者LinkedHashMap实现</p>        <h4 id="2、LinkedHashSet"   >          <a href="#2、LinkedHashSet" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、LinkedHashSet" class="headerlink" title="2、LinkedHashSet"></a>2、LinkedHashSet</h4>      <p>构造方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>空参构造</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="number">16</span>, <span class="number">.75f</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">调用父类HashSet的方法</span></span><br><span class="line"><span class="comment">HashSet(int initialCapacity, float loadFactor, boolean dummy) &#123;</span></span><br><span class="line"><span class="comment">        map = new LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);</span></span><br><span class="line"><span class="comment">        //传入参数容量16和负载因子0.75  </span></span><br><span class="line"><span class="comment">        //调用LinkedHashMap&lt;&gt;(initialCapacity, loadFactor)</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="number">2.</span>有参构造</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(initialCapacity, loadFactor, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(initialCapacity, <span class="number">.75f</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Math.max(<span class="number">2</span>*c.size(), <span class="number">11</span>), <span class="number">.75f</span>, <span class="literal">true</span>);</span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>LinkedHashSet的构造方法最后都是调用父类HashSet的有参构造，即HashSet(int initialCapacity, float loadFactor, boolean dummy)</p><p>所以要一探究竟这LinkedHashSet到底是什么实现还得等到双端链表中的LinkedHashMap</p><p>所以先不谈</p>        <h4 id="3、TreeSet"   >          <a href="#3、TreeSet" class="heading-link"><i class="fas fa-link"></i></a><a href="#3、TreeSet" class="headerlink" title="3、TreeSet"></a>3、TreeSet</h4>      <p>基本变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> NavigableMap&lt;E,Object&gt; m;</span><br><span class="line"><span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></div></figure><p>构造方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、无参构造</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;E,Object&gt;());</span><br><span class="line">    &#125;</span><br><span class="line">创建一个TreeMap对象</span><br><span class="line"><span class="number">2</span>、有参构造</span><br><span class="line">TreeSet(NavigableMap&lt;E,Object&gt; m) &#123;</span><br><span class="line">        <span class="built_in">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> E&gt; comparator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(comparator));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">(SortedSet&lt;E&gt; s)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(s.comparator());</span><br><span class="line">        addAll(s);</span><br><span class="line">    &#125;</span><br><span class="line">创建TreeMap对象</span><br></pre></td></tr></table></div></figure><p>所以TreeSet底层是封装了TreeMap对象来实现效果</p>        <h3 id="小结"   >          <a href="#小结" class="heading-link"><i class="fas fa-link"></i></a><a href="#小结" class="headerlink" title="小结"></a>小结</h3>      <div class="table-container"><table><thead><tr><th></th><th>底层原理</th><th>特点</th></tr></thead><tbody><tr><td>ArrayList</td><td>底层实际上是Object数组,开始初始容量为10,扩容为原来的1.5倍,因为是数组结构所以利于查找不利增删</td><td>有序、可重复、有索引、非线程安全</td></tr><tr><td>LinkedList</td><td>底层是双端链表,所以利于增删不利于查找</td><td>有序、可重复、有索引、非线程安全</td></tr><tr><td>Vector</td><td>底层是Object数组,但是因为方法中加有synchronized关键字,所以多线程下线程安全,但是效率低下</td><td>有序、可重复、有索引、线程安全</td></tr><tr><td>HashSet</td><td>底层封装了HashMap，本质上就是一个HashMap，默认初始容量为16，负载因子为0.75,每次扩容为原来容量的两倍。因为底层是HashMap所以线程不安全</td><td>无序、不可重复、没有索引、非线程安全</td></tr><tr><td>LinkedHashSet</td><td>底层封装了LinkedHashMap，默认初始容量为16，负载因子为0.75,线程不安全</td><td>无序、不可重复、没有索引</td></tr><tr><td>TreeSet</td><td>底层封装了TreeMap，TreeMap底层是二叉树(红黑树),所以线程不安全</td><td>无序、不可重复、没有索引、非线程安全</td></tr></tbody></table></div>        <h2 id="Map的子接口"   >          <a href="#Map的子接口" class="heading-link"><i class="fas fa-link"></i></a><a href="#Map的子接口" class="headerlink" title="Map的子接口"></a>Map的子接口</h2>              <h3 id="1、HashMap"   >          <a href="#1、HashMap" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、HashMap" class="headerlink" title="1、HashMap"></a>1、HashMap</h3>      <p>基本变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个默认的容量   1左移4位 即二进制1 ==&gt; 10000 则初始容量为16</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个最大的容量   1左移30位即二进制1 ==&gt;100000000000000000000000000000 即最大容量为1073741824</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义默认的负载因子  0.75</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个链表的长度,当链表的长度达到这个长度会转化成红黑树      链表转化长度阈值为8</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个退化的阈值，当红黑树的链表长度低于这个数则会转化为链表  红黑树退化长度阈值为6</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个数组的长度，当数组的长度大于64的时候才会转化成红黑树   数组转化长度阈值为64</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个Node数组 用于存放结点</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个entrySet 存放键值对</span></span><br><span class="line">   <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个变量记录Map数量</span></span><br><span class="line">   <span class="keyword">transient</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个变量用于记录集合的操作次数</span></span><br><span class="line">   <span class="keyword">transient</span> <span class="type">int</span> modCount;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//（javadoc描述在序列化时为true。此外，如果表数组尚未分配，则此字段将保留初始数组容量，或零表示DEFAULT_initial_capacity。）</span></span><br><span class="line"><span class="comment">//数组扩容阈值</span></span><br><span class="line"><span class="type">int</span> threshold;</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载因子</span></span><br><span class="line">   <span class="keyword">final</span> <span class="type">float</span> loadFactor;</span><br></pre></td></tr></table></div></figure>        <h4 id="1、构造方法："   >          <a href="#1、构造方法：" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、构造方法：" class="headerlink" title="1、构造方法："></a>1、构造方法：</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>空参构造</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; </span><br><span class="line">    <span class="comment">//将默认的加载因子为0.75给成员变量loadFactor中</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">2.</span>有参构造</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">    <span class="comment">//传入一个初始容量和一个默认的负载因子0.75 </span></span><br><span class="line">    <span class="comment">//然后调用public HashMap(int initialCapacity, float loadFactor) </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="comment">//如果容量是负数，则抛出异常</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="comment">//如果容量超过了设定的最大容量 则将最大容量给变量init</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line">        <span class="comment">//如果负载因子小于等于0，或者负载因子为空则抛出异常</span></span><br><span class="line">        <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="comment">//将这个传入的负载因子传入成员变量loadFactor中</span></span><br><span class="line">        <span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">     <span class="comment">//调用tableSizeFor(int cap) 将结果给threshold 即调用结果就是数组扩容的阈值   </span></span><br><span class="line">        <span class="comment">//调用这个方法就知道下次数组该什么时候扩容，但是这个数据是1:最大容量:n+1</span></span><br><span class="line">        <span class="comment">//我们后续会在resize()方法将阈值进行调整</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> cap)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        假设传入的数cap=11 则n会等于10 </span></span><br><span class="line"><span class="comment">        因为执行到最后n |= n &gt;&gt;&gt; 16  n会无符号右移16位所以二进制位表示会是32位的</span></span><br><span class="line"><span class="comment">        【无符号右移】高位补零</span></span><br><span class="line"><span class="comment">        n的二进制数字为0000 0000 0000 0000 0000 0000 0000 1010</span></span><br><span class="line"><span class="comment">        n | = n &gt;&gt;&gt;1  即 n = 0000 1010 | 0000 0101  ==&gt; 0000 1111</span></span><br><span class="line"><span class="comment">        n | = n &gt;&gt;&gt;2  即 n = 0000 1111 | 0000 0011  ==&gt; 0000 1111</span></span><br><span class="line"><span class="comment">        ....</span></span><br><span class="line"><span class="comment">        因此我们可以知道这个结果n最后一定会是二进制的倍数-1  我们这里假设得到的数就是15        </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">         <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//当n&lt;0时返回1 否则n&gt;=0会进入判断n是否大于等于最大的容量 如果是则返回最大容量 反之则返回n+1</span></span><br><span class="line">        <span class="comment">//所以我们最后返回的数据就是16</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">        <span class="comment">//将默认的加载因子0.75赋值给成员变量loadFactor</span></span><br><span class="line">        </span><br><span class="line">        putMapEntries(m, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//调用PutMapEntries()方法  传入一个已经存在的map</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">形参:</span></span><br><span class="line"><span class="comment">m – the map</span></span><br><span class="line"><span class="comment">evict – false when initially constructing this map, else true (relayed to method afterNodeInsertion).</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> m.size();</span><br><span class="line">        <span class="comment">//用s记录集合m的大小</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (table == <span class="literal">null</span>) &#123; <span class="comment">// pre-size</span></span><br><span class="line">                <span class="comment">//s&gt;0 且table ==null 说明传入的集合非空但是接收的集合为空</span></span><br><span class="line">                <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> ((<span class="type">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">                <span class="comment">//将s除以负载因子后+1 用ft记录下来</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> ((ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">                         (<span class="type">int</span>)ft : MAXIMUM_CAPACITY);</span><br><span class="line">                <span class="comment">//用变量t记录结果：如果ft小于最大的容量则为ft 反之则为最大的容量  【用于限制ft的最大大小】</span></span><br><span class="line">                <span class="keyword">if</span> (t &gt; threshold)</span><br><span class="line">                    threshold = tableSizeFor(t);</span><br><span class="line">                    <span class="comment">//如果t大于数组扩容因子，调用数组扩容函数计算出需要的容量并且记录在threshold中</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">            <span class="comment">//s&gt;0但是table不是null 说明传入的集合非空且接收的集合非空  </span></span><br><span class="line">                <span class="comment">//s&gt;threshold 说明超过了数组的阈值，需要对数组扩容 调用resize()方法</span></span><br><span class="line">                resize();  <span class="comment">//resize()方法到扩容那方面在展开说</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;? <span class="keyword">extends</span> <span class="title class_">K</span>, ? <span class="keyword">extends</span> <span class="title class_">V</span>&gt; e : m.entrySet()) &#123;</span><br><span class="line">                <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> e.getKey();</span><br><span class="line">                <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">                <span class="comment">//遍历entryset然后调用putval()方法，简单说就是将数据传入新的集合中</span></span><br><span class="line">                putVal(hash(key), key, value, <span class="literal">false</span>, evict);</span><br><span class="line">                <span class="comment">//put方法后面再展开说</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>小结：HashTable底层是用Node[]数组和链表+红黑树组成</p><p>我们来说说刚刚忽略的内部类</p>        <h4 id="2、内部类"   >          <a href="#2、内部类" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、内部类" class="headerlink" title="2、内部类"></a>2、内部类</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Node结点</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//指向下一个结点</span></span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.hash = hash;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">getKey</span><span class="params">()</span>        &#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">getValue</span><span class="params">()</span>      &#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//重写了HashCode方法，返回值是对象key哈希值和Value哈希值异或结果</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">setValue</span><span class="params">(V newValue)</span> &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">//SetValue方法会将老数据进行返回 </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="built_in">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                    Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">/*重写了Equals方法 1.当地址相同直接返回tree</span></span><br><span class="line"><span class="comment">      2.地址不同则比较Entry实体，如果元素相同则返回True</span></span><br><span class="line"><span class="comment">      反之都不同则返回False</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">       </span><br><span class="line">    TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">       <span class="comment">//记录红黑树的父节点</span></span><br><span class="line">    </span><br><span class="line">    TreeNode&lt;K,V&gt; left;</span><br><span class="line">    <span class="comment">//记录左子节点</span></span><br><span class="line">    </span><br><span class="line">        TreeNode&lt;K,V&gt; right;</span><br><span class="line">    <span class="comment">//记录右子节点</span></span><br><span class="line">    </span><br><span class="line">        TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">    <span class="comment">//记录前一个结点 【HashMap由数组+链表+红黑树构成，红黑树是链表转化而成的，所以数组中有结点用于挂载红黑树】 </span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> red;</span><br><span class="line">    <span class="comment">//记录结点是红还是黑</span></span><br><span class="line">    </span><br><span class="line">        TreeNode(<span class="type">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="built_in">super</span>(hash, key, val, next);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns root of tree containing this node.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title function_">root</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; r = <span class="built_in">this</span>, p;;) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((p = r.parent) == <span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> r;</span><br><span class="line">                r = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="3、常用方法"   >          <a href="#3、常用方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#3、常用方法" class="headerlink" title="3、常用方法"></a>3、常用方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br></pre></td><td class="code"><pre><span class="line">Put方法:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//将Key,Value传入 然后调用putVal()进行返回;</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,<span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    参数</span></span><br><span class="line"><span class="comment">    1:hash值  这个是调用了hash()方法之后的结果</span></span><br><span class="line"><span class="comment">       2:key值   这个是传入的Key</span></span><br><span class="line"><span class="comment">       3:Value值 这个是传入的Value值</span></span><br><span class="line"><span class="comment">       4:onlyIfAbsent  表示如果存在键相同时是否更新旧值为新值 true是不更新旧值 false是更新旧值为新值</span></span><br><span class="line"><span class="comment">       5:evict         传入true</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义一个Node[]数组 tab </span></span><br><span class="line"><span class="comment">    定义一个Node结点 p</span></span><br><span class="line"><span class="comment">    定义一个变量n  用于记录数组长度</span></span><br><span class="line"><span class="comment">    定义一个变量i  用于记录索引</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//先将本地的table数组赋值给tab 再把tab的长度赋值给n  </span></span><br><span class="line">            <span class="comment">//如果tab为空或者长度为0，将tab进行resize()方法扩容之后的长度赋值给n</span></span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">//将n-1和hash值做与运算 赋值给索引i 如果再将结点p指向tab[i] 并且判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">            <span class="comment">//如果tab[i]为空即这个位置为空 则调用newNode()方法，将hash值，K,V，和下一个结点为NULL传入</span></span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Node&lt;K,V&gt; newNode(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span></span><br><span class="line"><span class="comment">        return new Node&lt;&gt;(hash, key, value, next);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span></span><br><span class="line"><span class="comment">            this.hash = hash;</span></span><br><span class="line"><span class="comment">            this.key = key;</span></span><br><span class="line"><span class="comment">            this.value = value;</span></span><br><span class="line"><span class="comment">            this.next = next;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//反之  tab[i]不为空 即这个位置有元素了 下面第一个IF有三种情况</span></span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) </span><br><span class="line">            <span class="comment">//1.如果这个位置p的hash和传入的hash相同 并且 (p的key和传入的k地址相同||p的key和key值相同)</span></span><br><span class="line">                e = p;</span><br><span class="line">            <span class="comment">//则将这个位置p赋值给结点e，并且跳出第一个if语句</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="comment">//反之位置P和传入的数据不同 ，判断 p instanceof TreeNode 即判断p是否为树(红黑树)</span></span><br><span class="line">                <span class="comment">//如果是则添加到红黑树里面 调用putTreeVal()方法</span></span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//最终位置P和传入的数据不同也不是红黑树结构 ==&gt;那么应该是链表结构</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="comment">//死循环 用一个变量binCount记录链表长度</span></span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">//当p不指向下一个结点，则将这个数据变成新的结点插入p的后继节点中</span></span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                        <span class="comment">//对循环次数做判断 </span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">        <span class="comment">//当binCount&gt;=7的时候说明已经至少循环7次,即添加此次数据之后链表长度应该到8了,调用treeifyBin()方法，尝试转化成红黑树</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//如果e的hash值相同且key相同(地址或值)相同 则直接跳出循环 </span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">//将指针p指向下一个结点 [在if ((e = p.next) == null) &#123;...&#125;判断时e指向了p的下一个结点]</span></span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//-------------这里结束第一个IF语句---------------------------</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                <span class="comment">//如果e不为空 即说明e和新值发生了哈希碰撞，e为老结点</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                    <span class="comment">//onlyIfAbsent是用来判断是否更新旧值的，为False时说明更新旧值为新值</span></span><br><span class="line">                    <span class="comment">//支持更新旧值或者老值为NUll时，新值代替旧值</span></span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                // Callbacks to allow LinkedHashMap post-actions</span></span><br><span class="line"><span class="comment">       void afterNodeAccess(Node&lt;K,V&gt; p) &#123; &#125; 这个方法仅允许LinkedHashMap调用</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//返回老值</span></span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">    <span class="comment">//操作记录数++</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断添加操作之后数组是否需要进行扩容</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();  </span><br><span class="line">    <span class="comment">//调用resize()方法扩容</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//空实现</span></span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    void afterNodeInsertion(boolean evict) &#123; &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//是红黑树则添加到红黑树里，这里是红黑树调整的规则，暂不做分析</span></span><br><span class="line"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title function_">putTreeVal</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab,</span></span><br><span class="line"><span class="params">                                       <span class="type">int</span> h, K k, V v)</span> &#123;</span><br><span class="line">            Class&lt;?&gt; kc = <span class="literal">null</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">searched</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            TreeNode&lt;K,V&gt; root = (parent != <span class="literal">null</span>) ? root() : <span class="built_in">this</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = root;;) &#123;</span><br><span class="line">                <span class="type">int</span> dir, ph; K pk;</span><br><span class="line">                <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                    dir = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                    dir = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="literal">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                          (kc = comparableClassFor(k)) == <span class="literal">null</span>) ||</span><br><span class="line">                         (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!searched) &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; q, ch;</span><br><span class="line">                        searched = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">if</span> (((ch = p.left) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                             (q = ch.find(h, k, kc)) != <span class="literal">null</span>) ||</span><br><span class="line">                            ((ch = p.right) != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                             (q = ch.find(h, k, kc)) != <span class="literal">null</span>))</span><br><span class="line">                            <span class="keyword">return</span> q;</span><br><span class="line">                    &#125;</span><br><span class="line">                    dir = tieBreakOrder(k, pk);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    Node&lt;K,V&gt; xpn = xp.next;</span><br><span class="line">                    TreeNode&lt;K,V&gt; x = map.newTreeNode(h, k, v, xpn);</span><br><span class="line">                    <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                        xp.left = x;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        xp.right = x;</span><br><span class="line">                    xp.next = x;</span><br><span class="line">                    x.parent = x.prev = xp;</span><br><span class="line">                    <span class="keyword">if</span> (xpn != <span class="literal">null</span>)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)xpn).prev = x;</span><br><span class="line">                    moveRootToFront(tab, balanceInsertion(root, x));</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个方法是用来链表尝试转换成红黑树的  </span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> hash)</span> &#123;</span><br><span class="line">        <span class="type">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">            <span class="comment">//当数组长度小于64的时候我们进行扩容，将链表的值散落的落在数组上来提高查找效率而不转化成红黑树</span></span><br><span class="line">            resize();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="literal">null</span>);</span><br><span class="line">                <span class="keyword">if</span> (tl == <span class="literal">null</span>)</span><br><span class="line">                    hd = p;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    p.prev = tl;</span><br><span class="line">                    tl.next = p;</span><br><span class="line">                &#125;</span><br><span class="line">                tl = p;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span> ((tab[index] = hd) != <span class="literal">null</span>)</span><br><span class="line">                hd.treeify(tab);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">resize()方法</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line">        <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    变量用处：1.oldTab :记录老的数组</span></span><br><span class="line"><span class="comment">    2.oldCap:记录老的容量，老数组为空则为0</span></span><br><span class="line"><span class="comment">    3.oldThr:记录原扩容阈值</span></span><br><span class="line"><span class="comment">    4.newcap:记录新的容量</span></span><br><span class="line"><span class="comment">    5.newThr:记录新的扩容阈值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//当老数组中存在元素时走这个分支</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span> oldTab;</span><br><span class="line">                <span class="comment">//如果老数组大于等于最大限制容量，则扩容阈值为Integer最大值</span></span><br><span class="line">                <span class="comment">//这个情况下数组已经达到了最大值，不能再扩容</span></span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">           <span class="comment">//newCap是oldCap左移一位即newCap是oldCap的两倍</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                     oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">                <span class="comment">//如果老数组扩大两倍还小于数组最大限制，并且老数组大于等于默认容量 </span></span><br><span class="line">                <span class="comment">//则设置新的阈值：为老阈值两倍</span></span><br><span class="line">                newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//当老数组不存在元素时</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">            <span class="comment">//如果老数组阈值大于0，则新数组的容量就是老数组的阈值</span></span><br><span class="line">            newCap = oldThr;</span><br><span class="line">        <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></span><br><span class="line">            <span class="comment">//如果老数组阈值小于等于0  就进行默认的方式进行扩容</span></span><br><span class="line">            newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">            newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">            <span class="comment">//新数组的容量为默认的数值(16)</span></span><br><span class="line">            <span class="comment">//新数组的扩容阈值为(扩容因子*初始容量)= 0.75*16=12</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">newThr==0有两种情况 1.oldCap&gt;=MAXIMUM_CAPACITY 即老数组的容量达到极限</span></span><br><span class="line"><span class="comment">  2.oldCap&lt;=0&amp;&amp;oldThr&gt;0 即老数组不存在元素，且老数组阈值不为0</span></span><br><span class="line"><span class="comment">当老数组不存在元素但是老数组阈值不为0则说明  它经过tableSizeFor()方法设置过初始阈值</span></span><br><span class="line"><span class="comment">我们通过这个resize方法这个分支调整新的阈值  </span></span><br><span class="line"><span class="comment">例如tableSizeFor()之后初始阈值为16,经过这个调整会变成16*0.75=12</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)newCap * loadFactor;</span><br><span class="line">            <span class="comment">//ft=新数组容量*加载因子  用来记录新数组的扩容阈值</span></span><br><span class="line">            newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                      (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">            <span class="comment">//如果新数组容量没达到极限并且扩容阈值小于极限 则新数组的扩容阈值为计算出的ft 反之阈值则是Integer的最大值</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将新阈值传入变量threshold中</span></span><br><span class="line">        threshold = newThr;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">        <span class="comment">//创建Node[]数组，传入newTab中  我们在构造方法中没有见到创建数组的操作，而在resize()中见到了创造数组</span></span><br><span class="line">    <span class="comment">//第一次put的时候调用resize方法创建数组 为了延时加载，提高效率</span></span><br><span class="line">    </span><br><span class="line">    table = newTab;</span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果老数组非空</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                <span class="comment">//遍历老数组  j作为索引值，当j小于老数组容量时条件成立</span></span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//如果老数组索引位置上有元素 则交给中间变量e记录  然后将这个位置置为空</span></span><br><span class="line">                    oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">                        <span class="comment">//如果e的后继结点为null，因为e的位置是在数组上所以这个条件成立时说明这个位置只有一个元素</span></span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    则将e.hash&amp;(newCap-1)计算出索引值index，将e存入newTab[index]中</span></span><br><span class="line"><span class="comment">                    这个index很熟悉我们好像在哪里见过？</span></span><br><span class="line"><span class="comment">                    if ((p = tab[i = (n - 1) &amp; hash]) == null)</span></span><br><span class="line"><span class="comment">                    put方法中的条件判断中出现了这个索引计算公式</span></span><br><span class="line"><span class="comment">                    说明新索引值和老索引值用的是同一个计算公式</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                    <span class="comment">//将e存入新数组的新下标位置即可</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        <span class="comment">//如果e是红黑树结构 则拆分红黑树 </span></span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                        <span class="comment">//反之e是链表</span></span><br><span class="line">                        </span><br><span class="line">                        Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                      <span class="comment">/*</span></span><br><span class="line"><span class="comment">                      变量</span></span><br><span class="line"><span class="comment">                      lohead:记录链表旧位置的头结点</span></span><br><span class="line"><span class="comment">                      loTail:记录链表旧位置的尾结点</span></span><br><span class="line"><span class="comment">                      hihead:记录链表新位置的头结点</span></span><br><span class="line"><span class="comment">                      hitial:记录链表新位置的尾结点</span></span><br><span class="line"><span class="comment">                      */</span>  </span><br><span class="line">                        </span><br><span class="line">                        Node&lt;K,V&gt; next;</span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                            <span class="comment">//将next指向e的后置节点</span></span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="comment">//如果当前位置哈希和老数组容量做与运算等于0</span></span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                    <span class="comment">//如果旧链表尾结点为空</span></span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="comment">//则将e置为头结点</span></span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    <span class="comment">//将尾结点的后置结点置为e</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                <span class="comment">//则链表旧位置的尾结点为e</span></span><br><span class="line">                                loTail = e;</span><br><span class="line">                                </span><br><span class="line">                                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                                这段好像有点字都认识，但是合在一起就不知道什么意思了</span></span><br><span class="line"><span class="comment">                                再重新读一遍，如果经过运算等于0条件成立</span></span><br><span class="line"><span class="comment">                                如果旧链表尾结点没数据，则将e置于头结点</span></span><br><span class="line"><span class="comment">                                如果旧链表结尾有数据，则将e插入链表尾部</span></span><br><span class="line"><span class="comment">                                比如第一次插入就是没数据，e插入链表中作为头结点和尾结点</span></span><br><span class="line"><span class="comment">                                第二次插入数据时，e插入链表尾部，并将尾结点指针往后移动</span></span><br><span class="line"><span class="comment">                                ---</span></span><br><span class="line"><span class="comment">                                这段代码的意思是如果当前位置哈希和老数组容量做与运算等于0 则保持位置不变</span></span><br><span class="line"><span class="comment">                                */</span></span><br><span class="line">                                </span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="comment">//反之则说明要变动位置，这里与上面原理一样，不过是在新的位置</span></span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                      </span><br><span class="line">                        </span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                            loTail.next = <span class="literal">null</span>;</span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                            <span class="comment">//结束循环之后旧链表位置不变的存入同一个下标中</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                            hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                            <span class="comment">//结束循环之后，链表要变动位置的要存入下标为:老下标+老数组容量</span></span><br><span class="line">                            </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br><span class="line">    &#125;</span><br><span class="line">小结:</span><br><span class="line">这里告诉我们数组扩容的原理以及元素位置的处理:</span><br><span class="line"><span class="number">1.</span>数组    存入下标为e.hash &amp; (newCap - <span class="number">1</span>)中</span><br><span class="line"><span class="number">2.</span>红黑树  拆分红黑树</span><br><span class="line">            <span class="number">3.</span>链表   如果是</span><br><span class="line">                (e.hash &amp; oldCap) == <span class="number">0</span>则原位置不变</span><br><span class="line">                反之</span><br><span class="line">新链表位置为原下标+老数组容量</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">split</span><span class="params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, <span class="type">int</span> index, <span class="type">int</span> bit)</span> &#123;</span><br><span class="line">            TreeNode&lt;K,V&gt; b = <span class="built_in">this</span>;</span><br><span class="line">            <span class="comment">// Relink into lo and hi lists, preserving order</span></span><br><span class="line">            TreeNode&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">            TreeNode&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">lc</span> <span class="operator">=</span> <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; e = b, next; e != <span class="literal">null</span>; e = next) &#123;</span><br><span class="line">                next = (TreeNode&lt;K,V&gt;)e.next;</span><br><span class="line">                e.next = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> ((e.hash &amp; bit) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e.prev = loTail) == <span class="literal">null</span>)</span><br><span class="line">                        loHead = e;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        loTail.next = e;</span><br><span class="line">                    loTail = e;</span><br><span class="line">                    ++lc;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e.prev = hiTail) == <span class="literal">null</span>)</span><br><span class="line">                        hiHead = e;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        hiTail.next = e;</span><br><span class="line">                    hiTail = e;</span><br><span class="line">                    ++hc;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (loHead != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">                    tab[index] = loHead.untreeify(map);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    tab[index] = loHead;</span><br><span class="line">                    <span class="keyword">if</span> (hiHead != <span class="literal">null</span>) <span class="comment">// (else is already treeified)</span></span><br><span class="line">                        loHead.treeify(tab);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (hiHead != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)</span><br><span class="line">                    tab[index + bit] = hiHead.untreeify(map);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    tab[index + bit] = hiHead;</span><br><span class="line">                    <span class="keyword">if</span> (loHead != <span class="literal">null</span>)</span><br><span class="line">                        hiHead.treeify(tab);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hash()方法</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/*当Key为空的时候返回0,说明支持Null值传入</span></span><br><span class="line"><span class="comment">  当Key非空时  key经过hashcode()传入h中 再与h右移16位进行异或运算  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">其实我们还有一些东西没有讲到 就是前面put方法中i = (n - <span class="number">1</span>) &amp; hash的意义在哪</span><br><span class="line">参数n是数组长度或者经过resize()扩容后的数组长度，那么n常是二的倍数</span><br><span class="line">n的表现形式类似为<span class="number">0000</span> .... <span class="number">0000</span> <span class="number">1000</span>   直接与hash值做&amp;运算那么结果只跟数组长度有关</span><br><span class="line">则n-<span class="number">1</span>的二进制为 <span class="number">0000</span> .... <span class="number">0000</span> <span class="number">0111</span> </span><br><span class="line">再与hash做与运算，可以降低hash碰撞</span><br><span class="line">    </span><br><span class="line">h ^ (h&gt;&gt;&gt;<span class="number">16</span>)的意义</span><br><span class="line">假设有一个哈希值为 <span class="number">11000000</span> <span class="number">00111100</span>  <span class="number">11000000</span> <span class="number">00110011</span></span><br><span class="line">我们直接与n-<span class="number">1</span>做&amp;运算 <span class="number">0000</span> .... <span class="number">0000</span> <span class="number">0111</span>  那么只有低位有效与高位无关</span><br><span class="line">    </span><br><span class="line">h和进行h的无符号右移<span class="number">16</span>位异或运算        <span class="number">00000000</span> <span class="number">00000000</span>  <span class="number">11000000</span> <span class="number">00111100</span></span><br><span class="line">    ^  <span class="number">11000000</span> <span class="number">00111100</span>  <span class="number">11000000</span> <span class="number">00110011</span></span><br><span class="line">那么高位也能参与运算 所以能降低hash碰撞</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"> get()方法</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="literal">null</span> ? <span class="literal">null</span> : e.value;</span><br><span class="line">    <span class="comment">//将key和hash值传入getNode()方法中， 最后返回null或者getNode取得的结点的value值</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> hash, Object key)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="type">int</span> n; K k;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;(first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//数组非空且数组中存有数据，所以取得数组中索引的第一个结点</span></span><br><span class="line">            <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">                ((k = first.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="comment">//如果第一个结点哈希值相同，并且Key的地址或者值相同 则说明找到元素就是第一个元素，直接返回</span></span><br><span class="line">                <span class="keyword">return</span> first;</span><br><span class="line">            <span class="keyword">if</span> ((e = first.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//如果头结点还有后置结点，则取出后置结点</span></span><br><span class="line">                <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="comment">//如果这个是红黑树 调用红黑树的getTreeNode()方法</span></span><br><span class="line">                    <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="comment">//反之就是普通的链表</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="comment">//判断哈希值相同，并且Key的地址或者值相同 则说明找到元素，返回元素e</span></span><br><span class="line">                        <span class="keyword">return</span> e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);<span class="comment">//当后置结点为空的时候结束循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断结束说明没有找到这个Key对应的结点，返回NULL</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title function_">getTreeNode</span><span class="params">(<span class="type">int</span> h, Object k)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ((parent != <span class="literal">null</span>) ? root() : <span class="built_in">this</span>).find(h, k, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="4、HashMap在jdk1-7产生死循环"   >          <a href="#4、HashMap在jdk1-7产生死循环" class="heading-link"><i class="fas fa-link"></i></a><a href="#4、HashMap在jdk1-7产生死循环" class="headerlink" title="4、HashMap在jdk1.7产生死循环"></a>4、HashMap在jdk1.7产生死循环</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">因为HashMap在<span class="number">1.7</span>的时候采用的是头插法，所以在并发情况下扩容可能会产生死循环</span><br><span class="line"></span><br><span class="line">正常情况A-&gt;B-&gt;C  那么当扩容时，应该是C-&gt;B-&gt;A</span><br><span class="line"></span><br><span class="line">并发扩容下的异常情况  A-&gt;B-&gt;C  假设现在有两个线程T1,线程T2</span><br><span class="line">那么此时T1和T2指向A结点，并且T1.NEXT和T2.NEXT都指向B结点</span><br><span class="line">  线程T1进行扩容，线程T2进行休眠</span><br><span class="line">  T1扩容之后ABC的关系变成了==&gt;  C-&gt;B&gt;A  </span><br><span class="line">  线程T2在T1在扩容时是不可知的。那么线程T2指向在A结点而T2.NEXT指向B  但是因为扩容之后B.NEXT是A </span><br><span class="line">  这就是死循环</span><br></pre></td></tr></table></div></figure>        <h3 id="2、HashTable"   >          <a href="#2、HashTable" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、HashTable" class="headerlink" title="2、HashTable"></a>2、HashTable</h3>      <p>基本变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;?,?&gt;[] table;</span><br><span class="line"><span class="comment">//定义数组用来存储数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> count;</span><br><span class="line"><span class="comment">//定义一个变量用来记录哈希表中的个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> threshold;</span><br><span class="line"><span class="comment">//扩容阈值</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">float</span> loadFactor;</span><br><span class="line"><span class="comment">//负载因子</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ARRAY_SIZE</span> <span class="operator">=</span> Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">modCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></div></figure>        <h4 id="1、构造方法"   >          <a href="#1、构造方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、构造方法" class="headerlink" title="1、构造方法"></a>1、构造方法</h4>      <p>1.空参构造</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Hashtable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">11</span>, <span class="number">0.75f</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个默认的哈希表 容量为11 负载因子为0.75</span></span><br></pre></td></tr></table></div></figure><p>2.有参构造</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Hashtable</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(initialCapacity, <span class="number">0.75f</span>);</span><br><span class="line">        <span class="comment">//创建一个指定容量，负载因子为0.75的哈希表</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Hashtable</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//当指定容量为负数时抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="comment">//当加载因子为空或者小于等于0时抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Load: &quot;</span>+loadFactor);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity==<span class="number">0</span>)</span><br><span class="line">        <span class="comment">//当指定容量为0时，将转化为1</span></span><br><span class="line">            initialCapacity = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">        table = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;?,?&gt;[initialCapacity];</span><br><span class="line">    <span class="comment">//创建一个指定容量的哈希表</span></span><br><span class="line">        threshold = (<span class="type">int</span>)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//扩容阈值，在指定容量*0.75和最大容量+1之间的最小值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Hashtable</span><span class="params">(Map&lt;? extends K, ? extends V&gt; t)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(Math.max(<span class="number">2</span>*t.size(), <span class="number">11</span>), <span class="number">0.75f</span>);</span><br><span class="line">    putAll(t);</span><br><span class="line">    <span class="comment">//传入一个存在的map,直接创建负载因子为0.75,容量为原集合的两倍或者11之间的最大值的哈希表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="2、常用方法"   >          <a href="#2、常用方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、常用方法" class="headerlink" title="2、常用方法"></a>2、常用方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">put方法</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="comment">// Make sure the value is not null</span></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果value为空则抛出异常 说明不支持空值</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">        Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> key.hashCode();</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="comment">//取得哈希 然后对数组长度做模运算, 获得索引值</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">        <span class="keyword">for</span>(; entry != <span class="literal">null</span> ; entry = entry.next) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span><br><span class="line">            <span class="comment">//如果key值相同则返回老值用新值替代老值</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">old</span> <span class="operator">=</span> entry.value;</span><br><span class="line">                entry.value = value;</span><br><span class="line">                <span class="keyword">return</span> old;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        addEntry(hash, key, value, index);</span><br><span class="line">    <span class="comment">//当key值不存在时添加元素</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">        <span class="keyword">if</span> (count &gt;= threshold) &#123;</span><br><span class="line">            <span class="comment">// Rehash the table if the threshold is exceeded</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//当哈希表的元素个数大于等于阈值 调用rehash()扩容</span></span><br><span class="line">            </span><br><span class="line">            rehash();</span><br><span class="line"></span><br><span class="line">            tab = table;</span><br><span class="line">            hash = key.hashCode();</span><br><span class="line">            index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Creates the new entry.</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) tab[index];</span><br><span class="line">        tab[index] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">    <span class="comment">//因为数据不存在所以直接插入到哈希表中 并且记录个数++</span></span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rehash方法</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">rehash</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> table.length;</span><br><span class="line">    <span class="comment">//取出老哈希表长度</span></span><br><span class="line">        Entry&lt;?,?&gt;[] oldMap = table;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> (oldCapacity &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//新的容量为老容量的两倍+1</span></span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (oldCapacity == MAX_ARRAY_SIZE)</span><br><span class="line">                <span class="comment">// Keep running with MAX_ARRAY_SIZE buckets</span></span><br><span class="line">                <span class="comment">//如果老数组达到了上限，直接返回</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">//新容量如果超过了上限,则新容量为上限</span></span><br><span class="line">            newCapacity = MAX_ARRAY_SIZE;</span><br><span class="line">        &#125;</span><br><span class="line">        Entry&lt;?,?&gt;[] newMap = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;?,?&gt;[newCapacity];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作数+1</span></span><br><span class="line">        modCount++;</span><br><span class="line">    </span><br><span class="line">        threshold = (<span class="type">int</span>)Math.min(newCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//记录新阈值为 新容量*负载因子和最大上限+1之间的最小值</span></span><br><span class="line">        table = newMap;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> oldCapacity ; i-- &gt; <span class="number">0</span> ;) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;K,V&gt; old = (Entry&lt;K,V&gt;)oldMap[i] ; old != <span class="literal">null</span> ; ) &#123;</span><br><span class="line">                <span class="comment">//取出每一个元素</span></span><br><span class="line">                Entry&lt;K,V&gt; e = old;</span><br><span class="line">                old = old.next;</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (e.hash &amp; <span class="number">0x7FFFFFFF</span>) % newCapacity;</span><br><span class="line">                e.next = (Entry&lt;K,V&gt;)newMap[index];</span><br><span class="line">                newMap[index] = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//将每一个元素放到扩容后的新数组中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get方法</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> key.hashCode();</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="literal">null</span> ; e = e.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">                <span class="keyword">return</span> (V)e.value;</span><br><span class="line">    <span class="comment">//当哈希值存在且Key值存在时 返回对应结点的Value           </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//返回NUll 代表不存在这个K-V对</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="3、TreeMap"   >          <a href="#3、TreeMap" class="heading-link"><i class="fas fa-link"></i></a><a href="#3、TreeMap" class="headerlink" title="3、TreeMap"></a>3、TreeMap</h3>      <p>基本变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//这个树的比较器,如果使用元素的自然排序则为null</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="built_in">super</span> K&gt; comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根节点</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; root;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//用于统计树有多少个实体</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//计数器，统计操作次数</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">modCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Red-black mechanics</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">RED</span>   <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">BLACK</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h4 id="1、构造方法-1"   >          <a href="#1、构造方法-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、构造方法-1" class="headerlink" title="1、构造方法"></a>1、构造方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>空参构造</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">()</span> &#123;</span><br><span class="line">        comparator = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个比较器为空的树,排序方法为自然排序</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>有参构造</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> K&gt; comparator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line"><span class="comment">//传入比较器，构造一个指定比较器的空树</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">        comparator = <span class="literal">null</span>;</span><br><span class="line">        putAll(m);</span><br><span class="line"><span class="comment">//传入已有map，构造一个自然比较的树，然后调用putAll()方法把元素存入</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">(SortedMap&lt;K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">        comparator = m.comparator();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            buildFromSorted(m.size(), m.entrySet().iterator(), <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (java.io.IOException cannotHappen) &#123;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException cannotHappen) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//传入已有的SortedMap,取得原有map的构造器 调用buildFormSorted方法 创建一个红黑树</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="2、常用方法-1"   >          <a href="#2、常用方法-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、常用方法-1" class="headerlink" title="2、常用方法"></a>2、常用方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">put方法</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        Entry&lt;K,V&gt; t = root;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果r==null则说明这是一个空树，根节点为空</span></span><br><span class="line">            compare(key, key); <span class="comment">// type (and possibly null) check</span></span><br><span class="line"><span class="comment">//不允许空值作为Key值传入</span></span><br><span class="line">            </span><br><span class="line">            root = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, <span class="literal">null</span>);</span><br><span class="line">            size = <span class="number">1</span>;</span><br><span class="line">            modCount++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//将数据插入到根节点,树的大小+1,记录操作数++ 结束方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//反之，这个树不是一个空树</span></span><br><span class="line">        <span class="type">int</span> cmp;</span><br><span class="line">        Entry&lt;K,V&gt; parent;</span><br><span class="line">        <span class="comment">// split comparator and comparable paths</span></span><br><span class="line">        Comparator&lt;? <span class="built_in">super</span> K&gt; cpr = comparator;</span><br><span class="line">    <span class="comment">//获得比较器cpr</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (cpr != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">//通过比较器的比较方法从根节点开始找是否有相同结点</span></span><br><span class="line">                <span class="comment">//如果比根节点小则往左子树找,比根节点大则往右子树找,找到相同结点就调用setValue方法更新数据</span></span><br><span class="line">                parent = t;</span><br><span class="line">                cmp = cpr.compare(key, t.key);</span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    t = t.left;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    t = t.right;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//当比较器为空的时候,通过自然排序找是否有相同的结点</span></span><br><span class="line">            <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                Comparable&lt;? <span class="built_in">super</span> K&gt; k = (Comparable&lt;? <span class="built_in">super</span> K&gt;) key;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                parent = t;</span><br><span class="line">                cmp = k.compareTo(t.key);</span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    t = t.left;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    t = t.right;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//运行到这里 说明树有数据但是树中没有相同的数据，并且经过上面查找循环parent已经指向了叶子结点</span></span><br><span class="line">        Entry&lt;K,V&gt; e = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, parent);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">            parent.left = e;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            parent.right = e;</span><br><span class="line">    <span class="comment">//将新的数据作为找到的叶子结点的子节点插入</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        fixAfterInsertion(e);</span><br><span class="line">    <span class="comment">//调用方法对树进行调整</span></span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//调整红黑树的结构</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fixAfterInsertion</span><span class="params">(Entry&lt;K,V&gt; x)</span> &#123;</span><br><span class="line">        x.color = RED;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (x != <span class="literal">null</span> &amp;&amp; x != root &amp;&amp; x.parent.color == RED) &#123;</span><br><span class="line">            <span class="keyword">if</span> (parentOf(x) == leftOf(parentOf(parentOf(x)))) &#123;</span><br><span class="line">                Entry&lt;K,V&gt; y = rightOf(parentOf(parentOf(x)));</span><br><span class="line">                <span class="keyword">if</span> (colorOf(y) == RED) &#123;</span><br><span class="line">                    setColor(parentOf(x), BLACK);</span><br><span class="line">                    setColor(y, BLACK);</span><br><span class="line">                    setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                    x = parentOf(parentOf(x));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (x == rightOf(parentOf(x))) &#123;</span><br><span class="line">                        x = parentOf(x);</span><br><span class="line">                        rotateLeft(x);</span><br><span class="line">                    &#125;</span><br><span class="line">                    setColor(parentOf(x), BLACK);</span><br><span class="line">                    setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                    rotateRight(parentOf(parentOf(x)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Entry&lt;K,V&gt; y = leftOf(parentOf(parentOf(x)));</span><br><span class="line">                <span class="keyword">if</span> (colorOf(y) == RED) &#123;</span><br><span class="line">                    setColor(parentOf(x), BLACK);</span><br><span class="line">                    setColor(y, BLACK);</span><br><span class="line">                    setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                    x = parentOf(parentOf(x));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (x == leftOf(parentOf(x))) &#123;</span><br><span class="line">                        x = parentOf(x);</span><br><span class="line">                        rotateRight(x);</span><br><span class="line">                    &#125;</span><br><span class="line">                    setColor(parentOf(x), BLACK);</span><br><span class="line">                    setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                    rotateLeft(parentOf(parentOf(x)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        root.color = BLACK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get方法</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        Entry&lt;K,V&gt; p = getEntry(key);</span><br><span class="line">    <span class="comment">//调用getEntry方法 将Key传入</span></span><br><span class="line">        <span class="keyword">return</span> (p==<span class="literal">null</span> ? <span class="literal">null</span> : p.value);</span><br><span class="line">    <span class="comment">//如果key值对应的Entry不存在则返回null，如果存在则返回对应的value值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title function_">getEntry</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="comment">// Offload comparator-based version for sake of performance</span></span><br><span class="line">        <span class="keyword">if</span> (comparator != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> getEntryUsingComparator(key);</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="comment">//返回当Key为空则抛出空指针异常</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            Comparable&lt;? <span class="built_in">super</span> K&gt; k = (Comparable&lt;? <span class="built_in">super</span> K&gt;) key;</span><br><span class="line">    <span class="comment">//获得比较器</span></span><br><span class="line">    </span><br><span class="line">        Entry&lt;K,V&gt; p = root;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">/*如果p存在，则调用compareTo()方法  通过比较器的排序方法比较</span></span><br><span class="line"><span class="comment">            if cpm==0 则说明存在  直接返回</span></span><br><span class="line"><span class="comment">               cpm&lt;0  未找到结点,找左子树</span></span><br><span class="line"><span class="comment">               cpm&gt;0  未找到结点，找右子树</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> k.compareTo(p.key);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                p = p.left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                p = p.right;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">size()方法</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用于返回树的大小</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="4、LinkedHashMap"   >          <a href="#4、LinkedHashMap" class="heading-link"><i class="fas fa-link"></i></a><a href="#4、LinkedHashMap" class="headerlink" title="4、LinkedHashMap"></a>4、LinkedHashMap</h3>      <p>基本变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">3801124242820219131L</span>;</span><br><span class="line"><span class="comment">//序列化ID</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; head;</span><br><span class="line"><span class="comment">//头结点指针</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; tail;</span><br><span class="line">   <span class="comment">//尾结点指针</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The iteration ordering method for this linked hash map: &lt;tt&gt;true&lt;/tt&gt;for access-order, &lt;tt&gt;false&lt;/tt&gt; for insertion-order.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">//哈希映射的迭代排序方法：true表示访问顺序，false表示插入顺序。</span></span><br><span class="line">   <span class="keyword">final</span> <span class="type">boolean</span> accessOrder;</span><br></pre></td></tr></table></div></figure>        <h4 id="1、构造方法-2"   >          <a href="#1、构造方法-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、构造方法-2" class="headerlink" title="1、构造方法"></a>1、构造方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>无参构造</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        accessOrder = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//调用父类的调用方法 即默认容器大小为16 负载因子为0.75  迭代排序方法为false表示插入顺序。</span></span><br><span class="line">    <span class="comment">//创建一个插入序的LinkedHashMap</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>有参构造</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(initialCapacity, loadFactor);</span><br><span class="line">        accessOrder = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//传入容量大小和负载因子,然后调用父类的构造方法  创建一个插入序的LinkedHashMap</span></span><br><span class="line">    &#125; </span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(initialCapacity);</span><br><span class="line">        accessOrder = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//传入容量大小,然后调用父类的构造方法  创建一个插入序的LinkedHashMap</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        accessOrder = <span class="literal">false</span>;</span><br><span class="line">        putMapEntries(m, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//调用父类的空参构造,创建一个插入序的LinkedHashMap</span></span><br><span class="line">    <span class="comment">//调用putMapEntries()方法把元素存入</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">(<span class="type">int</span> initialCapacity,</span></span><br><span class="line"><span class="params">                         <span class="type">float</span> loadFactor,</span></span><br><span class="line"><span class="params">                         <span class="type">boolean</span> accessOrder)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(initialCapacity, loadFactor);</span><br><span class="line">        <span class="built_in">this</span>.accessOrder = accessOrder;</span><br><span class="line">    <span class="comment">//传入容量、负载因子、排序顺序   创建一个自定义容量、负载因子和排序顺序的LinkedHashMap</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">小结:在如果不传入排序方式，默认都是创建一个插入序的LinkedHashMap</span><br></pre></td></tr></table></div></figure>        <h4 id="2、常用方法-2"   >          <a href="#2、常用方法-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、常用方法-2" class="headerlink" title="2、常用方法"></a>2、常用方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br></pre></td><td class="code"><pre><span class="line">put方法</span><br><span class="line">说实话我找了一会发现没有put方法在LinkedHashMap中,这怎么可能呢?那就应该是没有重写Put方法而是直接调用了父类的put方法,我们拿回原来HashMap中的Put方法进来</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//将Key,Value传入 然后调用putVal()进行返回;</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,<span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    参数</span></span><br><span class="line"><span class="comment">    1:hash值  这个是调用了hash()方法之后的结果</span></span><br><span class="line"><span class="comment">       2:key值   这个是传入的Key</span></span><br><span class="line"><span class="comment">       3:Value值 这个是传入的Value值</span></span><br><span class="line"><span class="comment">       4:onlyIfAbsent  表示如果存在键相同时是否更新旧值为新值 true是不更新旧值 false是更新旧值为新值</span></span><br><span class="line"><span class="comment">       5:evict         传入true</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义一个Node[]数组 tab </span></span><br><span class="line"><span class="comment">    定义一个Node结点 p</span></span><br><span class="line"><span class="comment">    定义一个变量n  用于记录数组长度</span></span><br><span class="line"><span class="comment">    定义一个变量i  用于记录索引</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//先将本地的table数组赋值给tab 再把tab的长度赋值给n  </span></span><br><span class="line">            <span class="comment">//如果tab为空或者长度为0，将tab进行resize()方法扩容之后的长度赋值给n</span></span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">//将n-1和hash值做与运算 赋值给索引i 如果再将结点p指向tab[i] 并且判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">            <span class="comment">//如果tab[i]为空即这个位置为空 则调用newNode()方法，将hash值，K,V，和下一个结点为NULL传入</span></span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Node&lt;K,V&gt; newNode(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span></span><br><span class="line"><span class="comment">        return new Node&lt;&gt;(hash, key, value, next);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span></span><br><span class="line"><span class="comment">            this.hash = hash;</span></span><br><span class="line"><span class="comment">            this.key = key;</span></span><br><span class="line"><span class="comment">            this.value = value;</span></span><br><span class="line"><span class="comment">            this.next = next;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//反之  tab[i]不为空 即这个位置有元素了 下面第一个IF有三种情况</span></span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) </span><br><span class="line">            <span class="comment">//1.如果这个位置p的hash和传入的hash相同 并且 (p的key和传入的k地址相同||p的key和key值相同)</span></span><br><span class="line">                e = p;</span><br><span class="line">            <span class="comment">//则将这个位置p赋值给结点e，并且跳出第一个if语句</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="comment">//反之位置P和传入的数据不同 ，判断 p instanceof TreeNode 即判断p是否为树(红黑树)</span></span><br><span class="line">                <span class="comment">//如果是则添加到红黑树里面 调用putTreeVal()方法</span></span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//最终位置P和传入的数据不同也不是红黑树结构 ==&gt;那么应该是链表结构</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="comment">//死循环 用一个变量binCount记录链表长度</span></span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">//当p不指向下一个结点，则将这个数据变成新的结点插入p的后继节点中</span></span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                        <span class="comment">//对循环次数做判断 </span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">        <span class="comment">//当binCount&gt;=7的时候说明已经至少循环7次,即添加此次数据之后链表长度应该到8了,调用treeifyBin()方法，尝试转化成红黑树</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//如果e的hash值相同且key相同(地址或值)相同 则直接跳出循环 </span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">//将指针p指向下一个结点 [在if ((e = p.next) == null) &#123;...&#125;判断时e指向了p的下一个结点]</span></span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//-------------这里结束第一个IF语句---------------------------</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                <span class="comment">//如果e不为空 即说明e和新值发生了哈希碰撞，e为老结点</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                    <span class="comment">//onlyIfAbsent是用来判断是否更新旧值的，为False时说明更新旧值为新值</span></span><br><span class="line">                    <span class="comment">//支持更新旧值或者老值为NUll时，新值代替旧值</span></span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                // Callbacks to allow LinkedHashMap post-actions</span></span><br><span class="line"><span class="comment">       void afterNodeAccess(Node&lt;K,V&gt; p) &#123; &#125; 这个方法仅允许LinkedHashMap调用</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//返回老值</span></span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">    <span class="comment">//操作记录数++</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断添加操作之后数组是否需要进行扩容</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();  </span><br><span class="line">    <span class="comment">//调用resize()方法扩容</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//空实现</span></span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    void afterNodeInsertion(boolean evict) &#123; &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我们不难得出里面有两个方法仅供LinkedHashMap调用</span><br><span class="line">因为HashMap中是空实现，那我们就需要关注这两个方法，这个会在常用方法区底部详细说说</span><br><span class="line">afterNodeAccess(e);</span><br><span class="line">afterNodeInsertion(evict);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Remove方法  因为有上面put方法的经验,所以直接找到父类的Remove方法</span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>)) == <span class="literal">null</span> ?</span><br><span class="line">            <span class="literal">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">removeNode</span><span class="params">(<span class="type">int</span> hash, Object key, Object value,</span></span><br><span class="line"><span class="params">                               <span class="type">boolean</span> matchValue, <span class="type">boolean</span> movable)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, index;</span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">            Node&lt;K,V&gt; node = <span class="literal">null</span>, e; K k; V v;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                node = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key ||</span><br><span class="line">                             (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                            node = e;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        p = e;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                                 (value != <span class="literal">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="built_in">this</span>, tab, movable);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                    tab[index] = node.next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p.next = node.next;</span><br><span class="line">                ++modCount;</span><br><span class="line">                --size;</span><br><span class="line">                afterNodeRemoval(node);</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我们关注到这里有一个 afterNodeRemoval(node)方法，这个方法也是仅供LinkedHashMap调用</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">if</span> ((e = getNode(hash(key), key)) == <span class="literal">null</span>)</span><br><span class="line">            <span class="comment">//如果这个结点为空则返回空值说明不存在</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (accessOrder)</span><br><span class="line">            <span class="comment">//存在数据,如果排序是访问顺序的话调用afterNodeAccess()方法</span></span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//返回数据</span></span><br><span class="line">        <span class="keyword">return</span> e.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--------------------------底下是HashMap仅供LinkedHashMap的方法-----------------------</span><br><span class="line">afterNodeAccess方法</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">//移动结点到链表尾部 说明最近有被使用过    </span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> &#123; <span class="comment">// move node to last</span></span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line">        <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">            <span class="comment">//当accessOrder为true 即排序是访问顺序的LinkedHashMap</span></span><br><span class="line">            <span class="comment">//并且当尾结点不为传入的结点e的时候</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//这里执行的逻辑是链表的双端删除,将e结点前后的结点相互链接,然后将e放到链表的尾部</span></span><br><span class="line">            LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">                (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">            p.after = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (b == <span class="literal">null</span>)</span><br><span class="line">                head = a;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                b.after = a;</span><br><span class="line">            <span class="keyword">if</span> (a != <span class="literal">null</span>)</span><br><span class="line">                a.before = b;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                last = b;</span><br><span class="line">            <span class="keyword">if</span> (last == <span class="literal">null</span>)</span><br><span class="line">                head = p;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                p.before = last;</span><br><span class="line">                last.after = p;</span><br><span class="line">            &#125;</span><br><span class="line">            tail = p;</span><br><span class="line">            ++modCount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">afterNodeInsertion方法</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//这里注释说可能用于删除最老的结点?而什么是最老结点?我想到了最久未被使用的结点</span></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">afterNodeInsertion</span><span class="params">(<span class="type">boolean</span> evict)</span> &#123; <span class="comment">// possibly remove eldest</span></span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; first;</span><br><span class="line">        <span class="keyword">if</span> (evict &amp;&amp; (first = head) != <span class="literal">null</span> &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class="line">            <span class="comment">//当evict为true 并且头结点非空 而且需要removeEldestEntry()方法返回true</span></span><br><span class="line">            <span class="comment">//而当看向removeEldestEntry方法,它是返回false的,所以这个方法放在插入数据之后很奇怪，因为不会调用</span></span><br><span class="line">            <span class="comment">//可能需要我们自己扩展重写方法，实现相应的删除头结点操作</span></span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> first.key;()方法返回<span class="literal">true</span></span><br><span class="line">            <span class="title function_">removeNode</span><span class="params">(hash(key)</span>, key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//回调父类的removeNode()方法删除结点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">afterNodeRemoval方法</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">afterNodeRemoval</span><span class="params">(Node&lt;K,V&gt; e)</span> &#123; <span class="comment">// unlink</span></span><br><span class="line">    <span class="comment">//链表的双端删除  将结点e两端结点项链，然后e因为没有引用会被GC给回收</span></span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">        p.before = p.after = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="literal">null</span>)</span><br><span class="line">            head = a;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b.after = a;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="literal">null</span>)</span><br><span class="line">            tail = b;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            a.before = b;</span><br><span class="line">    &#125;    </span><br></pre></td></tr></table></div></figure>        <h4 id="3、额外"   >          <a href="#3、额外" class="heading-link"><i class="fas fa-link"></i></a><a href="#3、额外" class="headerlink" title="3、额外"></a>3、额外</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">因为LinkedHashMap有afterNodeRemoval、afterNodeInsertion、afterNodeAccess三个特有的方法，提供一个思路用于实现LRU算法</span><br><span class="line">    </span><br><span class="line">LRU算法即=最近最少被使用，我们可以利用afterNodeAccess将最近使用过的结点放到链表的尾部，然后慢慢地头部结点就是最近最少未被使用的结点，当需要淘汰结点时我们将头部结点淘汰就完成了LRU算法的构成</span><br><span class="line"></span><br><span class="line">在这里仅仅提供思路</span><br></pre></td></tr></table></div></figure>        <h3 id="5、ConcurrentHashMap"   >          <a href="#5、ConcurrentHashMap" class="heading-link"><i class="fas fa-link"></i></a><a href="#5、ConcurrentHashMap" class="headerlink" title="5、ConcurrentHashMap"></a>5、ConcurrentHashMap</h3>      <p>【1.8以后】</p><p>基本变量</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"><span class="comment">//最大的容量 即1左移30位==&gt;1*2^30</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"><span class="comment">//默认的容量16,必须为2的幂次方(最少是1最大是MAXIMUM_CAPACITY)</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ARRAY_SIZE</span> <span class="operator">=</span> Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"><span class="comment">//最大的数组大小</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CONCURRENCY_LEVEL</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"><span class="comment">//默认的并发级别，未使用但是为了与老版本版本兼容而保留</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br><span class="line"><span class="comment">//负载因子0.75</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"><span class="comment">//链表转化为树的阈值为8</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"><span class="comment">//红黑树退化为链表阈值为6</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>;</span><br><span class="line"><span class="comment">//数组转化为树的阈值为64，最少是4*TREEIFY_THRESHOLD以避免调整大小阈值和树化阈值之间的冲突。</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TRANSFER_STRIDE</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">RESIZE_STAMP_BITS</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_RESIZERS</span> <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; (<span class="number">32</span> - RESIZE_STAMP_BITS)) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RESIZE_STAMP_SHIFT</span> <span class="operator">=</span> <span class="number">32</span> - RESIZE_STAMP_BITS;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Encodings for Node hash fields. </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MOVED</span>     <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// hash for forwarding nodes  当前hash正在迁移</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEBIN</span>   <span class="operator">=</span> -<span class="number">2</span>; <span class="comment">// hash for roots of trees   当前hash是个树</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RESERVED</span>  <span class="operator">=</span> -<span class="number">3</span>; <span class="comment">// hash for transient reservations 当前hash已经被预定</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">HASH_BITS</span> <span class="operator">=</span> <span class="number">0x7fffffff</span>; <span class="comment">// usable bits of normal node hash  </span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Number of CPUS, to place bounds on some sizings */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NCPU</span> <span class="operator">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ---------------- Fields -------------- */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The array of bins. Lazily initialized upon first insertion.</span></span><br><span class="line"><span class="comment">    * Size is always a power of two. Accessed directly by iterators.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The next table to use; non-null only while resizing.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Base counter value, used mainly when there is no contention,</span></span><br><span class="line"><span class="comment">    * but also as a fallback during table initialization</span></span><br><span class="line"><span class="comment">    * races. Updated via CAS.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">long</span> baseCount;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Table initialization and resizing control.  When negative, the</span></span><br><span class="line"><span class="comment">    * table is being initialized or resized: -1 for initialization,</span></span><br><span class="line"><span class="comment">    * else -(1 + the number of active resizing threads).  Otherwise,</span></span><br><span class="line"><span class="comment">    * when table is null, holds the initial table size to use upon</span></span><br><span class="line"><span class="comment">    * creation, or 0 for default. After initialization, holds the</span></span><br><span class="line"><span class="comment">    * next element count value upon which to resize the table.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">int</span> sizeCtl;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The next table index (plus one) to split while resizing.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">int</span> transferIndex;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Spinlock (locked via CAS) used when resizing and/or creating CounterCells.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">int</span> cellsBusy;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Table of counter cells. When non-null, size is a power of 2.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> CounterCell[] counterCells;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// views</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> KeySetView&lt;K,V&gt; keySet;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> ValuesView&lt;K,V&gt; values;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> EntrySetView&lt;K,V&gt; entrySet;</span><br></pre></td></tr></table></div></figure><p>1.如何理解ConcurrentHashMap的安全性</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       ConcurrentHashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">       <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> map.get(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">           <span class="keyword">if</span>(count==<span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="comment">//当count==null说明没有这个数据</span></span><br><span class="line">               map.put(<span class="string">&quot;count&quot;</span>,<span class="number">1</span>);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               map.put(<span class="string">&quot;count&quot;</span>,count+<span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/*  当两个线程t1、t2进入程序中查询到count==null</span></span><br><span class="line"><span class="comment">       *   都进入if条件中，那么执行结果是执行两次put(&quot;count&quot;,1)，数据造成丢失</span></span><br><span class="line"><span class="comment">       *   ConcurrentHashMap是无法保证又写又查的情况下线程安全</span></span><br><span class="line"><span class="comment">       * */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//经过改造之后</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">           <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> map.get(<span class="string">&quot;count&quot;</span>);</span><br><span class="line">           <span class="keyword">if</span>(count==<span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="comment">//当count==null说明没有这个数据</span></span><br><span class="line">               <span class="keyword">if</span>(map.putIfAbsent(<span class="string">&quot;count&quot;</span>,<span class="number">1</span>)==<span class="literal">null</span>)&#123;</span><br><span class="line">               <span class="comment">//当执行putIfAbsent()方法执行成功则会返回null,我们就跳出循环</span></span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">if</span>(map.replace(<span class="string">&quot;count&quot;</span>,count,count+<span class="number">1</span>))&#123;</span><br><span class="line">                   <span class="comment">//我们利用CAS机制，修改数据</span></span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">/* 当两个线程t1、t2进入程序中查询到Count==null</span></span><br><span class="line"><span class="comment">       *  都进入IF条件中，我们假设先获得cpu的是t1,那么t1执行完putIFAbsent()方法之后得到返回null值跳出循环</span></span><br><span class="line"><span class="comment">       *  而t2再进入判断时就跳不出循环，第二次进入循环的时候就会走下面的分支</span></span><br><span class="line"><span class="comment">       *  使用replace方法对老值做替换</span></span><br><span class="line"><span class="comment">       *  这样我们就保证了两次操作的不丢失==&gt;数据的不被破坏</span></span><br><span class="line"><span class="comment">       * */</span></span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="1、构造方法-3"   >          <a href="#1、构造方法-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#1、构造方法-3" class="headerlink" title="1、构造方法"></a>1、构造方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>无参构造</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">//创建一个默认容量为16的表【数组】   </span></span><br><span class="line"><span class="number">2.</span>有参构造</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</span><br><span class="line">                   MAXIMUM_CAPACITY :</span><br><span class="line">                   tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>));</span><br><span class="line">        <span class="built_in">this</span>.sizeCtl = cap;</span><br><span class="line">    <span class="comment">//把cap赋值给sizeCtl，创建一个指定大小的表</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> c)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> c - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sizeCtl = DEFAULT_CAPACITY;</span><br><span class="line">        putAll(m);</span><br><span class="line">     <span class="comment">//创建一个默认容量的数组，把数据都存入</span></span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(initialCapacity, loadFactor, <span class="number">1</span>);</span><br><span class="line">     <span class="comment">//调用ConcurrentHashMap(int initialCapacity,float loadFactor, int concurrencyLevel)方法</span></span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">ConcurrentHashMap</span><span class="params">(<span class="type">int</span> initialCapacity,</span></span><br><span class="line"><span class="params">                             <span class="type">float</span> loadFactor, <span class="type">int</span> concurrencyLevel)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0.0f</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; concurrencyLevel)   <span class="comment">// Use at least as many bins</span></span><br><span class="line">            initialCapacity = concurrencyLevel;   <span class="comment">// as estimated threads</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> (<span class="type">long</span>)(<span class="number">1.0</span> + (<span class="type">long</span>)initialCapacity / loadFactor);</span><br><span class="line">        <span class="type">int</span> <span class="variable">cap</span> <span class="operator">=</span> (size &gt;= (<span class="type">long</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">            MAXIMUM_CAPACITY : tableSizeFor((<span class="type">int</span>)size);</span><br><span class="line">        <span class="built_in">this</span>.sizeCtl = cap;</span><br><span class="line">     <span class="comment">//创建一个指定大小，指定扩容因子的ConcurrentHashMap</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>经过上面的构造函数,我们基本都能发现有一个sizeCtl,我们详细说说sizeCtl有什么意义</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Table initialization and resizing control.  When negative, thetable is being initialized or resized: -1 for initialization, else -(1 + the number of active resizing threads).  Otherwise,when table is null, holds the initial table size to use upon creation, or 0 for default. After initialization, holds the next element count value upon which to resize the table.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">int</span> sizeCtl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sizeCtl用来代表现在数组的状态</span><br><span class="line">   sizeCtl== -<span class="number">1</span>  ---&gt;说明现在数组正在初始化</span><br><span class="line">   sizeCtl==  <span class="number">0</span>  ---&gt;说明数组未被初始化，用的默认容量<span class="number">16</span></span><br><span class="line">   sizeCtl&gt;   <span class="number">0</span> ---&gt;如果数组未被初始化，则记录数组的初始容量，如果已经初始化过，那么记录的是数组扩容阈值(容量*负载因子<span class="number">0.75</span>)</span><br><span class="line">   sizeCtl&lt;  -<span class="number">1</span>  ---&gt;说明数组正在扩容, 值为-(n+<span class="number">1</span>).n为正在扩容中的线程数</span><br></pre></td></tr></table></div></figure>        <h4 id="2、常用方法-3"   >          <a href="#2、常用方法-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#2、常用方法-3" class="headerlink" title="2、常用方法"></a>2、常用方法</h4>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br></pre></td><td class="code"><pre><span class="line">Put方法 </span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(key, value, <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//调用下面的putVal()方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Implementation for put and putIfAbsent */</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(K key, V value, <span class="type">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span> || value == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="comment">//说明Key和Value不允许设为空值，否则抛出空指针异常</span></span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> spread(key.hashCode());</span><br><span class="line">    <span class="comment">//得到Key对应的hash值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">            <span class="comment">//设置一个临时表tab,然后死循环</span></span><br><span class="line">            </span><br><span class="line">            Node&lt;K,V&gt; f; <span class="type">int</span> n, i, fh;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            变量说明  f:表示数组索引i位置的数据 即tab[i]</span></span><br><span class="line"><span class="comment">             n:表示数组长度</span></span><br><span class="line"><span class="comment">             i:表示索引</span></span><br><span class="line"><span class="comment">             fh:tab[i]的哈希值</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//tab为空指针或者tab中没有数据,将数组长度由n记录,调用initTable()方法</span></span><br><span class="line">                tab = initTable();</span><br><span class="line">            <span class="comment">//把初始化之后的表给临时表table中,因为后面没有其他语句所以进入下一次循环</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//数组已经初始化了,将数据插入Map中    </span></span><br><span class="line">                <span class="comment">//取出索引i位置的数据交给f,如果f不存在，说明数组中这个位置为空</span></span><br><span class="line">                <span class="keyword">if</span> (casTabAt(tab, i, <span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(hash, key, value, <span class="literal">null</span>)))</span><br><span class="line">                    <span class="comment">//则将f以cas的方式插入数据 ==&gt;将索引i的数据以null设置成新结点</span></span><br><span class="line">                    <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            tabAt(数组,i) 表示获得索引为为i的数组元素即table[i]</span></span><br><span class="line"><span class="comment">            casTabAt(数组,1,2,3) 表示数组将索引i位置的数据以cas的方式从2修改到3</span></span><br><span class="line"><span class="comment">          </span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           </span><br><span class="line">            &#125;</span><br><span class="line">         </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Encodings for Node hash fields. </span></span><br><span class="line"><span class="comment">            static final int MOVED     = -1; // hash for forwarding nodes  当前hash正在迁移</span></span><br><span class="line"><span class="comment">            static final int TREEBIN   = -2; // hash for roots of trees   当前hash是个树</span></span><br><span class="line"><span class="comment">            static final int RESERVED  = -3; // hash for transient reservations 当前hash已经被预定</span></span><br><span class="line"><span class="comment">            static final int HASH_BITS = 0x7fffffff; // usable bits of normal node hash </span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                <span class="comment">//如果fh是MOVED的话 则说明当前数组在扩容，需要当前线程进行帮助数据迁移</span></span><br><span class="line">                tab = helpTransfer(tab, f);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//fh！= -1</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">oldVal</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                   <span class="comment">/*</span></span><br><span class="line"><span class="comment">                   对f进行加锁，而f是tab[i]这个位置的数据</span></span><br><span class="line"><span class="comment">                   tab[i]这个位置要么是1.一个结点</span></span><br><span class="line"><span class="comment">                   要么是2.一个结点挂着红黑树</span></span><br><span class="line"><span class="comment">                   要么是3.一个结点挂着链表</span></span><br><span class="line"><span class="comment">                   而对f进行加锁则意思是锁住f这个桶,即不锁住整个数组只是锁住索引i这个位置下的数据</span></span><br><span class="line"><span class="comment">                   */</span></span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        <span class="comment">//再一次对f进行判断</span></span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">//如果fh&gt;=0 说明是正常数据</span></span><br><span class="line">                            binCount = <span class="number">1</span>;</span><br><span class="line">                            <span class="comment">//将binCount计数器置为1  说明这有一个数据</span></span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                                <span class="comment">//将f赋值给结点e,进行死循环</span></span><br><span class="line">                                K ek;</span><br><span class="line">                                <span class="keyword">if</span> (e.hash == hash &amp;&amp;((ek = e.key) == key ||</span><br><span class="line">                                     (ek != <span class="literal">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                    <span class="comment">//如果e的哈希值和当前哈希值相同,并且当前key的地址或者内容相同</span></span><br><span class="line">                                    <span class="comment">//说明找到老的数据，提取到原数据放到oldval中</span></span><br><span class="line">                                    oldVal = e.val;</span><br><span class="line">                                    </span><br><span class="line">                                    </span><br><span class="line">                                    <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                        <span class="comment">//onlyIfAbsent为False时说明更新旧值为新值，为ture则不做处理</span></span><br><span class="line">                                        e.val = value;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                Node&lt;K,V&gt; pred = e;</span><br><span class="line">                                <span class="keyword">if</span> ((e = e.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                                    pred.next = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                              value, <span class="literal">null</span>);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            <span class="comment">//如果f是个树</span></span><br><span class="line">                            Node&lt;K,V&gt; p;</span><br><span class="line">                            binCount = <span class="number">2</span>;</span><br><span class="line">                            <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                           value)) != <span class="literal">null</span>) &#123;</span><br><span class="line">                                oldVal = p.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    p.val = value;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//判断是否需要转化成红黑树, 调用treeifyBin方法尝试转化</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                        treeifyBin(tab, i);</span><br><span class="line">                    <span class="keyword">if</span> (oldVal != <span class="literal">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> oldVal;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">    <span class="comment">//调用addCount方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Encodings for Node hash fields. </span></span><br><span class="line"><span class="comment">static final int MOVED     = -1; // hash for forwarding nodes  当前hash正在迁移</span></span><br><span class="line"><span class="comment">static final int TREEBIN   = -2; // hash for roots of trees   当前hash是个树</span></span><br><span class="line"><span class="comment">static final int RESERVED  = -3; // hash for transient reservations 当前hash已经被预定</span></span><br><span class="line"><span class="comment">static final int HASH_BITS = 0x7fffffff; // usable bits of normal node hash </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">spread</span><span class="params">(<span class="type">int</span> h)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (h ^ (h &gt;&gt;&gt; <span class="number">16</span>)) &amp; HASH_BITS;</span><br><span class="line">    <span class="comment">//HASH_BITS = 01111111 11111111 11111111 11111111  </span></span><br><span class="line">    <span class="comment">//计算出的哈希值与HASH_BITS做与运算保证结果是正数，因为负数有特殊的含义</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//initTable用于初始化表</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; <span class="type">int</span> sc;</span><br><span class="line">    <span class="comment">//循环判断是否为空，直到初始化成功</span></span><br><span class="line">        <span class="keyword">while</span> ((tab = table) == <span class="literal">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//当表为null或者表长度为0时,说明未被初始化</span></span><br><span class="line">            <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="comment">//sizeCtl&lt;0时说明正在扩容</span></span><br><span class="line">                <span class="comment">//当前线程放弃cpu的使用权，在这里自旋</span></span><br><span class="line">                Thread.<span class="keyword">yield</span>(); <span class="comment">// lost initialization race; just spin</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="comment">//当sizeCtl运行到这里，说明sc&gt;=0  利用cas将sizeCtl设置为-1意思是将他置为初始化</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">//再一次进行对表的判断，是否为空表 防止多线程情况下的多次初始化  </span></span><br><span class="line">                        <span class="comment">/*例如线程t2刚好运行到if底部的sc=n-(n&gt;&gt;&gt;2) 而线程t1运行到这个判断，如果不做判断则会多次初始化</span></span><br><span class="line"><span class="comment">                        所以这个再次判断是确保只初始化一次</span></span><br><span class="line"><span class="comment">                        */</span></span><br><span class="line">                        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class="line">                        <span class="comment">//将sc大于0则设为sc,否则设置为默认的长度16</span></span><br><span class="line">                        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                        Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>&lt;?,?&gt;[n];</span><br><span class="line">                        table = tab = nt;</span><br><span class="line">                        sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                        <span class="comment">//将sc设为扩容阈值 n-n/4 即0.75n</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//更新sizeCtl设为扩容阈值</span></span><br><span class="line">                    sizeCtl = sc;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tab;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; Node&lt;K,V&gt; <span class="title function_">tabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class="type">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="type">boolean</span> <span class="title function_">casTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> i,</span></span><br><span class="line"><span class="params">                                        Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> U.compareAndSwapObject(tab, ((<span class="type">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Helps transfer if a resize is in progress.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//用于辅助线程迁移</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] nextTab; <span class="type">int</span> sc;</span><br><span class="line">        <span class="keyword">if</span> (tab != <span class="literal">null</span> &amp;&amp; (f <span class="keyword">instanceof</span> ForwardingNode) &amp;&amp;</span><br><span class="line">            (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> resizeStamp(tab.length);</span><br><span class="line">            <span class="keyword">while</span> (nextTab == nextTable &amp;&amp; table == tab &amp;&amp;</span><br><span class="line">                   (sc = sizeCtl) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                    sc == rs + MAX_RESIZERS || transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, sc + <span class="number">1</span>)) &#123;</span><br><span class="line">                    transfer(tab, nextTab);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> nextTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> table;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//treeifyBin 尝试转化成红黑树</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; b; <span class="type">int</span> n, sc;</span><br><span class="line">        <span class="keyword">if</span> (tab != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">                <span class="comment">//当数组长度小于最大数组限制即64的时候调用tryPresize方法</span></span><br><span class="line">                tryPresize(n &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((b = tabAt(tab, index)) != <span class="literal">null</span> &amp;&amp; b.hash &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (b) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, index) == b) &#123;</span><br><span class="line">                        TreeNode&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = b; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">                            TreeNode&lt;K,V&gt; p =</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">TreeNode</span>&lt;K,V&gt;(e.hash, e.key, e.val,</span><br><span class="line">                                                  <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                            <span class="keyword">if</span> ((p.prev = tl) == <span class="literal">null</span>)</span><br><span class="line">                                hd = p;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                tl.next = p;</span><br><span class="line">                            tl = p;</span><br><span class="line">                        &#125;</span><br><span class="line">                        setTabAt(tab, index, <span class="keyword">new</span> <span class="title class_">TreeBin</span>&lt;K,V&gt;(hd));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">tryPresize</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> (size &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ? MAXIMUM_CAPACITY :</span><br><span class="line">            tableSizeFor(size + (size &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//判断c是否到达了最大限度，如果到达了就设置为最大限度，如果没达到就调用tableSizeFor方法</span></span><br><span class="line">    <span class="comment">//因为tableSizeFor方法在HashMap中提到过，就是为了保证最后是二的n次幂</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> sc;</span><br><span class="line">        <span class="keyword">while</span> ((sc = sizeCtl) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//sc如果大于等于0，说明数组未被初始化或者是数组已经初始化过，sc记录的是扩容阈值</span></span><br><span class="line">            Node&lt;K,V&gt;[] tab = table; <span class="type">int</span> n;</span><br><span class="line">            <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//如果表为null或者n长度为0说明未被初始化过</span></span><br><span class="line">                n = (sc &gt; c) ? sc : c;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="comment">//将sizeCtl置为-1用来表示正在初始化</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (table == tab) &#123;</span><br><span class="line">                            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>&lt;?,?&gt;[n];</span><br><span class="line">                            table = nt;</span><br><span class="line">                            sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        sizeCtl = sc;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c &lt;= sc || n &gt;= MAXIMUM_CAPACITY)</span><br><span class="line">                <span class="comment">//表已经初始化过，判断c是否达到阈值或者n是否超出最大数组长度 </span></span><br><span class="line">                <span class="comment">//如果没有达到阈值或者n已经超出限制,那么不做处理跳出循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (tab == table) &#123;</span><br><span class="line">                <span class="comment">//开始扩容</span></span><br><span class="line">                <span class="comment">//rs得到的是一个扩容戳(高十六位代表扩容标识，低16位做扩容线程数)</span></span><br><span class="line">                <span class="comment">//sizeCtl小于-1 则sizeCtl=-(n+1)，n表示正在扩容的线程数</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">rs</span> <span class="operator">=</span> resizeStamp(n);</span><br><span class="line">                <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    Node&lt;K,V&gt;[] nt;</span><br><span class="line">                    <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                        sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="literal">null</span> ||</span><br><span class="line">                        transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</span><br><span class="line">                        transfer(tab, nt);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc,</span><br><span class="line">                                             (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</span><br><span class="line">                    transfer(tab, <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">transfer()方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//用于数据迁移    </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> tab.length, stride;</span><br><span class="line">        <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class="line">            stride = MIN_TRANSFER_STRIDE; <span class="comment">// subdivide range</span></span><br><span class="line">        <span class="keyword">if</span> (nextTab == <span class="literal">null</span>) &#123;            <span class="comment">// initiating</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">                nextTab = nt;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;      <span class="comment">// try to cope with OOME</span></span><br><span class="line">                sizeCtl = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nextTable = nextTab;</span><br><span class="line">            transferIndex = n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">nextn</span> <span class="operator">=</span> nextTab.length;</span><br><span class="line">        ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> <span class="title class_">ForwardingNode</span>&lt;K,V&gt;(nextTab);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">advance</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">finishing</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// to ensure sweep before committing nextTab</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="type">int</span> fh;</span><br><span class="line">            <span class="keyword">while</span> (advance) &#123;</span><br><span class="line">                <span class="type">int</span> nextIndex, nextBound;</span><br><span class="line">                <span class="keyword">if</span> (--i &gt;= bound || finishing)</span><br><span class="line">                    advance = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    i = -<span class="number">1</span>;</span><br><span class="line">                    advance = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt</span><br><span class="line">                         (<span class="built_in">this</span>, TRANSFERINDEX, nextIndex,</span><br><span class="line">                          nextBound = (nextIndex &gt; stride ?</span><br><span class="line">                                       nextIndex - stride : <span class="number">0</span>))) &#123;</span><br><span class="line">                    bound = nextBound;</span><br><span class="line">                    i = nextIndex - <span class="number">1</span>;</span><br><span class="line">                    advance = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class="line">                <span class="type">int</span> sc;</span><br><span class="line">                <span class="keyword">if</span> (finishing) &#123;</span><br><span class="line">                    nextTable = <span class="literal">null</span>;</span><br><span class="line">                    table = nextTab;</span><br><span class="line">                    sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="built_in">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    finishing = advance = <span class="literal">true</span>;</span><br><span class="line">                    i = n; <span class="comment">// recheck before commit</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="literal">null</span>)</span><br><span class="line">                advance = casTabAt(tab, i, <span class="literal">null</span>, fwd);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                advance = <span class="literal">true</span>; <span class="comment">// already processed</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        Node&lt;K,V&gt; ln, hn;</span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">runBit</span> <span class="operator">=</span> fh &amp; n;</span><br><span class="line">                            Node&lt;K,V&gt; lastRun = f;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="literal">null</span>; p = p.next) &#123;</span><br><span class="line">                                <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> p.hash &amp; n;</span><br><span class="line">                                <span class="keyword">if</span> (b != runBit) &#123;</span><br><span class="line">                                    runBit = b;</span><br><span class="line">                                    lastRun = p;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123;</span><br><span class="line">                                ln = lastRun;</span><br><span class="line">                                hn = <span class="literal">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                hn = lastRun;</span><br><span class="line">                                ln = <span class="literal">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class="line">                                <span class="type">int</span> <span class="variable">ph</span> <span class="operator">=</span> p.hash; <span class="type">K</span> <span class="variable">pk</span> <span class="operator">=</span> p.key; <span class="type">V</span> <span class="variable">pv</span> <span class="operator">=</span> p.val;</span><br><span class="line">                                <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</span><br><span class="line">                                    ln = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hn = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class="line">                            &#125;</span><br><span class="line">                            setTabAt(nextTab, i, ln);</span><br><span class="line">                            setTabAt(nextTab, i + n, hn);</span><br><span class="line">                            setTabAt(tab, i, fwd);</span><br><span class="line">                            advance = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                            TreeNode&lt;K,V&gt; lo = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                            TreeNode&lt;K,V&gt; hi = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                            <span class="type">int</span> <span class="variable">lc</span> <span class="operator">=</span> <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">                                <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> e.hash;</span><br><span class="line">                                TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> <span class="title class_">TreeNode</span>&lt;K,V&gt;</span><br><span class="line">                                    (h, e.key, e.val, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">                                <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> ((p.prev = loTail) == <span class="literal">null</span>)</span><br><span class="line">                                        lo = p;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        loTail.next = p;</span><br><span class="line">                                    loTail = p;</span><br><span class="line">                                    ++lc;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="keyword">if</span> ((p.prev = hiTail) == <span class="literal">null</span>)</span><br><span class="line">                                        hi = p;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        hiTail.next = p;</span><br><span class="line">                                    hiTail = p;</span><br><span class="line">                                    ++hc;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class="line">                                (hc != <span class="number">0</span>) ? <span class="keyword">new</span> <span class="title class_">TreeBin</span>&lt;K,V&gt;(lo) : t;</span><br><span class="line">                            hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class="line">                                (lc != <span class="number">0</span>) ? <span class="keyword">new</span> <span class="title class_">TreeBin</span>&lt;K,V&gt;(hi) : t;</span><br><span class="line">                            setTabAt(nextTab, i, ln);</span><br><span class="line">                            setTabAt(nextTab, i + n, hn);</span><br><span class="line">                            setTabAt(tab, i, fwd);</span><br><span class="line">                            advance = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="小结-1"   >          <a href="#小结-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3>      <div class="table-container"><table><thead><tr><th></th><th>底层原理</th><th align="left">特点</th></tr></thead><tbody><tr><td>HashMap</td><td>底层是Node[]数组+链表+红黑树构成,默认容量为16,负载因子是0.75,扩容是原容量的两倍,线程不安全</td><td align="left">无序、非线程安全</td></tr><tr><td>HashTable</td><td>底层是哈希表(数组),默认容量是11,负载因子是0.75,扩容时新数组是原数组左移1位+1,即容量是原来两倍+1,因为被synchronized修饰所以是线程安全的</td><td align="left">线程安全、效率低</td></tr><tr><td>TreeMap</td><td>底层是二叉树(红黑树)</td><td align="left">可排序、非线程安全</td></tr><tr><td>LinkedHashMap</td><td>底层是HashMap,默认容量为16，负载因子是0.75，默认排序方式是插入序，线程不安全，可用于开发LRU算法的实现</td><td align="left">有序、非线程安全</td></tr><tr><td>ConcurrentHashMap</td><td>采用了synchronized+CAS的机制实现了线程安全</td><td align="left">线程安全</td></tr></tbody></table></div>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 集合 </tag>
            
            <tag> javaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ面试题</title>
      <link href="/2023/07/13/RabbitMQ%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/07/13/RabbitMQ%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[        <h1 id="RabbitMQ怎么保证消息的不丢失"   >          <a href="#RabbitMQ怎么保证消息的不丢失" class="heading-link"><i class="fas fa-link"></i></a><a href="#RabbitMQ怎么保证消息的不丢失" class="headerlink" title="RabbitMQ怎么保证消息的不丢失"></a>RabbitMQ怎么保证消息的不丢失</h1>      <p>我答:</p><p>1.RabbitMQ在生产端有确认机制，打开生产确认消息机制，当生产者消息没有发到交换机时会调用ConfirmCallBack函数，当交换机消息没有发到Queue时会有一个ReturnsCallBack函数。这样我们保证了消息到达队列的不丢失</p><p>2.消息的持久化，防止因为MQ宕机导致消息的不丢失，主要是交换机、队列和消息的持久化</p><p>3.在消费端有一个签收机制，我们可以打开签收机制设置为Auto 由Spring来判断是否产生异常，如果异常了设置一个ReSet机制，重试三次之后发送到Error队列由人工干涉</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">消息的不丟失主要由三方面考虑</span><br><span class="line">1.RabbitMQ在生产端有确认机制，打开生产确认消息机制，当生产者消息没有发到交换机时会调用ConfirmCallBack函数，当交换机消息没有发到Queue时会有一个ReturnsCallBack函数。这样我们保证了消息到达队列的不丢失</span><br><span class="line"></span><br><span class="line">2.消息的持久化，防止因为MQ宕机导致消息的不丢失，主要是交换机、队列和消息的持久化</span><br><span class="line"></span><br><span class="line">3.在消费端有一个签收机制，我们可以打开签收机制设置为Auto 由Spring来判断是否产生异常，如果异常了设置一个ReSet机制，重试三次之后发送到Error队列由人工干涉</span><br></pre></td></tr></table></div></figure>        <h1 id="RabbitMQ怎么保障消息的幂等性"   >          <a href="#RabbitMQ怎么保障消息的幂等性" class="heading-link"><i class="fas fa-link"></i></a><a href="#RabbitMQ怎么保障消息的幂等性" class="headerlink" title="RabbitMQ怎么保障消息的幂等性"></a>RabbitMQ怎么保障消息的幂等性</h1>      <p>我答:1.可以引用一个全局的唯一ID，消费者要消费的时候查询Redis如果存在这个全局ID则说明已经消费过了</p><p>​2.利用DB的主键，消费者查询MySql中的主键存在即说明消息也消费过了</p><p>​3.利用Redis的Set命令，因为Key是唯一的，所以有天生的互斥性</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.可以引用一个全局的唯一ID，消费者要消费的时候查询Redis如果存在这个全局ID则说明已经消费过了</span><br><span class="line"></span><br><span class="line">2.利用DB的主键，消费者查询MySql中的主键存在即说明消息也消费过了</span><br><span class="line"></span><br><span class="line">3.利用Redis的Set命令，因为Key是唯一的，所以有天生的互斥性</span><br></pre></td></tr></table></div></figure>        <h1 id="RabbitMQ中死信队列？延时队列有了解过吗？"   >          <a href="#RabbitMQ中死信队列？延时队列有了解过吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#RabbitMQ中死信队列？延时队列有了解过吗？" class="headerlink" title="RabbitMQ中死信队列？延时队列有了解过吗？"></a>RabbitMQ中死信队列？延时队列有了解过吗？</h1>      <p>我答：</p><p>1.RabbitMQ中死信队列也就是一个正常的交换机，主要是为了处理死信的。</p><p>​一般因为三个原因会导致消息成为死信：1.消息超时了</p><p>​ 2.消息数量超过了队列限制消息数目 </p><p>​ 3.消息被拒签了</p><p>2.延时队列:RabbitMQ是不能直接创建延时队列的，但是我们可以通过对设置TTL和死信队列来达到延时队列的效果</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.RabbitMQ中死信队列也就是一个正常的交换机，主要是为了处理死信的。</span><br><span class="line"></span><br><span class="line">  一般因为三个原因会导致消息成为死信：1.消息超时了</span><br><span class="line"></span><br><span class="line">2.消息数量超过了队列限制消息数目 </span><br><span class="line"></span><br><span class="line">3.消息被拒签了</span><br><span class="line"></span><br><span class="line">2.延时队列:RabbitMQ是不能直接创建延时队列的，但是我们可以通过对设置TTL和死信队列来达到延时队列的效果</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h1 id="RabbitMQ中如果有100w条消息堆积，是如何解决的-消息堆积"   >          <a href="#RabbitMQ中如果有100w条消息堆积，是如何解决的-消息堆积" class="heading-link"><i class="fas fa-link"></i></a><a href="#RabbitMQ中如果有100w条消息堆积，是如何解决的-消息堆积" class="headerlink" title="RabbitMQ中如果有100w条消息堆积，是如何解决的(消息堆积)"></a>RabbitMQ中如果有100w条消息堆积，是如何解决的(消息堆积)</h1>      <p>我答:1.RabbitMQ中可以设置消费者能一次处理的消息个数，这样可以有效的保障MQ的正常使用</p><p>​         2.消息和Queue可以设置过期时间，当TTL到了之后消息会成为死信或被丢弃，但是这样会导致消息的丢失</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">我在开发中没有遇到过这样的问题，但是如果发生了消息堆积也是有解决方案</span><br><span class="line">1.增多消费者数目，提高消费速度</span><br><span class="line">2.在消费者端开启线程池，加快处理速度[消费者总数不变]</span><br><span class="line">3.采用惰性队列，扩大队列容积      【创建队列的时候加上lazy】 </span><br><span class="line">    采用惰性队列的优势：①接收消息然后存放到磁盘中而不是内存中 ②性能比较稳定，消息上限高</span><br><span class="line">    劣势：1.受限于磁盘IO</span><br><span class="line">     2.消费者要消费消息的时候才会将磁盘中的消息读取到内存中，会降低消息的时效性</span><br></pre></td></tr></table></div></figure>        <h1 id="RabbitMQ的高可用机制有了解过吗？"   >          <a href="#RabbitMQ的高可用机制有了解过吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#RabbitMQ的高可用机制有了解过吗？" class="headerlink" title="RabbitMQ的高可用机制有了解过吗？"></a>RabbitMQ的高可用机制有了解过吗？</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在开发中我运用了镜像队列的方式来保证高可用</span><br><span class="line">镜像队列本质上就是主从模式，所有操作在主节点中完成然后备份到镜像节点。</span><br><span class="line">当主节点宕机挂掉之后，镜像节点就会上位成为主节点。</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ使用【进阶篇】</title>
      <link href="/2023/07/13/RabbitMQ%E4%BD%BF%E7%94%A8%E3%80%90%E8%BF%9B%E9%98%B6%E7%AF%87%E3%80%91/"/>
      <url>/2023/07/13/RabbitMQ%E4%BD%BF%E7%94%A8%E3%80%90%E8%BF%9B%E9%98%B6%E7%AF%87%E3%80%91/</url>
      
        <content type="html"><![CDATA[        <h1 id="如何保证RabbitMQ的消息发送可靠性"   >          <a href="#如何保证RabbitMQ的消息发送可靠性" class="heading-link"><i class="fas fa-link"></i></a><a href="#如何保证RabbitMQ的消息发送可靠性" class="headerlink" title="如何保证RabbitMQ的消息发送可靠性"></a>如何保证RabbitMQ的消息发送可靠性</h1>              <h2 id="利用确认机制和回退机制"   >          <a href="#利用确认机制和回退机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#利用确认机制和回退机制" class="headerlink" title="利用确认机制和回退机制"></a>利用确认机制和回退机制</h2>              <h3 id="1-确认机制"   >          <a href="#1-确认机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-确认机制" class="headerlink" title="(1)确认机制:"></a>(1)确认机制:</h3>      <p>生产者与交换机之间有一个确认机制，当开启确认机制之后，无论消息是否发送到交换机都会调用一个ConfirmCallBack的函数</p>        <h4 id="相关代码"   >          <a href="#相关代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#相关代码" class="headerlink" title="相关代码:"></a>相关代码:</h4>      <p>application.yml</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">#   设置消息发送确认模式  none:无需确认(默认) correlated:消息从生产者到交换机调用回调函数  simple：单个确认(发一条确认一条)</span><br><span class="line">  publisher-confirm-type: correlated</span><br></pre></td></tr></table></div></figure><p>POM</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.amqp&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-rabbit-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></div></figure><p>RabbitMQConfig</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_CONFIRM_NAME=<span class="string">&quot;topic_ConfirmExchange&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_CONFIRM_NAME=<span class="string">&quot;topic_Confirmqueue&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*消息的可靠性保障 确认模式*/</span></span><br><span class="line"><span class="comment">//创建交换机</span></span><br><span class="line"><span class="meta">@Bean(&quot;ConfirmExchange&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Exchange <span class="title function_">bootConfirmExchange</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_CONFIRM_NAME).durable(<span class="literal">true</span>).build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Queue</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(&quot;ConfirmQueue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">bootConfirmQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QueueBuilder.durable(QUEUE_CONFIRM_NAME).build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Queue和交换机绑定</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">bootConfirmBinding</span><span class="params">(<span class="meta">@Qualifier(&quot;ConfirmExchange&quot;)</span> Exchange exchange, <span class="meta">@Qualifier(&quot;ConfirmQueue&quot;)</span> Queue queue)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;confirm.*&quot;</span>).noargs();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>生产者端</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Produce</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * confirm(CorrelationData correlationData, boolean b, String s)</span></span><br><span class="line"><span class="comment">    * 参数1  配置信息</span></span><br><span class="line"><span class="comment">    * 参数2  是否正常到Exchange  如果是为True,如果不是为false;</span></span><br><span class="line"><span class="comment">    * 参数3  错误原因</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="comment">//确认模式</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ToConfirmSend</span><span class="params">()</span>&#123;</span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> b, String s)</span> &#123;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;Confirm方法被调用了&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(b)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;成功收到消息&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;失败消息原因&quot;</span>+s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">  rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_CONFIRM_NAME,<span class="string">&quot;confirm.haha&quot;</span>,<span class="string">&quot;需要确认信息&quot;</span>);<span class="comment">//成功发送</span></span><br><span class="line"><span class="comment">//rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_CONFIRM_NAME+&quot;000&quot;,&quot;confirm.hehe&quot;,&quot;确认信息&quot;);//失败发送</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>代码效果</p>        <h5 id="1-成功发送："   >          <a href="#1-成功发送：" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-成功发送：" class="headerlink" title="1.成功发送："></a>1.成功发送：</h5>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713155029776.png"  alt="image-20230713155029776">      </p>        <h5 id="2-失败发送"   >          <a href="#2-失败发送" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-失败发送" class="headerlink" title="2.失败发送"></a>2.失败发送</h5>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713155150627.png"  alt="image-20230713155150627">      </p>        <h3 id="2-回退机制"   >          <a href="#2-回退机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-回退机制" class="headerlink" title="(2)回退机制"></a>(2)回退机制</h3>              <h4 id="相关代码-1"   >          <a href="#相关代码-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#相关代码-1" class="headerlink" title="相关代码"></a>相关代码</h4>      <p>application.yml</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">#   设置消息发送回退模式</span><br><span class="line">    publisher-returns: <span class="literal">true</span></span><br></pre></td></tr></table></div></figure><p>生产者端</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Produce</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ToConfirmSend</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        回退模式，只有在Exchange到Queue失败才会执行的回调函数</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    rabbitTemplate.setReturnsCallback(<span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ReturnsCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(ReturnedMessage returnedMessage)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;执行了ReturnCallback方法&quot;</span>);</span><br><span class="line">                System.out.println(returnedMessage.getMessage()); <span class="comment">//获得消息体</span></span><br><span class="line">                System.out.println(returnedMessage.getExchange());<span class="comment">//获得交换机信息</span></span><br><span class="line">                System.out.println(returnedMessage.getReplyCode());<span class="comment">//获得错误代码</span></span><br><span class="line">                System.out.println(returnedMessage.getRoutingKey());<span class="comment">//获得路由key</span></span><br><span class="line">                System.out.println(returnedMessage.getReplyText());<span class="comment">//获得被退回原因</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//正确发送 错误路由</span></span><br><span class="line">         rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_CONFIRM_NAME,<span class="string">&quot;return.haha&quot;</span>,<span class="string">&quot;需要确认信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>RabbitMQConfig</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_CONFIRM_NAME=<span class="string">&quot;topic_ConfirmExchange&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_CONFIRM_NAME=<span class="string">&quot;topic_Confirmqueue&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*消息的可靠性保障 确认模式*/</span></span><br><span class="line"><span class="comment">//创建交换机</span></span><br><span class="line"><span class="meta">@Bean(&quot;ConfirmExchange&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Exchange <span class="title function_">bootConfirmExchange</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_CONFIRM_NAME).durable(<span class="literal">true</span>).build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Queue</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean(&quot;ConfirmQueue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Queue <span class="title function_">bootConfirmQueue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QueueBuilder.durable(QUEUE_CONFIRM_NAME).build();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Queue和交换机绑定</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Binding <span class="title function_">bootConfirmBinding</span><span class="params">(<span class="meta">@Qualifier(&quot;ConfirmExchange&quot;)</span> Exchange exchange, <span class="meta">@Qualifier(&quot;ConfirmQueue&quot;)</span> Queue queue)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;confirm.*&quot;</span>).noargs();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="效果"   >          <a href="#效果" class="heading-link"><i class="fas fa-link"></i></a><a href="#效果" class="headerlink" title="效果"></a>效果</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713161242108.png"  alt="image-20230713161242108">      </p>        <h1 id="RabbitMQ的消息接收的确认"   >          <a href="#RabbitMQ的消息接收的确认" class="heading-link"><i class="fas fa-link"></i></a><a href="#RabbitMQ的消息接收的确认" class="headerlink" title="RabbitMQ的消息接收的确认"></a>RabbitMQ的消息接收的确认</h1>      <p>设置Queue到消费者的确认方式</p>        <h2 id="相关代码-2"   >          <a href="#相关代码-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#相关代码-2" class="headerlink" title="相关代码"></a>相关代码</h2>      <p>application.yml</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">#    设置ACK签收模式   manual为手动签收   none为无需确认  auto为自动确认</span><br><span class="line">    listener:</span><br><span class="line">      direct:</span><br><span class="line">        acknowledge-mode: manual</span><br></pre></td></tr></table></div></figure><p>消费者端</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQconfirmListen</span> <span class="keyword">implements</span> <span class="title class_">ChannelAwareMessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topic_Confirmqueue&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">deliveryTag</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            deliveryTag = message.getMessageProperties().getDeliveryTag();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理业务逻辑</span></span><br><span class="line">            System.out.println(<span class="string">&quot;正在处理业务逻辑...&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//签收消息</span></span><br><span class="line">            <span class="comment">/*basicAck(long deliveryTag, boolean multiple)</span></span><br><span class="line"><span class="comment">             * 参数1:消息标签</span></span><br><span class="line"><span class="comment">             * 参数2:是否支持多条消息的签收</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="type">int</span> i=<span class="number">3</span>/<span class="number">0</span> ; <span class="comment">//模仿出错</span></span><br><span class="line">            channel.basicAck(deliveryTag, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//        因为异常拒绝签收</span></span><br><span class="line">            <span class="comment">/* basicNack(long deliveryTag, boolean multiple, boolean requeue)</span></span><br><span class="line"><span class="comment">             * 参数1:消息标签</span></span><br><span class="line"><span class="comment">             * 参数2:是否支持多条消息的签收</span></span><br><span class="line"><span class="comment">             * 参数3：是否退回队列</span></span><br><span class="line"><span class="comment">             * */</span></span><br><span class="line">            channel.basicNack(deliveryTag, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="效果-1"   >          <a href="#效果-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3>              <h4 id="1-正常签收"   >          <a href="#1-正常签收" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-正常签收" class="headerlink" title="(1)正常签收"></a>(1)正常签收</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713163939606.png"  alt="image-20230713163939606">      </p>        <h4 id="2-异常签收"   >          <a href="#2-异常签收" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-异常签收" class="headerlink" title="(2)异常签收"></a>(2)异常签收</h4>      <p>![](RabbitMQ%E4%BD%BF%E7%94%A8%E3%80%90%E8%BF%9B%E9%98%B6%E7%AF%87%E3%80%91&#x2F;image-20230713162956067.png</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713163128985.png"  alt="image-20230713163128985">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/RabbitMQ%E4%BD%BF%E7%94%A8%E3%80%90%E8%BF%9B%E9%98%B6%E7%AF%87%E3%80%91/image-20230713163221136.png"  alt="image-20230713163221136">      </p>        <h1 id="RabbitMQ的消费端限流"   >          <a href="#RabbitMQ的消费端限流" class="heading-link"><i class="fas fa-link"></i></a><a href="#RabbitMQ的消费端限流" class="headerlink" title="RabbitMQ的消费端限流"></a>RabbitMQ的消费端限流</h1>      <p>使用场景:限制消费端的接收消息的数量，防止因为系统维护等导致队列中的消息多,因而导致一个消费端巨量的压力过大，影响系统性能</p><p>实现要求</p><p>1.打开手动签收模式</p><p>2.将application中的prefetch设置为可消费的消息数量</p>        <h2 id="相关代码-3"   >          <a href="#相关代码-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#相关代码-3" class="headerlink" title="相关代码"></a>相关代码</h2>      <p>application.yml</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line"></span><br><span class="line">#    设置ACK签收模式   manual为手动签收   none为无需确认  auto为自动确认</span><br><span class="line">    listener:</span><br><span class="line">      direct:</span><br><span class="line">        acknowledge-mode: manual</span><br><span class="line">#  设置消费端一次能接受的消息数量</span><br><span class="line">        prefetch: <span class="number">1</span></span><br><span class="line">      simple:</span><br><span class="line">        acknowledge-mode: manual</span><br><span class="line">        prefetch: <span class="number">1</span></span><br></pre></td></tr></table></div></figure><p>消费者端</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QosListen</span> <span class="keyword">implements</span> <span class="title class_">ChannelAwareMessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topic_Confirmqueue&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">long</span> <span class="variable">deliveryTag</span> <span class="operator">=</span> message.getMessageProperties().getDeliveryTag();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line"><span class="comment">//          手动签收消息</span></span><br><span class="line"><span class="comment">//            channel.basicAck(deliveryTag, true);</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>生产者端</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ToSendQos</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">           rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_CONFIRM_NAME, <span class="string">&quot;confirm.haha&quot;</span>, <span class="string">&quot;这是第&quot;</span>+i+<span class="string">&quot;条信息，&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="效果-2"   >          <a href="#效果-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#效果-2" class="headerlink" title="效果"></a>效果</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713165421300.png"  alt="image-20230713165421300">              <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713165439057.png"  alt="image-20230713165439057">      </p><p>总共有20条 19条Ready  1条未被签收</p>        <h1 id="RabbitMQ的TTL"   >          <a href="#RabbitMQ的TTL" class="heading-link"><i class="fas fa-link"></i></a><a href="#RabbitMQ的TTL" class="headerlink" title="RabbitMQ的TTL"></a>RabbitMQ的TTL</h1>      <p>消息到达存活时间之后还未被消费则会被自动清除</p>        <h2 id="队列设置过期时间"   >          <a href="#队列设置过期时间" class="heading-link"><i class="fas fa-link"></i></a><a href="#队列设置过期时间" class="headerlink" title="队列设置过期时间"></a>队列设置过期时间</h2>              <h3 id="相关代码-4"   >          <a href="#相关代码-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#相关代码-4" class="headerlink" title="相关代码"></a>相关代码</h3>      <p>RabbitMQConfig</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_TTL_NAME=<span class="string">&quot;topic_TtlExchange&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_TTL_NAME=<span class="string">&quot;topic_Ttlqueue&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建交换机</span></span><br><span class="line">    <span class="meta">@Bean(&quot;TtlExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Exchange <span class="title function_">TtlExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_TTL_NAME).durable(<span class="literal">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建Queue</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;TtlQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">TtlQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(QUEUE_TTL_NAME).ttl(<span class="number">10000</span>).build(); <span class="comment">//设置队列消息过期时间为10S</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Queue和交换机绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">TtlBinding</span><span class="params">(<span class="meta">@Qualifier(&quot;TtlExchange&quot;)</span> Exchange exchange, <span class="meta">@Qualifier(&quot;TtlQueue&quot;)</span> Queue queue)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;ttl.*&quot;</span>).noargs();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>生产者</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ToSendTTL</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">           rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_TTL_NAME, <span class="string">&quot;ttl.haha&quot;</span>, <span class="string">&quot;这是第&quot;</span>+i+<span class="string">&quot;条信息，&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="效果-3"   >          <a href="#效果-3" class="heading-link"><i class="fas fa-link"></i></a><a href="#效果-3" class="headerlink" title="效果"></a>效果</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713170744420.png"  alt="image-20230713170744420">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/RabbitMQ%E4%BD%BF%E7%94%A8%E3%80%90%E8%BF%9B%E9%98%B6%E7%AF%87%E3%80%91/image-20230713170756794.png"  alt="image-20230713170756794">      </p>        <h2 id="单个消息设置过期时间"   >          <a href="#单个消息设置过期时间" class="heading-link"><i class="fas fa-link"></i></a><a href="#单个消息设置过期时间" class="headerlink" title="单个消息设置过期时间"></a>单个消息设置过期时间</h2>              <h3 id="相关代码-5"   >          <a href="#相关代码-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#相关代码-5" class="headerlink" title="相关代码"></a>相关代码</h3>      <p>生产者端</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ToSendTTLMessage</span><span class="params">()</span>&#123;</span><br><span class="line">       rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_TTL_NAME, <span class="string">&quot;ttl.haha&quot;</span>,<span class="string">&quot;ttl...&quot;</span>, <span class="keyword">new</span> <span class="title class_">MessagePostProcessor</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> Message <span class="title function_">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException &#123;</span><br><span class="line">               message.getMessageProperties().setExpiration(String.valueOf(<span class="number">5000</span>));<span class="comment">//设置过期时间为5s</span></span><br><span class="line">               <span class="keyword">return</span>  message;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></div></figure>        <h4 id="效果-4"   >          <a href="#效果-4" class="heading-link"><i class="fas fa-link"></i></a><a href="#效果-4" class="headerlink" title="效果"></a>效果</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713171755975.png"  alt="image-20230713171755975">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/RabbitMQ%E4%BD%BF%E7%94%A8%E3%80%90%E8%BF%9B%E9%98%B6%E7%AF%87%E3%80%91/image-20230713171808499.png"  alt="image-20230713171808499">      </p>        <h2 id="小结"   >          <a href="#小结" class="heading-link"><i class="fas fa-link"></i></a><a href="#小结" class="headerlink" title="小结"></a>小结</h2>      <p>1.当Queue的TTL和消息的TTL共同存在的时候，则会优先执行短的</p><p>2.当消息的过期时间到了 但是不在队列的首部的时候不会立即删除[像Redis的惰性删除，只有在调用的时候发现过期了才删除]</p>        <h1 id="死信队列"   >          <a href="#死信队列" class="heading-link"><i class="fas fa-link"></i></a><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h1>      <p>当消息过期\被拒绝签收\队伍消息长度达到限制的消息则会放到死信队列中</p><p>死信队列也是一个交换机，它的存在是处理死信的交换机，其他与正常交换机没有区别</p>        <h2 id="相关代码-6"   >          <a href="#相关代码-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#相关代码-6" class="headerlink" title="相关代码"></a>相关代码</h2>      <p>RabbitMQConfig</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_DLX_NAME=<span class="string">&quot;topic_DLxExchange&quot;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_DLX_NAME=<span class="string">&quot;topic_DLXqueue&quot;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_DLXTRUE_NAME=<span class="string">&quot;topic_DLEtureExchange&quot;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_DLXTRUE_NAME=<span class="string">&quot;topic_DLXtruequeue&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建死信交换机</span></span><br><span class="line">   <span class="meta">@Bean(&quot;DLXExchange&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Exchange <span class="title function_">DLXExchange</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_DLX_NAME).durable(<span class="literal">true</span>).build();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//创建死信Queue</span></span><br><span class="line">   <span class="meta">@Bean(&quot;DLXQueue&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Queue <span class="title function_">DLXQueue</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> QueueBuilder.durable(QUEUE_DLX_NAME).build();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//创建正常交换机</span></span><br><span class="line">   <span class="meta">@Bean(&quot;DLXTrueExchange&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Exchange <span class="title function_">DLXTrueExchange</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_DLXTRUE_NAME).durable(<span class="literal">true</span>).build();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//创建正常Queue</span></span><br><span class="line">   <span class="meta">@Bean(&quot;DLXTrueQueue&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Queue <span class="title function_">DLXTrueQueue</span><span class="params">(<span class="meta">@Qualifier(&quot;DLXExchange&quot;)</span> Exchange exchange)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> QueueBuilder.durable(QUEUE_DLXTRUE_NAME).ttl(<span class="number">100000</span>).maxLength(<span class="number">10</span>).deadLetterExchange(exchange.getName()).deadLetterRoutingKey(<span class="string">&quot;dlx.haha&quot;</span>).build();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//正常Queue和交换机绑定</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Binding <span class="title function_">DLXTrueBinding</span><span class="params">(<span class="meta">@Qualifier(&quot;DLXTrueExchange&quot;)</span> Exchange exchange, <span class="meta">@Qualifier(&quot;DLXTrueQueue&quot;)</span> Queue queue)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;info.#&quot;</span>).noargs();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//死信Queue和死信交换机绑定</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Binding <span class="title function_">DLXBinding</span><span class="params">(<span class="meta">@Qualifier(&quot;DLXExchange&quot;)</span> Exchange exchange, <span class="meta">@Qualifier(&quot;DLXQueue&quot;)</span> Queue queue)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;dlx.*&quot;</span>).noargs();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>生产者代码</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ToSendDlxMessage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">                rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_DLXTRUE_NAME, <span class="string">&quot;info&quot;</span>, <span class="string">&quot;这是&quot;</span>+i+<span class="string">&quot;条消息&quot;</span>, <span class="keyword">new</span> <span class="title class_">MessagePostProcessor</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Message <span class="title function_">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException &#123;</span><br><span class="line"><span class="comment">//                        message.getMessageProperties().setExpiration(String.valueOf(6000));</span></span><br><span class="line">                        <span class="keyword">return</span> message;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>消费者代码</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DlxListen</span> <span class="keyword">implements</span> <span class="title class_">ChannelAwareMessageListener</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;topic_DLXtruequeue&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message, Channel channel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">deliveryTag</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            deliveryTag = message.getMessageProperties().getDeliveryTag();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line"><span class="comment">//          手动签收消息</span></span><br><span class="line">            <span class="type">int</span> i=<span class="number">3</span>/<span class="number">0</span>;</span><br><span class="line">            channel.basicAck(deliveryTag, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">//不签收消息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;拒绝签收消息&quot;</span>);</span><br><span class="line">            channel.basicNack(deliveryTag,<span class="literal">true</span>,<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h3 id="效果-5"   >          <a href="#效果-5" class="heading-link"><i class="fas fa-link"></i></a><a href="#效果-5" class="headerlink" title="效果"></a>效果</h3>              <h4 id="1-当消息到了过期时间"   >          <a href="#1-当消息到了过期时间" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-当消息到了过期时间" class="headerlink" title="(1)当消息到了过期时间"></a>(1)当消息到了过期时间</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713181912511.png"  alt="image-20230713181912511">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713181933839.png"  alt="image-20230713181933839">      </p>        <h4 id="2-当消息长度超过了队列限制"   >          <a href="#2-当消息长度超过了队列限制" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-当消息长度超过了队列限制" class="headerlink" title="(2)当消息长度超过了队列限制"></a>(2)当消息长度超过了队列限制</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713181912511.png"  alt="image-20230713181912511">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713181933839.png"  alt="image-20230713181933839">      </p>        <h4 id="3-消息在消费端拒收"   >          <a href="#3-消息在消费端拒收" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-消息在消费端拒收" class="headerlink" title="(3)消息在消费端拒收"></a>(3)消息在消费端拒收</h4>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713183932822.png"  alt="image-20230713183932822">      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230713183952193.png"  alt="image-20230713183952193">      </p>        <h3 id="提示"   >          <a href="#提示" class="heading-link"><i class="fas fa-link"></i></a><a href="#提示" class="headerlink" title="提示"></a>提示</h3>      <p>当消息总数超过队列长度限制时，因为队列是先进先出的，所以成为死信的消息应该是先进入队列的消息</p>        <h1 id="延迟队列"   >          <a href="#延迟队列" class="heading-link"><i class="fas fa-link"></i></a><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h1>      <p>RabbitMQ无法直接创建延迟队列，但是可以通过TTL和死信队列达到延迟队列的效果，则这样延迟队列为该死信队列的Queue</p>        <h1 id="消息补偿机制"   >          <a href="#消息补偿机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#消息补偿机制" class="headerlink" title="消息补偿机制"></a>消息补偿机制</h1>      <p>【图片来源于CSDN，借鉴于此】</p><p>【<span class="exturl"><a class="exturl__link"   href="https://blog.csdn.net/m0_48481908/article/details/120160022?ops_request_misc=&request_id=&biz_id=102&utm_term=RabbitMQ%E6%B6%88%E6%81%AF%E8%A1%A5%E5%81%BF&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-120160022.nonecase&spm=1018.2226.3001.4187%E3%80%91" >https://blog.csdn.net/m0_48481908/article/details/120160022?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=RabbitMQ%E6%B6%88%E6%81%AF%E8%A1%A5%E5%81%BF&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-120160022.nonecase&amp;spm=1018.2226.3001.4187】</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6I235YyF6JuL5LuK5aSp5pyJ5aW95aW95a2m5Lmg5ZCX77yf,size_14,color_FFFFFF,t_70,g_se,x_16.png"  alt="在这里插入图片描述">      </p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">思路：</span><br><span class="line">1.生产者生产数据并写入自己的数据库</span><br><span class="line">2.生产者发送消息给Q1，并且会延迟一段时间发送相同的消息给Q3。Q1会被Consumer监听到，会产生一个确认信息的信号给Q2,Q2会被回调检查服务监听到，此时会直接将消息写到MDB中</span><br><span class="line">3.消费者将消费数据写入自己的DB中。</span><br><span class="line">4.延迟发送相同的消息给Q3，Q3被回调检查服务监听，会与MDB中数据比对，如果MDB中没有这个消息则说明Q3的消息未被消费，即发送消息给Q1失败，则会调用Producer重发消息</span><br><span class="line">5.定时检查服务来检查生产者DB和MessageDB 如果不一致，如业务DB多于消息MDB则说明有消息未被消费。则需要生产者重发消息【这是为了防止发送消息和延迟发送消息都失败的情况】</span><br></pre></td></tr></table></div></figure>        <h1 id="消息幂等性的保证"   >          <a href="#消息幂等性的保证" class="heading-link"><i class="fas fa-link"></i></a><a href="#消息幂等性的保证" class="headerlink" title="消息幂等性的保证"></a>消息幂等性的保证</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">消息的幂等性：指的是消息的多次执行和一次执行的效果是一样的</span><br><span class="line"></span><br><span class="line">比如消费者的确认时宕机 导致生产者多次发送同样的消息，所以此时要保证消息的幂等性，不要重复消费</span><br><span class="line"></span><br><span class="line">实现思路：</span><br><span class="line"></span><br><span class="line">1.使用Redis的Set命令，因为Set的Key是唯一的，所以这样不会重复消费消息</span><br><span class="line"></span><br><span class="line">2.使用UUID等方式，全局唯一ID，所以每次消息来了去Redis查是否有这个UUID，如果有则说明消费过</span><br><span class="line"></span><br><span class="line">3.利用数据库主键的方式，因为主键也是唯一的</span><br></pre></td></tr></table></div></figure>        <h1 id="消息转换器"   >          <a href="#消息转换器" class="heading-link"><i class="fas fa-link"></i></a><a href="#消息转换器" class="headerlink" title="消息转换器"></a>消息转换器</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SpringAMQP中会有一个消息转化器(MessageConverter)，当我们调用RabbitTamplate的convertAndSend方法的时候，传入的消息参数都是Object类型，然后他会在底层帮我们进行一个序列化，而这个序列化是基于Java底层的ObjectOutPutStream来实现。</span><br><span class="line">我们可以引入一个Json格式的消息转化器来达到约定大于配置将Spring自带的消息转化器替代，我们用JSon格式做序列化</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="相关代码-7"   >          <a href="#相关代码-7" class="heading-link"><i class="fas fa-link"></i></a><a href="#相关代码-7" class="headerlink" title="相关代码"></a>相关代码</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Pom依赖</span><br><span class="line">&lt;!--        定义json格式转化器--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></div></figure><p>启动类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MessageConverter <span class="title function_">jsonMessageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">&#125;</span><br><span class="line">因为约定大于配置，自己创建一个Bean来覆盖初始的消息转化器</span><br></pre></td></tr></table></div></figure><p>RabbitMQConfig</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_OBJECT_NAME=<span class="string">&quot;direct_ObjectExchange&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_OBJECT_NAME=<span class="string">&quot;direct_Objectqueue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Object交换机</span></span><br><span class="line">    <span class="meta">@Bean(&quot;ObjectExchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Exchange <span class="title function_">ObjectExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_OBJECT_NAME).durable(<span class="literal">true</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建Queue</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;ObjectQueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">ObjectQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder.durable(QUEUE_OBJECT_NAME).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Queue和交换机绑定</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">ObjectBinding</span><span class="params">(<span class="meta">@Qualifier(&quot;ObjectExchange&quot;)</span> Exchange exchange, <span class="meta">@Qualifier(&quot;ObjectQueue&quot;)</span> Queue queue)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(<span class="string">&quot;queue.object&quot;</span>).noargs();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>生产者端</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ToObjectMessage</span><span class="params">()</span>&#123;</span><br><span class="line"> HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    rabbitTemplate.convertAndSend(RabbitMqConfig.EXCHANGE_OBJECT_NAME,<span class="string">&quot;queue.object&quot;</span>,map);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>消费者端</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectListen</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;direct_Objectqueue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Map&lt;String,Object&gt; msg)</span>&#123;</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="效果-6"   >          <a href="#效果-6" class="heading-link"><i class="fas fa-link"></i></a><a href="#效果-6" class="headerlink" title="效果"></a>效果</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230720224428282.png" >      </p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230720225911561.png"  alt="image-20230720225911561">      </p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>单机RabbitMq的启动命令</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service rabbitmq-server start 启动</span><br><span class="line">service rabbitmq-server stop  停机</span><br><span class="line">service rabbitmq-server restart 重启</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> MQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础面试题</title>
      <link href="/2023/07/12/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/07/12/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[        <h1 id="final修饰符有学习过吗？它有什么使用场景"   >          <a href="#final修饰符有学习过吗？它有什么使用场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#final修饰符有学习过吗？它有什么使用场景" class="headerlink" title="final修饰符有学习过吗？它有什么使用场景"></a>final修饰符有学习过吗？它有什么使用场景</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Final修饰符表示是最终的</span><br><span class="line">Final修饰符可以用于修饰变量、方法、类</span><br><span class="line"><span class="number">1</span>)Final修饰变量的时候:这个变量叫常量，一旦被赋值就不能改变</span><br><span class="line"><span class="number">2</span>)Final修饰方法的时候:这个方法不能被子类重写</span><br><span class="line"><span class="number">3</span>)Final修饰类的时候:这个类是最终类，不能被继承</span><br></pre></td></tr></table></div></figure>        <h1 id="jvm、jdk、jre的区别"   >          <a href="#jvm、jdk、jre的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#jvm、jdk、jre的区别" class="headerlink" title="jvm、jdk、jre的区别"></a>jvm、jdk、jre的区别</h1>      <p>jvm是java虚拟机，里面含有java运行的一切要求</p><p>jdk是java提供的api库</p><p>jre是最小开发环境</p><p>jvm、jdk、jre的关系是jvm包含jdk包含jre</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JVM:JVM为java虚拟机</span><br><span class="line">JRE:JRE为Java运行环境，JRE包括标准类库和JVM</span><br><span class="line">JDK:JDK为Java开发环境，JDK包括了JRE和开发工具</span><br><span class="line">    </span><br><span class="line">总结:JDK包含JRE，JRE包含JVM，如果只需要运行java程序只要装JRE即可</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/image-20230721203141902.png"  alt="image-20230721203141902">      </p>        <h1 id="java的八大基本类型"   >          <a href="#java的八大基本类型" class="heading-link"><i class="fas fa-link"></i></a><a href="#java的八大基本类型" class="headerlink" title="java的八大基本类型"></a>java的八大基本类型</h1>      <p>我答:</p><p>Char、short、int、Long、Float、Double、String、Boolean</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">整型:<span class="type">byte</span>、<span class="type">short</span>、<span class="type">int</span>、<span class="type">long</span></span><br><span class="line">字符型：<span class="type">char</span></span><br><span class="line">浮点型：Float、Double</span><br><span class="line">布尔型：Boolean</span><br></pre></td></tr></table></div></figure>        <h1 id="多态如何实现的"   >          <a href="#多态如何实现的" class="heading-link"><i class="fas fa-link"></i></a><a href="#多态如何实现的" class="headerlink" title="多态如何实现的"></a>多态如何实现的</h1>              <h1 id="进程和线程的区别"   >          <a href="#进程和线程的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h1>              <h1 id="同步和异步的区别"   >          <a href="#同步和异步的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#同步和异步的区别" class="headerlink" title="同步和异步的区别"></a>同步和异步的区别</h1>              <h1 id="如何理解序列化"   >          <a href="#如何理解序列化" class="heading-link"><i class="fas fa-link"></i></a><a href="#如何理解序列化" class="headerlink" title="如何理解序列化"></a>如何理解序列化</h1>              <h1 id="HashMap-和-TreeMap-讲讲？"   >          <a href="#HashMap-和-TreeMap-讲讲？" class="heading-link"><i class="fas fa-link"></i></a><a href="#HashMap-和-TreeMap-讲讲？" class="headerlink" title="HashMap 和 TreeMap 讲讲？"></a>HashMap 和 TreeMap 讲讲？</h1>              <h1 id="讲讲-Java-提供了哪些锁？它们有什么区别？"   >          <a href="#讲讲-Java-提供了哪些锁？它们有什么区别？" class="heading-link"><i class="fas fa-link"></i></a><a href="#讲讲-Java-提供了哪些锁？它们有什么区别？" class="headerlink" title="讲讲 Java 提供了哪些锁？它们有什么区别？"></a>讲讲 Java 提供了哪些锁？它们有什么区别？</h1>              <h1 id="有了解过集合吗？看过底层源码吗？"   >          <a href="#有了解过集合吗？看过底层源码吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#有了解过集合吗？看过底层源码吗？" class="headerlink" title="有了解过集合吗？看过底层源码吗？"></a>有了解过集合吗？看过底层源码吗？</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">有了解过集合，看过底层源码</span><br><span class="line">集合就是有两个顶级接口Collection单列集合和Map双列集合</span><br><span class="line">Collection接口的子接口有List、Set</span><br><span class="line">List接口的实现类有ArrayList、LinkedList、Vector</span><br><span class="line">Set接口的实现类有HashSet、TreeSet、LinkedHashSet</span><br><span class="line">而Map集合的实现类有HashMap、LinkedHashMap、HashTable、TreeMap、ConcurrentHashMap</span><br><span class="line">您看我具体要从哪方面讲讲呢?</span><br></pre></td></tr></table></div></figure>        <h1 id="ArrayList底层是怎么进行创建和扩容的呢？"   >          <a href="#ArrayList底层是怎么进行创建和扩容的呢？" class="heading-link"><i class="fas fa-link"></i></a><a href="#ArrayList底层是怎么进行创建和扩容的呢？" class="headerlink" title="ArrayList底层是怎么进行创建和扩容的呢？"></a>ArrayList底层是怎么进行创建和扩容的呢？</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList底层是创建了一个Object数组来存放数据的，默认的空参构造时创建一个数组长度为<span class="number">10</span>的Obejct数组，也可以在构建方法传入指定长度，构建一个指定长度的Object数组。</span><br><span class="line">ArrayList在添加数据的时候会判断这个数组是不是满了，一旦满了就进行扩容，ArrayList的扩容是原来容量的<span class="number">1.5</span>倍</span><br><span class="line">具体操作是拿出老容量加上老容量右移一位再赋值给新数组，然后把老数组的元素copy到新数组中，最后添加新加入的数据</span><br></pre></td></tr></table></div></figure>        <h1 id="集合是怎么处理哈希碰撞的？"   >          <a href="#集合是怎么处理哈希碰撞的？" class="heading-link"><i class="fas fa-link"></i></a><a href="#集合是怎么处理哈希碰撞的？" class="headerlink" title="集合是怎么处理哈希碰撞的？"></a>集合是怎么处理哈希碰撞的？</h1>      <p>我答：</p><p>集合获取这个索引I是把集合长度n-1再和由key经过hashcode方法得到的哈希值做一个与运算<br>由key算出的hash值具体是 拿出key经过hashcode获得一个哈希值，将这个哈希值和这个哈希值无符号右移16位做一个异或运算 使得高位数据也能参与hash中 最后得到的值传回去</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当发生哈希碰撞的时候有以下几种解决哈希碰撞的方法：链式寻址法、再hash算法、公共溢出法、线性探测法</span><br><span class="line">而HashMap在处理哈希碰撞的时候就是利用链式寻址法和红黑树，<span class="number">1.7</span>是将新数据插入到链表头部，而<span class="number">1.8</span>会将数据插入到链表尾部，并且插入新数据的时候会进行判断链表长度是否超过<span class="number">8</span>且数组长度超过<span class="number">64</span>，如果超过了则会转成红黑树结构，红黑树是为了优化因为链表过长导致搜索时间复杂度增加的一个问题</span><br></pre></td></tr></table></div></figure>        <h1 id="有了解过锁吗-Lock和Sychorized那些"   >          <a href="#有了解过锁吗-Lock和Sychorized那些" class="heading-link"><i class="fas fa-link"></i></a><a href="#有了解过锁吗-Lock和Sychorized那些" class="headerlink" title="有了解过锁吗?Lock和Sychorized那些"></a>有了解过锁吗?Lock和Sychorized那些</h1>              <h1 id="final修饰方法会怎么样？final修饰类会怎么样"   >          <a href="#final修饰方法会怎么样？final修饰类会怎么样" class="heading-link"><i class="fas fa-link"></i></a><a href="#final修饰方法会怎么样？final修饰类会怎么样" class="headerlink" title="final修饰方法会怎么样？final修饰类会怎么样?"></a>final修饰方法会怎么样？final修饰类会怎么样?</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span>修饰方法会让方法无法被重写</span><br><span class="line"><span class="keyword">final</span>修饰类会使这个类成为最终类,无法被继承</span><br></pre></td></tr></table></div></figure>        <h1 id="Integer和int能直接进行比较吗？"   >          <a href="#Integer和int能直接进行比较吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Integer和int能直接进行比较吗？" class="headerlink" title="Integer和int能直接进行比较吗？"></a>Integer和int能直接进行比较吗？</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer类型和Int值能直接比较，因为在Integer会进行自动拆箱和装箱</span><br><span class="line">在Integer和<span class="type">int</span>进行比较的时候Integer会自动拆箱成<span class="type">int</span>类型</span><br></pre></td></tr></table></div></figure>        <h1 id="Integer底层有一个缓冲数组，在这个缓冲数组边界能直接进行比较吗？"   >          <a href="#Integer底层有一个缓冲数组，在这个缓冲数组边界能直接进行比较吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Integer底层有一个缓冲数组，在这个缓冲数组边界能直接进行比较吗？" class="headerlink" title="Integer底层有一个缓冲数组，在这个缓冲数组边界能直接进行比较吗？"></a>Integer底层有一个缓冲数组，在这个缓冲数组边界能直接进行比较吗？</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer底层有一个<span class="type">int</span>的缓冲数组，缓冲数组的范围是负<span class="number">128</span>到正<span class="number">127</span>，在这个范围里会直接找到缓冲区的地址</span><br><span class="line">在缓冲数据的边界也能进行直接比较的</span><br></pre></td></tr></table></div></figure>        <h1 id="和equals方法的区别"   >          <a href="#和equals方法的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#和equals方法的区别" class="headerlink" title="&#x3D;&#x3D;和equals方法的区别"></a>&#x3D;&#x3D;和equals方法的区别</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">==在比较基本数据类型的时候比较的是具体的值,而在比较引用数据类型的时候比较两边的地址值</span><br><span class="line">equals方法比较的是两边的属性值</span><br></pre></td></tr></table></div></figure>        <h1 id="有了解过Volatile关键字吗？"   >          <a href="#有了解过Volatile关键字吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#有了解过Volatile关键字吗？" class="headerlink" title="有了解过Volatile关键字吗？"></a>有了解过Volatile关键字吗？</h1>              <h1 id="说说SpringMVC的执行流程"   >          <a href="#说说SpringMVC的执行流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#说说SpringMVC的执行流程" class="headerlink" title="说说SpringMVC的执行流程"></a>说说SpringMVC的执行流程</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTTP请求会发送到DispatcherServlet(前端控制器)中然后DisPatcherServlet会通过url找到HandlerMapping(处理器映射器)获得映射，HandlerMapping会将这个hander处理器和拦截器一起发送回DisPatcherServlet中，DisPatcherServlet会通过映射查到HandleAdapter(处理器适配器),HandleAdapater会找到具体的Handle,然后将Handle传回来的ModelandView传回给DisPatcherServlet，DisPachthersevlet去找View <span class="title function_">Reslover</span><span class="params">(视图解析器)</span>,View Reslover会将解析出来的View返回给DisPachterServlet，然后DisPachter再渲染反映给前端</span><br><span class="line">而现在一般是面向接口编程，我们不用返回View而是Handle通过ResponBody注解再通过(HttpMessageConverter)消息转化器返回一个Json格式的数据就可以了</span><br></pre></td></tr></table></div></figure>        <h1 id="ArrayList-线程安全吗？Vector-呢？那并发性能高的-ArrayList-是什么？"   >          <a href="#ArrayList-线程安全吗？Vector-呢？那并发性能高的-ArrayList-是什么？" class="heading-link"><i class="fas fa-link"></i></a><a href="#ArrayList-线程安全吗？Vector-呢？那并发性能高的-ArrayList-是什么？" class="headerlink" title="ArrayList 线程安全吗？Vector 呢？那并发性能高的 ArrayList 是什么？"></a>ArrayList 线程安全吗？Vector 呢？那并发性能高的 ArrayList 是什么？</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList线程不安全，而Vector是线程安全的，</span><br><span class="line">ArrayList底层是Object数组，默认初始化的数组长度为<span class="number">10</span></span><br></pre></td></tr></table></div></figure>        <h1 id="线程池有用过吗？有哪些参数？"   >          <a href="#线程池有用过吗？有哪些参数？" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程池有用过吗？有哪些参数？" class="headerlink" title="线程池有用过吗？有哪些参数？"></a>线程池有用过吗？有哪些参数？</h1>              <h1 id="线程池如何配置？有什么策略策略？"   >          <a href="#线程池如何配置？有什么策略策略？" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程池如何配置？有什么策略策略？" class="headerlink" title="线程池如何配置？有什么策略策略？"></a>线程池如何配置？有什么策略策略？</h1>              <h1 id="讲讲-ThreadPoolExecutor-的七个参数？怎么配置？"   >          <a href="#讲讲-ThreadPoolExecutor-的七个参数？怎么配置？" class="heading-link"><i class="fas fa-link"></i></a><a href="#讲讲-ThreadPoolExecutor-的七个参数？怎么配置？" class="headerlink" title="讲讲 ThreadPoolExecutor 的七个参数？怎么配置？"></a>讲讲 ThreadPoolExecutor 的七个参数？怎么配置？</h1>              <h1 id="能说一下ThreadPoolExecutor核心线程数、最大线程数、工作队列之间的数量关系吗？"   >          <a href="#能说一下ThreadPoolExecutor核心线程数、最大线程数、工作队列之间的数量关系吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#能说一下ThreadPoolExecutor核心线程数、最大线程数、工作队列之间的数量关系吗？" class="headerlink" title="能说一下ThreadPoolExecutor核心线程数、最大线程数、工作队列之间的数量关系吗？"></a>能说一下ThreadPoolExecutor核心线程数、最大线程数、工作队列之间的数量关系吗？</h1>              <h1 id="普通For、增强For和ForEach的区别"   >          <a href="#普通For、增强For和ForEach的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#普通For、增强For和ForEach的区别" class="headerlink" title="普通For、增强For和ForEach的区别"></a>普通For、增强For和ForEach的区别</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">普通For是通过索引I来获得元素，而增强For是通过迭代器来获得元素</span><br><span class="line">ForEach就是增强For</span><br></pre></td></tr></table></div></figure><hr>        <h1 id="未整理区"   >          <a href="#未整理区" class="heading-link"><i class="fas fa-link"></i></a><a href="#未整理区" class="headerlink" title="未整理区"></a>未整理区</h1>              <h2 id="与equals的区别，String类里面的equals方法实现看过吗，大概的实现流程"   >          <a href="#与equals的区别，String类里面的equals方法实现看过吗，大概的实现流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#与equals的区别，String类里面的equals方法实现看过吗，大概的实现流程" class="headerlink" title="&#x3D;&#x3D;与equals的区别，String类里面的equals方法实现看过吗，大概的实现流程"></a>&#x3D;&#x3D;与equals的区别，String类里面的equals方法实现看过吗，大概的实现流程</h2>              <h2 id="Redis有哪些常见数据类型，string，hash，还有zset的内部实现用的什么数据结构，zset数据结构有哪些应用场景-排行榜，实时排名，去重统计"   >          <a href="#Redis有哪些常见数据类型，string，hash，还有zset的内部实现用的什么数据结构，zset数据结构有哪些应用场景-排行榜，实时排名，去重统计" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis有哪些常见数据类型，string，hash，还有zset的内部实现用的什么数据结构，zset数据结构有哪些应用场景-排行榜，实时排名，去重统计" class="headerlink" title="Redis有哪些常见数据类型，string，hash，还有zset的内部实现用的什么数据结构，zset数据结构有哪些应用场景(排行榜，实时排名，去重统计)"></a>Redis有哪些常见数据类型，string，hash，还有zset的内部实现用的什么数据结构，zset数据结构有哪些应用场景(排行榜，实时排名，去重统计)</h2>              <h2 id="你的项目中用到了分布式锁，使用分布式锁的时候需要注意哪些问题，分布式锁的使用场景（答的商品秒杀）；为什么要用分布式锁，不用synchronized锁住代码块来保证线程安全。"   >          <a href="#你的项目中用到了分布式锁，使用分布式锁的时候需要注意哪些问题，分布式锁的使用场景（答的商品秒杀）；为什么要用分布式锁，不用synchronized锁住代码块来保证线程安全。" class="heading-link"><i class="fas fa-link"></i></a><a href="#你的项目中用到了分布式锁，使用分布式锁的时候需要注意哪些问题，分布式锁的使用场景（答的商品秒杀）；为什么要用分布式锁，不用synchronized锁住代码块来保证线程安全。" class="headerlink" title="你的项目中用到了分布式锁，使用分布式锁的时候需要注意哪些问题，分布式锁的使用场景（答的商品秒杀）；为什么要用分布式锁，不用synchronized锁住代码块来保证线程安全。"></a>你的项目中用到了分布式锁，使用分布式锁的时候需要注意哪些问题，分布式锁的使用场景（答的商品秒杀）；为什么要用分布式锁，不用synchronized锁住代码块来保证线程安全。</h2>              <h2 id="什么是回表？"   >          <a href="#什么是回表？" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是回表？" class="headerlink" title="什么是回表？"></a>什么是回表？</h2>              <h2 id="MySQL存储引擎Innodb的数据结构，可以用hashmap吗，索引用有序数组查询效率会怎么样，有什么问题"   >          <a href="#MySQL存储引擎Innodb的数据结构，可以用hashmap吗，索引用有序数组查询效率会怎么样，有什么问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#MySQL存储引擎Innodb的数据结构，可以用hashmap吗，索引用有序数组查询效率会怎么样，有什么问题" class="headerlink" title="MySQL存储引擎Innodb的数据结构，可以用hashmap吗，索引用有序数组查询效率会怎么样，有什么问题"></a>MySQL存储引擎Innodb的数据结构，可以用hashmap吗，索引用有序数组查询效率会怎么样，有什么问题</h2>              <h2 id="编程题：输入一个整数，转为二进制，并求出1个个数。"   >          <a href="#编程题：输入一个整数，转为二进制，并求出1个个数。" class="heading-link"><i class="fas fa-link"></i></a><a href="#编程题：输入一个整数，转为二进制，并求出1个个数。" class="headerlink" title="编程题：输入一个整数，转为二进制，并求出1个个数。"></a>编程题：输入一个整数，转为二进制，并求出1个个数。</h2>      ]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql面试题</title>
      <link href="/2023/07/12/MySql%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/07/12/MySql%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[        <h1 id="InnoDb和MyIsam的区别"   >          <a href="#InnoDb和MyIsam的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#InnoDb和MyIsam的区别" class="headerlink" title="InnoDb和MyIsam的区别"></a>InnoDb和MyIsam的区别</h1>      <p>我答:</p><p>MySql5以后默认的引擎是InnoDB,InnoDB支持行锁、事务</p><p>MyIsam主要在内存中，不支持事务</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">主要从四个方面来区别</span><br><span class="line">InnoDB支持事务、行级锁、外键</span><br><span class="line">而Myisam不支持事务、行级锁、外键</span><br><span class="line"></span><br><span class="line">存储结构的不同</span><br><span class="line">    </span><br><span class="line">InnoDB的存储方式是索引和数据存放在.idb文件中</span><br><span class="line">myisam的存储是索引和数据分开存放 索引存在.MYI中 数据存在.MYD中</span><br></pre></td></tr></table></div></figure>        <h1 id="介绍一下Mysql中事务的特性"   >          <a href="#介绍一下Mysql中事务的特性" class="heading-link"><i class="fas fa-link"></i></a><a href="#介绍一下Mysql中事务的特性" class="headerlink" title="介绍一下Mysql中事务的特性"></a>介绍一下Mysql中事务的特性</h1>      <p>我答:mySql的事务主要有四个特性 ACID</p><p>1.原子性2.一致性3.隔离性4.。。。</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">事务是一组操作的集合，它是一个不可分割的操作单元，当事务提交之后，这些操作要么同时成功要么同时失败</span><br><span class="line">事务有四个特性即ACID</span><br><span class="line"><span class="number">1.</span>原子性:表示事务是不可分割的操作单元，事务内的操作要么全部被执行要么全部不被执行</span><br><span class="line"><span class="number">2.</span>一致性:事务完成时，所有数据必须保持一致状态，主要是约束一致性和数据一致性</span><br><span class="line"><span class="number">3.</span>隔离性:数据库提供的隔离机制，保证一个事务内部是对其他并发事务隔离的</span><br><span class="line"><span class="number">4.</span>持久性:当事务一旦提交,它对数据库中数据改变应该是永久的</span><br><span class="line">实现事务的原子性和一致性依赖于undo log日志 而事务的持久性依赖于redo log日志</span><br><span class="line">就举一个转账的例子:当A向B转账<span class="number">500</span>元时，原子性提现在A和B操作要么同时成功要么同时失败，而一致性表现在当A减少<span class="number">500</span>元B就必须要增加<span class="number">500</span>元保证数据的一致，隔离性表现在A像B转账的时候不会受到其他事务的影响，而持久性体现在一旦转账成功，数据修改就是永久性的。</span><br></pre></td></tr></table></div></figure>        <h1 id="并发事务会带来哪些问题？"   >          <a href="#并发事务会带来哪些问题？" class="heading-link"><i class="fas fa-link"></i></a><a href="#并发事务会带来哪些问题？" class="headerlink" title="并发事务会带来哪些问题？"></a>并发事务会带来哪些问题？</h1>      <p>我答：1.脏读2.不可重复读3.幻读</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">事务并发操作可能会带来有四个问题</span><br><span class="line"><span class="number">1.</span>更新丢失:更新丢失又分为两种一种是回滚覆盖，一种是更新覆盖，我们解决更新丢失一般采用乐观锁的思想加入版本号</span><br><span class="line"><span class="number">2.</span>脏读:脏读指一个事务读到了另一个事务还未提交的数据，那么读到的数据就是脏数据</span><br><span class="line"><span class="number">3.</span>不可重复读:不可重复读意思是当事务多次读取同一行数据时，前后读到的数据不一致</span><br><span class="line"><span class="number">4.</span>幻读:幻读指的是在事务按照相同条件查询，而前后查询到的数据行数的不一致，通常是当插入操作时查询数据不存在而当执行插入操作时数据又存在了。</span><br></pre></td></tr></table></div></figure>        <h1 id="并发事务带来的更新丢失是什么"   >          <a href="#并发事务带来的更新丢失是什么" class="heading-link"><i class="fas fa-link"></i></a><a href="#并发事务带来的更新丢失是什么" class="headerlink" title="并发事务带来的更新丢失是什么?"></a>并发事务带来的更新丢失是什么?</h1>      <p>我答:在并发操作下，可能会产生数据覆盖的情况，导致前一个线程的数据被覆盖也就是更新丢失了</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">更新丢失是当多个事务更新同一行数据的时候可能产生的数据丢失现象，更新丢失分为两钟：</span><br><span class="line">    一种是回滚覆盖，一种是更新覆盖</span><br><span class="line">    回滚覆盖：当事务进行回滚操作时，把其他事务提交的数据给覆盖了</span><br><span class="line">    更新覆盖：当事务进行更新操作时，把其他事务提交的数据给覆盖了 【例如一个更新年龄一个更新金额，后提交的会把前一个给覆盖了】</span><br><span class="line">    </span><br><span class="line">我们解决更新丢失是采用乐观锁的机制，方案是版本号，通过版本号确认是否数据被修改过</span><br></pre></td></tr></table></div></figure>        <h2 id="读未提交怎么解决回滚覆盖问题"   >          <a href="#读未提交怎么解决回滚覆盖问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#读未提交怎么解决回滚覆盖问题" class="headerlink" title="读未提交怎么解决回滚覆盖问题"></a>读未提交怎么解决回滚覆盖问题</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">读未提交的机制主要是引入排它锁和共享锁</span><br><span class="line"></span><br><span class="line">当事务开启之后，对一条数据进行修改则会引入一个共享读锁和排他写锁，所以可以避免回滚覆盖</span><br><span class="line"></span><br><span class="line">回滚覆盖案例</span><br><span class="line">例如事务A和事务B都要对同一行数据进行修改，假设数据金额为<span class="number">100</span></span><br><span class="line">---------------</span><br><span class="line">事务A开启   数据金额为<span class="number">100</span></span><br><span class="line">事务B开启并将数据改为<span class="number">120</span></span><br><span class="line">事务B提交数据金额为<span class="number">120</span></span><br><span class="line">事务A回滚数据金额为<span class="number">100</span></span><br><span class="line">这样两个事务结束最终的金额到了<span class="number">100</span>,事务A回滚导致了事务B的更新丢失</span><br><span class="line"></span><br><span class="line">读未提交的情况下</span><br><span class="line">--------------</span><br><span class="line">事务A开启数据金额为<span class="number">100</span></span><br><span class="line">事务B开启</span><br><span class="line">事务B修改数据,将金额改为<span class="number">120</span>,同时添加了一个排他写锁    </span><br><span class="line">事务A想要修改数据，则会被排斥</span><br><span class="line">事务B释放排它锁  数据金额为<span class="number">120</span></span><br><span class="line">事务B提交数据金额为<span class="number">120</span>    </span><br><span class="line">事务A想要修改数据金额的时候    读取到的数据为<span class="number">120</span></span><br><span class="line">于是当事务A回滚  回滚数据依然是<span class="number">120</span></span><br><span class="line"></span><br><span class="line">读未提交级别解决了回滚丢失的现象</span><br></pre></td></tr></table></div></figure>        <h2 id="读未提交和读已提交为什么能解决回滚覆盖而解决不了提交覆盖？"   >          <a href="#读未提交和读已提交为什么能解决回滚覆盖而解决不了提交覆盖？" class="heading-link"><i class="fas fa-link"></i></a><a href="#读未提交和读已提交为什么能解决回滚覆盖而解决不了提交覆盖？" class="headerlink" title="读未提交和读已提交为什么能解决回滚覆盖而解决不了提交覆盖？"></a>读未提交和读已提交为什么能解决回滚覆盖而解决不了提交覆盖？</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">读未提交和读已提交解决回滚覆盖而无法解决提交覆盖</span><br><span class="line">解决回滚覆盖主要是依赖于排他锁和共享锁</span><br><span class="line"></span><br><span class="line">无法解决提交覆盖</span><br><span class="line">提交覆盖案例</span><br><span class="line">例如事务A和事务B都要对同一行数据进行修改，假设数据金额为<span class="number">100</span>，年龄为<span class="number">50</span></span><br><span class="line">------------</span><br><span class="line">事务A开启数据金额为<span class="number">100</span>，年龄为<span class="number">50</span></span><br><span class="line">事务B开启修改金额为<span class="number">120</span></span><br><span class="line">事务B提交数据金额为<span class="number">120</span>，年龄为<span class="number">50</span></span><br><span class="line">事务A修改修改年龄为<span class="number">70</span></span><br><span class="line">事务A提交数据金额为<span class="number">100</span>，年龄为<span class="number">70</span></span><br><span class="line">这样两个事务结束最终的金额到了<span class="number">100</span>,事务A的提交导致了事务B的更新丢失(事务B更新金额被丢失了)</span><br><span class="line">    </span><br><span class="line">读已提交的情况下</span><br><span class="line">--------------</span><br><span class="line">事务A开启数据金额为<span class="number">100</span>，年龄为<span class="number">50</span></span><br><span class="line">事务B开启</span><br><span class="line">事务B修改数据,将金额改为<span class="number">120</span>,同时添加了一个排他写锁    将金额<span class="number">120</span>，年龄<span class="number">50</span>写入undo_log中</span><br><span class="line">事务A想要修改数据，则会被排斥，且因为MVCC机制事务只能读取到已经提交的事务</span><br><span class="line">事务B释放排它锁  数据金额为<span class="number">100</span>，年龄<span class="number">50</span>   </span><br><span class="line">事务A修改年龄为<span class="number">70</span>      将金额<span class="number">100</span>，年龄<span class="number">70</span>写入undo_log</span><br><span class="line">事务B提交提交根据B的undo_log版本数据的金额为<span class="number">120</span>，年龄<span class="number">50</span></span><br><span class="line">于是当事务A提交  提交根据A的undo_log版本数据的金额是<span class="number">100</span>，年龄<span class="number">70</span></span><br><span class="line"></span><br><span class="line">事务A的提交了之后redoLogBuffer中的数据刷到硬盘中,最终的数据是金额<span class="number">100</span>，年龄<span class="number">70</span>而覆盖了事务B的提交</span><br><span class="line">读未提交和读已提交都无法解决提交覆盖的问题</span><br></pre></td></tr></table></div></figure>        <h2 id="可重复读怎么解决提交覆盖的问题？"   >          <a href="#可重复读怎么解决提交覆盖的问题？" class="heading-link"><i class="fas fa-link"></i></a><a href="#可重复读怎么解决提交覆盖的问题？" class="headerlink" title="可重复读怎么解决提交覆盖的问题？"></a>可重复读怎么解决提交覆盖的问题？</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">读未提交和读已提交解决回滚覆盖而无法解决提交覆盖，解决回滚覆盖主要是依赖于排他锁和共享锁</span><br><span class="line">而可重复读和串行化可以解决提交覆盖问题</span><br><span class="line">    </span><br><span class="line">提交覆盖案例</span><br><span class="line">例如事务A和事务B都要对同一行数据进行修改，假设数据金额为<span class="number">100</span>，年龄为<span class="number">50</span></span><br><span class="line">------------</span><br><span class="line">事务A开启数据金额为<span class="number">100</span>，年龄为<span class="number">50</span></span><br><span class="line">事务B开启修改金额为<span class="number">120</span></span><br><span class="line">事务B提交数据金额为<span class="number">120</span>，年龄为<span class="number">50</span></span><br><span class="line">事务A修改修改年龄为<span class="number">70</span></span><br><span class="line">事务A提交数据金额为<span class="number">100</span>，年龄为<span class="number">70</span></span><br><span class="line">这样两个事务结束最终的金额到了<span class="number">100</span>,事务A的提交导致了事务B的更新丢失(事务B更新金额被丢失了)</span><br><span class="line">    </span><br><span class="line">可重复读级别下</span><br><span class="line">例如事务A和事务B都要对同一行数据进行修改，假设数据金额为<span class="number">100</span>，年龄为<span class="number">50</span></span><br><span class="line">------------</span><br><span class="line">事务A开启查询数据  快照版本金额为<span class="number">100</span>，年龄<span class="number">50</span>实际数据金额为<span class="number">100</span>，年龄为<span class="number">50</span></span><br><span class="line">事务B开启查询数据      快照版本金额为<span class="number">100</span>，年龄<span class="number">50</span></span><br><span class="line">事务B修改，修改金额为<span class="number">120</span>  快照版本金额为<span class="number">100</span>，年龄<span class="number">50</span> 实际数据金额为<span class="number">100</span>，年龄为<span class="number">50</span>  undo_log版本链中的数据金额为<span class="number">120</span>，年龄<span class="number">50</span></span><br><span class="line">事务B提交  将undo_log中的数据写入到redo_log 实际数据金额为<span class="number">120</span>，年龄<span class="number">50</span></span><br><span class="line">事务A查询快照数据依然为金额<span class="number">100</span>，年龄<span class="number">50</span>  实际数据金额为<span class="number">120</span>，年龄<span class="number">50</span></span><br><span class="line">事务A修改，修改年龄为<span class="number">70</span></span><br><span class="line">    修改操作是当前读，那么undo_log在修改之前的数据是金额<span class="number">120</span>，年龄<span class="number">50</span> </span><br><span class="line">    修改之后undo_log版本链中的数据是金额<span class="number">120</span>，年龄<span class="number">70</span></span><br><span class="line">事务A提交undo_log版本链中的数据金额为<span class="number">120</span>，年龄<span class="number">70</span>，所以最终提交的金额是<span class="number">120</span>，年龄<span class="number">70</span></span><br><span class="line">    </span><br><span class="line"> 于是可重复读可以解决提交覆盖的问题，依赖于MVCC机制和锁</span><br></pre></td></tr></table></div></figure>        <h1 id="事务隔离级别有哪些？MySql默认的事务隔离级别是哪个"   >          <a href="#事务隔离级别有哪些？MySql默认的事务隔离级别是哪个" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务隔离级别有哪些？MySql默认的事务隔离级别是哪个" class="headerlink" title="事务隔离级别有哪些？MySql默认的事务隔离级别是哪个"></a>事务隔离级别有哪些？MySql默认的事务隔离级别是哪个</h1>      <p>我答:读未提交、读已提交(RC)、可重复读(RR)、串行化</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">事务隔离级别有四个：</span><br><span class="line"><span class="number">1.</span>读未提交：脏读、不可重复读、幻读都没有解决</span><br><span class="line"><span class="number">2.</span>读已提交：解决了脏读的问题，没有解决不可重复读、幻读</span><br><span class="line"><span class="number">3.</span>可重复读：解决了脏读、不可重复读的问题，没有解决幻读的现象，这是MySql默认的事务级别</span><br><span class="line"><span class="number">4.</span>串行化：解决了脏读、不可重复读、幻读，但是因为事务是串行执行(排队)，所以性能较差</span><br></pre></td></tr></table></div></figure><div class="table-container"><table><thead><tr><th align="center">隔离级别</th><th align="center">回滚覆盖</th><th align="center">提交覆盖</th><th align="center">幻读</th><th align="center">不可重复读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">读未提交（READ UNCOMMITTED）</td><td align="center">×</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">读已提交（READ COMMITTED）</td><td align="center">×</td><td align="center">√</td><td align="center">×</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">可重复读（REPEATABLE READ)</td><td align="center">×</td><td align="center">×</td><td align="center">×</td><td align="center">×</td><td align="center">√</td></tr><tr><td align="center">串行化  （SERIALIZABLE）</td><td align="center">×</td><td align="center">×</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table></div>        <h1 id="Redo-Log和Undo-Log的区别"   >          <a href="#Redo-Log和Undo-Log的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redo-Log和Undo-Log的区别" class="headerlink" title="Redo Log和Undo Log的区别"></a>Redo Log和Undo Log的区别</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Redo Log:当数据发生变化的时，redo log buffer会先将数据写入到redo log file中，当数据库宕机时可以冲redo log file中恢复数据</span><br><span class="line">undo log:记录的是数据的逻辑日志，他主要的作用在提供回滚和MVCC中。当日志执行回滚操作的时候读取undo log来回滚到之前的数据</span><br><span class="line">    </span><br><span class="line">redo log保证了事务的持久性，而undo log保证了事务的原子性和一致性</span><br></pre></td></tr></table></div></figure>        <h1 id="事务的隔离性是怎么保证的-（说说MVCC机制的理解）"   >          <a href="#事务的隔离性是怎么保证的-（说说MVCC机制的理解）" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务的隔离性是怎么保证的-（说说MVCC机制的理解）" class="headerlink" title="事务的隔离性是怎么保证的?（说说MVCC机制的理解）"></a>事务的隔离性是怎么保证的?（说说MVCC机制的理解）</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">事务的隔离性主要是依靠锁+MVCC机制的实现</span><br><span class="line">其中MVCC指的是多版本并发空值，MVCC实现主要是有三个部分</span><br><span class="line">    第一个部分是隐藏字段，在Mysql中会有三个隐藏字段<span class="number">1.</span>事务ID(trx_id)<span class="number">2.</span>回滚指针(roll_pointer)<span class="number">3.</span>隐式主键(ROW_id)</span><br><span class="line">    第二个部分是undo log版本链，每个数据都有多个版本，多版本之间通过undo log链进行链接，链头是最新版本即最新数据，链尾是最老版本即最老数据</span><br><span class="line">    第三部分是Read View，ReadView解决的是一个事务选择的哪个版本的问题，而不同隔离级别的快照读也不同，RC级别下每一条Select语句都会生成ReadView 而RR级别只会在第一次执行Select生成ReadView然后后面复用这个ReadView，所以RR解决了不可重复读的问题，而RC没有解决不可重复读的问题</span><br></pre></td></tr></table></div></figure>        <h1 id="说说MySql的主从复制"   >          <a href="#说说MySql的主从复制" class="heading-link"><i class="fas fa-link"></i></a><a href="#说说MySql的主从复制" class="headerlink" title="说说MySql的主从复制"></a>说说MySql的主从复制</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MySql的主从搭建主要的用途：</span><br><span class="line"><span class="number">1.</span>实时灾备，用于故障切换</span><br><span class="line"><span class="number">2.</span>读写分离</span><br><span class="line"><span class="number">3.</span>用于数据备份</span><br><span class="line"></span><br><span class="line">MySql的主从复制的实现主要是以下三个步骤</span><br><span class="line"><span class="number">1.</span>主库开启了Binlog日志，当事务提交的时候会将记录在二进制日志文件binlog中</span><br><span class="line"><span class="number">2.</span>从库的IOthread读取到主库的BinLog日志的信息写到自己的中继日志 relay Log中</span><br><span class="line"><span class="number">3.</span>从库从relay Log进行数据的重做</span><br></pre></td></tr></table></div></figure>        <h1 id="你们项目中有没有使用过分库分表呢"   >          <a href="#你们项目中有没有使用过分库分表呢" class="heading-link"><i class="fas fa-link"></i></a><a href="#你们项目中有没有使用过分库分表呢" class="headerlink" title="你们项目中有没有使用过分库分表呢?"></a>你们项目中有没有使用过分库分表呢?</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">分库分表主要是因为单机存储达到瓶颈或者连接数，处理能力达到上限才需要用到</span><br><span class="line">我项目中没有用到分库分表[当单表数据量超过1000w或者20G时可以考虑分库分表]</span><br><span class="line">而对数据库优化这方面我学习到了分库分表的思想</span><br><span class="line"></span><br><span class="line">分库分表就是把一个数据库的数据分散存放到多个数据库上，分库分表包括垂直分库、垂直分表、水平分库、水平分表这四部分</span><br><span class="line"><span class="number">1.</span>垂直分库，将一个数据库按照业务不同来进行分库，将不同业务的表分布到不同数据库中</span><br><span class="line"><span class="number">2.</span>垂直分库，将一个数据库的表按照字段分表，不同字段分到不同表中</span><br><span class="line"><span class="number">3.</span>水平分库，将一个数据库的表，分散到不同数据库中【表结构一样数据不一样】</span><br><span class="line"><span class="number">4.</span>水平分表，将一个表的数据，分散到不同的表中【可以是同一个数据库中】</span><br></pre></td></tr></table></div></figure>        <h1 id="说说数据库中锁的种类"   >          <a href="#说说数据库中锁的种类" class="heading-link"><i class="fas fa-link"></i></a><a href="#说说数据库中锁的种类" class="headerlink" title="说说数据库中锁的种类"></a>说说数据库中锁的种类</h1>              <h1 id="我们如何定位慢查询"   >          <a href="#我们如何定位慢查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#我们如何定位慢查询" class="headerlink" title="我们如何定位慢查询"></a>我们如何定位慢查询</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>我们可以开启MySql的慢查询日志，我们通过查看慢查询日志的信息可以知道慢查询的情况</span><br><span class="line"><span class="number">2.</span>通过show profile命令可以知道每一条SQL的执行耗时的基本情况，然后通过show profile <span class="keyword">for</span> query query_id 查询到指定的SQL各个阶段的耗时情况</span><br><span class="line"><span class="number">3.</span>通过在SQL语句前面添加explain关键字，查询当前sql的执行计划,可以通过key和key_len字段知道是否有命中索引，索引是否失效，通过type字段查看是否有优化空间，是否存在全盘扫描或者全索引扫描，通过extra字段知道是否有回表</span><br></pre></td></tr></table></div></figure>        <h1 id="什么是聚簇索引和非聚簇索引"   >          <a href="#什么是聚簇索引和非聚簇索引" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是聚簇索引和非聚簇索引" class="headerlink" title="什么是聚簇索引和非聚簇索引"></a>什么是聚簇索引和非聚簇索引</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">聚簇索引主要是数据和索引放在一起，索引结构的叶子结点保存了行数据。一般情况下是主键作为聚簇索引</span><br><span class="line">非聚簇索引就是数据和索引分开存放的，叶子结点存放的是对应主键的位置，我们创建的索引通常都是非聚簇索引</span><br></pre></td></tr></table></div></figure>        <h1 id="什么是回表查询"   >          <a href="#什么是回表查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是回表查询" class="headerlink" title="什么是回表查询"></a>什么是回表查询</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过非聚簇索引找到的数据不够，要通过主键值返回去查询聚簇索引获得整个行数据这个情况就是回表查询</span><br></pre></td></tr></table></div></figure>        <h1 id="什么是覆盖索引？"   >          <a href="#什么是覆盖索引？" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是覆盖索引？" class="headerlink" title="什么是覆盖索引？"></a>什么是覆盖索引？</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">覆盖索引指的是在查询时使用了索引，并且需要返回的列，在本次查找中可以全部找到。可以不用通过回表查询，这样能显著提高性能</span><br></pre></td></tr></table></div></figure>        <h1 id="什么情况下会造成索引失效？"   >          <a href="#什么情况下会造成索引失效？" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么情况下会造成索引失效？" class="headerlink" title="什么情况下会造成索引失效？"></a>什么情况下会造成索引失效？</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>使用联合索引违背了最左前缀法则.</span><br><span class="line"><span class="number">2.</span>字符串没有加单引号，会导致类型转化造成了索引失效</span><br><span class="line"><span class="number">3.</span>在索引列上进行了运算操作，会导致索引失效</span><br><span class="line"><span class="number">4.</span>使用了模糊匹配，如果仅仅是尾部模糊匹配索引不会失效，而使用了头部模糊匹配索引会失效、</span><br><span class="line"><span class="number">5.</span>使用了or关键字，or条件一侧有索引一侧没有索引会造成索引失效，而两侧都有索引则不会失效</span><br><span class="line"><span class="number">6.</span>数据分布造成影响，如果使用索引比走全表扫描还慢则不会使用索引</span><br><span class="line"><span class="number">7.</span>范围查询右边的列索引会失效 如使用&lt;,&gt;则右边的列会失效</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h1 id="数据库优化"   >          <a href="#数据库优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MySql优化我觉得主要从两个部分</span><br></pre></td></tr></table></div></figure>        <h2 id="设计层面进行优化"   >          <a href="#设计层面进行优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#设计层面进行优化" class="headerlink" title="设计层面进行优化"></a>设计层面进行优化</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>可以使用MySql主从集群，可以防止单个MySql宕机导致服务不可用，搭建集群可以保证服务的高可用</span><br><span class="line"><span class="number">2.</span>可以使用主从结构，进行读写分离</span><br><span class="line"><span class="number">3.</span>可以使用分库分表的思想，降低单个服务器节点上的IO压力</span><br></pre></td></tr></table></div></figure>        <h2 id="SQL优化"   >          <a href="#SQL优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>查询尽量使用索引来进行数据扫描</span><br><span class="line"><span class="number">2.</span>join优化，尽量使用inner join而不使用left join和right join 如果必须要用，则一定要以小表驱动</span><br><span class="line"><span class="number">3.</span>联合查询尽量用union all 替代union    union会多一次过滤操作，降低性能</span><br><span class="line"><span class="number">4.</span>插入数据的时候，批量插入，顺序插入 如果要大批量插入使用load命令</span><br><span class="line"><span class="number">5.</span>主键优化，主键长度尽量短、顺序插入</span><br><span class="line"><span class="number">6.</span>limit优化 使用覆盖索引+子查询</span><br><span class="line"><span class="number">7.</span>count优化 count(<span class="number">1</span>)≈count(*)&gt;count(主键id)&gt;count(字段)</span><br><span class="line"><span class="number">8.</span>update优化 尽量根据主键\索引更新数据  防止行锁升级成表锁java</span><br><span class="line"><span class="number">9.</span>group by  索引，多字段满足最左前缀法则</span><br><span class="line"><span class="number">10.</span>order by 直接通过索引返回数据</span><br></pre></td></tr></table></div></figure>        <h1 id="为什么MySql用B-树不用跳表？"   >          <a href="#为什么MySql用B-树不用跳表？" class="heading-link"><i class="fas fa-link"></i></a><a href="#为什么MySql用B-树不用跳表？" class="headerlink" title="为什么MySql用B+树不用跳表？"></a>为什么MySql用B+树不用跳表？</h1>      ]]></content>
      
      
      <categories>
          
          <category> MySql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot面试題</title>
      <link href="/2023/07/11/SpringBoot%E9%9D%A2%E8%AF%95%E9%A1%8C/"/>
      <url>/2023/07/11/SpringBoot%E9%9D%A2%E8%AF%95%E9%A1%8C/</url>
      
        <content type="html"><![CDATA[        <h1 id="SpringBoot的核心配置类"   >          <a href="#SpringBoot的核心配置类" class="heading-link"><i class="fas fa-link"></i></a><a href="#SpringBoot的核心配置类" class="headerlink" title="SpringBoot的核心配置类"></a>SpringBoot的核心配置类</h1>      <p>我答:</p><p>@AutoWired</p><p>@Resouce</p><p>@RequestMapping</p><p>@RestController</p><p>@Configuration</p><p>@Bean</p><p>@Service</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplicaion 标志这个类是个SpringBoot启动类</span><br><span class="line">@SpringBootConfiguration 这个注解被@Configuration注解标记着 意味着这个类就是个配置类</span><br><span class="line">@EnableAutoConfiguration 这个注解向Spring容器注入一个Selector，用来加载SpringBoot自动配置类，最后自动加载为配置Bean</span><br><span class="line">@Conditional...</span><br><span class="line">例如@ConditionalOnBean  当有这个Bean对象的时候创建</span><br><span class="line">   @ConditionalOnMissingBean 当没有这个Bean对象的时候创建</span><br><span class="line">...</span><br></pre></td></tr></table></div></figure><p>​</p>        <h1 id="SpringBoot的自动配置原理"   >          <a href="#SpringBoot的自动配置原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#SpringBoot的自动配置原理" class="headerlink" title="SpringBoot的自动配置原理"></a>SpringBoot的自动配置原理</h1>      <p>我答：</p><p>Spring启动的时候会解读@EnableAutoConfiguration注解，这里有个@Import注解主要导入到IOC容器管理中，底层有个@defforImportSelector为底层注入自动配置</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">通过@SpringBootConfiguration注解导入了@EnableAutoConfiguration注解</span><br><span class="line">@EnableAutoConfiguration注解导入了@Import注解</span><br><span class="line">Spring启动的时候加载IOC容器就会解析@Import注解</span><br><span class="line">@import注解导入了@deferredImportSelector注解(它会将SpringBoot自动配置的类放到最后，方便我们自己的Bean类覆盖)</span><br><span class="line">通过读取/META-INF/spring.factors文件</span><br><span class="line">读取到所有的AutoConfigurationClass类型的类</span><br><span class="line">最后通过@ConditionalOn...注解排除无效的自动配置类</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h1 id="Spring和SpringBoot的区别和关系"   >          <a href="#Spring和SpringBoot的区别和关系" class="heading-link"><i class="fas fa-link"></i></a><a href="#Spring和SpringBoot的区别和关系" class="headerlink" title="Spring和SpringBoot的区别和关系"></a>Spring和SpringBoot的区别和关系</h1>      <p>我答:</p><p>SpingBoot就是简易的Spring，基于SpringBoot能快速构成一个Spring框架的项目</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SpringBoot是Spring生态的一个产品</span><br><span class="line">Spring Framework是一个框架</span><br><span class="line">SpringBoot不是一个框架，SpringBoot可以快速构建基于Spring框架的脚手架(包括了Spring和其他框架)，为开发Spring生态其他框架铺平道路</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis面试题</title>
      <link href="/2023/07/11/Redis%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/07/11/Redis%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>#复习用   </p>        <h1 id="布隆过滤器有了解过吗？"   >          <a href="#布隆过滤器有了解过吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#布隆过滤器有了解过吗？" class="headerlink" title="布隆过滤器有了解过吗？"></a>布隆过滤器有了解过吗？</h1>      <p>我答:Bloom过滤器主要是BitMap的这种0101的位图，主要作用是做一个白名单的过滤，当请求打进来的时候去查找白名单这个数据是否为1如果是1的话则放行如果是0的话则将数据返回</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">布隆过滤器是一些由0101构成的位图，通过它自身的Hash算法把数据存入多个位置将其置位1，当查询这个数据的时候这些位同时都为1的时候说明数据可能存在，而这些位有一个不为1则说明该数据不存在</span><br><span class="line"></span><br><span class="line">优点：1.他是一串二进制数组组成的所以占用空间小</span><br><span class="line"> 2.hash速度快，查询速度也快，时间复杂度为O(k),k为K个哈希函数，原因是底层都是01的数组 只要知道偏移量就很快知道是否为1</span><br><span class="line"> 3.数据的加密性，数据只有0和1 所以别人不知道这个数据代表着什么意思</span><br><span class="line"> </span><br><span class="line">缺点:</span><br><span class="line"> 1.不易于删除 有可能一个位对应多个数据，存在误判</span><br></pre></td></tr></table></div></figure>        <h1 id="Redis为什么这么快"   >          <a href="#Redis为什么这么快" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis为什么这么快" class="headerlink" title="Redis为什么这么快"></a>Redis为什么这么快</h1>      <p>我答: 第一、Redis是内存中的一种存放Key-Value值的NoSql数据库，因为它在内存中所以他的运行速度较快</p><p>​ 第二、Redis是单线程的，所有操作都是单线程处理的，所以Redis自己处理业务逻辑的时候不用上锁所以速度快 </p><p>​         第三、Redis因为有IO的多路复用则能高效的提升Redis的运行效率</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、Redis是在内存中的 没有额外的磁盘IO上面的开销</span><br><span class="line">2、Redis是单线程的，没有多个线程的切换上下文和锁的限制</span><br><span class="line">3、Redis是多路IO复用，用一个线程来轮询多个时间描述符</span><br><span class="line">4、Redis底层对数据结构进行了优化</span><br></pre></td></tr></table></div></figure>        <h1 id="缓存穿透、雪崩、击穿、预热"   >          <a href="#缓存穿透、雪崩、击穿、预热" class="heading-link"><i class="fas fa-link"></i></a><a href="#缓存穿透、雪崩、击穿、预热" class="headerlink" title="缓存穿透、雪崩、击穿、预热"></a>缓存穿透、雪崩、击穿、预热</h1>      <p>我答:</p><p>缓存穿透：在Redis没有数据并且在MySql也没有数据，非法人员利用这个漏洞不断把请求打到MySql中导致MySql的性能降低</p><p>解决方案: 1.返回空值 2.利用布隆过滤器对其筛选  3.利用分布式锁</p><p>缓存雪崩：大量热点Key的同时失效或者是Redis单机宕机导致的大量请求打到MySql中</p><p>解决方案：1.部署集群防止Redis单机宕机造成的影响 2.分散设置Key的过期时间，不要同时过期</p><p>缓存击穿：某个热点Key的突然失效，导致请求直接打到MySql中 </p><p>解决方案：1.利用分布式锁</p><p>缓存预热：在服务还未提供之前将MySql的数据提前写入到Redis中 防止缓存击穿</p><p>​ </p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">缓存穿透：一个数据在Redis中没有在MySql中也没有则会多次反复的打到MySql服务器上，可能会造成MySql服务器的宕机</span><br><span class="line">   解决方案 </span><br><span class="line">   1.返回空值:将返回的空值写入Redis中 例如：Key =1 value =null </span><br><span class="line">   优点是操作简单 </span><br><span class="line">   缺点是大量为NUll的数据会占用内存 并且有可能会导致数据不一致[后期MySql存入了Key=1的值 但是Redis的值依旧是NULL]</span><br><span class="line">    2.利用Bloom过滤器 </span><br><span class="line">    3.利用分布式锁</span><br><span class="line">缓存雪崩:大量Key同时过期或者Redis宕机导致MySql一次性接入大量请求导致失效或者宕机</span><br><span class="line">解决方案</span><br><span class="line">1.将多个Key分开设置过期时间防止同时失效 </span><br><span class="line">2.利用集群，防止单机的Redis宕机</span><br><span class="line">缓存击穿:一个热点Key的忽然失效导致大量请求打到MySql服务器中</span><br><span class="line">解决方案</span><br><span class="line">1.利用分布式锁 查询数据之后发现数据过期了,设置一个互斥锁,等待数据库将缓存写回Redis中，写回Redis之后再进行返回数据</span><br><span class="line">   特点是 高一致性、性能较差</span><br><span class="line">    2.设置逻辑过期  Redis中不设置过期时间 但是会带有一个过期时间的字段 当查询这个字段过期了 会设置互斥锁对数据进行重新写回Redis。这个线程不用等数据的缓存更新而是直接返回过期的数据 。当更新完缓存之后的线程再查询这个数据时则返回最新的数据</span><br><span class="line">    特点是 高可用、性能较好、可能会导致返回数据的不一致性</span><br></pre></td></tr></table></div></figure>        <h1 id="LRU和LFU的实现原理"   >          <a href="#LRU和LFU的实现原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#LRU和LFU的实现原理" class="headerlink" title="LRU和LFU的实现原理"></a>LRU和LFU的实现原理</h1>      <p>我答：</p><p>LRU是最少最近被使用到，LRU是淘汰最远未被使用的页</p><p>LFU是最近最低频次被使用到,而LFU是淘汰最少频率的页</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LRU用双向链表维护 头插法将最近使用到的放在头部，当需要淘汰老的数据的时候则在尾部的淘汰就可以了</span><br><span class="line">LFU是Redis Object 底层有一个计数器如最近被使用到则计数器重新置位1开始计数，则计数数值大的被淘汰</span><br></pre></td></tr></table></div></figure>        <h1 id="Redis为什么要选择用单线程？"   >          <a href="#Redis为什么要选择用单线程？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis为什么要选择用单线程？" class="headerlink" title="Redis为什么要选择用单线程？"></a>Redis为什么要选择用单线程？</h1>      <p>Redis操作都是原子性的，单线程没有多线程这种切换线程的上下文和锁资源的抢夺</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redis中CPU不是限制Redis的瓶颈，Redis的瓶颈可能是网络带宽或者是内存不足引起的，既然单线程容易处理业务逻辑，就不会使用到多线程了</span><br></pre></td></tr></table></div></figure>        <h1 id="Redis底层对数据结构进行了哪方面的优化"   >          <a href="#Redis底层对数据结构进行了哪方面的优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis底层对数据结构进行了哪方面的优化" class="headerlink" title="Redis底层对数据结构进行了哪方面的优化?"></a>Redis底层对数据结构进行了哪方面的优化?</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">【底层有封装Len长度 所以获得数据的数很快】</span><br><span class="line">1.String   底层是SDS 简单动态字符串 因为底层是c而c语言中没有字符串 字符串只是字符数组以&#x27;\0的方式结束的字符数组 所以redis底层自己封装了一个字符串</span><br><span class="line">有三个编码格式 1.int 2.embStr 3.raw</span><br><span class="line">当数字是int 当不是整数且字符数小于等于39则是embStr  当字符数大于39的时候是Raw</span><br><span class="line"></span><br><span class="line">2.Hash  底层是ZipList和HashTable【Redis6以前】 底层是Listpack和HashTable[Redis7以后]  </span><br><span class="line">当结点个数小于512个 并且每个结点长度小于64个时[默认]用ziplist 超过了就转成HashTable</span><br><span class="line">ZipList是连续的一串Node节点 每个节点会存放上一个节点的长度 因此会有连锁更新的现象[当第一个节点更新导致后面所有的节点都更新]</span><br><span class="line">Listpack是紧凑列表 不会记录上一个节点长度 只会记录当前节点长度</span><br><span class="line"></span><br><span class="line">3.list类型 底层是quicklist+ziplist【Redis6以前】 底层是quicklist+listpack[Redis7以后] </span><br><span class="line">quickList 是一个双向链表和压缩表</span><br><span class="line"></span><br><span class="line">4.set类型</span><br><span class="line">intset+HashTable 哈希表+整数集合</span><br><span class="line"></span><br><span class="line">5.zset类型 底层是zipList+skipList[Redis6以前] 底层是zipList+SkipList[Redis7以后]</span><br><span class="line">SkipList是跳表 跳表底层是链表+多级索引</span><br><span class="line">跳表的时间复杂度是O(LogN)</span><br><span class="line">最上层是 1个索引</span><br><span class="line">倒数第二层是两个索引</span><br><span class="line">倒数第三层是4个索引</span><br><span class="line">第一层是2的N次方-1个索引  所以一共树的高度是LogN</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h1 id="讲讲对Redis哈希分槽的理解"   >          <a href="#讲讲对Redis哈希分槽的理解" class="heading-link"><i class="fas fa-link"></i></a><a href="#讲讲对Redis哈希分槽的理解" class="headerlink" title="讲讲对Redis哈希分槽的理解"></a>讲讲对Redis哈希分槽的理解</h1>      <p>Redis分三个片区 总的片区为16384 在分成这么多片区的时候已经够Redis使用了。</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Redis在集群的時候要对数据进行分片算法   要算出某个数据的槽位是多少即由这个槽位下的节点来管理数据</span><br><span class="line">slot = CRC（16）算法 % 16384；</span><br><span class="line">对集群中每个节点会率先对16384个槽位进行分配  然后哈希分片算法算出的是多少槽位就会在这个槽位下的节点管理</span><br></pre></td></tr></table></div></figure>        <h1 id="讲讲Redis的过期键删除策略"   >          <a href="#讲讲Redis的过期键删除策略" class="heading-link"><i class="fas fa-link"></i></a><a href="#讲讲Redis的过期键删除策略" class="headerlink" title="讲讲Redis的过期键删除策略"></a>讲讲Redis的过期键删除策略</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">定时删除：给Key设置一个过期时间，一旦这个过期时间到了就立即删除(立即删除)</span><br><span class="line">惰性删除：给Key设置一个过期时间，当Key过期之后不会主动删除而是等下次再被调用的时候再判断Key是否过期，如果过期了就删除并且返回空</span><br><span class="line">定期删除: 每隔一段时间执行删除过期键的操作，采用随机抽取的策略</span><br><span class="line"></span><br><span class="line">Redis采用了惰性删除+定期删除的策略</span><br></pre></td></tr></table></div></figure>        <h1 id="讲讲Redis的淘汰算法策略"   >          <a href="#讲讲Redis的淘汰算法策略" class="heading-link"><i class="fas fa-link"></i></a><a href="#讲讲Redis的淘汰算法策略" class="headerlink" title="讲讲Redis的淘汰算法策略"></a>讲讲Redis的淘汰算法策略</h1>      <p>   1.一有过期就删除  这样会大量占用Redis Redis大部分都用于删除Key值会影响性能</p><ol start="2"><li><p>完全没有过期 因为内存是有限的，如果缓存一直不删除则会一直堆积在内存中</p><p>3.随机过期的值   这样会导致仍然有部分漏网之鱼未被删除</p></li><li><p>随机删除值    这样会导致有效Key的删除</p></li><li><p>LRU算法 删除最近最少被使用的Key</p></li><li><p>LFU算法 删除最近使用频率最小的Key</p></li></ol><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">定期删除+惰性删除配合使用</span><br><span class="line">定期删除：Redis定期检查Key的过期时间。 一旦发现过期的时候就删除 这个缺点是频繁扫描会降低性能</span><br><span class="line">惰性删除：Redis在要使用Key的时候检查是否过期，一旦过期就删除 这样的弊端是有些Key一直未被使用但是过期了会占用空间</span><br><span class="line"></span><br><span class="line">八大策略</span><br><span class="line">4(定期、LRU、LFU、随机)*2(过期不过期)</span><br><span class="line">1.不删除  内存不足时会直接报错</span><br><span class="line">2.定期删除过期</span><br><span class="line">3.利用LRU删除过期</span><br><span class="line">4.利用LRU删除【不论过期不过期】</span><br><span class="line">5.利用LFU删除过期</span><br><span class="line">6.利用LFU删除【不论过期不过期】</span><br><span class="line">7.随机删除过期</span><br><span class="line">8.随机删除【不论过期不过期】</span><br></pre></td></tr></table></div></figure>        <h1 id="聊聊Redis怎么实现的IO多路复用"   >          <a href="#聊聊Redis怎么实现的IO多路复用" class="heading-link"><i class="fas fa-link"></i></a><a href="#聊聊Redis怎么实现的IO多路复用" class="headerlink" title="聊聊Redis怎么实现的IO多路复用"></a>聊聊Redis怎么实现的IO多路复用</h1>      <p>Redis用一个文件监听器来监听多个网络IO，用Select+poll+Epoll函数进行IO多路复用</p><p>Redis用一个进程来监听多个网络IO，一旦有IO请求的时候则会唤醒线程用Epoll函数处理要有网络请求的IO，若没有请求时则会阻塞线程，这样可以减少无用的操作，提升效率</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Redis底层用文件事件处理器，监听多个Socket，根据Socket分发给不同的文件处理器</span><br><span class="line">Redis用一个进程来监听多个Socket，一旦有Socket时则会唤醒线程用Epoll函数，若没有请求时则会阻塞线程，这样可以减少无用的操作，提升效率</span><br></pre></td></tr></table></div></figure>        <h1 id="为什么Key没有设置过期时间但是却被Redis删除了"   >          <a href="#为什么Key没有设置过期时间但是却被Redis删除了" class="heading-link"><i class="fas fa-link"></i></a><a href="#为什么Key没有设置过期时间但是却被Redis删除了" class="headerlink" title="为什么Key没有设置过期时间但是却被Redis删除了"></a>为什么Key没有设置过期时间但是却被Redis删除了</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置了最大内存限制之后，超过限制容量可能触发了淘汰策略  </span><br><span class="line">可能是随机删除Key、利用LRU删除Key、利用LFU删除Key</span><br></pre></td></tr></table></div></figure>        <h1 id="为什么Redis的哈希槽是16384个"   >          <a href="#为什么Redis的哈希槽是16384个" class="heading-link"><i class="fas fa-link"></i></a><a href="#为什么Redis的哈希槽是16384个" class="headerlink" title=".为什么Redis的哈希槽是16384个"></a>.为什么Redis的哈希槽是16384个</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">因为16384/8/=2KB 而65536/8=8KB  </span><br><span class="line">用65536个槽位的话心跳包的消息头要8KB，过于庞大 而16384个槽位只要2KB</span><br></pre></td></tr></table></div></figure>        <h1 id="Redis数据持久化策略有哪些？"   >          <a href="#Redis数据持久化策略有哪些？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis数据持久化策略有哪些？" class="headerlink" title=".Redis数据持久化策略有哪些？"></a>.Redis数据持久化策略有哪些？</h1>      <p>我答：利用aof存储  2.利用rdb的方式存储  </p><p>利用RDB的方式存储 则保存的是历史指令，每一个指令都会被记录在RDB中 当Redis宕机重启后会重读RDB文件  恢复数据</p><p>利用AOF存储 保存的是改变最终数据的指令  他将最后实现数据的指令存在.aof文件中  最后要重启Redis之后只需要执行少部分影响数据的指令即可</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一共有两钟：1.RDB 2.AOF </span><br><span class="line">RDB:是快照文件，把整个Redis数据写入在内存中，当Redis重启时可以从快照恢复数据</span><br><span class="line">AOF:是追加写入文件，只记录写命令，当Redis宕机重启时重新执行一遍命令来恢复数据</span><br><span class="line"></span><br><span class="line">RDB和AOF优缺点: RDB是二进制文件，体积比较小，恢复速度更快，但是丢数据风险更高</span><br><span class="line">  AOF是写入文件，体积比较大，恢复速度更慢但是丢数据风险更低，我们可以配置刷盘策略来设置多久写入命令</span><br></pre></td></tr></table></div></figure>        <h1 id="Redis作为缓存，MySql的数据如何与Redis进行同步-双写一致性"   >          <a href="#Redis作为缓存，MySql的数据如何与Redis进行同步-双写一致性" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis作为缓存，MySql的数据如何与Redis进行同步-双写一致性" class="headerlink" title=".Redis作为缓存，MySql的数据如何与Redis进行同步?(双写一致性)"></a>.Redis作为缓存，MySql的数据如何与Redis进行同步?(双写一致性)</h1>      <p>我答：Redis作为缓存，而MySql作为底单数据  我们一般是业务先写入MySql中然后利用Canal监控对Redis和MySql的数据变化，当MySql的数据发生变化的时候查询MySql写回到Redis中保持了数据的一致性</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1.延迟双删 </span><br><span class="line">延迟双删:先把缓存删除再更新数据库数据最后延迟删除缓存，延时主要是为了数据库的主从一致。</span><br><span class="line">        缺点是1.我们不能准确把控延时的时间</span><br><span class="line">             2.延时的过程仍然有脏数据的风险 </span><br><span class="line">             【</span><br><span class="line">             假如有线程T1,T2,T3 当线程T1删除了缓存更新数据库的时候</span><br><span class="line">             线程T2发现缓存没有之后查询DB获取到未更新完的数据(老数据)，然后写回缓存</span><br><span class="line">             线程T3发现缓存没有之后查询DB获取到未更新完的数据(老数据)，然后要写回缓存之前阻塞</span><br><span class="line">             线程T1更新完数据之后 </span><br><span class="line">             一定时间之后删除缓存(删除线程T2写回的老数据)</span><br><span class="line">             这个时候T3唤醒，执行了写回缓存操作</span><br><span class="line">             那么就会造成缓存和DB数据不一致的情况 出现了脏数据</span><br><span class="line">              </span><br><span class="line">             】</span><br><span class="line">2.利用分布式锁【保证数据的实时性】[利用Redisson实现]</span><br><span class="line">             1)读数据的时候利用共享读锁</span><br><span class="line">             2)在写数据的时候利用互斥写锁</span><br><span class="line">        特性是：利用读写锁可以保证数据的强一致性，但是写锁会堵塞其他线程降低性能</span><br><span class="line">3.利用异步通知的方式</span><br><span class="line">            1)利用MQ的方式，更新数据之后，通知缓存删除</span><br><span class="line">            2)利用canal的方式，Canal伪装成MySql的一个节点，通过读取binlog数据。再同步写回Redis中</span><br></pre></td></tr></table></div></figure>        <h1 id="如果数据库有1000w条数据，但是Redis只能存20w的数据，如何保证Redis保存的是热点数据呢？"   >          <a href="#如果数据库有1000w条数据，但是Redis只能存20w的数据，如何保证Redis保存的是热点数据呢？" class="heading-link"><i class="fas fa-link"></i></a><a href="#如果数据库有1000w条数据，但是Redis只能存20w的数据，如何保证Redis保存的是热点数据呢？" class="headerlink" title=".如果数据库有1000w条数据，但是Redis只能存20w的数据，如何保证Redis保存的是热点数据呢？"></a>.如果数据库有1000w条数据，但是Redis只能存20w的数据，如何保证Redis保存的是热点数据呢？</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AllKeys-Lru  选择最近最少访问的数据淘汰</span><br></pre></td></tr></table></div></figure>        <h1 id="Redis脑裂现象怎么解决？"   >          <a href="#Redis脑裂现象怎么解决？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis脑裂现象怎么解决？" class="headerlink" title="Redis脑裂现象怎么解决？"></a>Redis脑裂现象怎么解决？</h1>      <p>我答：Redis的脑裂现象主要出现于master存入数据时，哨兵因为网络波动无法检测到Master于是投票选举了一个salve上位成master，这样原Master连接回来只能成为Slave，造成了数据丢失，解决方案是可以在配置中配置至少有Slave节点才能执行写操作</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">脑裂现象主要出现于master存入数据时，哨兵因为网络波动无法检测到Master于是投票选举了一个salve上位成master，这样原Master连接回来只能成为Slave，造成了数据丢失</span><br><span class="line">解决方案是1.可以在配置中配置至少有Slave节点才能执行写操作</span><br><span class="line">2.可以设置主从节点之间的最大延迟时间，如果超过了延迟时间则拒绝写入</span><br></pre></td></tr></table></div></figure><p>##为什么Redis中使用跳表而不用B+树呢？-跳表</p>        <h1 id="底层实现是什么数据结构-跳表"   >          <a href="#底层实现是什么数据结构-跳表" class="heading-link"><i class="fas fa-link"></i></a><a href="#底层实现是什么数据结构-跳表" class="headerlink" title="底层实现是什么数据结构-跳表"></a>底层实现是什么数据结构-跳表</h1>              <h1 id="结点的数据结构保存了什么信息-跳表"   >          <a href="#结点的数据结构保存了什么信息-跳表" class="heading-link"><i class="fas fa-link"></i></a><a href="#结点的数据结构保存了什么信息-跳表" class="headerlink" title="结点的数据结构保存了什么信息-跳表"></a>结点的数据结构保存了什么信息-跳表</h1>              <h1 id="新结点的层数如何确定-跳表"   >          <a href="#新结点的层数如何确定-跳表" class="heading-link"><i class="fas fa-link"></i></a><a href="#新结点的层数如何确定-跳表" class="headerlink" title="新结点的层数如何确定?-跳表"></a>新结点的层数如何确定?-跳表</h1>              <h1 id="跳表的创建过程-跳表"   >          <a href="#跳表的创建过程-跳表" class="heading-link"><i class="fas fa-link"></i></a><a href="#跳表的创建过程-跳表" class="headerlink" title="跳表的创建过程?-跳表"></a>跳表的创建过程?-跳表</h1>              <h1 id="跳表最多多少层-跳表"   >          <a href="#跳表最多多少层-跳表" class="heading-link"><i class="fas fa-link"></i></a><a href="#跳表最多多少层-跳表" class="headerlink" title="跳表最多多少层?-跳表"></a>跳表最多多少层?-跳表</h1>      ]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟电话面试复盘</title>
      <link href="/2023/07/09/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/"/>
      <url>/2023/07/09/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%AF%9D%E9%9D%A2%E8%AF%95%E5%A4%8D%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<p><strong>前言</strong></p><p>这个模拟电话面试是我和学习搭子为了我求职提前做的准备</p><p>大概是一周左右确认一个时间然后拿出半个小时进行一个模拟的过程，不过这个模拟的结果和过程需要我单独复盘，于是有这篇复盘篇出来</p>        <h1 id="07-1"   >          <a href="#07-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#07-1" class="headerlink" title="07&#x2F;1"></a>07&#x2F;1</h1>              <h2 id="Spring事务什么时候会失效？"   >          <a href="#Spring事务什么时候会失效？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Spring事务什么时候会失效？" class="headerlink" title="Spring事务什么时候会失效？"></a>Spring事务什么时候会失效？</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Spring的事务什么时候会失效?我能想到下面几个点。第一，当Spring容器的事务传播行为不支持事务的时候会失效，第二年是当用到的方法是调用对象内部的时候没有走AOP代理，所以这个时候索引会失效</span><br></pre></td></tr></table></div></figure>        <h2 id="说说MySql的主从复制"   >          <a href="#说说MySql的主从复制" class="heading-link"><i class="fas fa-link"></i></a><a href="#说说MySql的主从复制" class="headerlink" title="说说MySql的主从复制"></a>说说MySql的主从复制</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mysql的主从复制有几点好处 低一点是容灾备份，当主机发生故障的时候丛集可以上位维持系统的可用，第二点是可以读写分离，让读操作在从机中进行，降低Master的请求压力</span><br><span class="line"></span><br><span class="line">进行主从复制首先要主机开启Binlog日志，然后从机去读取Binlog日志中的数据写到自己的中继日志。然后再数据重做</span><br></pre></td></tr></table></div></figure>        <h2 id="你们项目中有没有使用过分库分表呢"   >          <a href="#你们项目中有没有使用过分库分表呢" class="heading-link"><i class="fas fa-link"></i></a><a href="#你们项目中有没有使用过分库分表呢" class="headerlink" title="你们项目中有没有使用过分库分表呢?"></a>你们项目中有没有使用过分库分表呢?</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我们项目没有用到分库分表的操作，因为这个项目表数据是比较小的，我能说说这个分库分表的思路</span><br><span class="line">分库分表有四种 第一种垂直分库 把数据库按照业务逻辑进行分库 第二种是垂直分表，把表存储到不同的额数据库中 这个时候一般是用于冷热数据的分离，把常用的数据提取到一个表中 第三十中是水平分库 水平分库是指把一个数据库的数据分到不同的数据库中可以使当前主机也可以是不同主机  最后是水评分表 水平分表是指把表分到同一个数据库中的而不同表中</span><br></pre></td></tr></table></div></figure>        <h2 id="事务的隔离性是怎么保证的-（说说MVCC机制的理解）"   >          <a href="#事务的隔离性是怎么保证的-（说说MVCC机制的理解）" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务的隔离性是怎么保证的-（说说MVCC机制的理解）" class="headerlink" title="事务的隔离性是怎么保证的?（说说MVCC机制的理解）"></a>事务的隔离性是怎么保证的?（说说MVCC机制的理解）</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MVCC机制的实现主要取决于三个部分 第一个部分是饮食字段 有trx_id 事务ID，还有阴市住建 当Mysql没有主键的时候会自动添加一个主键 还有事回滚指针 指向的是undo log版本链</span><br><span class="line">第二个就是undo log版本链</span><br><span class="line">第三个是看当前的事务隔离级别然后根据事务隔离级别找到不同的处理方案，像是RC 读已提交就是会每一次select的时候都会形成一个快照，然后去读取这个快照的信息，而RR 则是第一次select的时候会成圣做一个快照 然后面的查询都是这个版本的快照</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="说说你对AOP的理解"   >          <a href="#说说你对AOP的理解" class="heading-link"><i class="fas fa-link"></i></a><a href="#说说你对AOP的理解" class="headerlink" title="说说你对AOP的理解"></a>说说你对AOP的理解</h2>              <h2 id="能说说SpringMVC的工作流程吗？"   >          <a href="#能说说SpringMVC的工作流程吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#能说说SpringMVC的工作流程吗？" class="headerlink" title="能说说SpringMVC的工作流程吗？"></a>能说说SpringMVC的工作流程吗？</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SpringMVC的工作机制</span><br><span class="line">当HTTP请求来到，会有一个DispatcherServlet(前端控制器)来进行空值处理请求，通过handlermapping找到具体的handler处理器和拦截器 同意返回给dispatcherlservlet，dispatchselet在经过这个映射结果找到handleradpater handler适配器，handler适配器找到handler就是我们自己定义的controller ，最后controller返回数据和视图 适配器封装成modelandview 返回给前端处理器，前端处理器会那刀这个modeladnvie未找到viewReslover然后对数据进行解析，视图接气息将是最后解析出来的view返回给dispaterservlet</span><br><span class="line"> dispatcherselevct最后渲染view</span><br><span class="line"> 而现在面向接口编程，我们很少用到返回view的过程，一般我们在conteroller后用responseBOdy注解将结果经过httpmessageConverser消息转换器转换成json格式数据返回</span><br></pre></td></tr></table></div></figure>        <h2 id="Spring和SpringBoot的区别和关系"   >          <a href="#Spring和SpringBoot的区别和关系" class="heading-link"><i class="fas fa-link"></i></a><a href="#Spring和SpringBoot的区别和关系" class="headerlink" title="Spring和SpringBoot的区别和关系"></a>Spring和SpringBoot的区别和关系</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SpringFTAME是一个框架，而SpringbOOT是基于Spring的一个脚手架 SpringBoot包含了其他狂阶的API，以便快速成圣spring项目</span><br></pre></td></tr></table></div></figure>        <h2 id="缓存穿透、雪崩、击穿、预热"   >          <a href="#缓存穿透、雪崩、击穿、预热" class="heading-link"><i class="fas fa-link"></i></a><a href="#缓存穿透、雪崩、击穿、预热" class="headerlink" title="缓存穿透、雪崩、击穿、预热"></a>缓存穿透、雪崩、击穿、预热</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">缓存穿透是指一个数据在redis中没有在mysql中也没有，然后不法分子通过这个请求对应的数据不断达到mysql中，我们的解决方案可以使布隆过滤器或者是返回一个空值写回给redis中</span><br><span class="line">缓存击穿是指某个一个热点kEY的突然失效，然后大量请求达到Mysql中，我们可以社遏制一个逻辑过期，也可以采用分布式锁的放水阀来解决这个问题</span><br><span class="line">换粗雪崩是指Redis的大量KEy的跟同事失效，或者是单机Redis的宕机导致的大量请求达到MYSQL中，我们的解决方案是可以设置不随机的够哦骑士剑将热点Keysh失效的时间分开</span><br><span class="line">缓存预热是指提供服务之前，我们自己将数据从mysql写回到redis提前对数据进行一个写入操作</span><br></pre></td></tr></table></div></figure>        <h2 id="讲讲Redis的淘汰算法策略"   >          <a href="#讲讲Redis的淘汰算法策略" class="heading-link"><i class="fas fa-link"></i></a><a href="#讲讲Redis的淘汰算法策略" class="headerlink" title="讲讲Redis的淘汰算法策略"></a>讲讲Redis的淘汰算法策略</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">reids的数据淘汰有两个策略一个是定期删除还有一个是惰性删除，然后定期删除是不断轮询一些数据 来对数据过期时间多而检查，如果这个数据到了过期时间就主动删除，惰性删除是值Redis不会直接删除过期数据，而是让他对方在Redis中，当需要用到这个数据然后会对过期时间进行一个判断，如果过期了就删除这个数据。但是这个方式会造成内存的浪费  而定期闪回造成CPu的浪费 降低性能，还有一个方式是随机删除，随机删除部分数据</span><br><span class="line"></span><br><span class="line">rEDis有八个删除数据厕所 基于4种删除方式 就是定期删除 LRU删除 LFU删除 随机删除 和删除数据类型有两种 是就是跟过期和不过期数据，一共就是4*2有八种</span><br><span class="line">第一种是不删除数据 </span><br><span class="line">定期删除过期数据 lru删除过期数据  lru删除数据</span><br><span class="line">lfu删除过期数据 lfu删除数据</span><br><span class="line">随机删除过期数据 随机删除数据</span><br><span class="line">LRU是最近最少未被使用</span><br><span class="line">lfu删除是最近最频率低删除</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="Redis作为缓存，MySql的数据如何与Redis进行同步-双写一致性"   >          <a href="#Redis作为缓存，MySql的数据如何与Redis进行同步-双写一致性" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis作为缓存，MySql的数据如何与Redis进行同步-双写一致性" class="headerlink" title="Redis作为缓存，MySql的数据如何与Redis进行同步?(双写一致性)"></a>Redis作为缓存，MySql的数据如何与Redis进行同步?(双写一致性)</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Redis和Mysql的数据进行数据同步可以使魂村双删策略</span><br><span class="line">先删除数据然后再更新数据库最后在删除缓存， 但是这个情况会存在一定脏数据的可能</span><br><span class="line">然后我们有最终一致性的方案 一个是利于是分布式锁 的同步更新，这种方法可以保证数据的高一致性但是会降低性能，还有一种是异步通知  比如用消息队列进行数据更新 或者是阿里巴巴开源的Canal来对数据库binlog日志的监控然后写回给redis 这样异步通知的方式可以性能较高但是会有存在一定时间数据的不一致的情况 要按业务选择</span><br></pre></td></tr></table></div></figure>        <h2 id="结点的数据结构保存了什么信息-跳表"   >          <a href="#结点的数据结构保存了什么信息-跳表" class="heading-link"><i class="fas fa-link"></i></a><a href="#结点的数据结构保存了什么信息-跳表" class="headerlink" title="结点的数据结构保存了什么信息-跳表"></a>结点的数据结构保存了什么信息-跳表</h2>              <h2 id="RabbitMQ中死信队列？延时队列有了解过吗？"   >          <a href="#RabbitMQ中死信队列？延时队列有了解过吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#RabbitMQ中死信队列？延时队列有了解过吗？" class="headerlink" title="RabbitMQ中死信队列？延时队列有了解过吗？"></a>RabbitMQ中死信队列？延时队列有了解过吗？</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">死信队列是就是死信交换机 是用来处理死信的，他和正常交换机没有缺什么太大差异</span><br><span class="line">死信就是ttl时间超过了 或者是当确认模式中拒绝签收后不返回元队列的消息叫死信</span><br><span class="line"></span><br><span class="line">延迟队列由了解过，延迟队列在RabbitMQ中没有办法直接生命一个延迟队列，但是我们可以用死信对垒家TTL来达到同样的效果</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="介绍一下Mysql中事务的特性"   >          <a href="#介绍一下Mysql中事务的特性" class="heading-link"><i class="fas fa-link"></i></a><a href="#介绍一下Mysql中事务的特性" class="headerlink" title="介绍一下Mysql中事务的特性"></a>介绍一下Mysql中事务的特性</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">事务就是一组相同的操作单元，这组操作只能同时成功或者同时不成功。</span><br><span class="line">事务的四大特性是有原子性、一致性、隔离丁和持久性</span><br><span class="line">比如A向B转账然后A少500块钱B要多出500块钱 这个部分是原子的 只能A转账成功B钱增加或者是两个同时势必爱，一致性是指这个数据总量要最后一直，A少500B就一定要多500，隔离性是指在这个A想B转账的国女恒中不会被外界的因素影响，而一致性是当事务一旦提交这个数据就要被永久的写到数据库中</span><br></pre></td></tr></table></div></figure>        <h2 id="并发事务会带来哪些问题？"   >          <a href="#并发事务会带来哪些问题？" class="heading-link"><i class="fas fa-link"></i></a><a href="#并发事务会带来哪些问题？" class="headerlink" title="并发事务会带来哪些问题？"></a>并发事务会带来哪些问题？</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">并发事务会带来脏读 不可重复读幻读的三种问题，还有一个是更新丢失的方面</span><br><span class="line">脏读是指一个数据读到了另一个未提交事务更新后的数据</span><br><span class="line">不可重复读是指在一个事务前后读取的数据不一致</span><br><span class="line">幻读是指当事务在读取数据的前后总条数不医用氧，比如插入数据 的时候查到这个数据没有然后插入的时候这个数据也已经存在 就 好像出现了幻觉一样</span><br><span class="line">更新丢失分成两种一种是提交覆盖和回滚覆盖</span><br><span class="line">提交覆盖是指一个事务A和事务B在处理同一个数据的时候,A提交的数据被B提交的数据覆盖了。</span><br><span class="line">回滚覆盖是指事务A和事务B，A更新之后UB回滚了导致这个更新丢失</span><br></pre></td></tr></table></div></figure>        <h2 id="什么情况下会造成索引失效？"   >          <a href="#什么情况下会造成索引失效？" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么情况下会造成索引失效？" class="headerlink" title="什么情况下会造成索引失效？"></a>什么情况下会造成索引失效？</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一般是最左前缀法则失效的时候，然后或者是查询的时候用了模糊查询。模糊查询的左边用了占位符 或者是用or语句的时候前有两边有一边索引。还有用运算符号的时候 用大鱼号小于号比较</span><br></pre></td></tr></table></div></figure>        <h2 id="数据库优化"   >          <a href="#数据库优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据库优化" class="headerlink" title="数据库优化"></a>数据库优化</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据库优化我主要从两个方面来说</span><br><span class="line">第一种可以从设计架构方面 就是数据库可以设置成集群、分库分表、主重复值</span><br><span class="line">第二方面是对Sql的优化 就从具体的SQL优化那方面</span><br></pre></td></tr></table></div></figure>        <h2 id="final修饰符有学习过吗？它有什么使用场景"   >          <a href="#final修饰符有学习过吗？它有什么使用场景" class="heading-link"><i class="fas fa-link"></i></a><a href="#final修饰符有学习过吗？它有什么使用场景" class="headerlink" title="final修饰符有学习过吗？它有什么使用场景"></a>final修饰符有学习过吗？它有什么使用场景</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">有学习过 final可以用于修饰方法、对象、变量</span><br><span class="line">当final修饰变量的时候这个变量就叫做常量，只能赋值一次</span><br><span class="line">当final修饰方法的时候这个方法无法被子类重写</span><br><span class="line">当final修饰类的时候这个类是最终类，不能被继承没有子类</span><br></pre></td></tr></table></div></figure>        <h2 id="进程和线程的区别"   >          <a href="#进程和线程的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">进程是操作系统最小的处理的单元</span><br><span class="line">而线程是进程里面的东西 </span><br><span class="line">进程可以创造线程</span><br></pre></td></tr></table></div></figure>        <h2 id="有了解过集合吗？看过底层源码吗？"   >          <a href="#有了解过集合吗？看过底层源码吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#有了解过集合吗？看过底层源码吗？" class="headerlink" title="有了解过集合吗？看过底层源码吗？"></a>有了解过集合吗？看过底层源码吗？</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">有了解过集合看过地城源码 </span><br><span class="line">集合是有两个定级接口一个collection单列机和 还有一个是map集合双列集合</span><br><span class="line">collection下游两个子接口一个是list接口 list接口下面有arryalist、linkedlist、vector</span><br><span class="line">还有一个接口是set接口 set接口下的实现类有hashset treeset linkedhashset</span><br><span class="line">而map就扣下游hashmap、linkedhashmap、hashtable、treemap、concrueenthashmap</span><br></pre></td></tr></table></div></figure>        <h2 id="集合是怎么处理哈希碰撞的？"   >          <a href="#集合是怎么处理哈希碰撞的？" class="heading-link"><i class="fas fa-link"></i></a><a href="#集合是怎么处理哈希碰撞的？" class="headerlink" title="集合是怎么处理哈希碰撞的？"></a>集合是怎么处理哈希碰撞的？</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">处理哈希碰撞有链式巡执法、显性探测法、再hash发</span><br><span class="line">而季节处理这个哈希碰撞的时候使用链式巡执法 ，因为集合底层是数组+链表+红黑树构成的，当发生哈希碰撞的时候在jdk1.7之前是头插法将新数据插入到链表头部而jdk1.8之后用的是尾插法 然后红黑树是为了解决这个链表过程导致这个时间复杂度上升的问题</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="线程池如何配置？有什么策略策略？"   >          <a href="#线程池如何配置？有什么策略策略？" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程池如何配置？有什么策略策略？" class="headerlink" title="线程池如何配置？有什么策略策略？"></a>线程池如何配置？有什么策略策略？</h2>              <h2 id="SpringMVC的主要组件有哪些"   >          <a href="#SpringMVC的主要组件有哪些" class="heading-link"><i class="fas fa-link"></i></a><a href="#SpringMVC的主要组件有哪些" class="headerlink" title="SpringMVC的主要组件有哪些"></a>SpringMVC的主要组件有哪些</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主要有五个组件 一个是dispatcherselect前端控制器，hadnlermapping handler映射器 handleradapter 前端适配器 hander 就是我们写的controller 还有一个是ViewReselover 视图解析器</span><br></pre></td></tr></table></div></figure>        <h1 id="08-1"   >          <a href="#08-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#08-1" class="headerlink" title="08&#x2F;1"></a>08&#x2F;1</h1>              <h2 id="说说你对AOP的理解-1"   >          <a href="#说说你对AOP的理解-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#说说你对AOP的理解-1" class="headerlink" title="说说你对AOP的理解"></a>说说你对AOP的理解</h2>              <h2 id="什么是SpringMVC？"   >          <a href="#什么是SpringMVC？" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是SpringMVC？" class="headerlink" title="什么是SpringMVC？"></a>什么是SpringMVC？</h2>              <h2 id="能说说SpringMVC的工作流程吗？-1"   >          <a href="#能说说SpringMVC的工作流程吗？-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#能说说SpringMVC的工作流程吗？-1" class="headerlink" title="能说说SpringMVC的工作流程吗？"></a>能说说SpringMVC的工作流程吗？</h2>              <h2 id="SpringBoot的自动配置原理"   >          <a href="#SpringBoot的自动配置原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#SpringBoot的自动配置原理" class="headerlink" title="SpringBoot的自动配置原理"></a>SpringBoot的自动配置原理</h2>              <h2 id="SpringMVC有哪些常用注解？"   >          <a href="#SpringMVC有哪些常用注解？" class="heading-link"><i class="fas fa-link"></i></a><a href="#SpringMVC有哪些常用注解？" class="headerlink" title="SpringMVC有哪些常用注解？"></a>SpringMVC有哪些常用注解？</h2>              <h2 id="LRU和LFU的实现原理"   >          <a href="#LRU和LFU的实现原理" class="heading-link"><i class="fas fa-link"></i></a><a href="#LRU和LFU的实现原理" class="headerlink" title="LRU和LFU的实现原理"></a>LRU和LFU的实现原理</h2>              <h2 id="Redis底层对数据结构进行了哪方面的优化"   >          <a href="#Redis底层对数据结构进行了哪方面的优化" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis底层对数据结构进行了哪方面的优化" class="headerlink" title="Redis底层对数据结构进行了哪方面的优化?"></a>Redis底层对数据结构进行了哪方面的优化?</h2>              <h2 id="聊聊Redis怎么实现的IO多路复用"   >          <a href="#聊聊Redis怎么实现的IO多路复用" class="heading-link"><i class="fas fa-link"></i></a><a href="#聊聊Redis怎么实现的IO多路复用" class="headerlink" title="聊聊Redis怎么实现的IO多路复用"></a>聊聊Redis怎么实现的IO多路复用</h2>              <h2 id="为什么Key没有设置过期时间但是却被Redis删除了"   >          <a href="#为什么Key没有设置过期时间但是却被Redis删除了" class="heading-link"><i class="fas fa-link"></i></a><a href="#为什么Key没有设置过期时间但是却被Redis删除了" class="headerlink" title="为什么Key没有设置过期时间但是却被Redis删除了"></a>为什么Key没有设置过期时间但是却被Redis删除了</h2>              <h2 id="Redis数据持久化策略有哪些？"   >          <a href="#Redis数据持久化策略有哪些？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis数据持久化策略有哪些？" class="headerlink" title="Redis数据持久化策略有哪些？"></a>Redis数据持久化策略有哪些？</h2>              <h2 id="跳表的创建过程-跳表"   >          <a href="#跳表的创建过程-跳表" class="heading-link"><i class="fas fa-link"></i></a><a href="#跳表的创建过程-跳表" class="headerlink" title="跳表的创建过程?-跳表"></a>跳表的创建过程?-跳表</h2>              <h2 id="RabbitMQ中死信队列？延时队列有了解过吗？-1"   >          <a href="#RabbitMQ中死信队列？延时队列有了解过吗？-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#RabbitMQ中死信队列？延时队列有了解过吗？-1" class="headerlink" title="RabbitMQ中死信队列？延时队列有了解过吗？"></a>RabbitMQ中死信队列？延时队列有了解过吗？</h2>              <h2 id="什么是回表查询"   >          <a href="#什么是回表查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是回表查询" class="headerlink" title="什么是回表查询"></a>什么是回表查询</h2>              <h2 id="什么情况下会造成索引失效？-1"   >          <a href="#什么情况下会造成索引失效？-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么情况下会造成索引失效？-1" class="headerlink" title="什么情况下会造成索引失效？"></a>什么情况下会造成索引失效？</h2>              <h2 id="jvm、jdk、jre的区别"   >          <a href="#jvm、jdk、jre的区别" class="heading-link"><i class="fas fa-link"></i></a><a href="#jvm、jdk、jre的区别" class="headerlink" title="jvm、jdk、jre的区别"></a>jvm、jdk、jre的区别</h2>              <h2 id="多态如何实现的"   >          <a href="#多态如何实现的" class="heading-link"><i class="fas fa-link"></i></a><a href="#多态如何实现的" class="headerlink" title="多态如何实现的"></a>多态如何实现的</h2>              <h2 id="如何理解序列化"   >          <a href="#如何理解序列化" class="heading-link"><i class="fas fa-link"></i></a><a href="#如何理解序列化" class="headerlink" title="如何理解序列化"></a>如何理解序列化</h2>              <h2 id="有了解过集合吗？看过底层源码吗？-1"   >          <a href="#有了解过集合吗？看过底层源码吗？-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#有了解过集合吗？看过底层源码吗？-1" class="headerlink" title="有了解过集合吗？看过底层源码吗？"></a>有了解过集合吗？看过底层源码吗？</h2>              <h2 id="Integer和int能直接进行比较吗？"   >          <a href="#Integer和int能直接进行比较吗？" class="heading-link"><i class="fas fa-link"></i></a><a href="#Integer和int能直接进行比较吗？" class="headerlink" title="Integer和int能直接进行比较吗？"></a>Integer和int能直接进行比较吗？</h2>              <h2 id="线程池如何配置？有什么策略策略？-1"   >          <a href="#线程池如何配置？有什么策略策略？-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程池如何配置？有什么策略策略？-1" class="headerlink" title="线程池如何配置？有什么策略策略？"></a>线程池如何配置？有什么策略策略？</h2>              <h2 id="新结点的层数如何确定-跳表"   >          <a href="#新结点的层数如何确定-跳表" class="heading-link"><i class="fas fa-link"></i></a><a href="#新结点的层数如何确定-跳表" class="headerlink" title="新结点的层数如何确定?-跳表"></a>新结点的层数如何确定?-跳表</h2>              <h2 id="你们项目中有没有使用过分库分表呢-1"   >          <a href="#你们项目中有没有使用过分库分表呢-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#你们项目中有没有使用过分库分表呢-1" class="headerlink" title="你们项目中有没有使用过分库分表呢?"></a>你们项目中有没有使用过分库分表呢?</h2>              <h2 id="说说数据库中锁的种类"   >          <a href="#说说数据库中锁的种类" class="heading-link"><i class="fas fa-link"></i></a><a href="#说说数据库中锁的种类" class="headerlink" title="说说数据库中锁的种类"></a>说说数据库中锁的种类</h2>              <h2 id="介绍一下Mysql中事务的特性-1"   >          <a href="#介绍一下Mysql中事务的特性-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#介绍一下Mysql中事务的特性-1" class="headerlink" title="介绍一下Mysql中事务的特性"></a>介绍一下Mysql中事务的特性</h2>              <h1 id="08-2"   >          <a href="#08-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#08-2" class="headerlink" title="08&#x2F;2"></a>08&#x2F;2</h1>              <h2 id="线程sleep-方法和-wait-方法对比"   >          <a href="#线程sleep-方法和-wait-方法对比" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程sleep-方法和-wait-方法对比" class="headerlink" title="线程sleep() 方法和 wait() 方法对比"></a>线程sleep() 方法和 wait() 方法对比</h2>              <h2 id="什么是线程上下文切换"   >          <a href="#什么是线程上下文切换" class="heading-link"><i class="fas fa-link"></i></a><a href="#什么是线程上下文切换" class="headerlink" title="什么是线程上下文切换?"></a>什么是线程上下文切换?</h2>              <h2 id="说说乐观锁和悲观锁"   >          <a href="#说说乐观锁和悲观锁" class="heading-link"><i class="fas fa-link"></i></a><a href="#说说乐观锁和悲观锁" class="headerlink" title="说说乐观锁和悲观锁"></a>说说乐观锁和悲观锁</h2>              <h2 id="Set的无序性和不可重复性的含义是什么"   >          <a href="#Set的无序性和不可重复性的含义是什么" class="heading-link"><i class="fas fa-link"></i></a><a href="#Set的无序性和不可重复性的含义是什么" class="headerlink" title="Set的无序性和不可重复性的含义是什么"></a>Set的无序性和不可重复性的含义是什么</h2>              <h2 id="如果一个业务没有处理完没有结束你们是怎么处理的"   >          <a href="#如果一个业务没有处理完没有结束你们是怎么处理的" class="heading-link"><i class="fas fa-link"></i></a><a href="#如果一个业务没有处理完没有结束你们是怎么处理的" class="headerlink" title="如果一个业务没有处理完没有结束你们是怎么处理的?"></a>如果一个业务没有处理完没有结束你们是怎么处理的?</h2>              <h2 id="CAS无锁有了解过吗"   >          <a href="#CAS无锁有了解过吗" class="heading-link"><i class="fas fa-link"></i></a><a href="#CAS无锁有了解过吗" class="headerlink" title="CAS无锁有了解过吗"></a>CAS无锁有了解过吗</h2>              <h2 id="数据去重原理，HashSet底层"   >          <a href="#数据去重原理，HashSet底层" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据去重原理，HashSet底层" class="headerlink" title="数据去重原理，HashSet底层"></a>数据去重原理，HashSet底层</h2>              <h2 id="介绍一下HashMap的参数和机制"   >          <a href="#介绍一下HashMap的参数和机制" class="heading-link"><i class="fas fa-link"></i></a><a href="#介绍一下HashMap的参数和机制" class="headerlink" title="介绍一下HashMap的参数和机制"></a>介绍一下HashMap的参数和机制</h2>              <h2 id="线程池如何配置？有什么策略策略？-2"   >          <a href="#线程池如何配置？有什么策略策略？-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#线程池如何配置？有什么策略策略？-2" class="headerlink" title="线程池如何配置？有什么策略策略？"></a>线程池如何配置？有什么策略策略？</h2>              <h2 id="说说SpringMVC的执行流程"   >          <a href="#说说SpringMVC的执行流程" class="heading-link"><i class="fas fa-link"></i></a><a href="#说说SpringMVC的执行流程" class="headerlink" title="说说SpringMVC的执行流程"></a>说说SpringMVC的执行流程</h2>              <h2 id="Integer和int能直接进行比较吗？-1"   >          <a href="#Integer和int能直接进行比较吗？-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#Integer和int能直接进行比较吗？-1" class="headerlink" title="Integer和int能直接进行比较吗？"></a>Integer和int能直接进行比较吗？</h2>              <h2 id="HashMap-和-TreeMap-讲讲？"   >          <a href="#HashMap-和-TreeMap-讲讲？" class="heading-link"><i class="fas fa-link"></i></a><a href="#HashMap-和-TreeMap-讲讲？" class="headerlink" title="HashMap 和 TreeMap 讲讲？"></a>HashMap 和 TreeMap 讲讲？</h2>              <h2 id="为什么MySql用B-树不用跳表？"   >          <a href="#为什么MySql用B-树不用跳表？" class="heading-link"><i class="fas fa-link"></i></a><a href="#为什么MySql用B-树不用跳表？" class="headerlink" title="为什么MySql用B+树不用跳表？"></a>为什么MySql用B+树不用跳表？</h2>              <h2 id="唯一索引和普通索引在mysql底层有什么区别？"   >          <a href="#唯一索引和普通索引在mysql底层有什么区别？" class="heading-link"><i class="fas fa-link"></i></a><a href="#唯一索引和普通索引在mysql底层有什么区别？" class="headerlink" title="唯一索引和普通索引在mysql底层有什么区别？"></a>唯一索引和普通索引在mysql底层有什么区别？</h2>              <h2 id="我们如何定位慢查询"   >          <a href="#我们如何定位慢查询" class="heading-link"><i class="fas fa-link"></i></a><a href="#我们如何定位慢查询" class="headerlink" title="我们如何定位慢查询"></a>我们如何定位慢查询</h2>              <h2 id="事务隔离级别有哪些？MySql默认的事务隔离级别是哪个"   >          <a href="#事务隔离级别有哪些？MySql默认的事务隔离级别是哪个" class="heading-link"><i class="fas fa-link"></i></a><a href="#事务隔离级别有哪些？MySql默认的事务隔离级别是哪个" class="headerlink" title="事务隔离级别有哪些？MySql默认的事务隔离级别是哪个"></a>事务隔离级别有哪些？MySql默认的事务隔离级别是哪个</h2>              <h2 id="RabbitMQ怎么保障消息的幂等性"   >          <a href="#RabbitMQ怎么保障消息的幂等性" class="heading-link"><i class="fas fa-link"></i></a><a href="#RabbitMQ怎么保障消息的幂等性" class="headerlink" title="RabbitMQ怎么保障消息的幂等性"></a>RabbitMQ怎么保障消息的幂等性</h2>              <h2 id="底层实现是什么数据结构-跳表"   >          <a href="#底层实现是什么数据结构-跳表" class="heading-link"><i class="fas fa-link"></i></a><a href="#底层实现是什么数据结构-跳表" class="headerlink" title="底层实现是什么数据结构-跳表"></a>底层实现是什么数据结构-跳表</h2>              <h2 id="聊聊Redis怎么实现的IO多路复用-1"   >          <a href="#聊聊Redis怎么实现的IO多路复用-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#聊聊Redis怎么实现的IO多路复用-1" class="headerlink" title="聊聊Redis怎么实现的IO多路复用"></a>聊聊Redis怎么实现的IO多路复用</h2>              <h2 id="Redis作为缓存，MySql的数据如何与Redis进行同步"   >          <a href="#Redis作为缓存，MySql的数据如何与Redis进行同步" class="heading-link"><i class="fas fa-link"></i></a><a href="#Redis作为缓存，MySql的数据如何与Redis进行同步" class="headerlink" title="Redis作为缓存，MySql的数据如何与Redis进行同步?"></a>Redis作为缓存，MySql的数据如何与Redis进行同步?</h2>              <h2 id="讲讲对Redis哈希分槽的理解"   >          <a href="#讲讲对Redis哈希分槽的理解" class="heading-link"><i class="fas fa-link"></i></a><a href="#讲讲对Redis哈希分槽的理解" class="headerlink" title="讲讲对Redis哈希分槽的理解"></a>讲讲对Redis哈希分槽的理解</h2>      ]]></content>
      
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM调优实例</title>
      <link href="/2023/04/27/JVM%E8%B0%83%E4%BC%98%E5%AE%9E%E4%BE%8B/"/>
      <url>/2023/04/27/JVM%E8%B0%83%E4%BC%98%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[        <h1 id="准备工作"   >          <a href="#准备工作" class="heading-link"><i class="fas fa-link"></i></a><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1>              <h2 id="java源码"   >          <a href="#java源码" class="heading-link"><i class="fas fa-link"></i></a><a href="#java源码" class="headerlink" title="java源码"></a>java源码</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.NinthP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sound.sampled.Line;</span><br><span class="line"><span class="keyword">import</span> javax.xml.crypto.Data;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JVM_FullGC_Program</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CardInfo</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">price</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">0.0</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">brithdate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ScheduledThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScheduledThreadPoolExecutor</span>(<span class="number">50</span>, </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.DiscardOldestPolicy());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        executor.setMaximumPoolSize(<span class="number">50</span>);</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            modelFet();</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">modelFet</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;CardInfo&gt; taskList = getAllCardInfo();</span><br><span class="line">        taskList.forEach(info -&gt; &#123;</span><br><span class="line">            executor.scheduleWithFixedDelay(() -&gt; &#123;</span><br><span class="line">                info.m();</span><br><span class="line">            &#125;, <span class="number">2</span>, <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;CardInfo&gt; <span class="title function_">getAllCardInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;CardInfo&gt; taskList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="type">CardInfo</span> <span class="variable">ci</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CardInfo</span>();</span><br><span class="line">            taskList.add(ci);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> taskList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h2 id="java命令"   >          <a href="#java命令" class="heading-link"><i class="fas fa-link"></i></a><a href="#java命令" class="headerlink" title="java命令"></a>java命令</h2>      <p>介绍一下将要用到的Java命令所带的参数</p><p>可以通过java命令获得   &#x2F;&#x2F;就像@help获得帮助文档一样</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java -Xms&lt;size&gt;    //设置程序最小内存</span><br><span class="line">java -Xmx&lt;size&gt;    //设置程序最大内存</span><br><span class="line">//java -XX:+PrintFlagsFinal -version  打印出-XX的所有指令</span><br><span class="line">java -XX:+PrintGC  //将GC启动时打印出来大概的信息</span><br></pre></td></tr></table></div></figure><p>JDK自带的命令行命令</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jps        //用于获得系统中运行中的java进程</span><br><span class="line">jinfo &lt;pid&gt; //显示指定线程的详情信息</span><br><span class="line">jstat -gc &lt;pid&gt; (ms)//获得JVM各区域详情 参数一:指定进程号 参数二:每xx毫秒刷新输出</span><br><span class="line">jstack &lt;pid&gt;    //跟踪线程中的堆栈信息</span><br><span class="line">jmap -histo &lt;pid&gt; //获得指定线程中实例对象个数和所占字节数</span><br><span class="line">#!!</span><br><span class="line">#jmap命令会导致线程卡死，STW   </span><br></pre></td></tr></table></div></figure>        <h1 id="启动程序"   >          <a href="#启动程序" class="heading-link"><i class="fas fa-link"></i></a><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h1>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -Xms200M -Xmx200M -XX:+PrintGC JVM_FullGC_Program </span><br><span class="line">//将最大和最小内容设置为200M是防止内存抖动对GC测试造成影响  测试实例直接赋予200M而不会进行扩容和缩容</span><br></pre></td></tr></table></div></figure>        <h2 id="现象"   >          <a href="#现象" class="heading-link"><i class="fas fa-link"></i></a><a href="#现象" class="headerlink" title="现象"></a>现象</h2>      <p>运行之后【短时间】</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230428164414700.png" >      </p><p>运行之后【长时间】</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/JVM%E8%B0%83%E4%BC%98%E5%AE%9E%E4%BE%8B/image-20230428164438455.png" >      </p><p>top命令</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top  //liunx命令  类似于windows中的任务管理器 获得现在系统资源</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230428165712461.png"  alt="image-20230428165712461">      </p><p>jps命令</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jps   //显示系统中运行中的java进程号</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230428164032591.png"  alt="image-20230428164032591">      </p><p>jinfo命令</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jinfo 120019 </span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# jinfo 120019</span><br><span class="line">Java System Properties:</span><br><span class="line">#Fri Apr 28 16:36:54 CST 2023</span><br><span class="line">awt.toolkit=sun.awt.X11.XToolkit</span><br><span class="line">java.specification.version=11</span><br><span class="line">sun.cpu.isalist=</span><br><span class="line">sun.jnu.encoding=UTF-8</span><br><span class="line">java.class.path=.</span><br><span class="line">java.vm.vendor=Oracle Corporation</span><br><span class="line">sun.arch.data.model=64</span><br><span class="line">java.vendor.url=https\://openjdk.java.net/</span><br><span class="line">user.timezone=</span><br><span class="line">java.vm.specification.version=11</span><br><span class="line">os.name=Linux</span><br><span class="line">sun.java.launcher=SUN_STANDARD</span><br><span class="line">user.country=US</span><br><span class="line">sun.boot.library.path=/export/server/jdk-11.0.18/lib</span><br><span class="line">sun.java.command=jdk.compiler/com.sun.tools.javac.launcher.Main JVM_FullGC_Program.java</span><br><span class="line">jdk.debug=release</span><br><span class="line">sun.cpu.endian=little</span><br><span class="line">user.home=/root</span><br><span class="line">user.language=en</span><br><span class="line">java.specification.vendor=Oracle Corporation</span><br><span class="line">java.version.date=2023-01-17</span><br><span class="line">java.home=/export/server/jdk-11.0.18</span><br><span class="line">file.separator=/</span><br><span class="line">java.vm.compressedOopsMode=32-bit</span><br><span class="line">line.separator=\n</span><br><span class="line">java.vm.specification.vendor=Oracle Corporation</span><br><span class="line">java.specification.name=Java Platform API Specification</span><br><span class="line">java.awt.graphicsenv=sun.awt.X11GraphicsEnvironment</span><br><span class="line">jdk.module.main.class=com.sun.tools.javac.launcher.Main</span><br><span class="line">sun.management.compiler=HotSpot 64-Bit Tiered Compilers</span><br><span class="line">java.runtime.version=11.0.18+9-LTS-195</span><br><span class="line">user.name=root</span><br><span class="line">path.separator=\:</span><br><span class="line">os.version=3.10.0-1160.el7.x86_64</span><br><span class="line">java.runtime.name=Java(TM) SE Runtime Environment</span><br><span class="line">file.encoding=UTF-8</span><br><span class="line">java.vm.name=Java HotSpot(TM) 64-Bit Server VM</span><br><span class="line">java.vendor.version=18.9</span><br><span class="line">java.vendor.url.bug=https\://bugreport.java.com/bugreport/</span><br><span class="line">java.io.tmpdir=/tmp</span><br><span class="line">java.version=11.0.18</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>jstat命令</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gc 120019 500  //每0.5秒输出一次</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230428165346325.png"  alt="image-20230428165346325">      </p><p>jstack命令</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstack 120019</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230428165756532.png"  alt="image-20230428165756532">      </p><p>可以获得线程中</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pool-1-thread-47 //线程ID</span><br><span class="line">#56 //线程编号</span><br><span class="line">prio=0           //线程优先级</span><br><span class="line">os_prio=0        //操作系统中优先级</span><br><span class="line">waiting on condition [0x000037f54723e2300] //线程所等待的锁</span><br><span class="line">WAITING          //线程状态</span><br></pre></td></tr></table></div></figure><p>​    </p><p>jmap命令</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -histo 120019</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230428170854321.png"  alt="image-20230428170854321">      </p>        <h2 id="分析"   >          <a href="#分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#分析" class="headerlink" title="分析"></a>分析</h2>      <p>由运行程序后长时间结果可以得出</p><p>程序再频繁调动GC 但是GC清理内存结果并不理想  同时CPU占用率会居高不下</p><p>查看线程中实例对象可以知道 某几类对象的实例个数和字节数高</p>        <h2 id="Arthas"   >          <a href="#Arthas" class="heading-link"><i class="fas fa-link"></i></a><a href="#Arthas" class="headerlink" title="Arthas"></a>Arthas</h2>      <p>利用阿里开源的Arthas</p><p><span class="exturl"><a class="exturl__link"   href="https://arthas.aliyun.com/" >https://arthas.aliyun.com/</a><span class="exturl__icon"><i class="fas fa-external-link-alt"></i></span></span></p><p>在官网下载安装包 然后解压</p><p>进入解压位置  启动arthas</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar arthas-boot.jar    </span><br><span class="line">#提前先开启至少一个java进程</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230428192744362.png"  alt="image-20230428192744362">      </p><p>进入该页面即成功启动arthas</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dashboard //会展示当前进程的信息，按ctrl+c可以中断执行。</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230428192905395.png"  alt="image-20230428192905395">      </p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>canal实现缓存同步</title>
      <link href="/2023/04/25/canal%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E5%90%8C%E6%AD%A5/"/>
      <url>/2023/04/25/canal%E5%AE%9E%E7%8E%B0%E7%BC%93%E5%AD%98%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[        <h1 id="使用canal实现Redis与Mysql的缓存同步"   >          <a href="#使用canal实现Redis与Mysql的缓存同步" class="heading-link"><i class="fas fa-link"></i></a><a href="#使用canal实现Redis与Mysql的缓存同步" class="headerlink" title="使用canal实现Redis与Mysql的缓存同步"></a>使用canal实现Redis与Mysql的缓存同步</h1>              <h2 id="在停机的条件下进行数据同步"   >          <a href="#在停机的条件下进行数据同步" class="heading-link"><i class="fas fa-link"></i></a><a href="#在停机的条件下进行数据同步" class="headerlink" title="在停机的条件下进行数据同步"></a>在停机的条件下进行数据同步</h2>      <p>直接单线程更新数据即可  可以达成数据一致性</p>        <h2 id="在不停机的条件下进行数据同步"   >          <a href="#在不停机的条件下进行数据同步" class="heading-link"><i class="fas fa-link"></i></a><a href="#在不停机的条件下进行数据同步" class="headerlink" title="在不停机的条件下进行数据同步"></a>在不停机的条件下进行数据同步</h2>      <p>Redis和Mysql进行数据同步的时候有四种方案</p>        <h3 id="方案1"   >          <a href="#方案1" class="heading-link"><i class="fas fa-link"></i></a><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3>      <p>先更新数据库再更新缓存</p><p>存在问题</p><p>再更新Mysql成功之后更新Redis失败 会导致脏数据的存在</p><p>举例：</p><p>甲的订单库存为100个 更改Mysql之后Mysql变成99个  再更新Redis时失败</p><p>导致结果为 Redis中数据为100  而Mysql中数据为99  存在脏数据</p>        <h4 id="正常情况下"   >          <a href="#正常情况下" class="heading-link"><i class="fas fa-link"></i></a><a href="#正常情况下" class="headerlink" title="正常情况下"></a>正常情况下</h4>      <p>A更新Mysql 为50</p><p>A更新Redis  为50</p><p>B更新Mysql 为30</p><p>B更新Redis 为30</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>最终结果是Mysql：30 Redis：30    数据一致</p>        <h4 id="多线程异常情况下"   >          <a href="#多线程异常情况下" class="heading-link"><i class="fas fa-link"></i></a><a href="#多线程异常情况下" class="headerlink" title="多线程异常情况下"></a>多线程异常情况下</h4>      <p>A更新Mysql为50</p><p>B更新Mysql为30</p><p>B更新Redis为30</p><p>A更新Redis为50</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>最终结果是Mysql:30 Redis:50   </p><p>因此会导致数据的不一致 </p>        <h3 id="方案2"   >          <a href="#方案2" class="heading-link"><i class="fas fa-link"></i></a><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3>      <p>先更新缓存再更新数据库</p><p>同时也存在问题</p>        <h4 id="正常情况下-1"   >          <a href="#正常情况下-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#正常情况下-1" class="headerlink" title="正常情况下"></a>正常情况下</h4>      <p>A更新Redis为50</p><p>A更新Mysql为50</p><p>B更新Redis为30</p><p>B更新Mysql为30</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>最终结果时Mysql:30 Redis:30  数据一致</p>        <h4 id="多线程异常情况下-1"   >          <a href="#多线程异常情况下-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#多线程异常情况下-1" class="headerlink" title="多线程异常情况下"></a>多线程异常情况下</h4>      <p>A更新Redis为50</p><p>B更新Redis为30</p><p>B更新Mysql为30</p><p>A更新Mysql为50</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>最终结果时Mysql:50 Redis:30 数据不一致</p><p>并且数据库作为底单数据，所以不推荐使用此方案</p>        <h3 id="方案3"   >          <a href="#方案3" class="heading-link"><i class="fas fa-link"></i></a><a href="#方案3" class="headerlink" title="方案3"></a>方案3</h3>      <p>先删除缓存再更新数据库</p>        <h4 id="异常情况"   >          <a href="#异常情况" class="heading-link"><i class="fas fa-link"></i></a><a href="#异常情况" class="headerlink" title="异常情况"></a>异常情况</h4>      <p>A线程删除缓存之后更新数据库【此时数据库并未更新完】 </p><p>B线程来获取数据</p><p>B线程发现缓存中没有数据,B就去查数据库</p><p>B查询数据库获得旧数据,并且写回于缓存中</p><p>A更新数据库完成  【Redis此时只有B线程处理后写回的旧数据】</p><p>其他线程获取数据时 发现缓存没有查数据库再把新数据写回缓存</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>最终结果 数据库中为新数据   缓存中存在B线程写回的旧数据 并且无法更改【一直存在脏数据】</p>        <h4 id="改进方法"   >          <a href="#改进方法" class="heading-link"><i class="fas fa-link"></i></a><a href="#改进方法" class="headerlink" title="改进方法"></a>改进方法</h4>              <h5 id="延迟双删"   >          <a href="#延迟双删" class="heading-link"><i class="fas fa-link"></i></a><a href="#延迟双删" class="headerlink" title="延迟双删"></a>延迟双删</h5>      <p>在删除缓存之后数据库更新未完成  其他线程写回的旧数据再进行一次删除</p><p>即删除缓存-&gt;数据库更新-&gt;删除缓存  </p><p>删除两次缓存保证数据的最终一致性</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.先删除旧数据</span></span><br><span class="line">jedis.del(order.getId()+<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//2.更新数据库</span></span><br><span class="line">orderDao.update(order);</span><br><span class="line"><span class="comment">//3.暂停一会等待其他线程获取旧数据</span></span><br><span class="line">thread.sleep(<span class="number">2</span>);<span class="comment">//暂停时间大概是处理业务逻辑时间后再加几百毫秒</span></span><br><span class="line"><span class="comment">//4.再删除旧数据</span></span><br><span class="line">jedis.del(order.getId()+<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>最终保证数据最终的一致性</p><p>但是</p><p>1、无法较为精准地控制休眠时间</p><p>2、这种同步删除的操作会降低吞吐量</p>        <h3 id="方案4"   >          <a href="#方案4" class="heading-link"><i class="fas fa-link"></i></a><a href="#方案4" class="headerlink" title="方案4"></a>方案4</h3>      <p>先更新数据库再删除缓存</p><p>问题是在数据库未更新完时 其他线程获得的数据是缓存旧值</p>        <h5 id="此时用canal监控Mysql并且同步写回到Redis中"   >          <a href="#此时用canal监控Mysql并且同步写回到Redis中" class="heading-link"><i class="fas fa-link"></i></a><a href="#此时用canal监控Mysql并且同步写回到Redis中" class="headerlink" title="此时用canal监控Mysql并且同步写回到Redis中"></a>此时用canal监控Mysql并且同步写回到Redis中</h5>              <h4 id="准备工作"   >          <a href="#准备工作" class="heading-link"><i class="fas fa-link"></i></a><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4>              <h5 id="mysql端"   >          <a href="#mysql端" class="heading-link"><i class="fas fa-link"></i></a><a href="#mysql端" class="headerlink" title="mysql端"></a>mysql端</h5>      <p>打开mysql的安装路径-修改my.ini文件</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin  #开启 binlog</span><br><span class="line">binlog-format=ROW  #选择ROW模式</span><br><span class="line">server_id=1        #配置Mysql replaction需要定义</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>修改文件之后重启mysql服务即可</p>        <h5 id="canal端"   >          <a href="#canal端" class="heading-link"><i class="fas fa-link"></i></a><a href="#canal端" class="headerlink" title="canal端"></a>canal端</h5>      <p>下载canal.depolyer-1.1.6.tar.gz 并解压到对应文件夹</p><p>修改配置文件</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim conf/example/instance.properties</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230425203014303.png"  alt="image-20230425203014303">      </p><p>修改canal.instance.master.address地址   改为要监控的IP地址以及数据库端口号</p><p>通过ipconfig命令获得本机的IP地址为10.66.9.48</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230425203214178.png"  alt="image-20230425203214178">      </p><h5 id=""><a href="#" class="headerlink" title=""></a></h5><p>修改之后</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230425203314812.png"  alt="image-20230425203314812">      </p><p>返回解压文件夹后开启canal服务</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ../..</span><br><span class="line">cd bin</span><br><span class="line">./startup.sh                //如果修改配置之前开启过服务应先暂停 ./stop.sh</span><br></pre></td></tr></table></div></figure><p>查看log日志检查canal开启情况</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ../</span><br><span class="line">cd logs/canal</span><br><span class="line">cat canal.log</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230425204205562.png"  alt="image-20230425204205562">      </p><p>表示成功运行</p>        <h5 id="redis端"   >          <a href="#redis端" class="heading-link"><i class="fas fa-link"></i></a><a href="#redis端" class="headerlink" title="redis端"></a>redis端</h5>      <p>启动服务端口号为6379</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server redis6379.conf</span><br></pre></td></tr></table></div></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> MySql </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探究safeEqual方法</title>
      <link href="/2023/03/09/%E6%8E%A2%E7%A9%B6safeEqual%E6%96%B9%E6%B3%95/"/>
      <url>/2023/03/09/%E6%8E%A2%E7%A9%B6safeEqual%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><strong>对safeEqual判断</strong></p>        <h1 id="代码如下"   >          <a href="#代码如下" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">safeEqual</span><span class="params">(String a,String b)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.length()!=b.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> equal=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">        equal |= a.charAt(i) ^ b.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> equal==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>这几行代码很少，一段段很好看懂</p><p>一开始判断字符串长度,如果字符串长度不相同的话直接返回false;</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a.length()!=b.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>定义了一个equal变量  先赋值为0;</p><p>到下面循环的时候字符串长度已经相同了</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> equal=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">        equal |= a.charAt(i) ^ b.charAt(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>对a字符串循环,取出每一个字符来然后与b中的每一个字符做异或操作，如果有不相同的结果就会为1,再把1与equal变量做或操作。</p><p>只要异或有一次为1则后面equal的值都会为1</p><p>最后返回的值是 比较equal是否为0  如果equal为0则返回true,如果为1则返回false</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> equal==<span class="number">0</span>;</span><br></pre></td></tr></table></div></figure>        <h2 id="第一次思考"   >          <a href="#第一次思考" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一次思考" class="headerlink" title="第一次思考"></a>第一次思考</h2>      <p>如果改正一下中间循环的操作是否更简单呢？</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">safeEqual</span><span class="params">(String a,String b)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.length()!=b.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> equal=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">        equal = a.charAt(i) ^ b.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(equal!=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>1.先判断字符串是否长度相同，如果不同直接返回false</p><p>2.再循环获得每一个字符 只要有一个字符不相同的时候就返回false</p><p>3.如果循环结束都没有返回false 那就是字符串相同所以返回true</p>        <h3 id="关键点"   >          <a href="#关键点" class="heading-link"><i class="fas fa-link"></i></a><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h3>      <p>但是这个方法的名字是safeEqual,如果是下面的循环直接中断和每一次遍历完字符串有什么区别呢？</p><p>经过提示，我去JDK里面也找到一个有相同思路的方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEqual</span><span class="params">(<span class="type">byte</span>[] digesta, <span class="type">byte</span>[] digestb)</span> &#123;</span><br><span class="line">    <span class="comment">/* All bytes in digesta are examined to determine equality.</span></span><br><span class="line"><span class="comment">     * The calculation time depends only on the length of digesta</span></span><br><span class="line"><span class="comment">     * It does not depend on the length of digestb or the contents</span></span><br><span class="line"><span class="comment">     * of digesta and digestb.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (digesta == digestb) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (digesta == <span class="literal">null</span> || digestb == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">lenA</span> <span class="operator">=</span> digesta.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lenB</span> <span class="operator">=</span> digestb.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lenB == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> lenA == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    result |= lenA - lenB;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// time-constant comparison</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; lenA; i++) &#123;</span><br><span class="line">        <span class="comment">// If i &gt;= lenB, indexB is 0; otherwise, i.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">indexB</span> <span class="operator">=</span> ((i - lenB) &gt;&gt;&gt; <span class="number">31</span>) * i;</span><br><span class="line">        result |= digesta[i] ^ digestb[indexB];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="重点"   >          <a href="#重点" class="heading-link"><i class="fas fa-link"></i></a><a href="#重点" class="headerlink" title="重点"></a>重点</h3>      <p>在JDK里面这个方法中有一个注释 不太一样</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// time-constant comparison</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; lenA; i++) &#123;</span><br><span class="line">        <span class="comment">// If i &gt;= lenB, indexB is 0; otherwise, i.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">indexB</span> <span class="operator">=</span> ((i - lenB) &gt;&gt;&gt; <span class="number">31</span>) * i;</span><br><span class="line">        result |= digesta[i] ^ digestb[indexB];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result == <span class="number">0</span>;</span><br></pre></td></tr></table></div></figure><p>time-constant comparison</p><p>经过找资料之后发现这个一个黑客技术：计时攻击</p><p>开始理解这个遍历完字符串的原因</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设A字符串为aaaaaaaaaa b字符串为bbbbbbbbbb</span></span><br><span class="line">那么</span><br><span class="line">    如果用改过之后的方法,当遍历到第一个字符的时候就已经返回了。</span><br><span class="line">    这样返回数据的速度很快, 如果利用这一个运行时间 就可能可以猜出第一个字母就不是a</span><br><span class="line"></span><br><span class="line">同理 </span><br><span class="line">    如果<span class="string">&quot;bxxxxxxxxxxx&quot;</span>的时间运行时间较长于其他的字符</span><br><span class="line">    那么就可以猜测第一个字符就是b开头的</span><br><span class="line"></span><br><span class="line">找到可能的第一个字符，再用第一个字符固定的字符串</span><br><span class="line">    如<span class="string">&quot;baaaaaaaaaa&quot;</span> 和b字符串做比较  </span><br><span class="line">    不断遍历就很大可能可以获得到b字符串所有的数据</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><p>这种方法有可能用来撞库获得用户密码数据，所以safeEqual的关键点于每一次比较之后都是遍历完字符串，对返回时间都大概是相近的，所以对计时攻击有抵抗作用</p>        <h2 id="第二次思考"   >          <a href="#第二次思考" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二次思考" class="headerlink" title="第二次思考"></a>第二次思考</h2>              <h3 id="关键点-1"   >          <a href="#关键点-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#关键点-1" class="headerlink" title="关键点"></a>关键点</h3>      <p>没有对数据做校验，可能会传来空字符串</p><p>safeEqual还有代码的不完全，对接受的数据字符串a和字符串b没有做非空判断，所以代码是不安全的</p><p>直接对a和b的长度进行判断可能程序会出异常</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private boolean safeEqual(String a,String b)&#123;</span><br><span class="line">    if(a.length()!=b.length())&#123;</span><br><span class="line">        return false;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>而在jdk中的代码对a和b是否为空做了判断</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEqual</span><span class="params">(<span class="type">byte</span>[] digesta, <span class="type">byte</span>[] digestb)</span> &#123;</span><br><span class="line">    <span class="comment">/* All bytes in digesta are examined to determine equality.</span></span><br><span class="line"><span class="comment">     * The calculation time depends only on the length of digesta</span></span><br><span class="line"><span class="comment">     * It does not depend on the length of digestb or the contents</span></span><br><span class="line"><span class="comment">     * of digesta and digestb.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (digesta == digestb) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (digesta == <span class="literal">null</span> || digestb == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>对传来的数据digesta和digestb做了非空判断，如果其中有一个为空就直接返回false</p>        <h2 id="第三次思考"   >          <a href="#第三次思考" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三次思考" class="headerlink" title="第三次思考"></a>第三次思考</h2>              <h3 id="关键点-2"   >          <a href="#关键点-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#关键点-2" class="headerlink" title="关键点"></a>关键点</h3>      <p>safeEqual和IsEqual方法都是为了可能因为避免结束时间不同而导致的数据泄露，那能不能不用遍历完来改进代码呢？如果每次都是遍历完的话字符串太长会浪费资源</p><p>所以我觉得可以调用sleep来解决这个问题</p>        <h3 id="改进之后"   >          <a href="#改进之后" class="heading-link"><i class="fas fa-link"></i></a><a href="#改进之后" class="headerlink" title="改进之后"></a>改进之后</h3>      <p>1.先对字符串做非空判断</p><p>2.对字符串长度做判断</p><p>3.使进程睡眠一个随机时间</p><p>4.对字符串遍历 当发现有一个不同的时候就返回false</p><p>代码如下</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">safeEqual</span><span class="params">(String a,String b)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="literal">null</span>||b==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a.length()!=b.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> r.nextInt(<span class="number">1000</span>)+<span class="number">100</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">          t.sleep(l);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="type">int</span> equal=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">        equal = a.charAt(i) ^ b.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(equal!=<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="新的问题"   >          <a href="#新的问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#新的问题" class="headerlink" title="新的问题"></a>新的问题</h3>      <p>1.因中断引起的资源损失会不会导致得不偿失？</p><p>2.大数据统计的时间ms值是否一样能造成Time Attack的效果？</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现带权重的算法错解与改正</title>
      <link href="/2023/03/06/%E5%AE%9E%E7%8E%B0%E5%B8%A6%E6%9D%83%E9%87%8D%E7%9A%84%E7%AE%97%E6%B3%95%E9%94%99%E8%A7%A3%E4%B8%8E%E6%94%B9%E6%AD%A3/"/>
      <url>/2023/03/06/%E5%AE%9E%E7%8E%B0%E5%B8%A6%E6%9D%83%E9%87%8D%E7%9A%84%E7%AE%97%E6%B3%95%E9%94%99%E8%A7%A3%E4%B8%8E%E6%94%B9%E6%AD%A3/</url>
      
        <content type="html"><![CDATA[        <h1 id="学习带权重的算法"   >          <a href="#学习带权重的算法" class="heading-link"><i class="fas fa-link"></i></a><a href="#学习带权重的算法" class="headerlink" title="学习带权重的算法"></a>学习带权重的算法</h1>      <p>在学习IO流中用权重的算法生成点名器  要求是每次点名之后被点到的人之后的概率为之前概率的一半</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">例如 某名单有80名学生,那么点名的时候假如都是A同学</span><br><span class="line"></span><br><span class="line">​第一次每人概率：1.25%。</span><br><span class="line"></span><br><span class="line">​第二次小A概率：0.625%。  其他学生概率：1.2579%  </span><br><span class="line"></span><br><span class="line">​第三次小A概率：0.3125%。  其他学生概率：1.261867%  </span><br><span class="line"></span><br><span class="line">​第四次小A概率：0.15625%。  其他学生概率：1.2638449%  </span><br><span class="line"></span><br><span class="line">​第五次小A概率：0.078125%。  其他学生概率：1.26483386%  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></div></figure>        <h2 id="思路"   >          <a href="#思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#思路" class="headerlink" title="思路"></a>思路</h2>              <h3 id="前期准备的工作以及实现的代码"   >          <a href="#前期准备的工作以及实现的代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#前期准备的工作以及实现的代码" class="headerlink" title="前期准备的工作以及实现的代码"></a>前期准备的工作以及实现的代码</h3>      <p>1.第一个本地文件用来存储学生信息 学生信息由姓名-性别-年龄组成</p><p>数据由hutool生成 </p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//   爬取姓的网址     https://hanyu.baidu.com/shici/detailfrom=kg1&amp;highlight=&amp;pid=0b2f26d4c0ddb3ee693fdb1137ee1b0d&amp;srcid=51369</span></span><br><span class="line"><span class="comment">//   爬取男生名字的网址 http://www.haoming8.cn/baobao/10881.html</span></span><br><span class="line"><span class="comment">//   爬取女生名字的网址 http://www.haoming8.cn/baobao/7641.html</span></span><br></pre></td></tr></table></div></figure><p>爬取到数据之后做数据筛选再做处理之后存储到本地文件中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用HttpUtil.get方法链接网址 爬取网址的所有数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">familyStr</span> <span class="operator">=</span> HttpUtil.get(<span class="string">&quot;https://hanyu.baidu.com/shici/detailfrom=kg1&amp;highlight=&amp;pid=0b2f26d4c0ddb3ee693fdb1137ee1b0d&amp;srcid=51369&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">boyStr</span> <span class="operator">=</span> HttpUtil.get(<span class="string">&quot;http://www.haoming8.cn/baobao/10881.html&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">girlStr</span> <span class="operator">=</span> HttpUtil.get(<span class="string">&quot;http://www.haoming8.cn/baobao/7641.html&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//筛选数据   用ReUtil.findAll方法将所有的数据经过正则表达式获得一个临时的集合存放未被处理过的数据</span></span><br><span class="line">ArrayList&lt;String&gt; FamilyTempList = (ArrayList&lt;String&gt;) ReUtil.findAll(<span class="string">&quot;(.&#123;4&#125;)(，|。)&quot;</span>, familyStr, <span class="number">1</span>);</span><br><span class="line">ArrayList&lt;String&gt; BoyTempList = (ArrayList&lt;String&gt;) ReUtil.findAll(<span class="string">&quot;([\\u4E00-\\u9FA5]&#123;2&#125;)、&quot;</span>, boyStr, <span class="number">1</span>);</span><br><span class="line">ArrayList&lt;String&gt; GirlTempList = (ArrayList&lt;String&gt;) ReUtil.findAll(<span class="string">&quot;(.. )&#123;4&#125;..&quot;</span>, girlStr, <span class="number">0</span>);</span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//再修改数据</span></span><br><span class="line"><span class="comment">//FamilyTempList中要将四个汉字分割开 一个个存入集合中</span></span><br><span class="line">        ArrayList&lt;String&gt; FamilyList= changeData(FamilyTempList);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把BoyTempList中的数据去重</span></span><br><span class="line">        ArrayList&lt;String&gt; BoyList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : BoyTempList) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!BoyList.contains(s))&#123;</span><br><span class="line">                <span class="comment">//不在BoyList中的数据则添加到集合中</span></span><br><span class="line">                BoyList.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把GirlTempList中的数据按照空格切割添加到新的集合中</span></span><br><span class="line">        ArrayList&lt;String&gt; girlList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : GirlTempList) &#123;</span><br><span class="line">            String[] arr = s.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            Collections.addAll(girlList,arr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将男生的信息和女生的信息生成  以张三-男-23 的形式</span></span><br><span class="line">        ArrayList&lt;String&gt; list =getFinallyList(FamilyList,BoyList,girlList,<span class="number">40</span>,<span class="number">40</span>);</span><br><span class="line">        <span class="comment">//打乱集合顺序</span></span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用FileUtils.writeLines方法将数据存储再本地的names.txt文件中国</span></span><br><span class="line">        FileUtils.writeLines(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d2-code\\names.txt&quot;</span>),list);</span><br></pre></td></tr></table></div></figure><p>切割FamilyTempList的时候所调用的changeData方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;String&gt; <span class="title function_">changeData</span><span class="params">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; newList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            <span class="type">char</span>[] arr = s.toCharArray();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : arr) &#123;</span><br><span class="line">                newList.add(c+<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newList;</span><br></pre></td></tr></table></div></figure><p>生成最后的数据 以姓名-性别-年龄的形式所调用的getFinallyList方法</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;String&gt; <span class="title function_">getFinallyList</span><span class="params">(ArrayList&lt;String&gt; familyList, ArrayList&lt;String&gt; boyList, ArrayList&lt;String&gt; girlList, <span class="type">int</span> boyCount, <span class="type">int</span> girlCount)</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 形参一 姓的集合</span></span><br><span class="line"><span class="comment">     * 形参二 男生名字集合</span></span><br><span class="line"><span class="comment">     * 形参三 女生名字集合</span></span><br><span class="line"><span class="comment">     * 形参四 男生数量</span></span><br><span class="line"><span class="comment">     * 形参五 女生数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    HashSet&lt;String&gt; boyst=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();<span class="comment">//用set集合保证不重复</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">//生成男生信息</span></span><br><span class="line">        <span class="keyword">if</span>(boyst.size()==boyCount)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> r.nextInt(<span class="number">16</span>)+<span class="number">20</span>;<span class="comment">//生成的男生年龄在20-35岁</span></span><br><span class="line">        Collections.shuffle(familyList);</span><br><span class="line">        Collections.shuffle(boyList);</span><br><span class="line">        boyst.add(familyList.get(<span class="number">0</span>)+boyList.get(<span class="number">0</span>)+<span class="string">&quot;-男-&quot;</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成女生信息</span></span><br><span class="line">    HashSet&lt;String&gt; girlst=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();<span class="comment">//用set集合保证不重复</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="comment">//生成女生信息</span></span><br><span class="line">        <span class="keyword">if</span>(girlst.size()==girlCount)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> r.nextInt(<span class="number">10</span>)+<span class="number">18</span>;<span class="comment">//生成的女生年龄在18-27岁</span></span><br><span class="line">        Collections.shuffle(familyList);</span><br><span class="line">        Collections.shuffle(girlList);</span><br><span class="line">        girlst.add(familyList.get(<span class="number">0</span>)+girlList.get(<span class="number">0</span>)+<span class="string">&quot;-女-&quot;</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    list.addAll(boyst);</span><br><span class="line">    list.addAll(girlst);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>2.准备一个本地文件Count.txt 里面存放一个数据 用来记录现在是第几次点名</p><p>3.准备一个本地hasName.txt 用来存放已经被点名的数据</p>        <h3 id="实现代码的思路"   >          <a href="#实现代码的思路" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现代码的思路" class="headerlink" title="实现代码的思路"></a>实现代码的思路</h3>      <p>1、将学生信息和权重存放到map集合中，这样能保证学生数据对应一个权重。</p><p>2、将map集合中的所有值取出来生成一个数组，再有随机数的形式获得数组中的数据</p><p>3、判断是第几次点名，</p><p>​  如果是第一次点名就将点名的学生信息写到一个新的文件即hasName.txt中,并且将其以 姓名-性别-年龄-权重 形式</p><p>4、被点名的同学权重将除以2，即将map集合中的键值对中所对应的值除以2</p><p>5、如果不是第一次点名再判断，随机数获得数组中的数据是否为1.0</p><p>6、如果是1.0就将map集合中的不是1.0的数据刨除之后再随机获得一个学生信息，将学生信息写到hasName.txt中</p><p>7、    如果不是1.0就将刨除的学生数据中判断哪个与数值对应，将学生权重除以2再写回文件中</p><p>8、写回点名次数到Count.txt中</p>        <h3 id="数据"   >          <a href="#数据" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据" class="headerlink" title="数据"></a>数据</h3>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306163737037.png" >      </p><p>【names.txt】</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306163737037.png" >      </p><p>【Count.txt】</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306163842882.png"  alt="image-20230306163842882">      </p><p>【hasName.txt】</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306164322967.png" >      </p>        <h2 id="实现"   >          <a href="#实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#实现" class="headerlink" title="实现"></a>实现</h2>      <p>1.读取本地文件names.txt中的数据 获得所有的学生信息</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取本地文件</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;d2-code\\names.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个集合用来装学生数据</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取数据</span></span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">    list.add(line);</span><br><span class="line">&#125;</span><br><span class="line">br.close();</span><br></pre></td></tr></table></div></figure><p>2.生成一个hashmap存储键值对，将学生信息和权重联系起来</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, Double&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">    map.put(s, <span class="number">1.00</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>3.读取本地文件Count.txt中的数据 </p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断现在是第几次点名</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">brCount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;d2-code\\Count.txt&quot;</span>));</span><br><span class="line"><span class="comment">//建立数据流与本地文件相连</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> brCount.readLine();</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Integer.parseInt(s1);</span><br></pre></td></tr></table></div></figure><p>4.判断是第几次点名</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得是第几次点名</span></span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//因为第一次点名的时候 概率都是一样的</span></span><br><span class="line">    Collections.shuffle(list);</span><br><span class="line">    <span class="comment">//打乱集合</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//把学生对象添加到已经点过名的文件中</span></span><br><span class="line">    System.out.println(s);</span><br><span class="line">    <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;d2-code\\hasName.txt&quot;</span>));</span><br><span class="line">    bw.write(s + <span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    bw.close();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//后面的点名都要在乎权重</span></span><br><span class="line">    <span class="comment">//先获得已经点名的人</span></span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">br2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;d2-code\\hasName.txt&quot;</span>));</span><br><span class="line">    String line2;</span><br><span class="line">    <span class="comment">//用一个新集合来装已经有的学生对象</span></span><br><span class="line">    ArrayList&lt;String&gt; newList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> ((line2 = br2.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        newList.add(line2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历新的集合 将已经有的学生权重更改</span></span><br><span class="line">    <span class="keyword">for</span> (String s : newList) &#123;</span><br><span class="line">        String[] arr = s.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> arr[<span class="number">0</span>] + <span class="string">&quot;-&quot;</span> + arr[<span class="number">1</span>] + <span class="string">&quot;-&quot;</span> + arr[<span class="number">2</span>];</span><br><span class="line">        map.replace(str,(Double.parseDouble(arr[<span class="number">3</span>]) / <span class="number">2.0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把map集合的值拿出来形成一个数组</span></span><br><span class="line">    Double[] valueArr = <span class="keyword">new</span> <span class="title class_">Double</span>[map.size()];</span><br><span class="line">    Set&lt;Map.Entry&lt;String, Double&gt;&gt; entries = map.entrySet();</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Double&gt; entry : entries) &#123;</span><br><span class="line">        valueArr[i] = entry.getValue();</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//形成随机索引</span></span><br><span class="line">    <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">dataIndex</span> <span class="operator">=</span> r.nextInt(valueArr.length);</span><br><span class="line">    <span class="type">double</span> <span class="variable">temp</span> <span class="operator">=</span> valueArr[dataIndex];</span><br><span class="line">    <span class="comment">//对temp进行判断 如果temp=1则该用户是没有被点过名的</span></span><br><span class="line">    <span class="keyword">if</span> (temp == <span class="number">1.0</span>) &#123;</span><br><span class="line">        ArrayList&lt;String&gt; tempNotWantNumber = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//遍历entrySet 把值不为1的数字去掉 然后随机一个数据</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Double&gt; entry : entries) &#123;</span><br><span class="line">            <span class="type">Double</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (value != temp) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">                tempNotWantNumber.add(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把价值不为1.0的键值对去掉</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; tempNotWantNumber.size(); j++) &#123;</span><br><span class="line">            map.remove(tempNotWantNumber.get(j));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机点名</span></span><br><span class="line">        ArrayList&lt;String&gt; nextList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//给要点名的list添加数据</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, Double&gt;&gt; set = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Double&gt; newEntry : set) &#123;</span><br><span class="line">            nextList.add(newEntry.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加完数据之后打乱数据</span></span><br><span class="line">        Collections.shuffle(nextList);</span><br><span class="line">        <span class="comment">//获得0索引的随机对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">student</span> <span class="operator">=</span> nextList.get(<span class="number">0</span>);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">        <span class="comment">//把新获得的同学添加到已经点名的名单中</span></span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;d2-code\\hasName.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//先把之前存在的数据导进来</span></span><br><span class="line">        <span class="keyword">for</span> (String s : newList) &#123;</span><br><span class="line">            bw2.write(s);</span><br><span class="line">            bw2.newLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//再把新生成的学生对象添加进本地文件中</span></span><br><span class="line">        bw2.write(student+<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        bw2.close();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果不是1,则从已有的数据中获得</span></span><br><span class="line">        <span class="keyword">for</span> (String s : newList) &#123;</span><br><span class="line">            String[] arr = s.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//比较权重 如果相等则输出名字,且将权重修改之后写到本地文件中</span></span><br><span class="line">            <span class="keyword">if</span> (temp == (Double.parseDouble(arr[<span class="number">3</span>]) / <span class="number">2.0</span>)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> arr[<span class="number">0</span>] + <span class="string">&quot;-&quot;</span> + arr[<span class="number">1</span>] + <span class="string">&quot;-&quot;</span> + arr[<span class="number">2</span>];</span><br><span class="line">                System.out.println(str);</span><br><span class="line">                newList.remove(s);</span><br><span class="line">                newList.add(str+<span class="string">&quot;-&quot;</span>+temp);</span><br><span class="line">                <span class="type">BufferedWriter</span> <span class="variable">bw2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;d2-code\\hasName.txt&quot;</span>));</span><br><span class="line">                <span class="keyword">for</span> (String newStr : newList) &#123;</span><br><span class="line">                    bw2.write(newStr);</span><br><span class="line">                    bw2.newLine();</span><br><span class="line">                &#125;</span><br><span class="line">                bw2.close();</span><br><span class="line">                <span class="comment">//找到了点名的对象之后跳出中断，防止报错</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>5.写回点名次数</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将点名次数+1然后写到本地文件中</span></span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;d2-code\\Count.txt&quot;</span>);</span><br><span class="line">index++;</span><br><span class="line">fw.write(index+<span class="string">&quot;&quot;</span>);</span><br><span class="line">fw.close();</span><br></pre></td></tr></table></div></figure>        <h2 id="误区"   >          <a href="#误区" class="heading-link"><i class="fas fa-link"></i></a><a href="#误区" class="headerlink" title="误区"></a>误区</h2>      <p>以为用map集合将键值对存储，一个学生信息就对应一个权重</p><p>但是实际上权重改变之后，并没有变成我想要的权重修改的结果</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例如： 一个学生被抽到之后，他所对应的值修改成0.5,其他学生信息都为1.0</span><br><span class="line">  下一次抽取数组中1.0的数据由79个,0.5的数据只有一个。 那么其他人被抽取到的几率为(79/80)*(1/79) =1/80 =1.25%</span><br><span class="line">  分析：79个1.0 那么抽到0.1的概率为79/80</span><br><span class="line">     1个学生信息 那么每个学生抽到的概率为1/79</span><br><span class="line">     所以总的概率为(79/80)*(1/79)=1.25%</span><br><span class="line">  而本身已经被抽取过的学生 下一次被抽到的概率为1/80=1.25% 因为0.5的数据只有一个</span><br></pre></td></tr></table></div></figure>        <h2 id="修改之后"   >          <a href="#修改之后" class="heading-link"><i class="fas fa-link"></i></a><a href="#修改之后" class="headerlink" title="修改之后"></a>修改之后</h2>      <p>将学生对象的权重由数字变成范围</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">比如 权重<span class="number">1</span>  总权重<span class="number">80</span> 则每个人的权重为<span class="number">0.0125</span></span><br><span class="line">第一个人的权重范围是[<span class="number">0</span>,<span class="number">0.0125</span>)</span><br><span class="line">第二个人的权重范围是[<span class="number">0.0125</span>,<span class="number">0.025</span>)</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">最后一个人的权重范围[<span class="number">0.9875</span><span class="number">.1</span>)</span><br><span class="line">并且将范围与信息对应起来比如[<span class="number">0</span>,<span class="number">0.0125</span>)就是第一个人,如果权重减半之后[<span class="number">0</span>,<span class="number">0.00625</span>)是第一个人，[<span class="number">0.0625</span>,<span class="number">0.025</span>)是第二个人</span><br><span class="line">再生成<span class="number">0</span>~<span class="number">1</span>之间的数字index  </span><br><span class="line">再用二分法找到index在数组中的位置</span><br><span class="line">就能找到所对应的信息</span><br></pre></td></tr></table></div></figure><p>关键点要将权重由数字变成范围,然后对应的信息要固定</p><p>将权重与个人对应存放在本地文件中 不由hashmap记录</p>        <h3 id="数据存储"   >          <a href="#数据存储" class="heading-link"><i class="fas fa-link"></i></a><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3>      <p>数据以 姓名-性别-年龄-年龄-权重 的形式存储</p><p>【names.txt】</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306164416510.png" >      </p>        <h3 id="代码实现"   >          <a href="#代码实现" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3>      <p>读取本地文件names.txt中的数据 并用ArrayList接受</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取本地文件 利用BufferedReader链接文件</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;d2-code\\names.txt&quot;</span>));</span><br><span class="line"><span class="comment">//用一个list集合存储数据</span></span><br><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">String line;<span class="comment">//用一个临时变量line</span></span><br><span class="line"><span class="keyword">while</span> ((line=br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">    list.add(line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取完数据之后关流</span></span><br><span class="line">br.close();</span><br></pre></td></tr></table></div></figure><p>将ArrayList中的数据获得出来 算出总权重 以及每个信息所对应的权重范围</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个变量用来记录总权重</span></span><br><span class="line"><span class="type">Double</span> <span class="variable">Count</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">    String[] arr = s.split(<span class="string">&quot;-&quot;</span>);<span class="comment">//利用&quot;-&quot;分割数据 生成数组</span></span><br><span class="line">    Count += Double.parseDouble(arr[<span class="number">3</span>]);<span class="comment">//将权重相加起来</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;总权重为:&quot;</span> + Count);</span><br><span class="line"><span class="comment">//获得总权重之后把每个数据所对应的权重(数字)用数组存起来</span></span><br><span class="line"><span class="comment">//定义一个数组用来存储每个人的权重占比(数字)</span></span><br><span class="line"><span class="type">double</span>[] weightArr = <span class="keyword">new</span> <span class="title class_">double</span>[list.size()];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//i用来表示weightArr的索引</span></span><br><span class="line"><span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">    String[] arr = s.split(<span class="string">&quot;-&quot;</span>);<span class="comment">//利用&quot;-&quot;分割数据 生成数组</span></span><br><span class="line">    weightArr[i] = Double.parseDouble(arr[<span class="number">3</span>])/Count;<span class="comment">//将每个人的权重放到权重数组(数字)中</span></span><br><span class="line">    i++;<span class="comment">//放入一个数据之后索引要自增</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将获得的权重数组(数字) 变成权重数组(范围)  a[i]=a[i-1]+a[i];</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; weightArr.length; j++) &#123;</span><br><span class="line">    weightArr[j]=weightArr[j]+weightArr[j-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* 权重数组(范围)公式解释</span><br><span class="line">*例 第一个人的权重是0.0125，则他的权重范围即[0,0.0125)</span><br><span class="line">*那么第二个人的权重是0.0125的情况下 </span><br><span class="line">则第二个人的权重范围就是第一个人的权重范围([0,0.0125))加上他自己的0.0125就是[0.0125,0.025)</span><br><span class="line">如果第二个人的权重是0.00625的情况下</span><br><span class="line">则第二个人的权重范围就是第一个人的权重范围([0,0.0125))加上他自己的0.00625就是[0.0125,0.01875)</span><br><span class="line">*</span><br><span class="line">*/</span><br></pre></td></tr></table></div></figure><p>获得权重数组(范围)之后用Math.random生成一个0~1的随机数 再用二分法找到在数组中的位置 与其对应着文件中的信息</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用Math.randow获得随机数据 0~1之间</span></span><br><span class="line"><span class="type">double</span> <span class="variable">v</span> <span class="operator">=</span> Math.random();</span><br><span class="line"><span class="comment">//用二分法找到随机数在权重数组(范围)中的位置</span></span><br><span class="line"><span class="comment">//Arrays.binarySearch 返回值是 -要求的位置 -1</span></span><br><span class="line"><span class="comment">//即 返回值=-索引 -1  因此可以直到 索引= -返回值 -1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -Arrays.binarySearch(weightArr, v)-<span class="number">1</span>;</span><br><span class="line">System.out.println(index);</span><br><span class="line"></span><br><span class="line"><span class="comment">//由索引可以获得list中的数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> list.get(index);</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></div></figure><p>阶段运行结果</p><p>【控制台输出】</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306183501981.png"  alt="image-20230306183501981">      </p><p>【names.txt中的位置】</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306183537411.png"  alt="image-20230306183537411">      </p><p>输出数据然后将对应的信息中权重改成原来的一半，再写回list集合中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个StringBuilder 将信息输出出去，然后将修改之后的权重拼接回去</span></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">sb.append(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">0</span>]);</span><br><span class="line">System.out.println(sb.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//将权重减半</span></span><br><span class="line"><span class="type">double</span> <span class="variable">newWeight</span> <span class="operator">=</span> Double.parseDouble(s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">3</span>]) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">//拼接数据</span></span><br><span class="line">sb.append(<span class="string">&quot;-&quot;</span>+s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">1</span>]+<span class="string">&quot;-&quot;</span>+s.split(<span class="string">&quot;-&quot;</span>)[<span class="number">2</span>]+<span class="string">&quot;-&quot;</span>+newWeight);</span><br><span class="line"><span class="type">String</span> <span class="variable">newInf</span> <span class="operator">=</span> sb.toString();</span><br><span class="line"><span class="comment">//修改在list集合中的数据</span></span><br><span class="line">list.set(index,newInf);</span><br></pre></td></tr></table></div></figure><p>将list中的数据写回到本地文件中</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将list中的数据写回到本地文件中</span></span><br><span class="line"><span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;d2-code\\names.txt&quot;</span>));</span><br><span class="line"><span class="keyword">for</span> (String str : list) &#123;</span><br><span class="line">    bw.write(str);</span><br><span class="line">    bw.newLine();</span><br><span class="line">&#125;</span><br><span class="line">bw.close();</span><br></pre></td></tr></table></div></figure>        <h3 id="运行结果"   >          <a href="#运行结果" class="heading-link"><i class="fas fa-link"></i></a><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3>      <p>第一次</p><p>【控制台】        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306185140998.png"  alt="image-20230306185140998">      </p><p>【names.txt】        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306185200682.png"  alt="image-20230306185200682">      </p><p>第二次</p><p>【控制台】        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306185329272.png"  alt="image-20230306185329272">      </p><p>【names.txt】        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306185243449.png"  alt="image-20230306185243449">      </p><p>第三次</p><p>【控制台】        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306185310974.png"  alt="image-20230306185310974">      </p><p>【names.txt】        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230306185419248.png"  alt="image-20230306185419248">      </p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流解压缩出错(未解决)</title>
      <link href="/2023/03/02/IO%E6%B5%81%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%87%BA%E9%94%99/"/>
      <url>/2023/03/02/IO%E6%B5%81%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%87%BA%E9%94%99/</url>
      
        <content type="html"><![CDATA[        <h1 id="2023-03-02"   >          <a href="#2023-03-02" class="heading-link"><i class="fas fa-link"></i></a><a href="#2023-03-02" class="headerlink" title="2023&#x2F;03&#x2F;02"></a>2023&#x2F;03&#x2F;02</h1>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d2-code\\aaa.zip&quot;</span>);</span><br><span class="line">        <span class="comment">//创建解压目的地的路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d2-code\\&quot;</span>);</span><br><span class="line">        <span class="comment">//创建解压缩流对象</span></span><br><span class="line">        <span class="type">ZipInputStream</span> <span class="variable">zip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f));</span><br><span class="line">        <span class="comment">//获取zip中的文件夹\文件 每个都是zipEntry对象</span></span><br><span class="line">        ZipEntry entry;</span><br><span class="line">        <span class="keyword">while</span>((entry= zip.getNextEntry())!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//当entry不为空的时候进入循环  entry表示压缩包的每一个文件</span></span><br><span class="line">            System.out.println(entry);</span><br><span class="line">            <span class="comment">//对每一个entry进行判断</span></span><br><span class="line">            <span class="keyword">if</span>(entry.isDirectory())&#123;</span><br><span class="line">                <span class="comment">//如果是文件夹则在目的地创建文件夹</span></span><br><span class="line">                <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dest, entry.toString());</span><br><span class="line">                file.mkdirs();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//如果是文件则直接拷贝</span></span><br><span class="line">                <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(dest, entry.toString()));</span><br><span class="line">                <span class="type">int</span> len;</span><br><span class="line">                <span class="keyword">while</span>((len=zip.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">                    fos.write(len);</span><br><span class="line">                &#125;</span><br><span class="line">                fos.close();</span><br><span class="line">                zip.closeEntry();<span class="comment">//表示该文件已经操作结束</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//循环结束关闭</span></span><br><span class="line">        zip.close();</span><br></pre></td></tr></table></div></figure><p>运行结果</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230302215208856.png" >      </p>        <h2 id="aaa-zip结构"   >          <a href="#aaa-zip结构" class="heading-link"><i class="fas fa-link"></i></a><a href="#aaa-zip结构" class="headerlink" title="aaa.zip结构"></a>aaa.zip结构</h2>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230302215228027.png"  alt="image-20230302215228027">      </p><p>分析原因为</p><p>aaa.zip下的aaa和bbb文件夹未被读取到Entry对象中</p>        <h1 id="2023-03-03"   >          <a href="#2023-03-03" class="heading-link"><i class="fas fa-link"></i></a><a href="#2023-03-03" class="headerlink" title="2023&#x2F;03&#x2F;03"></a>2023&#x2F;03&#x2F;03</h1>              <h2 id="aaa-zip结构-1"   >          <a href="#aaa-zip结构-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#aaa-zip结构-1" class="headerlink" title="aaa.zip结构"></a>aaa.zip结构</h2>              <h3 id="一级路径"   >          <a href="#一级路径" class="heading-link"><i class="fas fa-link"></i></a><a href="#一级路径" class="headerlink" title="一级路径"></a>一级路径</h3>      <p>​aaa</p>        <h3 id="二级路径"   >          <a href="#二级路径" class="heading-link"><i class="fas fa-link"></i></a><a href="#二级路径" class="headerlink" title="二级路径"></a>二级路径</h3>      <p>​aaa\aaa</p><p>​aaa\bbb</p><p>​aaa\csb.txt</p>        <h3 id="三级路径"   >          <a href="#三级路径" class="heading-link"><i class="fas fa-link"></i></a><a href="#三级路径" class="headerlink" title="三级路径"></a>三级路径</h3>      <p>​aaa\aaa\csb.txt</p>        <h2 id="想要控制台出现的结果"   >          <a href="#想要控制台出现的结果" class="heading-link"><i class="fas fa-link"></i></a><a href="#想要控制台出现的结果" class="headerlink" title="想要控制台出现的结果"></a>想要控制台出现的结果</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aaa/</span><br><span class="line">aaa/aaa</span><br><span class="line">aaa/aaa/csb.txt</span><br><span class="line">aaa/bbb</span><br><span class="line">aaa/csb.txt</span><br></pre></td></tr></table></div></figure>        <h2 id="现在程序出现的结果"   >          <a href="#现在程序出现的结果" class="heading-link"><i class="fas fa-link"></i></a><a href="#现在程序出现的结果" class="headerlink" title="现在程序出现的结果"></a>现在程序出现的结果</h2>      <figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aaa/aaa/</span><br><span class="line">aaa/aaa/csb.txt</span><br><span class="line">aaa/bbb/</span><br><span class="line">aaa/csb.txt</span><br><span class="line"></span><br></pre></td></tr></table></div></figure>        <h1 id="问题"   >          <a href="#问题" class="heading-link"><i class="fas fa-link"></i></a><a href="#问题" class="headerlink" title="问题"></a>问题</h1>      <p>少了一个aaa&#x2F;的zipEntry对象</p>        <h2 id="现象-case1"   >          <a href="#现象-case1" class="heading-link"><i class="fas fa-link"></i></a><a href="#现象-case1" class="headerlink" title="现象  case1"></a>现象  case1</h2>      <p>用debug调试程序 将断点设置在循环控制条件 (entry&#x3D;zip.getNextEntry()) !&#x3D; null  然后单步调试会出现报错</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230303144753331.png" >      </p><p>报错</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230303144849131.png" >      </p>        <h2 id="现象-case2"   >          <a href="#现象-case2" class="heading-link"><i class="fas fa-link"></i></a><a href="#现象-case2" class="headerlink" title="现象 case2"></a>现象 case2</h2>      <p>不用debug调试 直接进行全速运行</p><p>会输出缺少aaa&#x2F;的结果 但是不会报错 同时文件也能被解压成功</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230303145013825.png" >      </p>        <h3 id="判断"   >          <a href="#判断" class="heading-link"><i class="fas fa-link"></i></a><a href="#判断" class="headerlink" title="判断"></a>判断</h3>      <p>程序因为单步调试和全速运行进行的结果不一样</p><p>无法解释为什么全速运行的时候entry对象不会获得到File(“d2-code\aaa”)</p>        <h1 id="源码"   >          <a href="#源码" class="heading-link"><i class="fas fa-link"></i></a><a href="#源码" class="headerlink" title="源码"></a>源码</h1>              <h2 id="ZipInputStream-getNextEntry"   >          <a href="#ZipInputStream-getNextEntry" class="heading-link"><i class="fas fa-link"></i></a><a href="#ZipInputStream-getNextEntry" class="headerlink" title="ZipInputStream.getNextEntry();"></a>ZipInputStream.getNextEntry();</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ZipEntry <span class="title function_">getNextEntry</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        ensureOpen();</span><br><span class="line">        <span class="keyword">if</span> (entry != <span class="literal">null</span>) &#123;</span><br><span class="line">            closeEntry();</span><br><span class="line">        &#125;</span><br><span class="line">        crc.reset();</span><br><span class="line">        inf.reset();</span><br><span class="line">        <span class="keyword">if</span> ((entry = readLOC()) == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (entry.method == STORED) &#123;</span><br><span class="line">            remaining = entry.size;</span><br><span class="line">        &#125;</span><br><span class="line">        entryEOF = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> entry;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">### ensureOpen()</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureOpen</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Stream closed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断如果流被关闭 则直接传递IOexcepetion异常 (&quot;Stream closed&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">### <span class="keyword">if</span> (entry != <span class="literal">null</span>) &#123;</span><br><span class="line">            closeEntry();<span class="comment">//跳转到closeEntry()方法</span></span><br><span class="line">        &#125;</span><br><span class="line"> <span class="comment">/*如果entry不为空则进入closeEntry方法中</span></span><br><span class="line"><span class="comment"> entry为空的条件:</span></span><br><span class="line"><span class="comment"> 该路径下已经没有文件或者文件夹</span></span><br><span class="line"><span class="comment"> */</span>       </span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">closeEntry</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        ensureOpen();<span class="comment">//先跳转到ensureOpen()方法中</span></span><br><span class="line">        <span class="keyword">while</span> (read(tmpbuf, <span class="number">0</span>, tmpbuf.length) != -<span class="number">1</span>) ;</span><br><span class="line">        <span class="comment">/*压缩流调用自己所包装的基础流方法 即InputStream流中的read方法</span></span><br><span class="line"><span class="comment">        参数一 tempuf   一个512字节的字节数组</span></span><br><span class="line"><span class="comment">        参数二 0        读取数据从数组的0索引开始</span></span><br><span class="line"><span class="comment">        参数三 tepbuf.length  一次读取512个字节</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        entryEOF = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//entryEOF表示一个标志  当已经读取完一个entry对象时则entryEOF设置为true;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureOpen</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Stream closed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">   <span class="comment">/*ensureOpen()方法的目的是再次确认流是否被关闭 如果被关闭了则传递IOException异常*/</span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">### crc.reset();  <span class="comment">//crc.reset() 把crc的值设置为0 </span></span><br><span class="line">inf.reset();  </span><br><span class="line"></span><br><span class="line"><span class="comment">//inf.reset()</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reset</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (zsRef) &#123;</span><br><span class="line">            ensureOpen();</span><br><span class="line">            reset(zsRef.address());</span><br><span class="line">            buf = defaultBuf;</span><br><span class="line">            finished = <span class="literal">false</span>;</span><br><span class="line">            needDict = <span class="literal">false</span>;</span><br><span class="line">            off = len = <span class="number">0</span>;</span><br><span class="line">            bytesRead = bytesWritten = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*暂未理解*/</span></span><br><span class="line"></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">### <span class="keyword">if</span> ((entry = readLOC()) == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/* 当entry调用readLoc()方法返回值为null的时候 则return null  即entry对象获得失败则返回null*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ZipEntry <span class="title function_">readLOC</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            readFully(tmpbuf, <span class="number">0</span>, LOCHDR);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (EOFException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (get32(tmpbuf, <span class="number">0</span>) != LOCSIG) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// get flag first, we need check EFS.</span></span><br><span class="line">        flag = get16(tmpbuf, LOCFLG);</span><br><span class="line">        <span class="comment">// get the entry name and create the ZipEntry first</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> get16(tmpbuf, LOCNAM);</span><br><span class="line">        <span class="type">int</span> <span class="variable">blen</span> <span class="operator">=</span> b.length;</span><br><span class="line">        <span class="keyword">if</span> (len &gt; blen) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                blen = blen * <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">while</span> (len &gt; blen);</span><br><span class="line">            b = <span class="keyword">new</span> <span class="title class_">byte</span>[blen];</span><br><span class="line">        &#125;</span><br><span class="line">        readFully(b, <span class="number">0</span>, len);</span><br><span class="line">        <span class="comment">// Force to use UTF-8 if the EFS bit is ON, even the cs is NOT UTF-8</span></span><br><span class="line">        <span class="type">ZipEntry</span> <span class="variable">e</span> <span class="operator">=</span> createZipEntry(((flag &amp; EFS) != <span class="number">0</span>)</span><br><span class="line">                                    ? zc.toStringUTF8(b, len)</span><br><span class="line">                                    : zc.toString(b, len));</span><br><span class="line">        <span class="comment">// now get the remaining fields for the entry</span></span><br><span class="line">        <span class="keyword">if</span> ((flag &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ZipException</span>(<span class="string">&quot;encrypted ZIP entry not supported&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        e.method = get16(tmpbuf, LOCHOW);</span><br><span class="line">        e.xdostime = get32(tmpbuf, LOCTIM);</span><br><span class="line">        <span class="keyword">if</span> ((flag &amp; <span class="number">8</span>) == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="comment">/* &quot;Data Descriptor&quot; present */</span></span><br><span class="line">            <span class="keyword">if</span> (e.method != DEFLATED) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ZipException</span>(</span><br><span class="line">                        <span class="string">&quot;only DEFLATED entries can have EXT descriptor&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            e.crc = get32(tmpbuf, LOCCRC);</span><br><span class="line">            e.csize = get32(tmpbuf, LOCSIZ);</span><br><span class="line">            e.size = get32(tmpbuf, LOCLEN);</span><br><span class="line">        &#125;</span><br><span class="line">        len = get16(tmpbuf, LOCEXT);</span><br><span class="line">        <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">byte</span>[] extra = <span class="keyword">new</span> <span class="title class_">byte</span>[len];</span><br><span class="line">            readFully(extra, <span class="number">0</span>, len);</span><br><span class="line">            e.setExtra0(extra,</span><br><span class="line">                        e.csize == ZIP64_MAGICVAL || e.size == ZIP64_MAGICVAL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">### <span class="keyword">if</span> (entry.method == STORED) &#123;   <span class="comment">//zipEntry类中的成员变量 method=-1</span></span><br><span class="line"><span class="comment">//zipEntry类中的静态变量 STORED=0;</span></span><br><span class="line"><span class="comment">/*int method = -1;</span></span><br><span class="line"><span class="comment">  public static final int STORED = 0;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">            remaining = entry.size; <span class="comment">//zipEntry类中的成员变量size=-1</span></span><br><span class="line">            <span class="comment">//ZipInputStream中的成员变量remaining</span></span><br><span class="line">            <span class="comment">/*long size = -1;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        &#125;</span><br><span class="line">  <span class="comment">//调用时如果method==-1 则不会进入语句</span></span><br><span class="line">  <span class="comment">//如果method==0 则会进入语句</span></span><br><span class="line"> <span class="comment">//将remaining设置为entry.size </span></span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">### entryEOF = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> entry;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将entryEOF设置为false 以便下一次读取一整个entry对象</span></span><br><span class="line"><span class="comment">//return entry  返回entry结果 为ZipInputStream调用方法的返回值</span></span><br></pre></td></tr></table></div></figure>        <h2 id="判断-1"   >          <a href="#判断-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#判断-1" class="headerlink" title="判断"></a>判断</h2>      <p>在getNextEntry方法调用的时候跳过了解压包下第一级路径下的文件夹  但是能进入文件夹获得里面的子文件夹或者子文件</p>        <h1 id="Test"   >          <a href="#Test" class="heading-link"><i class="fas fa-link"></i></a><a href="#Test" class="headerlink" title="Test"></a>Test</h1>              <h2 id="代码"   >          <a href="#代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#代码" class="headerlink" title="代码"></a>代码</h2>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">src</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d2-code\\aaa.zip&quot;</span>);</span><br><span class="line">      <span class="type">ZipInputStream</span> <span class="variable">zip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(src));</span><br><span class="line">      ZipEntry entry;</span><br><span class="line">      entry = zip.getNextEntry();</span><br><span class="line">      System.out.println(entry);</span><br></pre></td></tr></table></div></figure><p>获得aaa.zip路径然后尝试用zipInputStream来读取文件，通过zip调用getNextEntry()方法来获得解压包下第一个文件\文件夹 赋值给ZipEntry对象entry，最后将entry从控制台输出</p>        <h2 id="运行结果"   >          <a href="#运行结果" class="heading-link"><i class="fas fa-link"></i></a><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2>      <p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230303151228442.png" >      </p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某中厂的java实习生面试</title>
      <link href="/2022/07/05/%E6%9F%90%E4%B8%AD%E5%8E%82%E7%9A%84java%E5%AE%9E%E4%B9%A0%E7%94%9F%E9%9D%A2%E8%AF%95/"/>
      <url>/2022/07/05/%E6%9F%90%E4%B8%AD%E5%8E%82%E7%9A%84java%E5%AE%9E%E4%B9%A0%E7%94%9F%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>面试稀碎，所以废话不多说直接进入问题环节吧</p><h2 id=""><a href="#" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2><p>·你能给我做一个简单的自我介绍吗？</p><p>·说一下java里面的内存结构，JVM的这一套内存管理</p><p>·你是怎么理解这个堆和栈的？</p><p>·刚刚说的是内存的堆和栈，那你能从数据结构上面来说说堆和栈吗？</p><p>·你觉得GC怎么判定一个对象可以被回收的</p><p>·java是怎么判定一个对象没有被引用或者路径不可达的情况呢?</p><p>·StringBuffered和StringBuilder一个线程安全和一个线程不安全你是怎么理解的？</p><p>·你平时是怎么使用多线程的？</p><p>·那你怎么看待Runnable接口的？</p><p>·你说一下Mysql的事务机制</p><p>·那你怎么看待事务隔离级别的？</p><p>·什么情况下会导致事务没有被释放？</p><p>·Mysql的索引你平时是怎么使用的？</p><p>·Mysql你接触过哪些分表分库？</p><p>·聊一下Redis吧</p><p>·Java中HashMap在一定数量的情况下会改成红黑树，而数据库又采用索引B+树你是怎么理解的各自的考量呢？</p><p>·Redis为什么用跳表不用B+树呢？</p><p>·如果是简单的二叉树的情况下Mysql为什么不用跳表？</p><p>·那你讲一下你的实习经验或者实习经历吧？</p><p>·你是怎么理解开闭原则和单一职责原则的？</p><p>·你说说你最熟悉的设计模式吧</p><p>·那你说我们什么场景下需要用使用单例</p><p>·我们常在开发中用Object的方法,你说说你认识的Object方法有哪些？</p><p>·你说说wait和sleep方法有什么区别呢？</p><p>·说到wait你能跟我说一下线程的生命周期吗？</p><p>·你最常用到哪些工具呢？</p><p>·B树和B+树的区别有哪些？</p>        <h2 id="-1"   >          <a href="#-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#-1" class="headerlink" title="&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</h2>      <p>感觉被干的稀碎，好好回去学技术再试试吧hh  T T</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用java爬取弹幕</title>
      <link href="/2022/05/09/%E5%88%A9%E7%94%A8java%E7%88%AC%E5%8F%96%E5%BC%B9%E5%B9%95/"/>
      <url>/2022/05/09/%E5%88%A9%E7%94%A8java%E7%88%AC%E5%8F%96%E5%BC%B9%E5%B9%95/</url>
      
        <content type="html"><![CDATA[<p><strong>提示</strong></p><p>从语言特性和开发难度出发,由python做爬虫程序的使用效率和便利性是大于用java开发的爬虫程序的。</p><p>目的是熟悉java爬取的规则最终获得多个页面直播间的直播弹幕</p><p><strong>解析bilibili的弹幕(视频)</strong></p>        <h1 id="解析目前用户还存在的视频弹幕"   >          <a href="#解析目前用户还存在的视频弹幕" class="heading-link"><i class="fas fa-link"></i></a><a href="#解析目前用户还存在的视频弹幕" class="headerlink" title="解析目前用户还存在的视频弹幕"></a>解析目前用户还存在的视频弹幕</h1>      <p>视频源来自弹幕量比较大的 《这一定就是原片吧9》</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.bilibili.com/video/BV1c3411Q7XH/?spm_id_from=333.337.search-card.all.click&amp;vd_source=481a97bdbe9fdb27ab06f7f88300d77b</span><br></pre></td></tr></table></div></figure><p>视频可直接获得的基本信息：BV号: BV1c3411Q7XH        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230309151908372.png"  alt="image-20230309151908372">      </p><p>​   作者uid: 37963636            <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="/%E5%88%A9%E7%94%A8java%E7%88%AC%E5%8F%96%E5%BC%B9%E5%B9%95/image-20230309151847039.png"  alt="image-20230309151847039">      </p><p>获取该视频下全部内容，然后分析成分</p><p>用Hutool包链接网络并获得整个网址的html信息 并以字符串的形式存放</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//链接网络</span></span><br><span class="line">        String url=<span class="string">&quot;https://www.bilibili.com/video/BV1c3411Q7XH/?spm_id_from=333.337.search-card.all.click&amp;vd_source=481a97bdbe9fdb27ab06f7f88300d77b&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> HttpUtil.get(url);</span><br><span class="line"><span class="comment">//将数据从控制台先输出</span></span><br><span class="line">        System.out.println(s);</span><br></pre></td></tr></table></div></figure>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230309151018979.png"  alt="image-20230309151018979"  />      <p>获得基本数据：视频播放量40491659、弹幕量31912等。</p><p>用BV号对数据筛选看看能获得什么</p><p>BV号的构成为BV+10个大写\小写\数字的字符串  所以用正则表达式可以表示为”BV\\w{10}”</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>用ReUtil.findAll方法获得所有BV号数据</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ReUtil.findAll(String regex, CharSequence content, int group)</span><br><span class="line">//参数一 所筛选用的正则表达式</span><br><span class="line">//参数二 所筛选数据的数据源</span><br><span class="line">//参数三 group  表示由regex切割出来的组号，由左括号为开始计算  </span><br><span class="line">0 表示获得所有组号</span><br><span class="line">1 表示获得第一个组</span><br><span class="line">2 表示保留第二个组</span><br><span class="line">...</span><br></pre></td></tr></table></div></figure><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用Retuil对正则表达式判断,获得所有含有BV号的数据</span></span><br><span class="line">String regex=<span class="string">&quot;BV\\w&#123;10&#125;&quot;</span>;</span><br><span class="line">ArrayList&lt;String&gt; list = (ArrayList&lt;String&gt;) ReUtil.findAll(regex, s, <span class="number">0</span>);</span><br><span class="line">System.out.println(list);</span><br></pre></td></tr></table></div></figure><p>在控制台的输出结果为：        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230309153741744.png"  alt="image-20230309153741744">      </p><p>去除本身视频的BV号 BV1c3411Q7XH  再输出list  看看里面所有的BV号和个数</p><p>用循环判断list.contains(“BV1c3411Q7XH”) 如果为true则表示集合中还有这个BV号</p><p>我们的目的是去除所有的BV号 所以循环条件为false的时候就能保证集合中已经没有本视频的BV号</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//已知视频本身的BV号为BV1c3411Q7XH  所以滤过本身视频的BV号</span></span><br><span class="line"><span class="keyword">while</span>(list.contains(<span class="string">&quot;BV1c3411Q7XH&quot;</span>))&#123;</span><br><span class="line">    list.remove(<span class="string">&quot;BV1c3411Q7XH&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);</span><br><span class="line">System.out.println(list.size());</span><br></pre></td></tr></table></div></figure><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230309154949126.png"  alt="image-20230309154949126">      </p><p>数据备份：</p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BV1td4y1N7Vw, BV14P4y1177H, BV11d4y1S7SJ, BV1ma411R7UG, BV1D14y1W74e, BV16d4y1X71i, BV1M84y1B7UW, BV1td4y1N7Vw, BV14P4y1177H, BV11d4y1S7SJ, BV1ma411R7UG, BV1D14y1W74e, BV16d4y1X71i, BV1M84y1B7UW, BV1td4y1N7Vw, BV14P4y1177H, BV11d4y1S7SJ, BV1ma411R7UG, BV1D14y1W74e, BV16d4y1X71i, BV1M84y1B7UW, BV1B741177iT, BV1wJ411H71u, BV14Y4y1r7cU, BV1b8411w7zt, BV1464y1a7jD, BV1M84y1B7UW, BV1UU4y1b7tk, BV16d4y1X71i, BV1dJ411j7yA, BV1td4y1N7Vw, BV1t24y1e7K4, BV1NL411u7e7, BV1ED4y1p7FE, BV1kP4y1C734, BV1iR4y1R7oT, BV1c7411h7Tq, BV1wP4y1v7BF, BV17v4y1v7BS, BV1SB4y167Jj, BV1z3411S7ov, BV1sM411q7Er, BV1cv4y1D7LK, BV1xY4y1o7XZ, BV1a64y1F7rF, BV1We4y1a7Qm, BV1si4y1V7Lb, BV1Lv4y1Q7Bd, BV1D14y1W74e, BV1564y1Z7ef, BV1W84y1a7QJ, BV1LY41127iZ, BV1CG4y1k7ag, BV1rT41127dZ, BV14P4y1177H, BV1Ze4y1y7TT, BV1iK4y1a7or, BV1ma411R7UG, BV19S4y1o7hg, BV1i64y117dz, BV1wD4y177XC, BV1B741177iT, BV1B741177iT, BV1wJ411H71u, BV1wJ411H71u, BV14Y4y1r7cU, BV14Y4y1r7cU, BV1b8411w7zt, BV1b8411w7zt, BV1464y1a7jD, BV1464y1a7jD, BV1M84y1B7UW, BV1M84y1B7UW, BV1UU4y1b7tk, BV1UU4y1b7tk, BV16d4y1X71i, BV16d4y1X71i, BV1dJ411j7yA, BV1dJ411j7yA, BV1td4y1N7Vw, BV1td4y1N7Vw, BV1t24y1e7K4, BV1t24y1e7K4, BV1NL411u7e7, BV1NL411u7e7, BV1ED4y1p7FE, BV1ED4y1p7FE, BV1kP4y1C734, BV1kP4y1C734, BV1iR4y1R7oT, BV1iR4y1R7oT, BV1c7411h7Tq, BV1c7411h7Tq, BV1wP4y1v7BF, BV1wP4y1v7BF, BV17v4y1v7BS, BV17v4y1v7BS, BV1SB4y167Jj, BV1SB4y167Jj, BV1z3411S7ov, BV1z3411S7ov</span><br></pre></td></tr></table></div></figure><p>先在页面的总HTML信息中查找本视频的所有出现位置，信息</p><p>第一次:(获得了前四个本视频BV号出现的位置)</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230309155236182.png"  alt="image-20230309155236182">      </p><p>可以知道都是在URL中出现的前几次 并无其他相关信息</p><p>第二次:(获得了第五和第六个本视频BV号出现的位置)</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230309155515650.png"  alt="image-20230309155515650">      </p><figure class="highlight plaintext"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;aid&quot;:434581916,&quot;bvid&quot;:&quot;BV1c3411Q7XH&quot;,&quot;p&quot;:1,&quot;episode&quot;:&quot;&quot;,&quot;videoData&quot;:&#123;&quot;bvid&quot;:&quot;BV1c3411Q7XH&quot;,&quot;aid&quot;:434581916,&quot;videos&quot;:1,&quot;tid&quot;:47,&quot;tname&quot;:&quot;短片·手书·配音&quot;,&quot;copyright&quot;:1,&quot;pic&quot;:&quot;http:\u002F\u002Fi1.hdslb.com\u002Fbfs\u002Farchive\u002F4e5c6f04d8d5b1042b2040d2d86e743780aa58ed.jpg&quot;,&quot;title&quot;:&quot;这一定就是原片吧9&quot;,&quot;pubdate&quot;:1672533534,&quot;ctime&quot;:1672533534,&quot;desc&quot;:&quot;视频剧情与人设皆为虚构 不要上升真羊！\n本集设定沸羊羊和美羊羊是男女朋友的关系 本视频是沸美cp向哦\n这个视频是根据之前沸美视频的cp 设定做的，重复也只是吃醋的表现，不是嘲讽&quot;,&quot;desc_v2&quot;:[&#123;&quot;raw_text&quot;:&quot;视频剧情与人设皆为虚构 不要上升真羊！\n本集设定沸羊羊和美羊羊是男女朋友的关系 本视频是沸美cp向哦\n这个视频是根据之前沸美视频的cp 设定做的，重复也只是吃醋的表现，不是嘲讽&quot;,&quot;type&quot;:1,&quot;biz_id&quot;:0&#125;],&quot;state&quot;:0,&quot;duration&quot;:102,&quot;mission_id&quot;:1152893,&quot;rights&quot;:&#123;&quot;bp&quot;:0,&quot;elec&quot;:0,&quot;download&quot;:1,&quot;movie&quot;:0,&quot;pay&quot;:0,&quot;hd5&quot;:1,&quot;no_reprint&quot;:1,&quot;autoplay&quot;:1,&quot;ugc_pay&quot;:0,&quot;is_cooperation&quot;:0,&quot;ugc_pay_preview&quot;:0,&quot;no_background&quot;:0,&quot;clean_mode&quot;:0,&quot;is_stein_gate&quot;:0,&quot;is_360&quot;:0,&quot;no_share&quot;:0,&quot;arc_pay&quot;:0,&quot;free_watch&quot;:0&#125;,&quot;owner&quot;:&#123;&quot;mid&quot;:37963636,&quot;name&quot;:&quot;一只风风o&quot;,&quot;face&quot;:&quot;https:\u002F\u002Fi1.hdslb.com\u002Fbfs\u002Fface\u002F7b51ecbf97f83fd579a71c9b7766f680d08b338c.jpg&quot;&#125;,&quot;stat&quot;:&#123;&quot;aid&quot;:434581916,&quot;view&quot;:40494159,&quot;danmaku&quot;:31912,&quot;reply&quot;:37360,&quot;favorite&quot;:831184,&quot;coin&quot;:1072355,&quot;share&quot;:1301568,&quot;now_rank&quot;:0,&quot;his_rank&quot;:1,&quot;like&quot;:2606795,&quot;dislike&quot;:0,&quot;evaluation&quot;:&quot;&quot;,&quot;argue_msg&quot;:&quot;&quot;,&quot;viewseo&quot;:40494159&#125;,&quot;dynamic&quot;:&quot;&quot;,&quot;cid&quot;:945221244,&quot;dimension&quot;:&#123;&quot;width&quot;:1920,&quot;height&quot;:1080,&quot;rotate&quot;:0&#125;</span><br></pre></td></tr></table></div></figure><p>这里已经有很多关于参数的信息了，先分析目前可以知道或者有用的参数</p><p>#bid:434581916   &#x2F;&#x2F;未知，但因为id一般是唯一的所以先保留看看</p><p>#bvid:BV1c3411Q7XH  &#x2F;&#x2F;本视频的 bv号</p><p>#owner:{ “mid”:37963636  &#x2F;&#x2F;未知 保留原因如上 </p><p>​              “name”: “一只风风o” &#x2F;&#x2F;视频作者用户名}</p><p>#stat:{   “view”:40494159  , “danmaku”:31912 } &#x2F;&#x2F;与上面获取的基本信息对上了  视频播放量40491659、弹幕量31912。</p><p>第三次:(获得了第八次本视频BV号出现的位置)</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230309160501356.png"  alt="image-20230309160501356">      </p><p>“p”:1,”aid”:434581916,”bvid”:”BV1c3411Q7XH”,”cid”:945221244,”vid”:””,”vtype”:”vupload”</p><p>&#x2F;&#x2F;此时bid一样 但是多了一个cid  </p><p>#cid:945221244  &#x2F;&#x2F;未知</p><p>所以要搞明白bid,mid,cid 才能清楚知道弹幕的数据在哪里</p><p>再由up主的uid:37963636可知 uid和mid是同一个</p><p>所以只要弄清楚bid 和 cid的含义</p><p>再用备份数据的BV号 获得所在数据的位置</p><p>第一次:(备用数据第一个)</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230309163724217.png"  alt="image-20230309163724217">      </p><p>{“cid”:796445438,”page”:1,”from”:”vupload”,”part”:”这一定就是原片吧”,”duration”:85,”vid”:””,”weblink”:””,”dimension”:{“width”:576,”height”:1246,”rotate”:0}},”bvid”:”BV1td4y1N7Vw”}</p><p>#cid:796445438 </p><p>#bvid:BV1td4y1N7Vw</p><p>再由part “这一定就是原片吧” 可以推出是推荐视频的bv号</p><p>第二次:(备用数据第二个)</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230309164127463.png"  alt="image-20230309164127463">      </p><p>{“cid”:893220432,”page”:1,”from”:”vupload”,”part”:”这一定就是原片吧2”,”duration”:76,”vid”:””,”weblink”:””,”dimension”:{“width”:886,”height”:1920,”rotate”:0}},”bvid”:”BV14P4y1177H”}</p><p>#cid:893220432</p><p>#bvid:BV14P4y1177H</p><p>再由用户的uid查找位置 看看是否有有用的信息</p><p>        <img   class="lazyload lazyload-gif"          src="/images/loading.svg" data-src="https://images-kkblog.oss-cn-hangzhou.aliyuncs.com/image-20230309165051439.png"  alt="image-20230309165051439">      </p><p>这里出现了uname  可能和评论有关</p><p>由此可以推出cid和bvid可能有某种关系，合理可以推出cid可能与弹幕库相连，可能由cid获得弹幕库</p>        <h1 id="解析用户已注销的视频弹幕"   >          <a href="#解析用户已注销的视频弹幕" class="heading-link"><i class="fas fa-link"></i></a><a href="#解析用户已注销的视频弹幕" class="headerlink" title="解析用户已注销的视频弹幕"></a>解析用户已注销的视频弹幕</h1>      ]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈java中创建线程</title>
      <link href="/2022/03/21/%E6%B5%85%E8%B0%88java%E4%B8%AD%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B/"/>
      <url>/2022/03/21/%E6%B5%85%E8%B0%88java%E4%B8%AD%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[        <h1 id="浅谈java中创建线程的方式"   >          <a href="#浅谈java中创建线程的方式" class="heading-link"><i class="fas fa-link"></i></a><a href="#浅谈java中创建线程的方式" class="headerlink" title="浅谈java中创建线程的方式"></a>浅谈java中创建线程的方式</h1>      <p>有三种、四种、五种的说法，也有人说是一种</p><p>所以从底层方面看看</p>        <h2 id="第一种"   >          <a href="#第一种" class="heading-link"><i class="fas fa-link"></i></a><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2>      <p>设计Thread类的子类,然后重写run()方法</p><p>当调用线程的时候创建子类的对象再调用start()方法</p><p>当直接调用run方法的时候是直接调用子类的run()方法  </p>        <h3 id="Thread的子类"   >          <a href="#Thread的子类" class="heading-link"><i class="fas fa-link"></i></a><a href="#Thread的子类" class="headerlink" title="Thread的子类"></a>Thread的子类</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="调用线程"   >          <a href="#调用线程" class="heading-link"><i class="fas fa-link"></i></a><a href="#调用线程" class="headerlink" title="调用线程"></a>调用线程</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">myThread.start();</span><br></pre></td></tr></table></div></figure>        <h2 id="第二种"   >          <a href="#第二种" class="heading-link"><i class="fas fa-link"></i></a><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2>      <p>设计Runnable接口的实现类，实现run()方法</p><p>创建线程对象的同时将创建实现类的对象作为形参传入构建方法中</p><p>调用线程的start()方法即可</p>        <h3 id="Runnable接口的实现类"   >          <a href="#Runnable接口的实现类" class="heading-link"><i class="fas fa-link"></i></a><a href="#Runnable接口的实现类" class="headerlink" title="Runnable接口的实现类"></a>Runnable接口的实现类</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRunnable</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="调用线程-1"   >          <a href="#调用线程-1" class="heading-link"><i class="fas fa-link"></i></a><a href="#调用线程-1" class="headerlink" title="调用线程"></a>调用线程</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyRunnable</span> <span class="variable">mr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRunnable</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(mr);</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></div></figure>        <h2 id="第三种"   >          <a href="#第三种" class="heading-link"><i class="fas fa-link"></i></a><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h2>      <p>当要线程执行的返回结果时,设计Callable的实现类,重写call()方法</p><p>用该方法时得用到FutureTask对象 创建FutureTask对象的时候将Callable的实现类作为形参传入构建方法在中</p><p>创建Thread实例的时候 target的形参即创建的FutureTask类的实例</p><p>线程调用start()方法后  执行的返回结果就从FutureTask实例调用get()方法获得</p>        <h3 id="Callable接口的实现类"   >          <a href="#Callable接口的实现类" class="heading-link"><i class="fas fa-link"></i></a><a href="#Callable接口的实现类" class="headerlink" title="Callable接口的实现类"></a>Callable接口的实现类</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCallable</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="调用线程-2"   >          <a href="#调用线程-2" class="heading-link"><i class="fas fa-link"></i></a><a href="#调用线程-2" class="headerlink" title="调用线程"></a>调用线程</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyCallable</span> <span class="variable">myCallable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCallable</span>();</span><br><span class="line"></span><br><span class="line">FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(myCallable);</span><br><span class="line"></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task);</span><br><span class="line">t.start();</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> task.get();</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></div></figure>        <h2 id="第四种"   >          <a href="#第四种" class="heading-link"><i class="fas fa-link"></i></a><a href="#第四种" class="headerlink" title="第四种"></a>第四种</h2>      <p>利用线程池创建线程</p><p>用Exectors工厂方法配置ThreadPoolExecutor</p><p>用创建线程的ThreadFactory的实现类对象中newThread()方法</p>        <h2 id="第五种"   >          <a href="#第五种" class="heading-link"><i class="fas fa-link"></i></a><a href="#第五种" class="headerlink" title="第五种"></a>第五种</h2>      <p>利用lambda表达式创建线程</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></div></figure>        <h2 id="总结"   >          <a href="#总结" class="heading-link"><i class="fas fa-link"></i></a><a href="#总结" class="headerlink" title="总结"></a>总结</h2>      <p>从底层来看都是实现Runnable接口</p>        <h3 id="创建Thread子类"   >          <a href="#创建Thread子类" class="heading-link"><i class="fas fa-link"></i></a><a href="#创建Thread子类" class="headerlink" title="创建Thread子类"></a>创建Thread子类</h3>      <figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>自己设计的子类继承了Thread类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></div></figure><p>而Thread类是实现了Runnable接口的类 所以第一种方式底层也是创建Runnable的实现类</p>        <h3 id="Callable的实现类"   >          <a href="#Callable的实现类" class="heading-link"><i class="fas fa-link"></i></a><a href="#Callable的实现类" class="headerlink" title="Callable的实现类"></a>Callable的实现类</h3>      <p>Callable是要借助FutureTask类</p><p>创建Thread的时候FutureTask类作为形参   </p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FutureTask</span>&lt;V&gt; <span class="keyword">implements</span> <span class="title class_">RunnableFuture</span>&lt;V&gt; &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>而FutureTask类是RunnableFuture接口的实现类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RunnableFuture</span>&lt;V&gt; <span class="keyword">extends</span> <span class="title class_">Runnable</span>, Future&lt;V&gt; &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure><p>而RunnableFuture接口继承了Runnable,和Future</p><p>与此同时 </p><p>Thread线程构建的时候将Task作为Runnable实现类 target构建对象</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(Runnable target)</span> &#123;</span><br><span class="line">    init(<span class="literal">null</span>, target, <span class="string">&quot;Thread-&quot;</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="利用线程池创建"   >          <a href="#利用线程池创建" class="heading-link"><i class="fas fa-link"></i></a><a href="#利用线程池创建" class="headerlink" title="利用线程池创建"></a>利用线程池创建</h3>      <p>线程池创建的worker线程 都实现了Runnable接口</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Worker</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Runnable</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></div></figure><p>用创建线程的ThreadFactory的实现类对象中newThread()方法传入的参数也是实现Runnbale接口的实现类</p><figure class="highlight java"><div class="table-container"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ThreadFactory</span> &#123;</span><br><span class="line">    Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></div></figure>        <h3 id="lambda表达式"   >          <a href="#lambda表达式" class="heading-link"><i class="fas fa-link"></i></a><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3>      <p>本质上是匿名内部类，实际上是一个Runnbale接口的实现类</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
